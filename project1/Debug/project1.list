
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026534  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005420  08026704  08026704  00036704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bb24  0802bb24  000400d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802bb24  0802bb24  0003bb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bb2c  0802bb2c  000400d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bb2c  0802bb2c  0003bb2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bb30  0802bb30  0003bb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0802bb34  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000108f8  200000d4  0802bc08  000400d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200109cc  0802bc08  000409cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007f9a5  00000000  00000000  00040104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000e09e  00000000  00000000  000bfaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004388  00000000  00000000  000cdb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003fd8  00000000  00000000  000d1ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000478cc  00000000  00000000  000d5ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00069462  00000000  00000000  0011d774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001448ac  00000000  00000000  00186bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002cb482  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000123b0  00000000  00000000  002cb4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080266ec 	.word	0x080266ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	080266ec 	.word	0x080266ec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200000f0 	.word	0x200000f0
 800060c:	200001a8 	.word	0x200001a8

08000610 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SCB_EnableDCache+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SCB_EnableDCache+0x84>)
 8000626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800062a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0b5b      	lsrs	r3, r3, #13
 8000630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000634:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800063e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000648:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCB_EnableDCache+0x84>)
 8000650:	4313      	orrs	r3, r2
 8000652:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ef      	bne.n	8000640 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	60fa      	str	r2, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SCB_EnableDCache+0x84>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SCB_EnableDCache+0x84>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
}
 8000686:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b090      	sub	sp, #64	; 0x40
 800069c:	af00      	add	r7, sp, #0


	/* Enable the CPU Cache */
	/* Enable I-Cache */
	/* Enable D-Cache */
	SCB_EnableDCache();
 800069e:	f7ff ffb7 	bl	8000610 <SCB_EnableDCache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a2:	f002 fd22 	bl	80030ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a6:	f000 f88b 	bl	80007c0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006aa:	f000 f8fb 	bl	80008a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f001 f85d 	bl	800176c <MX_GPIO_Init>
  MX_ADC3_Init();
 80006b2:	f000 f929 	bl	8000908 <MX_ADC3_Init>
  MX_CRC_Init();
 80006b6:	f000 f979 	bl	80009ac <MX_CRC_Init>
  MX_DCMI_Init();
 80006ba:	f000 f999 	bl	80009f0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80006be:	f000 f9cb 	bl	8000a58 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006c2:	f001 f803 	bl	80016cc <MX_FMC_Init>
  MX_I2C1_Init();
 80006c6:	f000 f9f9 	bl	8000abc <MX_I2C1_Init>
  MX_I2C3_Init();
 80006ca:	f000 fa37 	bl	8000b3c <MX_I2C3_Init>
  MX_LTDC_Init();
 80006ce:	f000 fa75 	bl	8000bbc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80006d2:	f000 faf5 	bl	8000cc0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80006d6:	f000 fb1f 	bl	8000d18 <MX_RTC_Init>
  MX_SAI2_Init();
 80006da:	f000 fbc3 	bl	8000e64 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006de:	f000 fc69 	bl	8000fb4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006e2:	f000 fc87 	bl	8000ff4 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80006e6:	f000 fcb5 	bl	8001054 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006ea:	f000 fd5f 	bl	80011ac <MX_TIM2_Init>
  MX_TIM3_Init();
 80006ee:	f000 fdd3 	bl	8001298 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006f2:	f000 fe49 	bl	8001388 <MX_TIM5_Init>
  MX_TIM8_Init();
 80006f6:	f000 febf 	bl	8001478 <MX_TIM8_Init>
  MX_TIM12_Init();
 80006fa:	f000 ff11 	bl	8001520 <MX_TIM12_Init>
  MX_USART6_UART_Init();
 80006fe:	f000 ffb5 	bl	800166c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000702:	f00f fc25 	bl	800ff50 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000706:	f000 ff81 	bl	800160c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800070a:	f000 ff4f 	bl	80015ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init(); /* Initializes the SDRAM device */
 800070e:	f010 fed3 	bl	80114b8 <BSP_SDRAM_Init>
    __HAL_RCC_CRC_CLK_ENABLE(); /* Enable the CRC Module */
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <main+0x110>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <main+0x110>)
 8000718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <main+0x110>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

    BSP_TS_Init(480, 272);
 800072a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800072e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000732:	f011 f877 	bl	8011824 <BSP_TS_Init>

    BSP_LCD_Init();
 8000736:	f010 f9db 	bl	8010af0 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800073a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800073e:	2000      	movs	r0, #0
 8000740:	f010 fa6e 	bl	8010c20 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000744:	f010 fca0 	bl	8011088 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 8000748:	2000      	movs	r0, #0
 800074a:	f010 fac9 	bl	8010ce0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLUE);
 800074e:	4817      	ldr	r0, [pc, #92]	; (80007ac <main+0x114>)
 8000750:	f010 fb06 	bl	8010d60 <BSP_LCD_Clear>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <main+0x118>)
 8000756:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800075a:	461d      	mov	r5, r3
 800075c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000760:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000764:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f013 fff4 	bl	801475c <osThreadCreate>
 8000774:	4603      	mov	r3, r0
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <main+0x11c>)
 8000778:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_GSM1 */
  osThreadDef(Task_GSM1, StartTask_GSM1, osPriorityLow, 0, 512);
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <main+0x120>)
 800077c:	f107 0408 	add.w	r4, r7, #8
 8000780:	461d      	mov	r5, r3
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_GSM1Handle = osThreadCreate(osThread(Task_GSM1), NULL);
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f013 ffe1 	bl	801475c <osThreadCreate>
 800079a:	4603      	mov	r3, r0
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <main+0x124>)
 800079e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007a0:	f013 ffb9 	bl	8014716 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x10c>
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	ff0000ff 	.word	0xff0000ff
 80007b0:	0802671c 	.word	0x0802671c
 80007b4:	20008948 	.word	0x20008948
 80007b8:	08026738 	.word	0x08026738
 80007bc:	20008f10 	.word	0x20008f10

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f024 ffee 	bl	80257b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007e4:	f008 fa88 	bl	8008cf8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <SystemClock_Config+0xdc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a2b      	ldr	r2, [pc, #172]	; (800089c <SystemClock_Config+0xdc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <SystemClock_Config+0xdc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <SystemClock_Config+0xe0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <SystemClock_Config+0xe0>)
 8000806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <SystemClock_Config+0xe0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000818:	2309      	movs	r3, #9
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000822:	2301      	movs	r3, #1
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000830:	2319      	movs	r3, #25
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000834:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800083e:	2309      	movs	r3, #9
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	4618      	mov	r0, r3
 8000848:	f008 fb78 	bl	8008f3c <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000852:	f001 fa69 	bl	8001d28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000856:	f008 fa5f 	bl	8008d18 <HAL_PWREx_EnableOverDrive>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000860:	f001 fa62 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2106      	movs	r1, #6
 8000882:	4618      	mov	r0, r3
 8000884:	f008 fdfe 	bl	8009484 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800088e:	f001 fa4b 	bl	8001d28 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	; 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0a2      	sub	sp, #136	; 0x88
 80008a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2284      	movs	r2, #132	; 0x84
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f024 ff7d 	bl	80257b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <PeriphCommonClock_Config+0x60>)
 80008b8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80008ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80008c0:	2305      	movs	r3, #5
 80008c2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80008c8:	2303      	movs	r3, #3
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80008d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80008d6:	2300      	movs	r3, #0
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80008da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f008 ffd2 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008f6:	f001 fa17 	bl	8001d28 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3788      	adds	r7, #136	; 0x88
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	00b00008 	.word	0x00b00008

08000908 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090e:	463b      	mov	r3, r7
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_ADC3_Init+0x98>)
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <MX_ADC3_Init+0x9c>)
 800091e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000926:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_ADC3_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_ADC3_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_ADC3_Init+0x98>)
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <MX_ADC3_Init+0xa0>)
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_ADC3_Init+0x98>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ADC3_Init+0x98>)
 8000964:	2201      	movs	r2, #1
 8000966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_ADC3_Init+0x98>)
 800096a:	f002 fc0f 	bl	800318c <HAL_ADC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000974:	f001 f9d8 	bl	8001d28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000978:	2304      	movs	r3, #4
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097c:	2301      	movs	r3, #1
 800097e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_ADC3_Init+0x98>)
 800098a:	f002 fc43 	bl	8003214 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000994:	f001 f9c8 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20008f14 	.word	0x20008f14
 80009a4:	40012200 	.word	0x40012200
 80009a8:	0f000001 	.word	0x0f000001

080009ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <MX_CRC_Init+0x40>)
 80009b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_CRC_Init+0x3c>)
 80009d6:	f002 ff4f 	bl	8003878 <HAL_CRC_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009e0:	f001 f9a2 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20008c58 	.word	0x20008c58
 80009ec:	40023000 	.word	0x40023000

080009f0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_DCMI_Init+0x60>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_DCMI_Init+0x64>)
 80009f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_DCMI_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_DCMI_Init+0x60>)
 8000a3e:	f003 f805 	bl	8003a4c <HAL_DCMI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f001 f96e 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20008fc4 	.word	0x20008fc4
 8000a54:	50050000 	.word	0x50050000

08000a58 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <MX_DMA2D_Init+0x60>)
 8000a60:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000a8e:	f003 fb41 	bl	8004114 <HAL_DMA2D_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a98:	f001 f946 	bl	8001d28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_DMA2D_Init+0x5c>)
 8000aa0:	f003 fda6 	bl	80045f0 <HAL_DMA2D_ConfigLayer>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000aaa:	f001 f93d 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200092ac 	.word	0x200092ac
 8000ab8:	4002b000 	.word	0x4002b000

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C1_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C1_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000af8:	f006 ff4c 	bl	8007994 <HAL_I2C_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b02:	f001 f911 	bl	8001d28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b06:	2100      	movs	r1, #0
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b0a:	f007 fce5 	bl	80084d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b14:	f001 f908 	bl	8001d28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_I2C1_Init+0x74>)
 8000b1c:	f007 fd27 	bl	800856e <HAL_I2CEx_ConfigDigitalFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f001 f8ff 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20008c0c 	.word	0x20008c0c
 8000b34:	40005400 	.word	0x40005400
 8000b38:	00c0eaff 	.word	0x00c0eaff

08000b3c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <MX_I2C3_Init+0x78>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <MX_I2C3_Init+0x7c>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b76:	480e      	ldr	r0, [pc, #56]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b78:	f006 ff0c 	bl	8007994 <HAL_I2C_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b82:	f001 f8d1 	bl	8001d28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b8a:	f007 fca5 	bl	80084d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b94:	f001 f8c8 	bl	8001d28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_I2C3_Init+0x74>)
 8000b9c:	f007 fce7 	bl	800856e <HAL_I2CEx_ConfigDigitalFilter>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ba6:	f001 f8bf 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000894c 	.word	0x2000894c
 8000bb4:	40005c00 	.word	0x40005c00
 8000bb8:	00c0eaff 	.word	0x00c0eaff

08000bbc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2234      	movs	r2, #52	; 0x34
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f024 fdf1 	bl	80257b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	; (8000cbc <MX_LTDC_Init+0x100>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000bd4:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000bda:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000be0:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000bec:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000bf2:	4b31      	ldr	r3, [pc, #196]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bf4:	2209      	movs	r2, #9
 8000bf6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000bfa:	2235      	movs	r2, #53	; 0x35
 8000bfc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000bfe:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c00:	220b      	movs	r2, #11
 8000c02:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c06:	f240 2215 	movw	r2, #533	; 0x215
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c0e:	f240 121b 	movw	r2, #283	; 0x11b
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c16:	f240 2235 	movw	r2, #565	; 0x235
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000c1c:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c1e:	f240 121d 	movw	r2, #285	; 0x11d
 8000c22:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c3c:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000c3e:	f007 fce3 	bl	8008608 <HAL_LTDC_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c48:	f001 f86e 	bl	8001d28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c50:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c54:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c5e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c60:	2302      	movs	r3, #2
 8000c62:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c64:	23ff      	movs	r3, #255	; 0xff
 8000c66:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c70:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c72:	2307      	movs	r3, #7
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c76:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000c7c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000c82:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_LTDC_Init+0xfc>)
 8000ca2:	f007 fe43 	bl	800892c <HAL_LTDC_ConfigLayer>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000cac:	f001 f83c 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20008e68 	.word	0x20008e68
 8000cbc:	40016800 	.word	0x40016800

08000cc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <MX_QUADSPI_Init+0x54>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cde:	2218      	movs	r2, #24
 8000ce0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000ce4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000ce8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_QUADSPI_Init+0x50>)
 8000cfe:	f008 f85b 	bl	8008db8 <HAL_QSPI_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000d08:	f001 f80e 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000943c 	.word	0x2000943c
 8000d14:	a0001000 	.word	0xa0001000

08000d18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b092      	sub	sp, #72	; 0x48
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	222c      	movs	r2, #44	; 0x2c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f024 fd38 	bl	80257b0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d42:	4a47      	ldr	r2, [pc, #284]	; (8000e60 <MX_RTC_Init+0x148>)
 8000d44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d46:	4b45      	ldr	r3, [pc, #276]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d4e:	227f      	movs	r2, #127	; 0x7f
 8000d50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d52:	4b42      	ldr	r3, [pc, #264]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d58:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d64:	4b3d      	ldr	r3, [pc, #244]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6a:	483c      	ldr	r0, [pc, #240]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d6c:	f009 fac6 	bl	800a2fc <HAL_RTC_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d76:	f000 ffd7 	bl	8001d28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482f      	ldr	r0, [pc, #188]	; (8000e5c <MX_RTC_Init+0x144>)
 8000d9e:	f009 fb3f 	bl	800a420 <HAL_RTC_SetTime>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000da8:	f000 ffbe 	bl	8001d28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dac:	2301      	movs	r3, #1
 8000dae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_RTC_Init+0x144>)
 8000dce:	f009 fbe5 	bl	800a59c <HAL_RTC_SetDate>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000dd8:	f000 ffa6 	bl	8001d28 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <MX_RTC_Init+0x144>)
 8000e14:	f009 fc6a 	bl	800a6ec <HAL_RTC_SetAlarm>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000e1e:	f000 ff83 	bl	8001d28 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <MX_RTC_Init+0x144>)
 8000e30:	f009 fc5c 	bl	800a6ec <HAL_RTC_SetAlarm>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000e3a:	f000 ff75 	bl	8001d28 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e3e:	2202      	movs	r2, #2
 8000e40:	2100      	movs	r1, #0
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_RTC_Init+0x144>)
 8000e44:	f009 fddc 	bl	800aa00 <HAL_RTCEx_SetTimeStamp>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000e4e:	f000 ff6b 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3748      	adds	r7, #72	; 0x48
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200090e0 	.word	0x200090e0
 8000e60:	40002800 	.word	0x40002800

08000e64 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <MX_SAI2_Init+0x140>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e6e:	4b4c      	ldr	r3, [pc, #304]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e7a:	4b49      	ldr	r3, [pc, #292]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e7c:	2240      	movs	r2, #64	; 0x40
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e86:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e8c:	4b44      	ldr	r3, [pc, #272]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e92:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e98:	4b41      	ldr	r3, [pc, #260]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ea6:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <MX_SAI2_Init+0x144>)
 8000ea8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000ec8:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ece:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <MX_SAI2_Init+0x13c>)
 8000efa:	f009 fdd7 	bl	800aaac <HAL_SAI_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000f04:	f000 ff10 	bl	8001d28 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f08:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f0a:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <MX_SAI2_Init+0x14c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f16:	2203      	movs	r2, #3
 8000f18:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f58:	2208      	movs	r2, #8
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f68:	4b10      	ldr	r3, [pc, #64]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f6e:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <MX_SAI2_Init+0x148>)
 8000f8e:	f009 fd8d 	bl	800aaac <HAL_SAI_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f98:	f000 fec6 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20008af0 	.word	0x20008af0
 8000fa4:	40015c04 	.word	0x40015c04
 8000fa8:	0002ee00 	.word	0x0002ee00
 8000fac:	2000887c 	.word	0x2000887c
 8000fb0:	40015c24 	.word	0x40015c24

08000fb4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MX_SDMMC1_SD_Init+0x3c>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <MX_SDMMC1_SD_Init+0x38>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20008ca8 	.word	0x20008ca8
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8000ffa:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ffe:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001000:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <MX_SPDIFRX_Init+0x5c>)
 800103e:	f00b f81b 	bl	800c078 <HAL_SPDIFRX_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001048:	f000 fe6e 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20008a2c 	.word	0x20008a2c

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09a      	sub	sp, #104	; 0x68
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001074:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	222c      	movs	r2, #44	; 0x2c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f024 fb8e 	bl	80257b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001094:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <MX_TIM1_Init+0x150>)
 8001096:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <MX_TIM1_Init+0x154>)
 8001098:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800109a:	4b42      	ldr	r3, [pc, #264]	; (80011a4 <MX_TIM1_Init+0x150>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b40      	ldr	r3, [pc, #256]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010a6:	4b3f      	ldr	r3, [pc, #252]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b4:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c0:	4838      	ldr	r0, [pc, #224]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010c2:	f00b f835 	bl	800c130 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f000 fe2c 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010da:	4619      	mov	r1, r3
 80010dc:	4831      	ldr	r0, [pc, #196]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010de:	f00b fb81 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 fe1e 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ec:	482d      	ldr	r0, [pc, #180]	; (80011a4 <MX_TIM1_Init+0x150>)
 80010ee:	f00b f8ef 	bl	800c2d0 <HAL_TIM_PWM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010f8:	f000 fe16 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001108:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110c:	4619      	mov	r1, r3
 800110e:	4825      	ldr	r0, [pc, #148]	; (80011a4 <MX_TIM1_Init+0x150>)
 8001110:	f00b fff2 	bl	800d0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800111a:	f000 fe05 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	; 0x60
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_TIM1_Init+0x150>)
 8001144:	f00b fa3a 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800114e:	f000 fdeb 	bl	8001d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM1_Init+0x150>)
 8001188:	f00c f844 	bl	800d214 <HAL_TIMEx_ConfigBreakDeadTime>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001192:	f000 fdc9 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM1_Init+0x150>)
 8001198:	f001 fb10 	bl	80027bc <HAL_TIM_MspPostInit>

}
 800119c:	bf00      	nop
 800119e:	3768      	adds	r7, #104	; 0x68
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000914c 	.word	0x2000914c
 80011a8:	40010000 	.word	0x40010000

080011ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	; 0x38
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_TIM2_Init+0xe8>)
 80011e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <MX_TIM2_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <MX_TIM2_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MX_TIM2_Init+0xe8>)
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_TIM2_Init+0xe8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001206:	4823      	ldr	r0, [pc, #140]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001208:	f00a ff92 	bl	800c130 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001212:	f000 fd89 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001220:	4619      	mov	r1, r3
 8001222:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001224:	f00b fade 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800122e:	f000 fd7b 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001232:	4818      	ldr	r0, [pc, #96]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001234:	f00b f84c 	bl	800c2d0 <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800123e:	f000 fd73 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4810      	ldr	r0, [pc, #64]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001252:	f00b ff51 	bl	800d0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800125c:	f000 fd64 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	4619      	mov	r1, r3
 8001276:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001278:	f00b f9a0 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001282:	f000 fd51 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM2_Init+0xe8>)
 8001288:	f001 fa98 	bl	80027bc <HAL_TIM_MspPostInit>

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	; 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200092ec 	.word	0x200092ec

08001298 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012cc:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <MX_TIM3_Init+0xec>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f0:	4823      	ldr	r0, [pc, #140]	; (8001380 <MX_TIM3_Init+0xe8>)
 80012f2:	f00a ff1d 	bl	800c130 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012fc:	f000 fd14 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130a:	4619      	mov	r1, r3
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <MX_TIM3_Init+0xe8>)
 800130e:	f00b fa69 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001318:	f000 fd06 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <MX_TIM3_Init+0xe8>)
 800131e:	f00a ffd7 	bl	800c2d0 <HAL_TIM_PWM_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001328:	f000 fcfe 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <MX_TIM3_Init+0xe8>)
 800133c:	f00b fedc 	bl	800d0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001346:	f000 fcef 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <MX_TIM3_Init+0xe8>)
 8001362:	f00b f92b 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800136c:	f000 fcdc 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <MX_TIM3_Init+0xe8>)
 8001372:	f001 fa23 	bl	80027bc <HAL_TIM_MspPostInit>

}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	; 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20008e1c 	.word	0x20008e1c
 8001384:	40000400 	.word	0x40000400

08001388 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013ba:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013bc:	4a2d      	ldr	r2, [pc, #180]	; (8001474 <MX_TIM5_Init+0xec>)
 80013be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013ce:	f04f 32ff 	mov.w	r2, #4294967295
 80013d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b25      	ldr	r3, [pc, #148]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013e0:	4823      	ldr	r0, [pc, #140]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013e2:	f00a fea5 	bl	800c130 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013ec:	f000 fc9c 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	4619      	mov	r1, r3
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_TIM5_Init+0xe8>)
 80013fe:	f00b f9f1 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001408:	f000 fc8e 	bl	8001d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <MX_TIM5_Init+0xe8>)
 800140e:	f00a ff5f 	bl	800c2d0 <HAL_TIM_PWM_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001418:	f000 fc86 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <MX_TIM5_Init+0xe8>)
 800142c:	f00b fe64 	bl	800d0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001436:	f000 fc77 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143a:	2360      	movs	r3, #96	; 0x60
 800143c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	220c      	movs	r2, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4807      	ldr	r0, [pc, #28]	; (8001470 <MX_TIM5_Init+0xe8>)
 8001452:	f00b f8b3 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800145c:	f000 fc64 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001460:	4803      	ldr	r0, [pc, #12]	; (8001470 <MX_TIM5_Init+0xe8>)
 8001462:	f001 f9ab 	bl	80027bc <HAL_TIM_MspPostInit>

}
 8001466:	bf00      	nop
 8001468:	3738      	adds	r7, #56	; 0x38
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20008d38 	.word	0x20008d38
 8001474:	40000c00 	.word	0x40000c00

08001478 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <MX_TIM8_Init+0xa0>)
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <MX_TIM8_Init+0xa4>)
 800149a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM8_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014c2:	4815      	ldr	r0, [pc, #84]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014c4:	f00a fe34 	bl	800c130 <HAL_TIM_Base_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 fc2b 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	480e      	ldr	r0, [pc, #56]	; (8001518 <MX_TIM8_Init+0xa0>)
 80014e0:	f00b f980 	bl	800c7e4 <HAL_TIM_ConfigClockSource>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80014ea:	f000 fc1d 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM8_Init+0xa0>)
 8001500:	f00b fdfa 	bl	800d0f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800150a:	f000 fc0d 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200089e0 	.word	0x200089e0
 800151c:	40010400 	.word	0x40010400

08001520 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_TIM12_Init+0x84>)
 800153a:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_TIM12_Init+0x88>)
 800153c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_TIM12_Init+0x84>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_TIM12_Init+0x84>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800155e:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001560:	f00a feb6 	bl	800c2d0 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800156a:	f000 fbdd 	bl	8001d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156e:	2360      	movs	r3, #96	; 0x60
 8001570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001586:	f00b f819 	bl	800c5bc <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001590:	f000 fbca 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001594:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM12_Init+0x84>)
 8001596:	f001 f911 	bl	80027bc <HAL_TIM_MspPostInit>

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200093bc 	.word	0x200093bc
 80015a8:	40001800 	.word	0x40001800

080015ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <MX_USART1_UART_Init+0x58>)
 80015b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 96000;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_USART1_UART_Init+0x5c>)
 80015ba:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015d0:	220c      	movs	r2, #12
 80015d2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ec:	4804      	ldr	r0, [pc, #16]	; (8001600 <MX_USART1_UART_Init+0x54>)
 80015ee:	f00b fead 	bl	800d34c <HAL_UART_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80015f8:	f000 fb96 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20009014 	.word	0x20009014
 8001604:	40011000 	.word	0x40011000
 8001608:	00017700 	.word	0x00017700

0800160c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <MX_USART2_UART_Init+0x5c>)
 8001614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800161c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_USART2_UART_Init+0x58>)
 8001650:	f00b fe7c 	bl	800d34c <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800165a:	f000 fb65 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20009338 	.word	0x20009338
 8001668:	40004400 	.word	0x40004400

0800166c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001672:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <MX_USART6_UART_Init+0x5c>)
 8001674:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800167c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART6_UART_Init+0x58>)
 80016b0:	f00b fe4c 	bl	800d34c <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016ba:	f000 fb35 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200091e0 	.word	0x200091e0
 80016c8:	40011400 	.word	0x40011400

080016cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_FMC_Init+0x98>)
 80016e6:	4a20      	ldr	r2, [pc, #128]	; (8001768 <MX_FMC_Init+0x9c>)
 80016e8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_FMC_Init+0x98>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_FMC_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <MX_FMC_Init+0x98>)
 80016f8:	2204      	movs	r2, #4
 80016fa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_FMC_Init+0x98>)
 80016fe:	2210      	movs	r2, #16
 8001700:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <MX_FMC_Init+0x98>)
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_FMC_Init+0x98>)
 800170a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800170e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_FMC_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_FMC_Init+0x98>)
 8001718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800171c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_FMC_Init+0x98>)
 8001720:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_FMC_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800172c:	2302      	movs	r3, #2
 800172e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001730:	2307      	movs	r3, #7
 8001732:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001734:	2304      	movs	r3, #4
 8001736:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001738:	2307      	movs	r3, #7
 800173a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800173c:	2303      	movs	r3, #3
 800173e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001744:	2302      	movs	r3, #2
 8001746:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_FMC_Init+0x98>)
 800174e:	f00a fc02 	bl	800bf56 <HAL_SDRAM_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001758:	f000 fae6 	bl	8001d28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20009408 	.word	0x20009408
 8001768:	a0000140 	.word	0xa0000140

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b090      	sub	sp, #64	; 0x40
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001782:	4baf      	ldr	r3, [pc, #700]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4aae      	ldr	r2, [pc, #696]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001788:	f043 0310 	orr.w	r3, r3, #16
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4bac      	ldr	r3, [pc, #688]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800179a:	4ba9      	ldr	r3, [pc, #676]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4aa8      	ldr	r2, [pc, #672]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4ba6      	ldr	r3, [pc, #664]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	4ba3      	ldr	r3, [pc, #652]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4aa2      	ldr	r2, [pc, #648]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4ba0      	ldr	r3, [pc, #640]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	4b9d      	ldr	r3, [pc, #628]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a9c      	ldr	r2, [pc, #624]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b9a      	ldr	r3, [pc, #616]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b97      	ldr	r3, [pc, #604]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a96      	ldr	r2, [pc, #600]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b94      	ldr	r3, [pc, #592]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b91      	ldr	r3, [pc, #580]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a90      	ldr	r2, [pc, #576]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b8e      	ldr	r3, [pc, #568]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001812:	4b8b      	ldr	r3, [pc, #556]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a8a      	ldr	r2, [pc, #552]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800182a:	4b85      	ldr	r3, [pc, #532]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a84      	ldr	r2, [pc, #528]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b82      	ldr	r3, [pc, #520]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a7e      	ldr	r2, [pc, #504]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001848:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b7c      	ldr	r3, [pc, #496]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a78      	ldr	r2, [pc, #480]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b76      	ldr	r3, [pc, #472]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001872:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a72      	ldr	r2, [pc, #456]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <MX_GPIO_Init+0x2d4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	210e      	movs	r1, #14
 800188e:	486d      	ldr	r0, [pc, #436]	; (8001a44 <MX_GPIO_Init+0x2d8>)
 8001890:	f004 fc30 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2108      	movs	r1, #8
 8001898:	486b      	ldr	r0, [pc, #428]	; (8001a48 <MX_GPIO_Init+0x2dc>)
 800189a:	f004 fc2b 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	4867      	ldr	r0, [pc, #412]	; (8001a44 <MX_GPIO_Init+0x2d8>)
 80018a6:	f004 fc25 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b0:	4866      	ldr	r0, [pc, #408]	; (8001a4c <MX_GPIO_Init+0x2e0>)
 80018b2:	f004 fc1f 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	21c8      	movs	r1, #200	; 0xc8
 80018ba:	4865      	ldr	r0, [pc, #404]	; (8001a50 <MX_GPIO_Init+0x2e4>)
 80018bc:	f004 fc1a 	bl	80060f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018c0:	2308      	movs	r3, #8
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	4860      	ldr	r0, [pc, #384]	; (8001a54 <MX_GPIO_Init+0x2e8>)
 80018d4:	f004 f93e 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80018d8:	f643 4323 	movw	r3, #15395	; 0x3c23
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018ea:	230a      	movs	r3, #10
 80018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f2:	4619      	mov	r1, r3
 80018f4:	4858      	ldr	r0, [pc, #352]	; (8001a58 <MX_GPIO_Init+0x2ec>)
 80018f6:	f004 f92d 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	4619      	mov	r1, r3
 800190e:	4853      	ldr	r0, [pc, #332]	; (8001a5c <MX_GPIO_Init+0x2f0>)
 8001910:	f004 f920 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8001914:	f241 030e 	movw	r3, #4110	; 0x100e
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192a:	4619      	mov	r1, r3
 800192c:	4845      	ldr	r0, [pc, #276]	; (8001a44 <MX_GPIO_Init+0x2d8>)
 800192e:	f004 f911 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4846      	ldr	r0, [pc, #280]	; (8001a60 <MX_GPIO_Init+0x2f4>)
 8001948:	f004 f904 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800194c:	2308      	movs	r3, #8
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	4839      	ldr	r0, [pc, #228]	; (8001a48 <MX_GPIO_Init+0x2dc>)
 8001964:	f004 f8f6 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001968:	2310      	movs	r3, #16
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	483a      	ldr	r0, [pc, #232]	; (8001a64 <MX_GPIO_Init+0x2f8>)
 800197c:	f004 f8ea 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001980:	f248 0304 	movw	r3, #32772	; 0x8004
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001986:	2300      	movs	r3, #0
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	482d      	ldr	r0, [pc, #180]	; (8001a4c <MX_GPIO_Init+0x2e0>)
 8001996:	f004 f8dd 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800199a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4826      	ldr	r0, [pc, #152]	; (8001a4c <MX_GPIO_Init+0x2e0>)
 80019b4:	f004 f8ce 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	481d      	ldr	r0, [pc, #116]	; (8001a44 <MX_GPIO_Init+0x2d8>)
 80019d0:	f004 f8c0 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019d4:	2310      	movs	r3, #16
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019e4:	230a      	movs	r3, #10
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4817      	ldr	r0, [pc, #92]	; (8001a4c <MX_GPIO_Init+0x2e0>)
 80019f0:	f004 f8b0 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80019f4:	23c8      	movs	r3, #200	; 0xc8
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4811      	ldr	r0, [pc, #68]	; (8001a50 <MX_GPIO_Init+0x2e4>)
 8001a0c:	f004 f8a2 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a10:	2305      	movs	r3, #5
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a20:	230a      	movs	r3, #10
 8001a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_GPIO_Init+0x2f4>)
 8001a2c:	f004 f892 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a30:	2304      	movs	r3, #4
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	2300      	movs	r3, #0
 8001a36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	e014      	b.n	8001a68 <MX_GPIO_Init+0x2fc>
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022800 	.word	0x40022800
 8001a4c:	40021c00 	.word	0x40021c00
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40022400 	.word	0x40022400
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020c00 	.word	0x40020c00
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <MX_GPIO_Init+0x354>)
 8001a70:	f004 f870 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a74:	2328      	movs	r3, #40	; 0x28
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a84:	230a      	movs	r3, #10
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_GPIO_Init+0x358>)
 8001a90:	f004 f860 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a94:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <MX_GPIO_Init+0x35c>)
 8001ab2:	f004 f84f 	bl	8005b54 <HAL_GPIO_Init>

}
 8001ab6:	bf00      	nop
 8001ab8:	3740      	adds	r7, #64	; 0x40
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <tcpecho_thread>:

/* USER CODE BEGIN 4 */
static void tcpecho_thread(void *arg)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08e      	sub	sp, #56	; 0x38
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
  struct netbuf *buf;
 // uint8_t* data=pvPortMalloc(100);
  u16_t len;
  err_t recv_err;

  BSP_LCD_DisplayStringAt(20, 20, (uint8_t *)"TCP Server", CENTER_MODE);
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4a70      	ldr	r2, [pc, #448]	; (8001c98 <tcpecho_thread+0x1cc>)
 8001ad8:	2114      	movs	r1, #20
 8001ada:	2014      	movs	r0, #20
 8001adc:	f00f f9ac 	bl	8010e38 <BSP_LCD_DisplayStringAt>


  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2010      	movs	r0, #16
 8001ae6:	f015 ff2d 	bl	8017944 <netconn_new_with_proto_and_callback>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

  if (conn!=NULL)
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80ca 	beq.w	8001c88 <tcpecho_thread+0x1bc>
  {


    /* Bind connection to port number 8998. */
    err = netconn_bind(conn, NULL, 7);
 8001af4:	2207      	movs	r2, #7
 8001af6:	2100      	movs	r1, #0
 8001af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001afa:	f015 ffdd 	bl	8017ab8 <netconn_bind>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if (err == ERR_OK)
 8001b04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 80b5 	bne.w	8001c78 <tcpecho_thread+0x1ac>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001b0e:	21ff      	movs	r1, #255	; 0xff
 8001b10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b12:	f016 f809 	bl	8017b28 <netconn_listen_with_backlog>


      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b1e:	f016 f82f 	bl	8017b80 <netconn_accept>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22



        /* Process the new connection. */
        if (accept_err == ERR_OK)
 8001b28:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1f2      	bne.n	8001b16 <tcpecho_thread+0x4a>
        {
        	 BSP_LCD_DisplayStringAtLine(2, "STM32F746G lwip is connected");
 8001b30:	495a      	ldr	r1, [pc, #360]	; (8001c9c <tcpecho_thread+0x1d0>)
 8001b32:	2002      	movs	r0, #2
 8001b34:	f00f fa48 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>
              int i=2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28





          recv_err = netconn_recv(newconn, &buf);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f107 0218 	add.w	r2, r7, #24
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f016 fa23 	bl	8017f90 <netconn_recv>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					while ( recv_err == ERR_OK)
 8001b50:	e084      	b.n	8001c5c <tcpecho_thread+0x190>
          {    i=i+1;
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	3301      	adds	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
            do
            {     // buf->p->payload=16448;
               netbuf_data(buf, &data, &len);
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f107 0216 	add.w	r2, r7, #22
 8001b5e:	4950      	ldr	r1, [pc, #320]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f017 ffab 	bl	8019abc <netbuf_data>


               BSP_LCD_DisplayStringAtLine(i, data);
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00f fa29 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>




               netconn_write(newconn,data, len, NETCONN_COPY);
 8001b76:	69f8      	ldr	r0, [r7, #28]
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	8afb      	ldrh	r3, [r7, #22]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	f016 fa7d 	bl	8018084 <netconn_write_partly>
*/

                               char ch11[1];
                               char ch12[1];

                                 itoa(data[1], ch11, 10);
 8001b8a:	4b45      	ldr	r3, [pc, #276]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	220a      	movs	r2, #10
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f023 fdd6 	bl	802574c <itoa>
                                 itoa(data[3], ch12, 10);
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f107 0310 	add.w	r3, r7, #16
 8001bae:	220a      	movs	r2, #10
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f023 fdcb 	bl	802574c <itoa>



                                 BSP_LCD_DisplayStringAtLine(3, "PLC1:");
 8001bb6:	493b      	ldr	r1, [pc, #236]	; (8001ca4 <tcpecho_thread+0x1d8>)
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f00f fa05 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>
                                BSP_LCD_DisplayStringAtLine(4, ch11);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f00f f9ff 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>
                                BSP_LCD_DisplayStringAtLine(5, ch12);
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2005      	movs	r0, #5
 8001bd2:	f00f f9f9 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>



                                HAL_Delay(2000);
 8001bd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bda:	f001 fab3 	bl	8003144 <HAL_Delay>
                                char ch14[1];
                                char ch15[1];


                                itoa(data[5], ch14, 10);
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3305      	adds	r3, #5
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	220a      	movs	r2, #10
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f023 fdac 	bl	802574c <itoa>
                                itoa(data[7], ch15, 10);
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <tcpecho_thread+0x1d4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3307      	adds	r3, #7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	220a      	movs	r2, #10
 8001c04:	4619      	mov	r1, r3
 8001c06:	f023 fda1 	bl	802574c <itoa>



                                BSP_LCD_DisplayStringAtLine(3, "PLC2:");
 8001c0a:	4927      	ldr	r1, [pc, #156]	; (8001ca8 <tcpecho_thread+0x1dc>)
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f00f f9db 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>
                                BSP_LCD_DisplayStringAtLine(4, ch14);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	2004      	movs	r0, #4
 8001c1a:	f00f f9d5 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>
                                BSP_LCD_DisplayStringAtLine(5, ch15);
 8001c1e:	f107 0308 	add.w	r3, r7, #8
 8001c22:	4619      	mov	r1, r3
 8001c24:	2005      	movs	r0, #5
 8001c26:	f00f f9cf 	bl	8010fc8 <BSP_LCD_DisplayStringAtLine>

                                HAL_Delay(2000);
 8001c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c2e:	f001 fa89 	bl	8003144 <HAL_Delay>


      */

            }
            while (netbuf_next(buf) >= 0);
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f017 ff8b 	bl	8019b50 <netbuf_next>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da8b      	bge.n	8001b58 <tcpecho_thread+0x8c>
            netbuf_delete(buf);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f017 ff1a 	bl	8019a7c <netbuf_delete>

						recv_err = netconn_recv(newconn, &buf);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f107 0218 	add.w	r2, r7, #24
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f016 f99d 	bl	8017f90 <netconn_recv>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					while ( recv_err == ERR_OK)
 8001c5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f43f af76 	beq.w	8001b52 <tcpecho_thread+0x86>

          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f016 fb0d 	bl	8018288 <netconn_close>
          netconn_delete(newconn);
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f015 ff05 	bl	8017a80 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001c76:	e74e      	b.n	8001b16 <tcpecho_thread+0x4a>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f015 ff00 	bl	8017a80 <netconn_delete>
      printf(" can not bind TCP netconn");
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <tcpecho_thread+0x1e0>)
 8001c82:	f024 f935 	bl	8025ef0 <iprintf>
  }
  else
  {
    printf("can not create TCP netconn");
  }
}
 8001c86:	e002      	b.n	8001c8e <tcpecho_thread+0x1c2>
    printf("can not create TCP netconn");
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <tcpecho_thread+0x1e4>)
 8001c8a:	f024 f931 	bl	8025ef0 <iprintf>
}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	; 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	08026754 	.word	0x08026754
 8001c9c:	08026760 	.word	0x08026760
 8001ca0:	20009100 	.word	0x20009100
 8001ca4:	08026780 	.word	0x08026780
 8001ca8:	08026788 	.word	0x08026788
 8001cac:	08026790 	.word	0x08026790
 8001cb0:	080267ac 	.word	0x080267ac

08001cb4 <tcpecho_init>:


void tcpecho_init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af02      	add	r7, sp, #8
//  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
//  osThreadDef(cobaEcho, tcpecho_thread, osPriorityNormal, 0, 4096);
//  osThreadDef(netconnTask, tcpecho_thread, osPriorityNormal, 0, 4096);
//  netconnTask = osThreadCreate(osThread(cobaEcho), NULL);
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8001cba:	2305      	movs	r3, #5
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4903      	ldr	r1, [pc, #12]	; (8001cd4 <tcpecho_init+0x20>)
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <tcpecho_init+0x24>)
 8001cc8:	f023 f8ca 	bl	8024e60 <sys_thread_new>
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	08001acd 	.word	0x08001acd
 8001cd8:	080267c8 	.word	0x080267c8

08001cdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001ce4:	f023 f900 	bl	8024ee8 <MX_USB_HOST_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001ce8:	f00f fddc 	bl	80118a4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 8001cec:	f7ff ffe2 	bl	8001cb4 <tcpecho_init>

  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f012 fd7f 	bl	80147f4 <osDelay>
 8001cf6:	e7fb      	b.n	8001cf0 <StartDefaultTask+0x14>

08001cf8 <StartTask_GSM1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_GSM1 */
void StartTask_GSM1(void const * argument)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

/*


  /* Infinite loop */
  for(;;)
 8001d00:	e7fe      	b.n	8001d00 <StartTask_GSM1+0x8>
	...

08001d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d16:	f001 f9f5 	bl	8003104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40001000 	.word	0x40001000

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_MspInit+0x4c>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	f06f 0001 	mvn.w	r0, #1
 8001d72:	f001 fd57 	bl	8003824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_ADC_MspInit+0xa4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d13c      	bne.n	8001e20 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001da6:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db0:	6453      	str	r3, [r2, #68]	; 0x44
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dc4:	f043 0320 	orr.w	r3, r3, #32
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_ADC_MspInit+0xa8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001dee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001df2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_ADC_MspInit+0xac>)
 8001e04:	f003 fea6 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4806      	ldr	r0, [pc, #24]	; (8001e34 <HAL_ADC_MspInit+0xb0>)
 8001e1c:	f003 fe9a 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	; 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012200 	.word	0x40012200
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40021400 	.word	0x40021400
 8001e34:	40020000 	.word	0x40020000

08001e38 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_CRC_MspInit+0x38>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10b      	bne.n	8001e62 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_CRC_MspInit+0x3c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023000 	.word	0x40023000
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	; 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a50      	ldr	r2, [pc, #320]	; (8001fd8 <HAL_DCMI_MspInit+0x160>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 809a 	bne.w	8001fd0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	623b      	str	r3, [r7, #32]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb4:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001eba:	f043 0310 	orr.w	r3, r3, #16
 8001ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ecc:	4b43      	ldr	r3, [pc, #268]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a42      	ldr	r2, [pc, #264]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ed2:	f043 0308 	orr.w	r3, r3, #8
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efc:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a36      	ldr	r2, [pc, #216]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_DCMI_MspInit+0x164>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001f2c:	2360      	movs	r3, #96	; 0x60
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f3c:	230d      	movs	r3, #13
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4826      	ldr	r0, [pc, #152]	; (8001fe0 <HAL_DCMI_MspInit+0x168>)
 8001f48:	f003 fe04 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f5c:	230d      	movs	r3, #13
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	4619      	mov	r1, r3
 8001f66:	481f      	ldr	r0, [pc, #124]	; (8001fe4 <HAL_DCMI_MspInit+0x16c>)
 8001f68:	f003 fdf4 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f7e:	230d      	movs	r3, #13
 8001f80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <HAL_DCMI_MspInit+0x170>)
 8001f8a:	f003 fde3 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001f8e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fa0:	230d      	movs	r3, #13
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4810      	ldr	r0, [pc, #64]	; (8001fec <HAL_DCMI_MspInit+0x174>)
 8001fac:	f003 fdd2 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001fb0:	2350      	movs	r3, #80	; 0x50
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fc0:	230d      	movs	r3, #13
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <HAL_DCMI_MspInit+0x178>)
 8001fcc:	f003 fdc2 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3738      	adds	r7, #56	; 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	50050000 	.word	0x50050000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40021c00 	.word	0x40021c00
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_DMA2D_MspInit+0x44>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d113      	bne.n	800202e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_DMA2D_MspInit+0x48>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_DMA2D_MspInit+0x48>)
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <HAL_DMA2D_MspInit+0x48>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2105      	movs	r1, #5
 8002022:	205a      	movs	r0, #90	; 0x5a
 8002024:	f001 fbfe 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002028:	205a      	movs	r0, #90	; 0x5a
 800202a:	f001 fc17 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	4002b000 	.word	0x4002b000
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0ac      	sub	sp, #176	; 0xb0
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	2284      	movs	r2, #132	; 0x84
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f023 fba5 	bl	80257b0 <memset>
  if(hi2c->Instance==I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_I2C_MspInit+0x13c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d13d      	bne.n	80020ec <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002070:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002074:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002076:	2300      	movs	r3, #0
 8002078:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	4618      	mov	r0, r3
 8002080:	f007 fc08 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800208a:	f7ff fe4d 	bl	8001d28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_I2C_MspInit+0x140>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80020a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c0:	2304      	movs	r3, #4
 80020c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020ca:	4619      	mov	r1, r3
 80020cc:	482d      	ldr	r0, [pc, #180]	; (8002184 <HAL_I2C_MspInit+0x144>)
 80020ce:	f003 fd41 	bl	8005b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d2:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_I2C_MspInit+0x140>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_I2C_MspInit+0x140>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_I2C_MspInit+0x140>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80020ea:	e042      	b.n	8002172 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_I2C_MspInit+0x148>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d13d      	bne.n	8002172 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80020f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0318 	add.w	r3, r7, #24
 8002106:	4618      	mov	r0, r3
 8002108:	f007 fbc4 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002112:	f7ff fe09 	bl	8001d28 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002116:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_I2C_MspInit+0x140>)
 800211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800212e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002136:	2312      	movs	r3, #18
 8002138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800213c:	2301      	movs	r3, #1
 800213e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002148:	2304      	movs	r3, #4
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800214e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002152:	4619      	mov	r1, r3
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <HAL_I2C_MspInit+0x14c>)
 8002156:	f003 fcfd 	bl	8005b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_I2C_MspInit+0x140>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_I2C_MspInit+0x140>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
}
 8002172:	bf00      	nop
 8002174:	37b0      	adds	r7, #176	; 0xb0
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40005400 	.word	0x40005400
 8002180:	40023800 	.word	0x40023800
 8002184:	40020400 	.word	0x40020400
 8002188:	40005c00 	.word	0x40005c00
 800218c:	40021c00 	.word	0x40021c00

08002190 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_I2C_MspDeInit+0x64>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d110      	bne.n	80021c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	4812      	ldr	r0, [pc, #72]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021b4:	f003 fe7a 	bl	8005eac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80021b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021bc:	480f      	ldr	r0, [pc, #60]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021be:	f003 fe75 	bl	8005eac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80021c2:	e013      	b.n	80021ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_I2C_MspDeInit+0x70>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	4809      	ldr	r0, [pc, #36]	; (8002204 <HAL_I2C_MspDeInit+0x74>)
 80021de:	f003 fe65 	bl	8005eac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80021e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <HAL_I2C_MspDeInit+0x74>)
 80021e8:	f003 fe60 	bl	8005eac <HAL_GPIO_DeInit>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40005400 	.word	0x40005400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020400 	.word	0x40020400
 8002200:	40005c00 	.word	0x40005c00
 8002204:	40021c00 	.word	0x40021c00

08002208 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a55      	ldr	r2, [pc, #340]	; (800237c <HAL_LTDC_MspInit+0x174>)
 8002226:	4293      	cmp	r3, r2
 8002228:	f040 80a3 	bne.w	8002372 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800222c:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	4a53      	ldr	r2, [pc, #332]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002236:	6453      	str	r3, [r2, #68]	; 0x44
 8002238:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a4d      	ldr	r2, [pc, #308]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800224a:	f043 0310 	orr.w	r3, r3, #16
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a47      	ldr	r2, [pc, #284]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002266:	6313      	str	r3, [r2, #48]	; 0x30
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a35      	ldr	r2, [pc, #212]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b33      	ldr	r3, [pc, #204]	; (8002380 <HAL_LTDC_MspInit+0x178>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80022bc:	2310      	movs	r3, #16
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022cc:	230e      	movs	r3, #14
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	482b      	ldr	r0, [pc, #172]	; (8002384 <HAL_LTDC_MspInit+0x17c>)
 80022d8:	f003 fc3c 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80022dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022ee:	230e      	movs	r3, #14
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	4823      	ldr	r0, [pc, #140]	; (8002388 <HAL_LTDC_MspInit+0x180>)
 80022fa:	f003 fc2b 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022fe:	23f7      	movs	r3, #247	; 0xf7
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800230e:	230e      	movs	r3, #14
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	481c      	ldr	r0, [pc, #112]	; (800238c <HAL_LTDC_MspInit+0x184>)
 800231a:	f003 fc1b 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800231e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002330:	2309      	movs	r3, #9
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4815      	ldr	r0, [pc, #84]	; (8002390 <HAL_LTDC_MspInit+0x188>)
 800233c:	f003 fc0a 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002340:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002352:	230e      	movs	r3, #14
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	480d      	ldr	r0, [pc, #52]	; (8002394 <HAL_LTDC_MspInit+0x18c>)
 800235e:	f003 fbf9 	bl	8005b54 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2105      	movs	r1, #5
 8002366:	2058      	movs	r0, #88	; 0x58
 8002368:	f001 fa5c 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800236c:	2058      	movs	r0, #88	; 0x58
 800236e:	f001 fa75 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40016800 	.word	0x40016800
 8002380:	40023800 	.word	0x40023800
 8002384:	40021000 	.word	0x40021000
 8002388:	40022400 	.word	0x40022400
 800238c:	40022800 	.word	0x40022800
 8002390:	40021800 	.word	0x40021800
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <HAL_QSPI_MspInit+0x10c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d170      	bne.n	800249c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6393      	str	r3, [r2, #56]	; 0x38
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a34      	ldr	r2, [pc, #208]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b32      	ldr	r3, [pc, #200]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a2e      	ldr	r2, [pc, #184]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_QSPI_MspInit+0x110>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800241a:	2304      	movs	r3, #4
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800242a:	2309      	movs	r3, #9
 800242c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <HAL_QSPI_MspInit+0x114>)
 8002436:	f003 fb8d 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800243a:	2340      	movs	r3, #64	; 0x40
 800243c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800244a:	230a      	movs	r3, #10
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	4816      	ldr	r0, [pc, #88]	; (80024b0 <HAL_QSPI_MspInit+0x118>)
 8002456:	f003 fb7d 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245a:	2304      	movs	r3, #4
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002466:	2303      	movs	r3, #3
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800246a:	2309      	movs	r3, #9
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480e      	ldr	r0, [pc, #56]	; (80024b0 <HAL_QSPI_MspInit+0x118>)
 8002476:	f003 fb6d 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800247a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800248c:	2309      	movs	r3, #9
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <HAL_QSPI_MspInit+0x11c>)
 8002498:	f003 fb5c 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	a0001000 	.word	0xa0001000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020c00 	.word	0x40020c00

080024b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0a4      	sub	sp, #144	; 0x90
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2284      	movs	r2, #132	; 0x84
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f023 f971 	bl	80257b0 <memset>
  if(hrtc->Instance==RTC)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_RTC_MspInit+0x54>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d114      	bne.n	8002502 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024d8:	2320      	movs	r3, #32
 80024da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4618      	mov	r0, r3
 80024e8:	f007 f9d4 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024f2:	f7ff fc19 	bl	8001d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RTC_MspInit+0x58>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_RTC_MspInit+0x58>)
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3790      	adds	r7, #144	; 0x90
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40002800 	.word	0x40002800
 8002510:	40023800 	.word	0x40023800

08002514 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <HAL_SD_MspInit+0xb4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d144      	bne.n	80025c0 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002536:	4b25      	ldr	r3, [pc, #148]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a24      	ldr	r2, [pc, #144]	; (80025cc <HAL_SD_MspInit+0xb8>)
 800253c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_SD_MspInit+0xb8>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_SD_MspInit+0xb8>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_SD_MspInit+0xb8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800257e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002582:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002590:	230c      	movs	r3, #12
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	4619      	mov	r1, r3
 800259a:	480d      	ldr	r0, [pc, #52]	; (80025d0 <HAL_SD_MspInit+0xbc>)
 800259c:	f003 fada 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80025a0:	2304      	movs	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025b0:	230c      	movs	r3, #12
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4806      	ldr	r0, [pc, #24]	; (80025d4 <HAL_SD_MspInit+0xc0>)
 80025bc:	f003 faca 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	; 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020800 	.word	0x40020800
 80025d4:	40020c00 	.word	0x40020c00

080025d8 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0aa      	sub	sp, #168	; 0xa8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	2284      	movs	r2, #132	; 0x84
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f023 f8d9 	bl	80257b0 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002606:	d143      	bne.n	8002690 <HAL_SPDIFRX_MspInit+0xb8>
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 800260e:	2364      	movs	r3, #100	; 0x64
 8002610:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002612:	2302      	movs	r3, #2
 8002614:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800261a:	2302      	movs	r3, #2
 800261c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800261e:	2301      	movs	r3, #1
 8002620:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4618      	mov	r0, r3
 8002628:	f007 f934 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002632:	f7ff fb79 	bl	8001d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	4a17      	ldr	r2, [pc, #92]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
 8002642:	4b15      	ldr	r3, [pc, #84]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800264e:	4b12      	ldr	r3, [pc, #72]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a11      	ldr	r2, [pc, #68]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_SPDIFRX_MspInit+0xc0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800267e:	2308      	movs	r3, #8
 8002680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002688:	4619      	mov	r1, r3
 800268a:	4804      	ldr	r0, [pc, #16]	; (800269c <HAL_SPDIFRX_MspInit+0xc4>)
 800268c:	f003 fa62 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	37a8      	adds	r7, #168	; 0xa8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	40020c00 	.word	0x40020c00

080026a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	; 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <HAL_TIM_Base_MspInit+0xc8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10c      	bne.n	80026cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026b2:	4b2e      	ldr	r3, [pc, #184]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a2d      	ldr	r2, [pc, #180]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026ca:	e046      	b.n	800275a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	4a24      	ldr	r2, [pc, #144]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6413      	str	r3, [r2, #64]	; 0x40
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	69bb      	ldr	r3, [r7, #24]
}
 80026ee:	e034      	b.n	800275a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_TIM_Base_MspInit+0xd0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d10c      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002700:	f043 0302 	orr.w	r3, r3, #2
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
}
 8002712:	e022      	b.n	800275a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_TIM_Base_MspInit+0xd4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6413      	str	r3, [r2, #64]	; 0x40
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
}
 8002736:	e010      	b.n	800275a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <HAL_TIM_Base_MspInit+0xd8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10b      	bne.n	800275a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6453      	str	r3, [r2, #68]	; 0x44
 800274e:	4b07      	ldr	r3, [pc, #28]	; (800276c <HAL_TIM_Base_MspInit+0xcc>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
}
 800275a:	bf00      	nop
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000
 800276c:	40023800 	.word	0x40023800
 8002770:	40000400 	.word	0x40000400
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_TIM_PWM_MspInit+0x38>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10b      	bne.n	80027a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a09      	ldr	r2, [pc, #36]	; (80027b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40001800 	.word	0x40001800
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 031c 	add.w	r3, r7, #28
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a56      	ldr	r2, [pc, #344]	; (8002934 <HAL_TIM_MspPostInit+0x178>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d11d      	bne.n	800281a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80027f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	484a      	ldr	r0, [pc, #296]	; (800293c <HAL_TIM_MspPostInit+0x180>)
 8002814:	f003 f99e 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002818:	e087      	b.n	800292a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d11d      	bne.n	8002860 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	4b44      	ldr	r3, [pc, #272]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	4a43      	ldr	r2, [pc, #268]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6313      	str	r3, [r2, #48]	; 0x30
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800283c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800284e:	2301      	movs	r3, #1
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4838      	ldr	r0, [pc, #224]	; (800293c <HAL_TIM_MspPostInit+0x180>)
 800285a:	f003 f97b 	bl	8005b54 <HAL_GPIO_Init>
}
 800285e:	e064      	b.n	800292a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a36      	ldr	r2, [pc, #216]	; (8002940 <HAL_TIM_MspPostInit+0x184>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d11c      	bne.n	80028a4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a32      	ldr	r2, [pc, #200]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002882:	2310      	movs	r3, #16
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002892:	2302      	movs	r3, #2
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4829      	ldr	r0, [pc, #164]	; (8002944 <HAL_TIM_MspPostInit+0x188>)
 800289e:	f003 f959 	bl	8005b54 <HAL_GPIO_Init>
}
 80028a2:	e042      	b.n	800292a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a27      	ldr	r2, [pc, #156]	; (8002948 <HAL_TIM_MspPostInit+0x18c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d11c      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b1f      	ldr	r3, [pc, #124]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028d6:	2302      	movs	r3, #2
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	481a      	ldr	r0, [pc, #104]	; (800294c <HAL_TIM_MspPostInit+0x190>)
 80028e2:	f003 f937 	bl	8005b54 <HAL_GPIO_Init>
}
 80028e6:	e020      	b.n	800292a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <HAL_TIM_MspPostInit+0x194>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d11b      	bne.n	800292a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	6313      	str	r3, [r2, #48]	; 0x30
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_TIM_MspPostInit+0x17c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800291a:	2309      	movs	r3, #9
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	480b      	ldr	r0, [pc, #44]	; (8002954 <HAL_TIM_MspPostInit+0x198>)
 8002926:	f003 f915 	bl	8005b54 <HAL_GPIO_Init>
}
 800292a:	bf00      	nop
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40010000 	.word	0x40010000
 8002938:	40023800 	.word	0x40023800
 800293c:	40020000 	.word	0x40020000
 8002940:	40000400 	.word	0x40000400
 8002944:	40020400 	.word	0x40020400
 8002948:	40000c00 	.word	0x40000c00
 800294c:	40022000 	.word	0x40022000
 8002950:	40001800 	.word	0x40001800
 8002954:	40021c00 	.word	0x40021c00

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0b0      	sub	sp, #192	; 0xc0
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002974:	2284      	movs	r2, #132	; 0x84
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f022 ff19 	bl	80257b0 <memset>
  if(huart->Instance==USART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a78      	ldr	r2, [pc, #480]	; (8002b64 <HAL_UART_MspInit+0x20c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d15d      	bne.n	8002a44 <HAL_UART_MspInit+0xec>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002988:	2340      	movs	r3, #64	; 0x40
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800298c:	2300      	movs	r3, #0
 800298e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002990:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002994:	4618      	mov	r0, r3
 8002996:	f006 ff7d 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029a0:	f7ff f9c2 	bl	8001d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	4a6f      	ldr	r2, [pc, #444]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6453      	str	r3, [r2, #68]	; 0x44
 80029b0:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	6313      	str	r3, [r2, #48]	; 0x30
 80029c8:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a63      	ldr	r2, [pc, #396]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_UART_MspInit+0x210>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a04:	2307      	movs	r3, #7
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4856      	ldr	r0, [pc, #344]	; (8002b6c <HAL_UART_MspInit+0x214>)
 8002a12:	f003 f89f 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a30:	2307      	movs	r3, #7
 8002a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002a36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	484c      	ldr	r0, [pc, #304]	; (8002b70 <HAL_UART_MspInit+0x218>)
 8002a3e:	f003 f889 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a42:	e08a      	b.n	8002b5a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a4a      	ldr	r2, [pc, #296]	; (8002b74 <HAL_UART_MspInit+0x21c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d13b      	bne.n	8002ac6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f006 ff1a 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_UART_MspInit+0x112>
      Error_Handler();
 8002a66:	f7ff f95f 	bl	8001d28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a3e      	ldr	r2, [pc, #248]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8002a9a:	2360      	movs	r3, #96	; 0x60
 8002a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002abc:	4619      	mov	r1, r3
 8002abe:	482e      	ldr	r0, [pc, #184]	; (8002b78 <HAL_UART_MspInit+0x220>)
 8002ac0:	f003 f848 	bl	8005b54 <HAL_GPIO_Init>
}
 8002ac4:	e049      	b.n	8002b5a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART6)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2c      	ldr	r2, [pc, #176]	; (8002b7c <HAL_UART_MspInit+0x224>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d144      	bne.n	8002b5a <HAL_UART_MspInit+0x202>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f006 fed7 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002aec:	f7ff f91c 	bl	8001d28 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002af6:	f043 0320 	orr.w	r3, r3, #32
 8002afa:	6453      	str	r3, [r2, #68]	; 0x44
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <HAL_UART_MspInit+0x210>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b20:	23c0      	movs	r3, #192	; 0xc0
 8002b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b42:	4619      	mov	r1, r3
 8002b44:	480e      	ldr	r0, [pc, #56]	; (8002b80 <HAL_UART_MspInit+0x228>)
 8002b46:	f003 f805 	bl	8005b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	2047      	movs	r0, #71	; 0x47
 8002b50:	f000 fe68 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b54:	2047      	movs	r0, #71	; 0x47
 8002b56:	f000 fe81 	bl	800385c <HAL_NVIC_EnableIRQ>
}
 8002b5a:	bf00      	nop
 8002b5c:	37c0      	adds	r7, #192	; 0xc0
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020400 	.word	0x40020400
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	40020800 	.word	0x40020800

08002b84 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002b98:	4b3a      	ldr	r3, [pc, #232]	; (8002c84 <HAL_FMC_MspInit+0x100>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d16d      	bne.n	8002c7c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002ba0:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <HAL_FMC_MspInit+0x100>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ba6:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <HAL_FMC_MspInit+0x104>)
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_FMC_MspInit+0x104>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6393      	str	r3, [r2, #56]	; 0x38
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_FMC_MspInit+0x104>)
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002bbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002bc2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	482c      	ldr	r0, [pc, #176]	; (8002c8c <HAL_FMC_MspInit+0x108>)
 8002bda:	f002 ffbb 	bl	8005b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002bde:	f248 1333 	movw	r3, #33075	; 0x8133
 8002be2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4825      	ldr	r0, [pc, #148]	; (8002c90 <HAL_FMC_MspInit+0x10c>)
 8002bfa:	f002 ffab 	bl	8005b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002bfe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002c02:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c10:	230c      	movs	r3, #12
 8002c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	481e      	ldr	r0, [pc, #120]	; (8002c94 <HAL_FMC_MspInit+0x110>)
 8002c1a:	f002 ff9b 	bl	8005b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002c1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002c22:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c30:	230c      	movs	r3, #12
 8002c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4817      	ldr	r0, [pc, #92]	; (8002c98 <HAL_FMC_MspInit+0x114>)
 8002c3a:	f002 ff8b 	bl	8005b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c3e:	2328      	movs	r3, #40	; 0x28
 8002c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c4e:	230c      	movs	r3, #12
 8002c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4811      	ldr	r0, [pc, #68]	; (8002c9c <HAL_FMC_MspInit+0x118>)
 8002c58:	f002 ff7c 	bl	8005b54 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	480a      	ldr	r0, [pc, #40]	; (8002ca0 <HAL_FMC_MspInit+0x11c>)
 8002c76:	f002 ff6d 	bl	8005b54 <HAL_GPIO_Init>
 8002c7a:	e000      	b.n	8002c7e <HAL_FMC_MspInit+0xfa>
    return;
 8002c7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200003a8 	.word	0x200003a8
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40021800 	.word	0x40021800
 8002c94:	40020c00 	.word	0x40020c00
 8002c98:	40021400 	.word	0x40021400
 8002c9c:	40021c00 	.word	0x40021c00
 8002ca0:	40020800 	.word	0x40020800

08002ca4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002cac:	f7ff ff6a 	bl	8002b84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2b      	ldr	r2, [pc, #172]	; (8002d74 <HAL_SAI_MspInit+0xbc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d124      	bne.n	8002d14 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a29      	ldr	r2, [pc, #164]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002cf2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002cf4:	23f0      	movs	r3, #240	; 0xf0
 8002cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d00:	2300      	movs	r3, #0
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d04:	230a      	movs	r3, #10
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	481c      	ldr	r0, [pc, #112]	; (8002d80 <HAL_SAI_MspInit+0xc8>)
 8002d10:	f002 ff20 	bl	8005b54 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	; (8002d84 <HAL_SAI_MspInit+0xcc>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d125      	bne.n	8002d6a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002d26:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d30:	6453      	str	r3, [r2, #68]	; 0x44
 8002d32:	4b12      	ldr	r3, [pc, #72]	; (8002d7c <HAL_SAI_MspInit+0xc4>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_SAI_MspInit+0xc0>)
 8002d46:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	4808      	ldr	r0, [pc, #32]	; (8002d88 <HAL_SAI_MspInit+0xd0>)
 8002d66:	f002 fef5 	bl	8005b54 <HAL_GPIO_Init>

    }
}
 8002d6a:	bf00      	nop
 8002d6c:	3728      	adds	r7, #40	; 0x28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40015c04 	.word	0x40015c04
 8002d78:	200003ac 	.word	0x200003ac
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40015c24 	.word	0x40015c24
 8002d88:	40021800 	.word	0x40021800

08002d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08c      	sub	sp, #48	; 0x30
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	2036      	movs	r0, #54	; 0x36
 8002da2:	f000 fd3f 	bl	8003824 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002da6:	2036      	movs	r0, #54	; 0x36
 8002da8:	f000 fd58 	bl	800385c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_InitTick+0xa0>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <HAL_InitTick+0xa0>)
 8002db2:	f043 0310 	orr.w	r3, r3, #16
 8002db6:	6413      	str	r3, [r2, #64]	; 0x40
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <HAL_InitTick+0xa0>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dc4:	f107 0210 	add.w	r2, r7, #16
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f006 fd2e 	bl	8009830 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dd4:	f006 fd04 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_InitTick+0xa4>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	3b01      	subs	r3, #1
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_InitTick+0xa8>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_InitTick+0xac>)
 8002df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_InitTick+0xa8>)
 8002df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_InitTick+0xa8>)
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_InitTick+0xa8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_InitTick+0xa8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e0c:	4809      	ldr	r0, [pc, #36]	; (8002e34 <HAL_InitTick+0xa8>)
 8002e0e:	f009 f98f 	bl	800c130 <HAL_TIM_Base_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e18:	4806      	ldr	r0, [pc, #24]	; (8002e34 <HAL_InitTick+0xa8>)
 8002e1a:	f009 f9e1 	bl	800c1e0 <HAL_TIM_Base_Start_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3730      	adds	r7, #48	; 0x30
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	431bde83 	.word	0x431bde83
 8002e34:	20009488 	.word	0x20009488
 8002e38:	40001000 	.word	0x40001000

08002e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <NMI_Handler+0x4>

08002e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <MemManage_Handler+0x4>

08002e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <BusFault_Handler+0x4>

08002e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <UsageFault_Handler+0x4>

08002e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e6c:	4802      	ldr	r0, [pc, #8]	; (8002e78 <TIM6_DAC_IRQHandler+0x10>)
 8002e6e:	f009 fa86 	bl	800c37e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20009488 	.word	0x20009488

08002e7c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002e80:	4802      	ldr	r0, [pc, #8]	; (8002e8c <ETH_IRQHandler+0x10>)
 8002e82:	f002 f8c5 	bl	8005010 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2000b344 	.word	0x2000b344

08002e90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <OTG_FS_IRQHandler+0x10>)
 8002e96:	f003 fbb1 	bl	80065fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200106bc 	.word	0x200106bc

08002ea4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <USART6_IRQHandler+0x10>)
 8002eaa:	f00a fa9d 	bl	800d3e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200091e0 	.word	0x200091e0

08002eb8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <LTDC_IRQHandler+0x10>)
 8002ebe:	f005 fc73 	bl	80087a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20008e68 	.word	0x20008e68

08002ecc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <DMA2D_IRQHandler+0x10>)
 8002ed2:	f001 fa7d 	bl	80043d0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200092ac 	.word	0x200092ac

08002ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
	return 1;
 8002ee4:	2301      	movs	r3, #1
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_kill>:

int _kill(int pid, int sig)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <_kill+0x20>)
 8002efc:	2216      	movs	r2, #22
 8002efe:	601a      	str	r2, [r3, #0]
	return -1;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	200102d0 	.word	0x200102d0

08002f14 <_exit>:

void _exit (int status)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffe5 	bl	8002ef0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f26:	e7fe      	b.n	8002f26 <_exit+0x12>

08002f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e00a      	b.n	8002f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f3a:	f3af 8000 	nop.w
 8002f3e:	4601      	mov	r1, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	60ba      	str	r2, [r7, #8]
 8002f46:	b2ca      	uxtb	r2, r1
 8002f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbf0      	blt.n	8002f3a <_read+0x12>
	}

return len;
 8002f58:	687b      	ldr	r3, [r7, #4]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e009      	b.n	8002f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dbf1      	blt.n	8002f74 <_write+0x12>
	}
	return len;
 8002f90:	687b      	ldr	r3, [r7, #4]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <_close>:

int _close(int file)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <_isatty>:

int _isatty(int file)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002fda:	2301      	movs	r3, #1
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800300c:	4a14      	ldr	r2, [pc, #80]	; (8003060 <_sbrk+0x5c>)
 800300e:	4b15      	ldr	r3, [pc, #84]	; (8003064 <_sbrk+0x60>)
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <_sbrk+0x64>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003020:	4b11      	ldr	r3, [pc, #68]	; (8003068 <_sbrk+0x64>)
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <_sbrk+0x68>)
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003026:	4b10      	ldr	r3, [pc, #64]	; (8003068 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d205      	bcs.n	8003040 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <_sbrk+0x6c>)
 8003036:	220c      	movs	r2, #12
 8003038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295
 800303e:	e009      	b.n	8003054 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <_sbrk+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <_sbrk+0x64>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	4a06      	ldr	r2, [pc, #24]	; (8003068 <_sbrk+0x64>)
 8003050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	20050000 	.word	0x20050000
 8003064:	00000400 	.word	0x00000400
 8003068:	200003b0 	.word	0x200003b0
 800306c:	200109d0 	.word	0x200109d0
 8003070:	200102d0 	.word	0x200102d0

08003074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <SystemInit+0x20>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a05      	ldr	r2, [pc, #20]	; (8003094 <SystemInit+0x20>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800309c:	480d      	ldr	r0, [pc, #52]	; (80030d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800309e:	490e      	ldr	r1, [pc, #56]	; (80030d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030a0:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a4:	e002      	b.n	80030ac <LoopCopyDataInit>

080030a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030aa:	3304      	adds	r3, #4

080030ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b0:	d3f9      	bcc.n	80030a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b2:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030b4:	4c0b      	ldr	r4, [pc, #44]	; (80030e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b8:	e001      	b.n	80030be <LoopFillZerobss>

080030ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030bc:	3204      	adds	r2, #4

080030be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c0:	d3fb      	bcc.n	80030ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030c2:	f7ff ffd7 	bl	8003074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030c6:	f022 fb05 	bl	80256d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ca:	f7fd fae5 	bl	8000698 <main>
  bx  lr    
 80030ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80030dc:	0802bb34 	.word	0x0802bb34
  ldr r2, =_sbss
 80030e0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80030e4:	200109cc 	.word	0x200109cc

080030e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC_IRQHandler>

080030ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ee:	2003      	movs	r0, #3
 80030f0:	f000 fb8d 	bl	800380e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030f4:	200f      	movs	r0, #15
 80030f6:	f7ff fe49 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030fa:	f7fe fe1b 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003108:	4b06      	ldr	r3, [pc, #24]	; (8003124 <HAL_IncTick+0x20>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_IncTick+0x24>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4413      	add	r3, r2
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <HAL_IncTick+0x24>)
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000008 	.word	0x20000008
 8003128:	200094d4 	.word	0x200094d4

0800312c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return uwTick;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_GetTick+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	200094d4 	.word	0x200094d4

08003144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff ffee 	bl	800312c <HAL_GetTick>
 8003150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d005      	beq.n	800316a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_Delay+0x44>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800316a:	bf00      	nop
 800316c:	f7ff ffde 	bl	800312c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	429a      	cmp	r2, r3
 800317a:	d8f7      	bhi.n	800316c <HAL_Delay+0x28>
  {
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e031      	b.n	8003206 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fe fdea 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_ADC_Init+0x84>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	f043 0202 	orr.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f970 	bl	80034c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f023 0303 	bic.w	r3, r3, #3
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
 80031f6:	e001      	b.n	80031fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	ffffeefd 	.word	0xffffeefd

08003214 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x1c>
 800322c:	2302      	movs	r3, #2
 800322e:	e136      	b.n	800349e <HAL_ADC_ConfigChannel+0x28a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d93a      	bls.n	80032b6 <HAL_ADC_ConfigChannel+0xa2>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003248:	d035      	beq.n	80032b6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68d9      	ldr	r1, [r3, #12]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	3b1e      	subs	r3, #30
 8003260:	2207      	movs	r2, #7
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	400a      	ands	r2, r1
 800326e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a8d      	ldr	r2, [pc, #564]	; (80034ac <HAL_ADC_ConfigChannel+0x298>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68d9      	ldr	r1, [r3, #12]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	061a      	lsls	r2, r3, #24
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328e:	e035      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4403      	add	r3, r0
 80032a8:	3b1e      	subs	r3, #30
 80032aa:	409a      	lsls	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b4:	e022      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	2207      	movs	r2, #7
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43da      	mvns	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	400a      	ands	r2, r1
 80032d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6919      	ldr	r1, [r3, #16]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4618      	mov	r0, r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4403      	add	r3, r0
 80032f2:	409a      	lsls	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b06      	cmp	r3, #6
 8003302:	d824      	bhi.n	800334e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	3b05      	subs	r3, #5
 8003316:	221f      	movs	r2, #31
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43da      	mvns	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	400a      	ands	r2, r1
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b05      	subs	r3, #5
 8003340:	fa00 f203 	lsl.w	r2, r0, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	635a      	str	r2, [r3, #52]	; 0x34
 800334c:	e04c      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b0c      	cmp	r3, #12
 8003354:	d824      	bhi.n	80033a0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	3b23      	subs	r3, #35	; 0x23
 8003368:	221f      	movs	r2, #31
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43da      	mvns	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	400a      	ands	r2, r1
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	b29b      	uxth	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	3b23      	subs	r3, #35	; 0x23
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
 800339e:	e023      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	3b41      	subs	r3, #65	; 0x41
 80033b2:	221f      	movs	r2, #31
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43da      	mvns	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	400a      	ands	r2, r1
 80033c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	4618      	mov	r0, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	3b41      	subs	r3, #65	; 0x41
 80033dc:	fa00 f203 	lsl.w	r2, r0, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a30      	ldr	r2, [pc, #192]	; (80034b0 <HAL_ADC_ConfigChannel+0x29c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1f4>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fa:	d105      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003402:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003406:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <HAL_ADC_ConfigChannel+0x29c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10f      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x21e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b12      	cmp	r3, #18
 8003418:	d10b      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003424:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a22      	ldr	r2, [pc, #136]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800342c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003430:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <HAL_ADC_ConfigChannel+0x29c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12b      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x280>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_ADC_ConfigChannel+0x298>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <HAL_ADC_ConfigChannel+0x23a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b11      	cmp	r3, #17
 800344c:	d122      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003454:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003458:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_ADC_ConfigChannel+0x2a0>)
 8003460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003464:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <HAL_ADC_ConfigChannel+0x298>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d111      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003470:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_ADC_ConfigChannel+0x2a4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_ADC_ConfigChannel+0x2a8>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0c9a      	lsrs	r2, r3, #18
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003486:	e002      	b.n	800348e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b01      	subs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f9      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	10000012 	.word	0x10000012
 80034b0:	40012000 	.word	0x40012000
 80034b4:	40012300 	.word	0x40012300
 80034b8:	20000000 	.word	0x20000000
 80034bc:	431bde83 	.word	0x431bde83

080034c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80034c8:	4b78      	ldr	r3, [pc, #480]	; (80036ac <ADC_Init+0x1ec>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a77      	ldr	r2, [pc, #476]	; (80036ac <ADC_Init+0x1ec>)
 80034ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80034d4:	4b75      	ldr	r3, [pc, #468]	; (80036ac <ADC_Init+0x1ec>)
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4973      	ldr	r1, [pc, #460]	; (80036ac <ADC_Init+0x1ec>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	021a      	lsls	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <ADC_Init+0x1f0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e00f      	b.n	80035ba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0202 	bic.w	r2, r2, #2
 80035c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	005a      	lsls	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	3b01      	subs	r3, #1
 8003614:	035a      	lsls	r2, r3, #13
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e007      	b.n	8003630 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	3b01      	subs	r3, #1
 800364c:	051a      	lsls	r2, r3, #20
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003672:	025a      	lsls	r2, r3, #9
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	029a      	lsls	r2, r3, #10
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012300 	.word	0x40012300
 80036b0:	0f000001 	.word	0x0f000001

080036b4 <__NVIC_SetPriorityGrouping>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <__NVIC_SetPriorityGrouping+0x40>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d0:	4013      	ands	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x40>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00
 80036f8:	05fa0000 	.word	0x05fa0000

080036fc <__NVIC_GetPriorityGrouping>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <__NVIC_GetPriorityGrouping+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0307 	and.w	r3, r3, #7
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_EnableIRQ>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0b      	blt.n	8003742 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_EnableIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff4c 	bl	80036b4 <__NVIC_SetPriorityGrouping>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003836:	f7ff ff61 	bl	80036fc <__NVIC_GetPriorityGrouping>
 800383a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7ff ffb1 	bl	80037a8 <NVIC_EncodePriority>
 8003846:	4602      	mov	r2, r0
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff80 	bl	8003754 <__NVIC_SetPriority>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff54 	bl	8003718 <__NVIC_EnableIRQ>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e054      	b.n	8003934 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7f5b      	ldrb	r3, [r3, #29]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe facc 	bl	8001e38 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	791b      	ldrb	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a22      	ldr	r2, [pc, #136]	; (800393c <HAL_CRC_Init+0xc4>)
 80038b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0218 	bic.w	r2, r2, #24
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	e00c      	b.n	80038e2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	461a      	mov	r2, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f834 	bl	8003940 <HAL_CRCEx_Polynomial_Set>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e028      	b.n	8003934 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295
 80038f2:	611a      	str	r2, [r3, #16]
 80038f4:	e004      	b.n	8003900 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6912      	ldr	r2, [r2, #16]
 80038fe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	04c11db7 	.word	0x04c11db7

08003940 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003950:	231f      	movs	r3, #31
 8003952:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003954:	bf00      	nop
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1e5a      	subs	r2, r3, #1
 800395a:	613a      	str	r2, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <HAL_CRCEx_Polynomial_Set+0x34>
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_CRCEx_Polynomial_Set+0x16>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b18      	cmp	r3, #24
 8003978:	d846      	bhi.n	8003a08 <HAL_CRCEx_Polynomial_Set+0xc8>
 800397a:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <HAL_CRCEx_Polynomial_Set+0x40>)
 800397c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003980:	08003a0f 	.word	0x08003a0f
 8003984:	08003a09 	.word	0x08003a09
 8003988:	08003a09 	.word	0x08003a09
 800398c:	08003a09 	.word	0x08003a09
 8003990:	08003a09 	.word	0x08003a09
 8003994:	08003a09 	.word	0x08003a09
 8003998:	08003a09 	.word	0x08003a09
 800399c:	08003a09 	.word	0x08003a09
 80039a0:	080039fd 	.word	0x080039fd
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003a09 	.word	0x08003a09
 80039ac:	08003a09 	.word	0x08003a09
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	08003a09 	.word	0x08003a09
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	08003a09 	.word	0x08003a09
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
 80039d0:	08003a09 	.word	0x08003a09
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	080039e5 	.word	0x080039e5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d913      	bls.n	8003a12 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039ee:	e010      	b.n	8003a12 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b07      	cmp	r3, #7
 80039f4:	d90f      	bls.n	8003a16 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80039fa:	e00c      	b.n	8003a16 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	d90b      	bls.n	8003a1a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003a06:	e008      	b.n	8003a1a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a0c:	e006      	b.n	8003a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003a1a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 0118 	bic.w	r1, r3, #24
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e069      	b.n	8003b32 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fa04 	bl	8001e78 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_DCMI_Init+0xf0>)
 8003a92:	400b      	ands	r3, r1
 8003a94:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6819      	ldr	r1, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003aaa:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ab6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ac2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003ace:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003ada:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d112      	bne.n	8003b12 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7f1b      	ldrb	r3, [r3, #28]
 8003af0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7f5b      	ldrb	r3, [r3, #29]
 8003af6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003af8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7f9b      	ldrb	r3, [r3, #30]
 8003afe:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003b00:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	7fdb      	ldrb	r3, [r3, #31]
 8003b08:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003b0e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b10:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 021e 	orr.w	r2, r2, #30
 8003b20:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	ffe0f007 	.word	0xffe0f007

08003b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7ff faee 	bl	800312c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e099      	b.n	8003c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b7c:	e00f      	b.n	8003b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7e:	f7ff fad5 	bl	800312c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d908      	bls.n	8003b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e078      	b.n	8003c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e8      	bne.n	8003b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4b38      	ldr	r3, [pc, #224]	; (8003c98 <HAL_DMA_Init+0x158>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	4313      	orrs	r3, r2
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d117      	bne.n	8003c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f9e9 	bl	800401c <DMA_CheckFifoParam>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2240      	movs	r2, #64	; 0x40
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e016      	b.n	8003c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f9a0 	bl	8003fb0 <DMA_CalcBaseAndBitshift>
 8003c70:	4603      	mov	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	223f      	movs	r2, #63	; 0x3f
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	f010803f 	.word	0xf010803f

08003c9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e050      	b.n	8003d50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e048      	b.n	8003d50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0201 	bic.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2221      	movs	r2, #33	; 0x21
 8003cfc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f956 	bl	8003fb0 <DMA_CalcBaseAndBitshift>
 8003d04:	4603      	mov	r3, r0
 8003d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	223f      	movs	r2, #63	; 0x3f
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA_Start_IT+0x26>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e048      	b.n	8003e10 <HAL_DMA_Start_IT+0xb8>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d137      	bne.n	8003e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f8d4 	bl	8003f54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	223f      	movs	r2, #63	; 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0216 	orr.w	r2, r2, #22
 8003dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0201 	orr.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e005      	b.n	8003e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e26:	f7ff f981 	bl	800312c <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e052      	b.n	8003ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0216 	bic.w	r2, r2, #22
 8003e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695a      	ldr	r2, [r3, #20]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_DMA_Abort+0x62>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0208 	bic.w	r2, r2, #8
 8003e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e9a:	e013      	b.n	8003ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e9c:	f7ff f946 	bl	800312c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d90c      	bls.n	8003ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e015      	b.n	8003ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e4      	bne.n	8003e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	223f      	movs	r2, #63	; 0x3f
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00c      	b.n	8003f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	d108      	bne.n	8003f94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f92:	e007      	b.n	8003fa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	60da      	str	r2, [r3, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	3b10      	subs	r3, #16
 8003fc0:	4a13      	ldr	r2, [pc, #76]	; (8004010 <DMA_CalcBaseAndBitshift+0x60>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <DMA_CalcBaseAndBitshift+0x64>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d908      	bls.n	8003ff0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <DMA_CalcBaseAndBitshift+0x68>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	1d1a      	adds	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	659a      	str	r2, [r3, #88]	; 0x58
 8003fee:	e006      	b.n	8003ffe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <DMA_CalcBaseAndBitshift+0x68>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	08029db0 	.word	0x08029db0
 8004018:	fffffc00 	.word	0xfffffc00

0800401c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d11f      	bne.n	8004076 <DMA_CheckFifoParam+0x5a>
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b03      	cmp	r3, #3
 800403a:	d856      	bhi.n	80040ea <DMA_CheckFifoParam+0xce>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <DMA_CheckFifoParam+0x28>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004055 	.word	0x08004055
 8004048:	08004067 	.word	0x08004067
 800404c:	08004055 	.word	0x08004055
 8004050:	080040eb 	.word	0x080040eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d046      	beq.n	80040ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e043      	b.n	80040ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800406e:	d140      	bne.n	80040f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004074:	e03d      	b.n	80040f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	d121      	bne.n	80040c4 <DMA_CheckFifoParam+0xa8>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b03      	cmp	r3, #3
 8004084:	d837      	bhi.n	80040f6 <DMA_CheckFifoParam+0xda>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <DMA_CheckFifoParam+0x70>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040a3 	.word	0x080040a3
 8004094:	0800409d 	.word	0x0800409d
 8004098:	080040b5 	.word	0x080040b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e030      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d025      	beq.n	80040fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b2:	e022      	b.n	80040fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040bc:	d11f      	bne.n	80040fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040c2:	e01c      	b.n	80040fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d903      	bls.n	80040d2 <DMA_CheckFifoParam+0xb6>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d003      	beq.n	80040d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040d0:	e018      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
      break;
 80040d6:	e015      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e00b      	b.n	8004102 <DMA_CheckFifoParam+0xe6>
      break;
 80040ea:	bf00      	nop
 80040ec:	e00a      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e008      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e006      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;   
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <DMA_CheckFifoParam+0xe8>
      break;
 8004102:	bf00      	nop
    }
  } 
  
  return status; 
 8004104:	7bfb      	ldrb	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop

08004114 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e039      	b.n	800419a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7fd ff5a 	bl	8001ff4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	f023 0107 	bic.w	r1, r3, #7
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <HAL_DMA2D_Init+0x90>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d1      	ldr	r1, [r2, #12]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	430b      	orrs	r3, r1
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	ffffc000 	.word	0xffffc000

080041a8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_DMA2D_Start+0x1c>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e018      	b.n	80041f6 <HAL_DMA2D_Start+0x4e>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fa98 	bl	8004714 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d056      	beq.n	80042c8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800421a:	f7fe ff87 	bl	800312c <HAL_GetTick>
 800421e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004220:	e04b      	b.n	80042ba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004230:	2b00      	cmp	r3, #0
 8004232:	d023      	beq.n	800427c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2221      	movs	r2, #33	; 0x21
 8004266:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2204      	movs	r2, #4
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0a5      	b.n	80043c8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d01a      	beq.n	80042ba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004284:	f7fe ff52 	bl	800312c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d302      	bcc.n	800429a <HAL_DMA2D_PollForTransfer+0x9c>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2203      	movs	r2, #3
 80042aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e086      	b.n	80043c8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ac      	beq.n	8004222 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d061      	beq.n	80043ae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ea:	f7fe ff1f 	bl	800312c <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042f0:	e056      	b.n	80043a0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004300:	2b00      	cmp	r3, #0
 8004302:	d02e      	beq.n	8004362 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d005      	beq.n	800431a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	f043 0204 	orr.w	r2, r3, #4
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	f043 0202 	orr.w	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2229      	movs	r2, #41	; 0x29
 800434c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2204      	movs	r2, #4
 8004352:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e032      	b.n	80043c8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d01a      	beq.n	80043a0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe fedf 	bl	800312c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <HAL_DMA2D_PollForTransfer+0x182>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	f043 0220 	orr.w	r2, r3, #32
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2203      	movs	r2, #3
 8004390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e013      	b.n	80043c8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0a1      	beq.n	80042f2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2212      	movs	r2, #18
 80043b4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d026      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d021      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800440a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2201      	movs	r2, #1
 800441e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2204      	movs	r2, #4
 8004424:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d026      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d021      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004462:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2220      	movs	r2, #32
 800446a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	f043 0202 	orr.w	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2204      	movs	r2, #4
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d026      	beq.n	80044f0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d021      	beq.n	80044f0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	f043 0204 	orr.w	r2, r3, #4
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2204      	movs	r2, #4
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004512:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2204      	movs	r2, #4
 800451a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f853 	bl	80045c8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d024      	beq.n	8004576 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01f      	beq.n	8004576 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2202      	movs	r2, #2
 800454c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01f      	beq.n	80045c0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01a      	beq.n	80045c0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004598:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f80e 	bl	80045dc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_DMA2D_ConfigLayer+0x20>
 800460c:	2302      	movs	r3, #2
 800460e:	e079      	b.n	8004704 <HAL_DMA2D_ConfigLayer+0x114>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	3318      	adds	r3, #24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800463a:	4b35      	ldr	r3, [pc, #212]	; (8004710 <HAL_DMA2D_ConfigLayer+0x120>)
 800463c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b0a      	cmp	r3, #10
 8004644:	d003      	beq.n	800464e <HAL_DMA2D_ConfigLayer+0x5e>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b09      	cmp	r3, #9
 800464c:	d107      	bne.n	800465e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e005      	b.n	800466a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	061b      	lsls	r3, r3, #24
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d120      	bne.n	80046b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	43db      	mvns	r3, r3
 800467a:	ea02 0103 	and.w	r1, r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	430a      	orrs	r2, r1
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b0a      	cmp	r3, #10
 8004698:	d003      	beq.n	80046a2 <HAL_DMA2D_ConfigLayer+0xb2>
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b09      	cmp	r3, #9
 80046a0:	d127      	bne.n	80046f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
 80046b0:	e01f      	b.n	80046f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	ea02 0103 	and.w	r1, r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b0a      	cmp	r3, #10
 80046da:	d003      	beq.n	80046e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b09      	cmp	r3, #9
 80046e2:	d106      	bne.n	80046f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046f0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	ff03000f 	.word	0xff03000f

08004714 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004714:	b480      	push	{r7}
 8004716:	b08b      	sub	sp, #44	; 0x2c
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	041a      	lsls	r2, r3, #16
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	431a      	orrs	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800474c:	d174      	bne.n	8004838 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004754:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800475c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004764:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	431a      	orrs	r2, r3
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	4313      	orrs	r3, r2
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
 8004784:	e053      	b.n	800482e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d106      	bne.n	800479c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e048      	b.n	800482e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d111      	bne.n	80047c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	0cdb      	lsrs	r3, r3, #19
 80047a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	0a9b      	lsrs	r3, r3, #10
 80047ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	02db      	lsls	r3, r3, #11
 80047be:	4313      	orrs	r3, r2
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
 80047c6:	e032      	b.n	800482e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d117      	bne.n	8004800 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	0fdb      	lsrs	r3, r3, #31
 80047d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	0cdb      	lsrs	r3, r3, #19
 80047da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	0adb      	lsrs	r3, r3, #11
 80047e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	08db      	lsrs	r3, r3, #3
 80047e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	029b      	lsls	r3, r3, #10
 80047f0:	431a      	orrs	r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	03db      	lsls	r3, r3, #15
 80047f6:	4313      	orrs	r3, r2
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	e016      	b.n	800482e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	0f1b      	lsrs	r3, r3, #28
 8004804:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	0d1b      	lsrs	r3, r3, #20
 800480a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	0b1b      	lsrs	r3, r3, #12
 8004810:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	011a      	lsls	r2, r3, #4
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	431a      	orrs	r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	031b      	lsls	r3, r3, #12
 8004826:	4313      	orrs	r3, r2
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004836:	e003      	b.n	8004840 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	60da      	str	r2, [r3, #12]
}
 8004840:	bf00      	nop
 8004842:	372c      	adds	r7, #44	; 0x2c
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	61fb      	str	r3, [r7, #28]
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800485c:	4ba9      	ldr	r3, [pc, #676]	; (8004b04 <HAL_ETH_Init+0x2b8>)
 800485e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004864:	2300      	movs	r3, #0
 8004866:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e181      	b.n	8004b76 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f00d f96a 	bl	8011b60 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488c:	4b9e      	ldr	r3, [pc, #632]	; (8004b08 <HAL_ETH_Init+0x2bc>)
 800488e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004890:	4a9d      	ldr	r2, [pc, #628]	; (8004b08 <HAL_ETH_Init+0x2bc>)
 8004892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004896:	6453      	str	r3, [r2, #68]	; 0x44
 8004898:	4b9b      	ldr	r3, [pc, #620]	; (8004b08 <HAL_ETH_Init+0x2bc>)
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80048a4:	4b99      	ldr	r3, [pc, #612]	; (8004b0c <HAL_ETH_Init+0x2c0>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a98      	ldr	r2, [pc, #608]	; (8004b0c <HAL_ETH_Init+0x2c0>)
 80048aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80048b0:	4b96      	ldr	r3, [pc, #600]	; (8004b0c <HAL_ETH_Init+0x2c0>)
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4994      	ldr	r1, [pc, #592]	; (8004b0c <HAL_ETH_Init+0x2c0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80048d6:	f7fe fc29 	bl	800312c <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80048dc:	e011      	b.n	8004902 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80048de:	f7fe fc25 	bl	800312c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048ec:	d909      	bls.n	8004902 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e139      	b.n	8004b76 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e4      	bne.n	80048de <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f023 031c 	bic.w	r3, r3, #28
 8004922:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004924:	f004 ff50 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8004928:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	4a78      	ldr	r2, [pc, #480]	; (8004b10 <HAL_ETH_Init+0x2c4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d908      	bls.n	8004944 <HAL_ETH_Init+0xf8>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4a77      	ldr	r2, [pc, #476]	; (8004b14 <HAL_ETH_Init+0x2c8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d804      	bhi.n	8004944 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f043 0308 	orr.w	r3, r3, #8
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	e027      	b.n	8004994 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4a73      	ldr	r2, [pc, #460]	; (8004b14 <HAL_ETH_Init+0x2c8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d908      	bls.n	800495e <HAL_ETH_Init+0x112>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	4a6d      	ldr	r2, [pc, #436]	; (8004b04 <HAL_ETH_Init+0x2b8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d204      	bcs.n	800495e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f043 030c 	orr.w	r3, r3, #12
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	e01a      	b.n	8004994 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	4a68      	ldr	r2, [pc, #416]	; (8004b04 <HAL_ETH_Init+0x2b8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d303      	bcc.n	800496e <HAL_ETH_Init+0x122>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4a6b      	ldr	r2, [pc, #428]	; (8004b18 <HAL_ETH_Init+0x2cc>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d911      	bls.n	8004992 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <HAL_ETH_Init+0x2cc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d908      	bls.n	8004988 <HAL_ETH_Init+0x13c>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	4a68      	ldr	r2, [pc, #416]	; (8004b1c <HAL_ETH_Init+0x2d0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d804      	bhi.n	8004988 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f043 0304 	orr.w	r3, r3, #4
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e005      	b.n	8004994 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f043 0310 	orr.w	r3, r3, #16
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e000      	b.n	8004994 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004992:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800499c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049a0:	2100      	movs	r1, #0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fc17 	bl	80051d6 <HAL_ETH_WritePHYRegister>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80049b2:	6939      	ldr	r1, [r7, #16]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fdcd 	bl	8005554 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0d7      	b.n	8004b76 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80049c6:	f640 70ff 	movw	r0, #4095	; 0xfff
 80049ca:	f7fe fbbb 	bl	8003144 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 80a4 	beq.w	8004b20 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d8:	f7fe fba8 	bl	800312c <HAL_GetTick>
 80049dc:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	461a      	mov	r2, r3
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fb8d 	bl	8005106 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80049ec:	f7fe fb9e 	bl	800312c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d90f      	bls.n	8004a1e <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004a02:	6939      	ldr	r1, [r7, #16]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fda5 	bl	8005554 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0ab      	b.n	8004b76 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0da      	beq.n	80049de <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004a28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fbd1 	bl	80051d6 <HAL_ETH_WritePHYRegister>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004a3e:	6939      	ldr	r1, [r7, #16]
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fd87 	bl	8005554 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e091      	b.n	8004b76 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a52:	f7fe fb6b 	bl	800312c <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2101      	movs	r1, #1
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb50 	bl	8005106 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004a66:	f7fe fb61 	bl	800312c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d90f      	bls.n	8004a98 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004a7c:	6939      	ldr	r1, [r7, #16]
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fd68 	bl	8005554 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e06e      	b.n	8004b76 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0da      	beq.n	8004a58 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	2110      	movs	r1, #16
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb2b 	bl	8005106 <HAL_ETH_ReadPHYRegister>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004aba:	6939      	ldr	r1, [r7, #16]
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fd49 	bl	8005554 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004aca:	2301      	movs	r3, #1
 8004acc:	e053      	b.n	8004b76 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d004      	beq.n	8004ae2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ade:	60da      	str	r2, [r3, #12]
 8004ae0:	e002      	b.n	8004ae8 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	e034      	b.n	8004b64 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b00:	609a      	str	r2, [r3, #8]
 8004b02:	e02f      	b.n	8004b64 <HAL_ETH_Init+0x318>
 8004b04:	03938700 	.word	0x03938700
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40013800 	.word	0x40013800
 8004b10:	01312cff 	.word	0x01312cff
 8004b14:	02160ebf 	.word	0x02160ebf
 8004b18:	05f5e0ff 	.word	0x05f5e0ff
 8004b1c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	08db      	lsrs	r3, r3, #3
 8004b26:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	2100      	movs	r1, #0
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb4c 	bl	80051d6 <HAL_ETH_WritePHYRegister>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004b48:	6939      	ldr	r1, [r7, #16]
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fd02 	bl	8005554 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e00c      	b.n	8004b76 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004b5c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004b60:	f7fe faf0 	bl	8003144 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004b64:	6939      	ldr	r1, [r7, #16]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fcf4 	bl	8005554 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop

08004b80 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_ETH_DMATxDescListInit+0x20>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e052      	b.n	8004c46 <HAL_ETH_DMATxDescListInit+0xc6>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e030      	b.n	8004c1e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	015b      	lsls	r3, r3, #5
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bcc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004bd4:	fb02 f303 	mul.w	r3, r2, r3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d105      	bne.n	8004bf6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d208      	bcs.n	8004c12 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	4413      	add	r3, r2
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e002      	b.n	8004c18 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d3ca      	bcc.n	8004bbc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	f241 0310 	movw	r3, #4112	; 0x1010
 8004c30:	440b      	add	r3, r1
 8004c32:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b087      	sub	sp, #28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_ETH_DMARxDescListInit+0x20>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e056      	b.n	8004d20 <HAL_ETH_DMARxDescListInit+0xce>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e034      	b.n	8004cf8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	015b      	lsls	r3, r3, #5
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c9e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004ca6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d105      	bne.n	8004cd0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d208      	bcs.n	8004cec <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	015b      	lsls	r3, r3, #5
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	60da      	str	r2, [r3, #12]
 8004cea:	e002      	b.n	8004cf2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d3c6      	bcc.n	8004c8e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	f241 030c 	movw	r3, #4108	; 0x100c
 8004d0a:	440b      	add	r3, r1
 8004d0c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_ETH_TransmitFrame+0x24>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e0cd      	b.n	8004eec <HAL_ETH_TransmitFrame+0x1c0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004d76:	2301      	movs	r3, #1
 8004d78:	e0b8      	b.n	8004eec <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	da09      	bge.n	8004d98 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2212      	movs	r2, #18
 8004d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0a9      	b.n	8004eec <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d915      	bls.n	8004dce <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4a54      	ldr	r2, [pc, #336]	; (8004ef8 <HAL_ETH_TransmitFrame+0x1cc>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	0a9b      	lsrs	r3, r3, #10
 8004dac:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4b51      	ldr	r3, [pc, #324]	; (8004ef8 <HAL_ETH_TransmitFrame+0x1cc>)
 8004db2:	fba3 1302 	umull	r1, r3, r3, r2
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004dbc:	fb01 f303 	mul.w	r3, r1, r3
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	e001      	b.n	8004dd2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d11c      	bne.n	8004e12 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004de6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004df2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e02:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e10:	e04b      	b.n	8004eaa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e044      	b.n	8004ea2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e26:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e46:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d116      	bne.n	8004e80 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004e60:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <HAL_ETH_TransmitFrame+0x1d0>)
 8004e66:	fb02 f203 	mul.w	r2, r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e72:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004e7e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e8e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3b6      	bcc.n	8004e18 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f241 0314 	movw	r3, #4116	; 0x1014
 8004eb2:	4413      	add	r3, r2
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ec6:	4413      	add	r3, r2
 8004ec8:	2204      	movs	r2, #4
 8004eca:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ed4:	4413      	add	r3, r2
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	ac02b00b 	.word	0xac02b00b
 8004efc:	fffffa0c 	.word	0xfffffa0c

08004f00 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e074      	b.n	8005004 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2202      	movs	r2, #2
 8004f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004f2a:	e05a      	b.n	8004fe2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d10d      	bne.n	8004f5e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5c:	e041      	b.n	8004fe2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
 8004f82:	e02e      	b.n	8004fe2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d103      	bne.n	8004fa6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004fb2:	1f1a      	subs	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e010      	b.n	8005004 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	db02      	blt.n	8004ff2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d99c      	bls.n	8004f2c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005020:	4413      	add	r3, r2
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d112      	bne.n	8005052 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f00c fe39 	bl	8011ca4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	f241 0314 	movw	r3, #4116	; 0x1014
 800503a:	4413      	add	r3, r2
 800503c:	2240      	movs	r2, #64	; 0x40
 800503e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005050:	e01b      	b.n	800508a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f241 0314 	movw	r3, #4116	; 0x1014
 800505a:	4413      	add	r3, r2
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	d111      	bne.n	800508a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f839 	bl	80050de <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	f241 0314 	movw	r3, #4116	; 0x1014
 8005074:	4413      	add	r3, r2
 8005076:	2201      	movs	r2, #1
 8005078:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	f241 0314 	movw	r3, #4116	; 0x1014
 8005092:	4413      	add	r3, r2
 8005094:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005098:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	f241 0314 	movw	r3, #4116	; 0x1014
 80050a2:	4413      	add	r3, r2
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d112      	bne.n	80050d6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f81e 	bl	80050f2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	f241 0314 	movw	r3, #4116	; 0x1014
 80050be:	4413      	add	r3, r2
 80050c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050c4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	460b      	mov	r3, r1
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b82      	cmp	r3, #130	; 0x82
 8005126:	d101      	bne.n	800512c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	e050      	b.n	80051ce <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2282      	movs	r2, #130	; 0x82
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 031c 	and.w	r3, r3, #28
 8005142:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8a1b      	ldrh	r3, [r3, #16]
 8005148:	02db      	lsls	r3, r3, #11
 800514a:	b29b      	uxth	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0302 	bic.w	r3, r3, #2
 8005166:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005178:	f7fd ffd8 	bl	800312c <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800517e:	e015      	b.n	80051ac <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005180:	f7fd ffd4 	bl	800312c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518e:	d309      	bcc.n	80051a4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e014      	b.n	80051ce <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e4      	bne.n	8005180 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	460b      	mov	r3, r1
 80051e0:	607a      	str	r2, [r7, #4]
 80051e2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b42      	cmp	r3, #66	; 0x42
 80051f6:	d101      	bne.n	80051fc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80051f8:	2302      	movs	r3, #2
 80051fa:	e04e      	b.n	800529a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2242      	movs	r2, #66	; 0x42
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f003 031c 	and.w	r3, r3, #28
 8005212:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8a1b      	ldrh	r3, [r3, #16]
 8005218:	02db      	lsls	r3, r3, #11
 800521a:	b29b      	uxth	r3, r3
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	019b      	lsls	r3, r3, #6
 8005226:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f043 0302 	orr.w	r3, r3, #2
 8005236:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005252:	f7fd ff6b 	bl	800312c <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005258:	e015      	b.n	8005286 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800525a:	f7fd ff67 	bl	800312c <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d309      	bcc.n	800527e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e00d      	b.n	800529a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e4      	bne.n	800525a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_ETH_Start+0x16>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e01f      	b.n	80052f8 <HAL_ETH_Start+0x56>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb45 	bl	8005958 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fb7c 	bl	80059cc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fc13 	bl	8005b00 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fbb0 	bl	8005a40 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fbdd 	bl	8005aa0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_ETH_Stop+0x16>
 8005312:	2302      	movs	r3, #2
 8005314:	e01f      	b.n	8005356 <HAL_ETH_Stop+0x56>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2202      	movs	r2, #2
 8005322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fba2 	bl	8005a70 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fbcf 	bl	8005ad0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fb67 	bl	8005a06 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fbe1 	bl	8005b00 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb27 	bl	8005992 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_ETH_ConfigMAC+0x1c>
 8005378:	2302      	movs	r3, #2
 800537a:	e0e4      	b.n	8005546 <HAL_ETH_ConfigMAC+0x1e6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 80b1 	beq.w	80054f6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4b6c      	ldr	r3, [pc, #432]	; (8005550 <HAL_ETH_ConfigMAC+0x1f0>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80053ac:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80053b2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80053b8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80053be:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80053c4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80053ca:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80053d0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80053d6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80053dc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80053e2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80053e8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80053ee:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005406:	2001      	movs	r0, #1
 8005408:	f7fd fe9c 	bl	8003144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800541c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005422:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005428:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800542e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005434:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800543a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005446:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005448:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005452:	2001      	movs	r0, #1
 8005454:	f7fd fe76 	bl	8003144 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005468:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005472:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8005490:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005496:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800549c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80054a2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80054a8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80054c0:	2001      	movs	r0, #1
 80054c2:	f7fd fe3f 	bl	8003144 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f7fd fe2c 	bl	8003144 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	61da      	str	r2, [r3, #28]
 80054f4:	e01e      	b.n	8005534 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005504:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005526:	2001      	movs	r0, #1
 8005528:	f7fd fe0c 	bl	8003144 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	ff20810f 	.word	0xff20810f

08005554 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b0b0      	sub	sp, #192	; 0xc0
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800555e:	2300      	movs	r3, #0
 8005560:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005570:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005578:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800557a:	2300      	movs	r3, #0
 800557c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800557e:	2300      	movs	r3, #0
 8005580:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005582:	2300      	movs	r3, #0
 8005584:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005586:	2300      	movs	r3, #0
 8005588:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800558a:	2300      	movs	r3, #0
 800558c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800558e:	2300      	movs	r3, #0
 8005590:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800559a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800559e:	663b      	str	r3, [r7, #96]	; 0x60
 80055a0:	e001      	b.n	80055a6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80055b0:	2300      	movs	r3, #0
 80055b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80055bc:	2300      	movs	r3, #0
 80055be:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800560c:	2300      	movs	r3, #0
 800560e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8005618:	2300      	movs	r3, #0
 800561a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8005628:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800562c:	4bab      	ldr	r3, [pc, #684]	; (80058dc <ETH_MACDMAConfig+0x388>)
 800562e:	4013      	ands	r3, r2
 8005630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005634:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005638:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800563a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800563c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005640:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005646:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800564a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800564c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800564e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005654:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005658:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800565a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800565c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800565e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005660:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005664:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005668:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800566a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800567c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005688:	2001      	movs	r0, #1
 800568a:	f7fd fd5b 	bl	8003144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005696:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800569a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800569c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800569e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80056a0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80056a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80056a6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80056a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80056ac:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80056ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80056b2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80056b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80056b8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80056bc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80056c4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80056c6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80056d2:	2001      	movs	r0, #1
 80056d4:	f7fd fd36 	bl	8003144 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056e0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056ea:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80056f4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005700:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005704:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005708:	4013      	ands	r3, r2
 800570a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800570e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005712:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005718:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800571a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800571e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005724:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800572a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800572c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005730:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005732:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005744:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005750:	2001      	movs	r0, #1
 8005752:	f7fd fcf7 	bl	8003144 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800575e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005760:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005764:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800577a:	2001      	movs	r0, #1
 800577c:	f7fd fce2 	bl	8003144 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005788:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800578a:	2300      	movs	r3, #0
 800578c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800578e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005792:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800579c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80057ae:	2304      	movs	r3, #4
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80057b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80057b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80057be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80057d2:	2300      	movs	r3, #0
 80057d4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	f241 0318 	movw	r3, #4120	; 0x1018
 80057de:	4413      	add	r3, r2
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80057e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057ea:	4b3d      	ldr	r3, [pc, #244]	; (80058e0 <ETH_MACDMAConfig+0x38c>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80057f2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80057f4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80057f6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80057f8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80057fa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80057fc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80057fe:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005800:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005802:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005804:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005806:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005808:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800580a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800580e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005812:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005814:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f241 0318 	movw	r3, #4120	; 0x1018
 8005826:	4413      	add	r3, r2
 8005828:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800582c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	f241 0318 	movw	r3, #4120	; 0x1018
 8005836:	4413      	add	r3, r2
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800583e:	2001      	movs	r0, #1
 8005840:	f7fd fc80 	bl	8003144 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	f241 0318 	movw	r3, #4120	; 0x1018
 800584c:	4413      	add	r3, r2
 800584e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005852:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005858:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800585a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800585c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005860:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005864:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005868:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800586a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800586e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800588c:	2001      	movs	r0, #1
 800588e:	f7fd fc59 	bl	8003144 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800589e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10d      	bne.n	80058c4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f241 031c 	movw	r3, #4124	; 0x101c
 80058b0:	4413      	add	r3, r2
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6811      	ldr	r1, [r2, #0]
 80058b8:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <ETH_MACDMAConfig+0x390>)
 80058ba:	431a      	orrs	r2, r3
 80058bc:	f241 031c 	movw	r3, #4124	; 0x101c
 80058c0:	440b      	add	r3, r1
 80058c2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	461a      	mov	r2, r3
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f80b 	bl	80058e8 <ETH_MACAddressConfig>
}
 80058d2:	bf00      	nop
 80058d4:	37c0      	adds	r7, #192	; 0xc0
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	ff20810f 	.word	0xff20810f
 80058e0:	f8de3f23 	.word	0xf8de3f23
 80058e4:	00010040 	.word	0x00010040

080058e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3305      	adds	r3, #5
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	3204      	adds	r2, #4
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <ETH_MACAddressConfig+0x68>)
 800590a:	4413      	add	r3, r2
 800590c:	461a      	mov	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	3303      	adds	r3, #3
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	061a      	lsls	r2, r3, #24
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3302      	adds	r3, #2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	4313      	orrs	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <ETH_MACAddressConfig+0x6c>)
 800593a:	4413      	add	r3, r2
 800593c:	461a      	mov	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6013      	str	r3, [r2, #0]
}
 8005942:	bf00      	nop
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40028040 	.word	0x40028040
 8005954:	40028044 	.word	0x40028044

08005958 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0208 	orr.w	r2, r2, #8
 8005972:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800597c:	2001      	movs	r0, #1
 800597e:	f7fd fbe1 	bl	8003144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0208 	bic.w	r2, r2, #8
 80059ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059b6:	2001      	movs	r0, #1
 80059b8:	f7fd fbc4 	bl	8003144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	601a      	str	r2, [r3, #0]
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0204 	orr.w	r2, r2, #4
 80059e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7fd fba7 	bl	8003144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0204 	bic.w	r2, r2, #4
 8005a20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7fd fb8a 	bl	8003144 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005a50:	4413      	add	r3, r2
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6811      	ldr	r1, [r2, #0]
 8005a58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005a60:	440b      	add	r3, r1
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005a80:	4413      	add	r3, r2
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6811      	ldr	r1, [r2, #0]
 8005a88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005a90:	440b      	add	r3, r1
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ab0:	4413      	add	r3, r2
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6811      	ldr	r1, [r2, #0]
 8005ab8:	f043 0202 	orr.w	r2, r3, #2
 8005abc:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ac0:	440b      	add	r3, r1
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f241 0318 	movw	r3, #4120	; 0x1018
 8005ae0:	4413      	add	r3, r2
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6811      	ldr	r1, [r2, #0]
 8005ae8:	f023 0202 	bic.w	r2, r3, #2
 8005aec:	f241 0318 	movw	r3, #4120	; 0x1018
 8005af0:	440b      	add	r3, r1
 8005af2:	601a      	str	r2, [r3, #0]
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b14:	4413      	add	r3, r2
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6811      	ldr	r1, [r2, #0]
 8005b1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b20:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b24:	440b      	add	r3, r1
 8005b26:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b30:	4413      	add	r3, r2
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b36:	2001      	movs	r0, #1
 8005b38:	f7fd fb04 	bl	8003144 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b46:	440b      	add	r3, r1
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b62:	2300      	movs	r3, #0
 8005b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	e175      	b.n	8005e60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b74:	2201      	movs	r2, #1
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4013      	ands	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	f040 8164 	bne.w	8005e5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d005      	beq.n	8005baa <HAL_GPIO_Init+0x56>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d130      	bne.n	8005c0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005be0:	2201      	movs	r2, #1
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	091b      	lsrs	r3, r3, #4
 8005bf6:	f003 0201 	and.w	r2, r3, #1
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d017      	beq.n	8005c48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	2203      	movs	r2, #3
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0303 	and.w	r3, r3, #3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d123      	bne.n	8005c9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	08da      	lsrs	r2, r3, #3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3208      	adds	r2, #8
 8005c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f003 0307 	and.w	r3, r3, #7
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	220f      	movs	r2, #15
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	08da      	lsrs	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3208      	adds	r2, #8
 8005c96:	69b9      	ldr	r1, [r7, #24]
 8005c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 0203 	and.w	r2, r3, #3
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80be 	beq.w	8005e5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cde:	4b66      	ldr	r3, [pc, #408]	; (8005e78 <HAL_GPIO_Init+0x324>)
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	4a65      	ldr	r2, [pc, #404]	; (8005e78 <HAL_GPIO_Init+0x324>)
 8005ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cea:	4b63      	ldr	r3, [pc, #396]	; (8005e78 <HAL_GPIO_Init+0x324>)
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005cf6:	4a61      	ldr	r2, [pc, #388]	; (8005e7c <HAL_GPIO_Init+0x328>)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a58      	ldr	r2, [pc, #352]	; (8005e80 <HAL_GPIO_Init+0x32c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d037      	beq.n	8005d92 <HAL_GPIO_Init+0x23e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a57      	ldr	r2, [pc, #348]	; (8005e84 <HAL_GPIO_Init+0x330>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_GPIO_Init+0x23a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a56      	ldr	r2, [pc, #344]	; (8005e88 <HAL_GPIO_Init+0x334>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02b      	beq.n	8005d8a <HAL_GPIO_Init+0x236>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a55      	ldr	r2, [pc, #340]	; (8005e8c <HAL_GPIO_Init+0x338>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d025      	beq.n	8005d86 <HAL_GPIO_Init+0x232>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a54      	ldr	r2, [pc, #336]	; (8005e90 <HAL_GPIO_Init+0x33c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <HAL_GPIO_Init+0x22e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a53      	ldr	r2, [pc, #332]	; (8005e94 <HAL_GPIO_Init+0x340>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d019      	beq.n	8005d7e <HAL_GPIO_Init+0x22a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_GPIO_Init+0x344>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_GPIO_Init+0x226>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a51      	ldr	r2, [pc, #324]	; (8005e9c <HAL_GPIO_Init+0x348>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00d      	beq.n	8005d76 <HAL_GPIO_Init+0x222>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a50      	ldr	r2, [pc, #320]	; (8005ea0 <HAL_GPIO_Init+0x34c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <HAL_GPIO_Init+0x21e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a4f      	ldr	r2, [pc, #316]	; (8005ea4 <HAL_GPIO_Init+0x350>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <HAL_GPIO_Init+0x21a>
 8005d6a:	2309      	movs	r3, #9
 8005d6c:	e012      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d6e:	230a      	movs	r3, #10
 8005d70:	e010      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d72:	2308      	movs	r3, #8
 8005d74:	e00e      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e00c      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d7a:	2306      	movs	r3, #6
 8005d7c:	e00a      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d7e:	2305      	movs	r3, #5
 8005d80:	e008      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d82:	2304      	movs	r3, #4
 8005d84:	e006      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d86:	2303      	movs	r3, #3
 8005d88:	e004      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e002      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_GPIO_Init+0x240>
 8005d92:	2300      	movs	r3, #0
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	f002 0203 	and.w	r2, r2, #3
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	4093      	lsls	r3, r2
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005da4:	4935      	ldr	r1, [pc, #212]	; (8005e7c <HAL_GPIO_Init+0x328>)
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	089b      	lsrs	r3, r3, #2
 8005daa:	3302      	adds	r3, #2
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005db2:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dd6:	4a34      	ldr	r2, [pc, #208]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ddc:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4013      	ands	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e00:	4a29      	ldr	r2, [pc, #164]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e54:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <HAL_GPIO_Init+0x354>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b0f      	cmp	r3, #15
 8005e64:	f67f ae86 	bls.w	8005b74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	3724      	adds	r7, #36	; 0x24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	40013800 	.word	0x40013800
 8005e80:	40020000 	.word	0x40020000
 8005e84:	40020400 	.word	0x40020400
 8005e88:	40020800 	.word	0x40020800
 8005e8c:	40020c00 	.word	0x40020c00
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40021400 	.word	0x40021400
 8005e98:	40021800 	.word	0x40021800
 8005e9c:	40021c00 	.word	0x40021c00
 8005ea0:	40022000 	.word	0x40022000
 8005ea4:	40022400 	.word	0x40022400
 8005ea8:	40013c00 	.word	0x40013c00

08005eac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e0d9      	b.n	800607c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ec8:	2201      	movs	r2, #1
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	f040 80c9 	bne.w	8006076 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005ee4:	4a6b      	ldr	r2, [pc, #428]	; (8006094 <HAL_GPIO_DeInit+0x1e8>)
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	3302      	adds	r3, #2
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	220f      	movs	r2, #15
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	4013      	ands	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a63      	ldr	r2, [pc, #396]	; (8006098 <HAL_GPIO_DeInit+0x1ec>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d037      	beq.n	8005f7e <HAL_GPIO_DeInit+0xd2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a62      	ldr	r2, [pc, #392]	; (800609c <HAL_GPIO_DeInit+0x1f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d031      	beq.n	8005f7a <HAL_GPIO_DeInit+0xce>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a61      	ldr	r2, [pc, #388]	; (80060a0 <HAL_GPIO_DeInit+0x1f4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d02b      	beq.n	8005f76 <HAL_GPIO_DeInit+0xca>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a60      	ldr	r2, [pc, #384]	; (80060a4 <HAL_GPIO_DeInit+0x1f8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d025      	beq.n	8005f72 <HAL_GPIO_DeInit+0xc6>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a5f      	ldr	r2, [pc, #380]	; (80060a8 <HAL_GPIO_DeInit+0x1fc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01f      	beq.n	8005f6e <HAL_GPIO_DeInit+0xc2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a5e      	ldr	r2, [pc, #376]	; (80060ac <HAL_GPIO_DeInit+0x200>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d019      	beq.n	8005f6a <HAL_GPIO_DeInit+0xbe>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a5d      	ldr	r2, [pc, #372]	; (80060b0 <HAL_GPIO_DeInit+0x204>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_GPIO_DeInit+0xba>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a5c      	ldr	r2, [pc, #368]	; (80060b4 <HAL_GPIO_DeInit+0x208>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00d      	beq.n	8005f62 <HAL_GPIO_DeInit+0xb6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a5b      	ldr	r2, [pc, #364]	; (80060b8 <HAL_GPIO_DeInit+0x20c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <HAL_GPIO_DeInit+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a5a      	ldr	r2, [pc, #360]	; (80060bc <HAL_GPIO_DeInit+0x210>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <HAL_GPIO_DeInit+0xae>
 8005f56:	2309      	movs	r3, #9
 8005f58:	e012      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f5a:	230a      	movs	r3, #10
 8005f5c:	e010      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	e00e      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f62:	2307      	movs	r3, #7
 8005f64:	e00c      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f66:	2306      	movs	r3, #6
 8005f68:	e00a      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f6a:	2305      	movs	r3, #5
 8005f6c:	e008      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f6e:	2304      	movs	r3, #4
 8005f70:	e006      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f72:	2303      	movs	r3, #3
 8005f74:	e004      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e002      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <HAL_GPIO_DeInit+0xd4>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	f002 0203 	and.w	r2, r2, #3
 8005f86:	0092      	lsls	r2, r2, #2
 8005f88:	4093      	lsls	r3, r2
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d132      	bne.n	8005ff6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f90:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	4949      	ldr	r1, [pc, #292]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f9e:	4b48      	ldr	r3, [pc, #288]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	4946      	ldr	r1, [pc, #280]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fac:	4b44      	ldr	r3, [pc, #272]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	4942      	ldr	r1, [pc, #264]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fba:	4b41      	ldr	r3, [pc, #260]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fbc:	689a      	ldr	r2, [r3, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	493f      	ldr	r1, [pc, #252]	; (80060c0 <HAL_GPIO_DeInit+0x214>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	220f      	movs	r2, #15
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005fd8:	4a2e      	ldr	r2, [pc, #184]	; (8006094 <HAL_GPIO_DeInit+0x1e8>)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	3302      	adds	r3, #2
 8005fe0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	43da      	mvns	r2, r3
 8005fe8:	482a      	ldr	r0, [pc, #168]	; (8006094 <HAL_GPIO_DeInit+0x1e8>)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	400a      	ands	r2, r1
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	2103      	movs	r1, #3
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	08da      	lsrs	r2, r3, #3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3208      	adds	r2, #8
 8006014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	220f      	movs	r2, #15
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	08d2      	lsrs	r2, r2, #3
 800602c:	4019      	ands	r1, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3208      	adds	r2, #8
 8006032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2103      	movs	r1, #3
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	401a      	ands	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	2101      	movs	r1, #1
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	2103      	movs	r1, #3
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	401a      	ands	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	3301      	adds	r3, #1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f af22 	bls.w	8005ec8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40013800 	.word	0x40013800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020400 	.word	0x40020400
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020c00 	.word	0x40020c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40021400 	.word	0x40021400
 80060b0:	40021800 	.word	0x40021800
 80060b4:	40021c00 	.word	0x40021c00
 80060b8:	40022000 	.word	0x40022000
 80060bc:	40022400 	.word	0x40022400
 80060c0:	40013c00 	.word	0x40013c00

080060c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e001      	b.n	80060e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	807b      	strh	r3, [r7, #2]
 8006100:	4613      	mov	r3, r2
 8006102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006104:	787b      	ldrb	r3, [r7, #1]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800610a:	887a      	ldrh	r2, [r7, #2]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006110:	e003      	b.n	800611a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006112:	887b      	ldrh	r3, [r7, #2]
 8006114:	041a      	lsls	r2, r3, #16
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	619a      	str	r2, [r3, #24]
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006128:	b08f      	sub	sp, #60	; 0x3c
 800612a:	af0a      	add	r7, sp, #40	; 0x28
 800612c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e054      	b.n	80061e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f01e ff1c 	bl	8024f90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2203      	movs	r2, #3
 800615c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f008 ff8f 	bl	800f09a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	603b      	str	r3, [r7, #0]
 8006182:	687e      	ldr	r6, [r7, #4]
 8006184:	466d      	mov	r5, sp
 8006186:	f106 0410 	add.w	r4, r6, #16
 800618a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800618c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800618e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006196:	e885 0003 	stmia.w	r5, {r0, r1}
 800619a:	1d33      	adds	r3, r6, #4
 800619c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800619e:	6838      	ldr	r0, [r7, #0]
 80061a0:	f008 ff12 	bl	800efc8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f008 ff86 	bl	800f0bc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	687e      	ldr	r6, [r7, #4]
 80061b8:	466d      	mov	r5, sp
 80061ba:	f106 0410 	add.w	r4, r6, #16
 80061be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80061ce:	1d33      	adds	r3, r6, #4
 80061d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d2:	6838      	ldr	r0, [r7, #0]
 80061d4:	f009 f908 	bl	800f3e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3714      	adds	r7, #20
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80061ea:	b590      	push	{r4, r7, lr}
 80061ec:	b089      	sub	sp, #36	; 0x24
 80061ee:	af04      	add	r7, sp, #16
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	4608      	mov	r0, r1
 80061f4:	4611      	mov	r1, r2
 80061f6:	461a      	mov	r2, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	70fb      	strb	r3, [r7, #3]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70bb      	strb	r3, [r7, #2]
 8006200:	4613      	mov	r3, r2
 8006202:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_HCD_HC_Init+0x28>
 800620e:	2302      	movs	r3, #2
 8006210:	e076      	b.n	8006300 <HAL_HCD_HC_Init+0x116>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	212c      	movs	r1, #44	; 0x2c
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	4413      	add	r3, r2
 8006226:	333d      	adds	r3, #61	; 0x3d
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	212c      	movs	r1, #44	; 0x2c
 8006232:	fb01 f303 	mul.w	r3, r1, r3
 8006236:	4413      	add	r3, r2
 8006238:	3338      	adds	r3, #56	; 0x38
 800623a:	787a      	ldrb	r2, [r7, #1]
 800623c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	212c      	movs	r1, #44	; 0x2c
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	4413      	add	r3, r2
 800624a:	3340      	adds	r3, #64	; 0x40
 800624c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800624e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	212c      	movs	r1, #44	; 0x2c
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	4413      	add	r3, r2
 800625c:	3339      	adds	r3, #57	; 0x39
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	212c      	movs	r1, #44	; 0x2c
 8006268:	fb01 f303 	mul.w	r3, r1, r3
 800626c:	4413      	add	r3, r2
 800626e:	333f      	adds	r3, #63	; 0x3f
 8006270:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006274:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	78ba      	ldrb	r2, [r7, #2]
 800627a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800627e:	b2d0      	uxtb	r0, r2
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	212c      	movs	r1, #44	; 0x2c
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	4413      	add	r3, r2
 800628a:	333a      	adds	r3, #58	; 0x3a
 800628c:	4602      	mov	r2, r0
 800628e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006290:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da09      	bge.n	80062ac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	212c      	movs	r1, #44	; 0x2c
 800629e:	fb01 f303 	mul.w	r3, r1, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	333b      	adds	r3, #59	; 0x3b
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e008      	b.n	80062be <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	212c      	movs	r1, #44	; 0x2c
 80062b2:	fb01 f303 	mul.w	r3, r1, r3
 80062b6:	4413      	add	r3, r2
 80062b8:	333b      	adds	r3, #59	; 0x3b
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	212c      	movs	r1, #44	; 0x2c
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	333c      	adds	r3, #60	; 0x3c
 80062cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80062d0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	787c      	ldrb	r4, [r7, #1]
 80062d8:	78ba      	ldrb	r2, [r7, #2]
 80062da:	78f9      	ldrb	r1, [r7, #3]
 80062dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062de:	9302      	str	r3, [sp, #8]
 80062e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062e4:	9301      	str	r3, [sp, #4]
 80062e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4623      	mov	r3, r4
 80062ee:	f009 f9f5 	bl	800f6dc <USB_HC_Init>
 80062f2:	4603      	mov	r3, r0
 80062f4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	bd90      	pop	{r4, r7, pc}

08006308 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_HCD_HC_Halt+0x1e>
 8006322:	2302      	movs	r3, #2
 8006324:	e00f      	b.n	8006346 <HAL_HCD_HC_Halt+0x3e>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f009 fc41 	bl	800fbbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	461a      	mov	r2, r3
 800635e:	4603      	mov	r3, r0
 8006360:	70fb      	strb	r3, [r7, #3]
 8006362:	460b      	mov	r3, r1
 8006364:	70bb      	strb	r3, [r7, #2]
 8006366:	4613      	mov	r3, r2
 8006368:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	212c      	movs	r1, #44	; 0x2c
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	333b      	adds	r3, #59	; 0x3b
 8006378:	78ba      	ldrb	r2, [r7, #2]
 800637a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	212c      	movs	r1, #44	; 0x2c
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	333f      	adds	r3, #63	; 0x3f
 800638a:	787a      	ldrb	r2, [r7, #1]
 800638c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800638e:	7c3b      	ldrb	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d112      	bne.n	80063ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	212c      	movs	r1, #44	; 0x2c
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	3342      	adds	r3, #66	; 0x42
 80063a2:	2203      	movs	r2, #3
 80063a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	212c      	movs	r1, #44	; 0x2c
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	4413      	add	r3, r2
 80063b2:	333d      	adds	r3, #61	; 0x3d
 80063b4:	7f3a      	ldrb	r2, [r7, #28]
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e008      	b.n	80063cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	212c      	movs	r1, #44	; 0x2c
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	3342      	adds	r3, #66	; 0x42
 80063c8:	2202      	movs	r2, #2
 80063ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80063cc:	787b      	ldrb	r3, [r7, #1]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f200 80c6 	bhi.w	8006560 <HAL_HCD_HC_SubmitRequest+0x210>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	080063ed 	.word	0x080063ed
 80063e0:	0800654d 	.word	0x0800654d
 80063e4:	08006451 	.word	0x08006451
 80063e8:	080064cf 	.word	0x080064cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80063ec:	7c3b      	ldrb	r3, [r7, #16]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	f040 80b8 	bne.w	8006564 <HAL_HCD_HC_SubmitRequest+0x214>
 80063f4:	78bb      	ldrb	r3, [r7, #2]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f040 80b4 	bne.w	8006564 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80063fc:	8b3b      	ldrh	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006402:	78fb      	ldrb	r3, [r7, #3]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	212c      	movs	r1, #44	; 0x2c
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	3355      	adds	r3, #85	; 0x55
 8006410:	2201      	movs	r2, #1
 8006412:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	212c      	movs	r1, #44	; 0x2c
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	3355      	adds	r3, #85	; 0x55
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d109      	bne.n	800643c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	212c      	movs	r1, #44	; 0x2c
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	3342      	adds	r3, #66	; 0x42
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800643a:	e093      	b.n	8006564 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	212c      	movs	r1, #44	; 0x2c
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	3342      	adds	r3, #66	; 0x42
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
      break;
 800644e:	e089      	b.n	8006564 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006450:	78bb      	ldrb	r3, [r7, #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d11d      	bne.n	8006492 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006456:	78fb      	ldrb	r3, [r7, #3]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	212c      	movs	r1, #44	; 0x2c
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	3355      	adds	r3, #85	; 0x55
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	212c      	movs	r1, #44	; 0x2c
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	4413      	add	r3, r2
 8006476:	3342      	adds	r3, #66	; 0x42
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800647c:	e073      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	212c      	movs	r1, #44	; 0x2c
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3342      	adds	r3, #66	; 0x42
 800648c:	2202      	movs	r2, #2
 800648e:	701a      	strb	r2, [r3, #0]
      break;
 8006490:	e069      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	212c      	movs	r1, #44	; 0x2c
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	4413      	add	r3, r2
 800649e:	3354      	adds	r3, #84	; 0x54
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	212c      	movs	r1, #44	; 0x2c
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	4413      	add	r3, r2
 80064b2:	3342      	adds	r3, #66	; 0x42
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
      break;
 80064b8:	e055      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	212c      	movs	r1, #44	; 0x2c
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	4413      	add	r3, r2
 80064c6:	3342      	adds	r3, #66	; 0x42
 80064c8:	2202      	movs	r2, #2
 80064ca:	701a      	strb	r2, [r3, #0]
      break;
 80064cc:	e04b      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80064ce:	78bb      	ldrb	r3, [r7, #2]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11d      	bne.n	8006510 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	212c      	movs	r1, #44	; 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3355      	adds	r3, #85	; 0x55
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	212c      	movs	r1, #44	; 0x2c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3342      	adds	r3, #66	; 0x42
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80064fa:	e034      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	212c      	movs	r1, #44	; 0x2c
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	4413      	add	r3, r2
 8006508:	3342      	adds	r3, #66	; 0x42
 800650a:	2202      	movs	r2, #2
 800650c:	701a      	strb	r2, [r3, #0]
      break;
 800650e:	e02a      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	212c      	movs	r1, #44	; 0x2c
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	4413      	add	r3, r2
 800651c:	3354      	adds	r3, #84	; 0x54
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	212c      	movs	r1, #44	; 0x2c
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	3342      	adds	r3, #66	; 0x42
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
      break;
 8006536:	e016      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	212c      	movs	r1, #44	; 0x2c
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	3342      	adds	r3, #66	; 0x42
 8006546:	2202      	movs	r2, #2
 8006548:	701a      	strb	r2, [r3, #0]
      break;
 800654a:	e00c      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	3342      	adds	r3, #66	; 0x42
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
      break;
 800655e:	e002      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006560:	bf00      	nop
 8006562:	e000      	b.n	8006566 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006564:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	212c      	movs	r1, #44	; 0x2c
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	3344      	adds	r3, #68	; 0x44
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	8b3a      	ldrh	r2, [r7, #24]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	202c      	movs	r0, #44	; 0x2c
 8006580:	fb00 f303 	mul.w	r3, r0, r3
 8006584:	440b      	add	r3, r1
 8006586:	334c      	adds	r3, #76	; 0x4c
 8006588:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3360      	adds	r3, #96	; 0x60
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	212c      	movs	r1, #44	; 0x2c
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3350      	adds	r3, #80	; 0x50
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	212c      	movs	r1, #44	; 0x2c
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	4413      	add	r3, r2
 80065ba:	3339      	adds	r3, #57	; 0x39
 80065bc:	78fa      	ldrb	r2, [r7, #3]
 80065be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	212c      	movs	r1, #44	; 0x2c
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	3361      	adds	r3, #97	; 0x61
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	222c      	movs	r2, #44	; 0x2c
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	3338      	adds	r3, #56	; 0x38
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	18d1      	adds	r1, r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	f009 f994 	bl	800f918 <USB_HC_StartXfer>
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop

080065fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f008 fea7 	bl	800f366 <USB_GetMode>
 8006618:	4603      	mov	r3, r0
 800661a:	2b01      	cmp	r3, #1
 800661c:	f040 80f6 	bne.w	800680c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f008 fe8b 	bl	800f340 <USB_ReadInterrupts>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80ec 	beq.w	800680a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f008 fe82 	bl	800f340 <USB_ReadInterrupts>
 800663c:	4603      	mov	r3, r0
 800663e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006646:	d104      	bne.n	8006652 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f008 fe72 	bl	800f340 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006666:	d104      	bne.n	8006672 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f008 fe62 	bl	800f340 <USB_ReadInterrupts>
 800667c:	4603      	mov	r3, r0
 800667e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006686:	d104      	bne.n	8006692 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4618      	mov	r0, r3
 8006698:	f008 fe52 	bl	800f340 <USB_ReadInterrupts>
 800669c:	4603      	mov	r3, r0
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d103      	bne.n	80066ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2202      	movs	r2, #2
 80066ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f008 fe44 	bl	800f340 <USB_ReadInterrupts>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c2:	d11c      	bne.n	80066fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80066cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80066de:	2110      	movs	r1, #16
 80066e0:	6938      	ldr	r0, [r7, #16]
 80066e2:	f008 fd37 	bl	800f154 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80066e6:	6938      	ldr	r0, [r7, #16]
 80066e8:	f008 fd66 	bl	800f1b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f008 ff2c 	bl	800f550 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f01e fcbb 	bl	8025074 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f008 fe1c 	bl	800f340 <USB_ReadInterrupts>
 8006708:	4603      	mov	r3, r0
 800670a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800670e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006712:	d102      	bne.n	800671a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f8ca 	bl	80078ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f008 fe0e 	bl	800f340 <USB_ReadInterrupts>
 8006724:	4603      	mov	r3, r0
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b08      	cmp	r3, #8
 800672c:	d106      	bne.n	800673c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f01e fc84 	bl	802503c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2208      	movs	r2, #8
 800673a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f008 fdfd 	bl	800f340 <USB_ReadInterrupts>
 8006746:	4603      	mov	r3, r0
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b10      	cmp	r3, #16
 800674e:	d101      	bne.n	8006754 <HAL_HCD_IRQHandler+0x158>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <HAL_HCD_IRQHandler+0x15a>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d012      	beq.n	8006780 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699a      	ldr	r2, [r3, #24]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0210 	bic.w	r2, r2, #16
 8006768:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 ffcd 	bl	800770a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0210 	orr.w	r2, r2, #16
 800677e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f008 fddb 	bl	800f340 <USB_ReadInterrupts>
 800678a:	4603      	mov	r3, r0
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006794:	d13a      	bne.n	800680c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f009 f9fe 	bl	800fb9c <USB_HC_ReadInterrupt>
 80067a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e025      	b.n	80067f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d018      	beq.n	80067ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d2:	d106      	bne.n	80067e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f8ab 	bl	8006936 <HCD_HC_IN_IRQHandler>
 80067e0:	e005      	b.n	80067ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fc25 	bl	8007038 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3d4      	bcc.n	80067a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006806:	615a      	str	r2, [r3, #20]
 8006808:	e000      	b.n	800680c <HAL_HCD_IRQHandler+0x210>
      return;
 800680a:	bf00      	nop
    }
  }
}
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <HAL_HCD_Start+0x16>
 8006824:	2302      	movs	r3, #2
 8006826:	e013      	b.n	8006850 <HAL_HCD_Start+0x3e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2101      	movs	r1, #1
 8006836:	4618      	mov	r0, r3
 8006838:	f008 feee 	bl	800f618 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f008 fc19 	bl	800f078 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_HCD_Stop+0x16>
 800686a:	2302      	movs	r3, #2
 800686c:	e00d      	b.n	800688a <HAL_HCD_Stop+0x32>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f009 fad6 	bl	800fe2c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f008 fe90 	bl	800f5c4 <USB_ResetPort>
 80068a4:	4603      	mov	r3, r0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	212c      	movs	r1, #44	; 0x2c
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	3360      	adds	r3, #96	; 0x60
 80068c8:	781b      	ldrb	r3, [r3, #0]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	212c      	movs	r1, #44	; 0x2c
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	3350      	adds	r3, #80	; 0x50
 80068f0:	681b      	ldr	r3, [r3, #0]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f008 fed4 	bl	800f6b8 <USB_GetCurrentFrame>
 8006910:	4603      	mov	r3, r0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f008 feaf 	bl	800f68a <USB_GetHostSpeed>
 800692c:	4603      	mov	r3, r0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b086      	sub	sp, #24
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	460b      	mov	r3, r1
 8006940:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	4413      	add	r3, r2
 8006958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b04      	cmp	r3, #4
 8006964:	d11a      	bne.n	800699c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	461a      	mov	r2, r3
 8006974:	2304      	movs	r3, #4
 8006976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	212c      	movs	r1, #44	; 0x2c
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	4413      	add	r3, r2
 8006984:	3361      	adds	r3, #97	; 0x61
 8006986:	2206      	movs	r2, #6
 8006988:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f009 f912 	bl	800fbbe <USB_HC_Halt>
 800699a:	e0af      	b.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b2:	d11b      	bne.n	80069ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c0:	461a      	mov	r2, r3
 80069c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	212c      	movs	r1, #44	; 0x2c
 80069ce:	fb01 f303 	mul.w	r3, r1, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	3361      	adds	r3, #97	; 0x61
 80069d6:	2207      	movs	r2, #7
 80069d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	4611      	mov	r1, r2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f009 f8ea 	bl	800fbbe <USB_HC_Halt>
 80069ea:	e087      	b.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0320 	and.w	r3, r3, #32
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d109      	bne.n	8006a16 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	2320      	movs	r3, #32
 8006a12:	6093      	str	r3, [r2, #8]
 8006a14:	e072      	b.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d11a      	bne.n	8006a62 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	212c      	movs	r1, #44	; 0x2c
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	3361      	adds	r3, #97	; 0x61
 8006a4c:	2205      	movs	r2, #5
 8006a4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f009 f8af 	bl	800fbbe <USB_HC_Halt>
 8006a60:	e04c      	b.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a78:	d11b      	bne.n	8006ab2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	461a      	mov	r2, r3
 8006a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	212c      	movs	r1, #44	; 0x2c
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	3361      	adds	r3, #97	; 0x61
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f009 f887 	bl	800fbbe <USB_HC_Halt>
 8006ab0:	e024      	b.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac4:	2b80      	cmp	r3, #128	; 0x80
 8006ac6:	d119      	bne.n	8006afc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	212c      	movs	r1, #44	; 0x2c
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3361      	adds	r3, #97	; 0x61
 8006ae8:	2206      	movs	r2, #6
 8006aea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f009 f861 	bl	800fbbe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b12:	d112      	bne.n	8006b3a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f009 f84d 	bl	800fbbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	461a      	mov	r2, r3
 8006b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b36:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006b38:	e27a      	b.n	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	f040 810b 	bne.w	8006d68 <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d019      	beq.n	8006b8e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	212c      	movs	r1, #44	; 0x2c
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	3348      	adds	r3, #72	; 0x48
 8006b68:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	0159      	lsls	r1, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	440b      	add	r3, r1
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006b7c:	1ad2      	subs	r2, r2, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	202c      	movs	r0, #44	; 0x2c
 8006b84:	fb00 f303 	mul.w	r3, r0, r3
 8006b88:	440b      	add	r3, r1
 8006b8a:	3350      	adds	r3, #80	; 0x50
 8006b8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	212c      	movs	r1, #44	; 0x2c
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	3361      	adds	r3, #97	; 0x61
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	212c      	movs	r1, #44	; 0x2c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	335c      	adds	r3, #92	; 0x5c
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	212c      	movs	r1, #44	; 0x2c
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	333f      	adds	r3, #63	; 0x3f
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d009      	beq.n	8006bec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	212c      	movs	r1, #44	; 0x2c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	333f      	adds	r3, #63	; 0x3f
 8006be6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d111      	bne.n	8006c10 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f008 ffe1 	bl	800fbbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	6093      	str	r3, [r2, #8]
 8006c0e:	e066      	b.n	8006cde <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	212c      	movs	r1, #44	; 0x2c
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	333f      	adds	r3, #63	; 0x3f
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d127      	bne.n	8006c74 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c42:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	212c      	movs	r1, #44	; 0x2c
 8006c4a:	fb01 f303 	mul.w	r3, r1, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	3360      	adds	r3, #96	; 0x60
 8006c52:	2201      	movs	r2, #1
 8006c54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	b2d9      	uxtb	r1, r3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	202c      	movs	r0, #44	; 0x2c
 8006c60:	fb00 f303 	mul.w	r3, r0, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	3360      	adds	r3, #96	; 0x60
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f01e fa0f 	bl	8025090 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006c72:	e034      	b.n	8006cde <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	212c      	movs	r1, #44	; 0x2c
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	333f      	adds	r3, #63	; 0x3f
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12a      	bne.n	8006cde <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	212c      	movs	r1, #44	; 0x2c
 8006c8e:	fb01 f303 	mul.w	r3, r1, r3
 8006c92:	4413      	add	r3, r2
 8006c94:	3360      	adds	r3, #96	; 0x60
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	212c      	movs	r1, #44	; 0x2c
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3354      	adds	r3, #84	; 0x54
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f083 0301 	eor.w	r3, r3, #1
 8006cae:	b2d8      	uxtb	r0, r3
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	212c      	movs	r1, #44	; 0x2c
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3354      	adds	r3, #84	; 0x54
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	b2d9      	uxtb	r1, r3
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	202c      	movs	r0, #44	; 0x2c
 8006ccc:	fb00 f303 	mul.w	r3, r0, r3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3360      	adds	r3, #96	; 0x60
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f01e f9d9 	bl	8025090 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d12b      	bne.n	8006d3e <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	212c      	movs	r1, #44	; 0x2c
 8006cec:	fb01 f303 	mul.w	r3, r1, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	3348      	adds	r3, #72	; 0x48
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	202c      	movs	r0, #44	; 0x2c
 8006cfc:	fb00 f202 	mul.w	r2, r0, r2
 8006d00:	440a      	add	r2, r1
 8006d02:	3240      	adds	r2, #64	; 0x40
 8006d04:	8812      	ldrh	r2, [r2, #0]
 8006d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 818e 	beq.w	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	212c      	movs	r1, #44	; 0x2c
 8006d1a:	fb01 f303 	mul.w	r3, r1, r3
 8006d1e:	4413      	add	r3, r2
 8006d20:	3354      	adds	r3, #84	; 0x54
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f083 0301 	eor.w	r3, r3, #1
 8006d28:	b2d8      	uxtb	r0, r3
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	212c      	movs	r1, #44	; 0x2c
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	3354      	adds	r3, #84	; 0x54
 8006d38:	4602      	mov	r2, r0
 8006d3a:	701a      	strb	r2, [r3, #0]
}
 8006d3c:	e178      	b.n	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	212c      	movs	r1, #44	; 0x2c
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	4413      	add	r3, r2
 8006d4a:	3354      	adds	r3, #84	; 0x54
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	f083 0301 	eor.w	r3, r3, #1
 8006d52:	b2d8      	uxtb	r0, r3
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	212c      	movs	r1, #44	; 0x2c
 8006d5a:	fb01 f303 	mul.w	r3, r1, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	3354      	adds	r3, #84	; 0x54
 8006d62:	4602      	mov	r2, r0
 8006d64:	701a      	strb	r2, [r3, #0]
}
 8006d66:	e163      	b.n	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f040 80f6 	bne.w	8006f6c <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	212c      	movs	r1, #44	; 0x2c
 8006d86:	fb01 f303 	mul.w	r3, r1, r3
 8006d8a:	4413      	add	r3, r2
 8006d8c:	3361      	adds	r3, #97	; 0x61
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d109      	bne.n	8006da8 <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	212c      	movs	r1, #44	; 0x2c
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	3360      	adds	r3, #96	; 0x60
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	e0c9      	b.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	212c      	movs	r1, #44	; 0x2c
 8006dae:	fb01 f303 	mul.w	r3, r1, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	3361      	adds	r3, #97	; 0x61
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	d109      	bne.n	8006dd0 <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	212c      	movs	r1, #44	; 0x2c
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3360      	adds	r3, #96	; 0x60
 8006dca:	2205      	movs	r2, #5
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	e0b5      	b.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	212c      	movs	r1, #44	; 0x2c
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	3361      	adds	r3, #97	; 0x61
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	d009      	beq.n	8006df8 <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	212c      	movs	r1, #44	; 0x2c
 8006dea:	fb01 f303 	mul.w	r3, r1, r3
 8006dee:	4413      	add	r3, r2
 8006df0:	3361      	adds	r3, #97	; 0x61
 8006df2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d150      	bne.n	8006e9a <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	212c      	movs	r1, #44	; 0x2c
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	4413      	add	r3, r2
 8006e04:	335c      	adds	r3, #92	; 0x5c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	202c      	movs	r0, #44	; 0x2c
 8006e10:	fb00 f303 	mul.w	r3, r0, r3
 8006e14:	440b      	add	r3, r1
 8006e16:	335c      	adds	r3, #92	; 0x5c
 8006e18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	212c      	movs	r1, #44	; 0x2c
 8006e20:	fb01 f303 	mul.w	r3, r1, r3
 8006e24:	4413      	add	r3, r2
 8006e26:	335c      	adds	r3, #92	; 0x5c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d912      	bls.n	8006e54 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	212c      	movs	r1, #44	; 0x2c
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	4413      	add	r3, r2
 8006e3a:	335c      	adds	r3, #92	; 0x5c
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	212c      	movs	r1, #44	; 0x2c
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3360      	adds	r3, #96	; 0x60
 8006e4e:	2204      	movs	r2, #4
 8006e50:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e52:	e073      	b.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	212c      	movs	r1, #44	; 0x2c
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	3360      	adds	r3, #96	; 0x60
 8006e62:	2202      	movs	r2, #2
 8006e64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	461a      	mov	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e98:	e050      	b.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	212c      	movs	r1, #44	; 0x2c
 8006ea0:	fb01 f303 	mul.w	r3, r1, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	3361      	adds	r3, #97	; 0x61
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d122      	bne.n	8006ef4 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	212c      	movs	r1, #44	; 0x2c
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	4413      	add	r3, r2
 8006eba:	3360      	adds	r3, #96	; 0x60
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ed6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	461a      	mov	r2, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	e023      	b.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	212c      	movs	r1, #44	; 0x2c
 8006efa:	fb01 f303 	mul.w	r3, r1, r3
 8006efe:	4413      	add	r3, r2
 8006f00:	3361      	adds	r3, #97	; 0x61
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b07      	cmp	r3, #7
 8006f06:	d119      	bne.n	8006f3c <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	212c      	movs	r1, #44	; 0x2c
 8006f0e:	fb01 f303 	mul.w	r3, r1, r3
 8006f12:	4413      	add	r3, r2
 8006f14:	335c      	adds	r3, #92	; 0x5c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	202c      	movs	r0, #44	; 0x2c
 8006f20:	fb00 f303 	mul.w	r3, r0, r3
 8006f24:	440b      	add	r3, r1
 8006f26:	335c      	adds	r3, #92	; 0x5c
 8006f28:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	212c      	movs	r1, #44	; 0x2c
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	4413      	add	r3, r2
 8006f36:	3360      	adds	r3, #96	; 0x60
 8006f38:	2204      	movs	r2, #4
 8006f3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	b2d9      	uxtb	r1, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	202c      	movs	r0, #44	; 0x2c
 8006f58:	fb00 f303 	mul.w	r3, r0, r3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	3360      	adds	r3, #96	; 0x60
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f01e f893 	bl	8025090 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006f6a:	e061      	b.n	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 0310 	and.w	r3, r3, #16
 8006f7e:	2b10      	cmp	r3, #16
 8006f80:	d156      	bne.n	8007030 <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	212c      	movs	r1, #44	; 0x2c
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	333f      	adds	r3, #63	; 0x3f
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d111      	bne.n	8006fba <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	212c      	movs	r1, #44	; 0x2c
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	4413      	add	r3, r2
 8006fa2:	335c      	adds	r3, #92	; 0x5c
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f008 fe03 	bl	800fbbe <USB_HC_Halt>
 8006fb8:	e031      	b.n	800701e <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	212c      	movs	r1, #44	; 0x2c
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	333f      	adds	r3, #63	; 0x3f
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	212c      	movs	r1, #44	; 0x2c
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	333f      	adds	r3, #63	; 0x3f
 8006fdc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d11d      	bne.n	800701e <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	212c      	movs	r1, #44	; 0x2c
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	4413      	add	r3, r2
 8006fee:	335c      	adds	r3, #92	; 0x5c
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d110      	bne.n	800701e <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	212c      	movs	r1, #44	; 0x2c
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3361      	adds	r3, #97	; 0x61
 800700a:	2203      	movs	r2, #3
 800700c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f008 fdd0 	bl	800fbbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702a:	461a      	mov	r2, r3
 800702c:	2310      	movs	r3, #16
 800702e:	6093      	str	r3, [r2, #8]
}
 8007030:	bf00      	nop
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	4413      	add	r3, r2
 800705a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b04      	cmp	r3, #4
 8007066:	d11a      	bne.n	800709e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	461a      	mov	r2, r3
 8007076:	2304      	movs	r3, #4
 8007078:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	212c      	movs	r1, #44	; 0x2c
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	3361      	adds	r3, #97	; 0x61
 8007088:	2206      	movs	r2, #6
 800708a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	4611      	mov	r1, r2
 8007096:	4618      	mov	r0, r3
 8007098:	f008 fd91 	bl	800fbbe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800709c:	e331      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d12e      	bne.n	8007112 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c0:	461a      	mov	r2, r3
 80070c2:	2320      	movs	r3, #32
 80070c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	212c      	movs	r1, #44	; 0x2c
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	333d      	adds	r3, #61	; 0x3d
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	f040 8313 	bne.w	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	212c      	movs	r1, #44	; 0x2c
 80070e2:	fb01 f303 	mul.w	r3, r1, r3
 80070e6:	4413      	add	r3, r2
 80070e8:	333d      	adds	r3, #61	; 0x3d
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	212c      	movs	r1, #44	; 0x2c
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	3360      	adds	r3, #96	; 0x60
 80070fc:	2202      	movs	r2, #2
 80070fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f008 fd57 	bl	800fbbe <USB_HC_Halt>
}
 8007110:	e2f7      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007128:	d112      	bne.n	8007150 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	461a      	mov	r2, r3
 8007138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800713c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f008 fd38 	bl	800fbbe <USB_HC_Halt>
}
 800714e:	e2d8      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d140      	bne.n	80071e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	212c      	movs	r1, #44	; 0x2c
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	335c      	adds	r3, #92	; 0x5c
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d111      	bne.n	80071b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	212c      	movs	r1, #44	; 0x2c
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	333d      	adds	r3, #61	; 0x3d
 800719c:	2201      	movs	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	461a      	mov	r2, r3
 80071ae:	2340      	movs	r3, #64	; 0x40
 80071b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071be:	461a      	mov	r2, r3
 80071c0:	2301      	movs	r3, #1
 80071c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	212c      	movs	r1, #44	; 0x2c
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	4413      	add	r3, r2
 80071d0:	3361      	adds	r3, #97	; 0x61
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	4611      	mov	r1, r2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f008 fcec 	bl	800fbbe <USB_HC_Halt>
}
 80071e6:	e28c      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d12c      	bne.n	8007258 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	212c      	movs	r1, #44	; 0x2c
 8007204:	fb01 f303 	mul.w	r3, r1, r3
 8007208:	4413      	add	r3, r2
 800720a:	3361      	adds	r3, #97	; 0x61
 800720c:	2204      	movs	r2, #4
 800720e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	212c      	movs	r1, #44	; 0x2c
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	4413      	add	r3, r2
 800721c:	333d      	adds	r3, #61	; 0x3d
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	212c      	movs	r1, #44	; 0x2c
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	335c      	adds	r3, #92	; 0x5c
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f008 fcbd 	bl	800fbbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	461a      	mov	r2, r3
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	6093      	str	r3, [r2, #8]
}
 8007256:	e254      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b08      	cmp	r3, #8
 800726c:	d11a      	bne.n	80072a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	461a      	mov	r2, r3
 800727c:	2308      	movs	r3, #8
 800727e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	212c      	movs	r1, #44	; 0x2c
 8007286:	fb01 f303 	mul.w	r3, r1, r3
 800728a:	4413      	add	r3, r2
 800728c:	3361      	adds	r3, #97	; 0x61
 800728e:	2205      	movs	r2, #5
 8007290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	4611      	mov	r1, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f008 fc8e 	bl	800fbbe <USB_HC_Halt>
}
 80072a2:	e22e      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d140      	bne.n	800733c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	212c      	movs	r1, #44	; 0x2c
 80072c0:	fb01 f303 	mul.w	r3, r1, r3
 80072c4:	4413      	add	r3, r2
 80072c6:	335c      	adds	r3, #92	; 0x5c
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	212c      	movs	r1, #44	; 0x2c
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	3361      	adds	r3, #97	; 0x61
 80072da:	2203      	movs	r2, #3
 80072dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	212c      	movs	r1, #44	; 0x2c
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	333d      	adds	r3, #61	; 0x3d
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d112      	bne.n	8007318 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	212c      	movs	r1, #44	; 0x2c
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	4413      	add	r3, r2
 80072fe:	333c      	adds	r3, #60	; 0x3c
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d108      	bne.n	8007318 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	212c      	movs	r1, #44	; 0x2c
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	4413      	add	r3, r2
 8007312:	333d      	adds	r3, #61	; 0x3d
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	4611      	mov	r1, r2
 8007322:	4618      	mov	r0, r3
 8007324:	f008 fc4b 	bl	800fbbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	4413      	add	r3, r2
 8007330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007334:	461a      	mov	r2, r3
 8007336:	2310      	movs	r3, #16
 8007338:	6093      	str	r3, [r2, #8]
}
 800733a:	e1e2      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734e:	2b80      	cmp	r3, #128	; 0x80
 8007350:	d164      	bne.n	800741c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d111      	bne.n	800737e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	212c      	movs	r1, #44	; 0x2c
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	3361      	adds	r3, #97	; 0x61
 8007368:	2206      	movs	r2, #6
 800736a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	4611      	mov	r1, r2
 8007376:	4618      	mov	r0, r3
 8007378:	f008 fc21 	bl	800fbbe <USB_HC_Halt>
 800737c:	e044      	b.n	8007408 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	212c      	movs	r1, #44	; 0x2c
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	335c      	adds	r3, #92	; 0x5c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	202c      	movs	r0, #44	; 0x2c
 8007396:	fb00 f303 	mul.w	r3, r0, r3
 800739a:	440b      	add	r3, r1
 800739c:	335c      	adds	r3, #92	; 0x5c
 800739e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	212c      	movs	r1, #44	; 0x2c
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	4413      	add	r3, r2
 80073ac:	335c      	adds	r3, #92	; 0x5c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d920      	bls.n	80073f6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	212c      	movs	r1, #44	; 0x2c
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	335c      	adds	r3, #92	; 0x5c
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	212c      	movs	r1, #44	; 0x2c
 80073cc:	fb01 f303 	mul.w	r3, r1, r3
 80073d0:	4413      	add	r3, r2
 80073d2:	3360      	adds	r3, #96	; 0x60
 80073d4:	2204      	movs	r2, #4
 80073d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	b2d9      	uxtb	r1, r3
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	202c      	movs	r0, #44	; 0x2c
 80073e2:	fb00 f303 	mul.w	r3, r0, r3
 80073e6:	4413      	add	r3, r2
 80073e8:	3360      	adds	r3, #96	; 0x60
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f01d fe4e 	bl	8025090 <HAL_HCD_HC_NotifyURBChange_Callback>
 80073f4:	e008      	b.n	8007408 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	212c      	movs	r1, #44	; 0x2c
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	3360      	adds	r3, #96	; 0x60
 8007404:	2202      	movs	r2, #2
 8007406:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	461a      	mov	r2, r3
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	6093      	str	r3, [r2, #8]
}
 800741a:	e172      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007432:	d11b      	bne.n	800746c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	212c      	movs	r1, #44	; 0x2c
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	3361      	adds	r3, #97	; 0x61
 8007442:	2208      	movs	r2, #8
 8007444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f008 fbb4 	bl	800fbbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4413      	add	r3, r2
 800745e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007462:	461a      	mov	r2, r3
 8007464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007468:	6093      	str	r3, [r2, #8]
}
 800746a:	e14a      	b.n	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4413      	add	r3, r2
 8007474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	f040 813f 	bne.w	8007702 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	212c      	movs	r1, #44	; 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3361      	adds	r3, #97	; 0x61
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d17d      	bne.n	8007594 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	212c      	movs	r1, #44	; 0x2c
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	3360      	adds	r3, #96	; 0x60
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	212c      	movs	r1, #44	; 0x2c
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	4413      	add	r3, r2
 80074b6:	333f      	adds	r3, #63	; 0x3f
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d00a      	beq.n	80074d4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	212c      	movs	r1, #44	; 0x2c
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
 80074c8:	4413      	add	r3, r2
 80074ca:	333f      	adds	r3, #63	; 0x3f
 80074cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	f040 8100 	bne.w	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d113      	bne.n	8007504 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	212c      	movs	r1, #44	; 0x2c
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	3355      	adds	r3, #85	; 0x55
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f083 0301 	eor.w	r3, r3, #1
 80074f0:	b2d8      	uxtb	r0, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	212c      	movs	r1, #44	; 0x2c
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	3355      	adds	r3, #85	; 0x55
 8007500:	4602      	mov	r2, r0
 8007502:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b01      	cmp	r3, #1
 800750a:	f040 80e3 	bne.w	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	212c      	movs	r1, #44	; 0x2c
 8007514:	fb01 f303 	mul.w	r3, r1, r3
 8007518:	4413      	add	r3, r2
 800751a:	334c      	adds	r3, #76	; 0x4c
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80d8 	beq.w	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	212c      	movs	r1, #44	; 0x2c
 800752a:	fb01 f303 	mul.w	r3, r1, r3
 800752e:	4413      	add	r3, r2
 8007530:	334c      	adds	r3, #76	; 0x4c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	202c      	movs	r0, #44	; 0x2c
 800753a:	fb00 f202 	mul.w	r2, r0, r2
 800753e:	440a      	add	r2, r1
 8007540:	3240      	adds	r2, #64	; 0x40
 8007542:	8812      	ldrh	r2, [r2, #0]
 8007544:	4413      	add	r3, r2
 8007546:	3b01      	subs	r3, #1
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	202c      	movs	r0, #44	; 0x2c
 800754e:	fb00 f202 	mul.w	r2, r0, r2
 8007552:	440a      	add	r2, r1
 8007554:	3240      	adds	r2, #64	; 0x40
 8007556:	8812      	ldrh	r2, [r2, #0]
 8007558:	fbb3 f3f2 	udiv	r3, r3, r2
 800755c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80b5 	beq.w	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	212c      	movs	r1, #44	; 0x2c
 8007570:	fb01 f303 	mul.w	r3, r1, r3
 8007574:	4413      	add	r3, r2
 8007576:	3355      	adds	r3, #85	; 0x55
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	f083 0301 	eor.w	r3, r3, #1
 800757e:	b2d8      	uxtb	r0, r3
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	212c      	movs	r1, #44	; 0x2c
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	3355      	adds	r3, #85	; 0x55
 800758e:	4602      	mov	r2, r0
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	e09f      	b.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	212c      	movs	r1, #44	; 0x2c
 800759a:	fb01 f303 	mul.w	r3, r1, r3
 800759e:	4413      	add	r3, r2
 80075a0:	3361      	adds	r3, #97	; 0x61
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d109      	bne.n	80075bc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	212c      	movs	r1, #44	; 0x2c
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	3360      	adds	r3, #96	; 0x60
 80075b6:	2202      	movs	r2, #2
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e08b      	b.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	212c      	movs	r1, #44	; 0x2c
 80075c2:	fb01 f303 	mul.w	r3, r1, r3
 80075c6:	4413      	add	r3, r2
 80075c8:	3361      	adds	r3, #97	; 0x61
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d109      	bne.n	80075e4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	212c      	movs	r1, #44	; 0x2c
 80075d6:	fb01 f303 	mul.w	r3, r1, r3
 80075da:	4413      	add	r3, r2
 80075dc:	3360      	adds	r3, #96	; 0x60
 80075de:	2202      	movs	r2, #2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e077      	b.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	3361      	adds	r3, #97	; 0x61
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d109      	bne.n	800760c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	212c      	movs	r1, #44	; 0x2c
 80075fe:	fb01 f303 	mul.w	r3, r1, r3
 8007602:	4413      	add	r3, r2
 8007604:	3360      	adds	r3, #96	; 0x60
 8007606:	2205      	movs	r2, #5
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e063      	b.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	212c      	movs	r1, #44	; 0x2c
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	3361      	adds	r3, #97	; 0x61
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b06      	cmp	r3, #6
 800761e:	d009      	beq.n	8007634 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	212c      	movs	r1, #44	; 0x2c
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	3361      	adds	r3, #97	; 0x61
 800762e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007630:	2b08      	cmp	r3, #8
 8007632:	d14f      	bne.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	212c      	movs	r1, #44	; 0x2c
 800763a:	fb01 f303 	mul.w	r3, r1, r3
 800763e:	4413      	add	r3, r2
 8007640:	335c      	adds	r3, #92	; 0x5c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	202c      	movs	r0, #44	; 0x2c
 800764c:	fb00 f303 	mul.w	r3, r0, r3
 8007650:	440b      	add	r3, r1
 8007652:	335c      	adds	r3, #92	; 0x5c
 8007654:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	212c      	movs	r1, #44	; 0x2c
 800765c:	fb01 f303 	mul.w	r3, r1, r3
 8007660:	4413      	add	r3, r2
 8007662:	335c      	adds	r3, #92	; 0x5c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b02      	cmp	r3, #2
 8007668:	d912      	bls.n	8007690 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	212c      	movs	r1, #44	; 0x2c
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	335c      	adds	r3, #92	; 0x5c
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	212c      	movs	r1, #44	; 0x2c
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	4413      	add	r3, r2
 8007688:	3360      	adds	r3, #96	; 0x60
 800768a:	2204      	movs	r2, #4
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e021      	b.n	80076d4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	212c      	movs	r1, #44	; 0x2c
 8007696:	fb01 f303 	mul.w	r3, r1, r3
 800769a:	4413      	add	r3, r2
 800769c:	3360      	adds	r3, #96	; 0x60
 800769e:	2202      	movs	r2, #2
 80076a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	461a      	mov	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e0:	461a      	mov	r2, r3
 80076e2:	2302      	movs	r3, #2
 80076e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	b2d9      	uxtb	r1, r3
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	202c      	movs	r0, #44	; 0x2c
 80076f0:	fb00 f303 	mul.w	r3, r0, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	3360      	adds	r3, #96	; 0x60
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	461a      	mov	r2, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f01d fcc7 	bl	8025090 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007702:	bf00      	nop
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b08a      	sub	sp, #40	; 0x28
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	0c5b      	lsrs	r3, r3, #17
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	091b      	lsrs	r3, r3, #4
 800773a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800773e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d004      	beq.n	8007750 <HCD_RXQLVL_IRQHandler+0x46>
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b05      	cmp	r3, #5
 800774a:	f000 80a9 	beq.w	80078a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800774e:	e0aa      	b.n	80078a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80a6 	beq.w	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	212c      	movs	r1, #44	; 0x2c
 800775e:	fb01 f303 	mul.w	r3, r1, r3
 8007762:	4413      	add	r3, r2
 8007764:	3344      	adds	r3, #68	; 0x44
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 809b 	beq.w	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	212c      	movs	r1, #44	; 0x2c
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	3350      	adds	r3, #80	; 0x50
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	441a      	add	r2, r3
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	202c      	movs	r0, #44	; 0x2c
 8007788:	fb00 f303 	mul.w	r3, r0, r3
 800778c:	440b      	add	r3, r1
 800778e:	334c      	adds	r3, #76	; 0x4c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d87a      	bhi.n	800788c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	212c      	movs	r1, #44	; 0x2c
 80077a0:	fb01 f303 	mul.w	r3, r1, r3
 80077a4:	4413      	add	r3, r2
 80077a6:	3344      	adds	r3, #68	; 0x44
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	b292      	uxth	r2, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	f007 fd6e 	bl	800f290 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	212c      	movs	r1, #44	; 0x2c
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	3344      	adds	r3, #68	; 0x44
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	441a      	add	r2, r3
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	202c      	movs	r0, #44	; 0x2c
 80077ce:	fb00 f303 	mul.w	r3, r0, r3
 80077d2:	440b      	add	r3, r1
 80077d4:	3344      	adds	r3, #68	; 0x44
 80077d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	212c      	movs	r1, #44	; 0x2c
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	3350      	adds	r3, #80	; 0x50
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	441a      	add	r2, r3
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	202c      	movs	r0, #44	; 0x2c
 80077f2:	fb00 f303 	mul.w	r3, r0, r3
 80077f6:	440b      	add	r3, r1
 80077f8:	3350      	adds	r3, #80	; 0x50
 80077fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	4413      	add	r3, r2
 8007804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	0cdb      	lsrs	r3, r3, #19
 800780c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007810:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	212c      	movs	r1, #44	; 0x2c
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	3340      	adds	r3, #64	; 0x40
 8007820:	881b      	ldrh	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4293      	cmp	r3, r2
 8007828:	d13c      	bne.n	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d039      	beq.n	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007846:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800784e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	4413      	add	r3, r2
 8007858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785c:	461a      	mov	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	212c      	movs	r1, #44	; 0x2c
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	4413      	add	r3, r2
 800786e:	3354      	adds	r3, #84	; 0x54
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f083 0301 	eor.w	r3, r3, #1
 8007876:	b2d8      	uxtb	r0, r3
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	212c      	movs	r1, #44	; 0x2c
 800787e:	fb01 f303 	mul.w	r3, r1, r3
 8007882:	4413      	add	r3, r2
 8007884:	3354      	adds	r3, #84	; 0x54
 8007886:	4602      	mov	r2, r0
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e00b      	b.n	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	212c      	movs	r1, #44	; 0x2c
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	4413      	add	r3, r2
 8007898:	3360      	adds	r3, #96	; 0x60
 800789a:	2204      	movs	r2, #4
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e001      	b.n	80078a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80078a0:	bf00      	nop
 80078a2:	e000      	b.n	80078a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80078a4:	bf00      	nop
  }
}
 80078a6:	bf00      	nop
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d10b      	bne.n	80078fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d102      	bne.n	80078f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f01d fbb1 	bl	8025058 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b08      	cmp	r3, #8
 8007906:	d132      	bne.n	800796e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f043 0308 	orr.w	r3, r3, #8
 800790e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b04      	cmp	r3, #4
 8007918:	d126      	bne.n	8007968 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d113      	bne.n	800794a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800792c:	d106      	bne.n	800793c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2102      	movs	r1, #2
 8007934:	4618      	mov	r0, r3
 8007936:	f007 fe0b 	bl	800f550 <USB_InitFSLSPClkSel>
 800793a:	e011      	b.n	8007960 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2101      	movs	r1, #1
 8007942:	4618      	mov	r0, r3
 8007944:	f007 fe04 	bl	800f550 <USB_InitFSLSPClkSel>
 8007948:	e00a      	b.n	8007960 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d106      	bne.n	8007960 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007958:	461a      	mov	r2, r3
 800795a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800795e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f01d fba7 	bl	80250b4 <HAL_HCD_PortEnabled_Callback>
 8007966:	e002      	b.n	800796e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f01d fbb1 	bl	80250d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b20      	cmp	r3, #32
 8007976:	d103      	bne.n	8007980 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f043 0320 	orr.w	r3, r3, #32
 800797e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007986:	461a      	mov	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6013      	str	r3, [r2, #0]
}
 800798c:	bf00      	nop
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e07f      	b.n	8007aa6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fa fb40 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2224      	movs	r2, #36	; 0x24
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80079e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d107      	bne.n	8007a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a0a:	609a      	str	r2, [r3, #8]
 8007a0c:	e006      	b.n	8007a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689a      	ldr	r2, [r3, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d104      	bne.n	8007a2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	4b1d      	ldr	r3, [pc, #116]	; (8007ab0 <HAL_I2C_Init+0x11c>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68da      	ldr	r2, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691a      	ldr	r2, [r3, #16]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	02008000 	.word	0x02008000

08007ab4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e021      	b.n	8007b0a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2224      	movs	r2, #36	; 0x24
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fa fb56 	bl	8002190 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	4608      	mov	r0, r1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	461a      	mov	r2, r3
 8007b22:	4603      	mov	r3, r0
 8007b24:	817b      	strh	r3, [r7, #10]
 8007b26:	460b      	mov	r3, r1
 8007b28:	813b      	strh	r3, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	f040 80f9 	bne.w	8007d2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_I2C_Mem_Write+0x34>
 8007b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0ed      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_I2C_Mem_Write+0x4e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e0e6      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b6a:	f7fb fadf 	bl	800312c <HAL_GetTick>
 8007b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	2319      	movs	r3, #25
 8007b76:	2201      	movs	r2, #1
 8007b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fad1 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e0d1      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2221      	movs	r2, #33	; 0x21
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2240      	movs	r2, #64	; 0x40
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a3a      	ldr	r2, [r7, #32]
 8007ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bb4:	88f8      	ldrh	r0, [r7, #6]
 8007bb6:	893a      	ldrh	r2, [r7, #8]
 8007bb8:	8979      	ldrh	r1, [r7, #10]
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 f9e1 	bl	8007f8c <I2C_RequestMemoryWrite>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0a9      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2bff      	cmp	r3, #255	; 0xff
 8007be4:	d90e      	bls.n	8007c04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	22ff      	movs	r2, #255	; 0xff
 8007bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	8979      	ldrh	r1, [r7, #10]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 fc39 	bl	8008474 <I2C_TransferConfig>
 8007c02:	e00f      	b.n	8007c24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	8979      	ldrh	r1, [r7, #10]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 fc28 	bl	8008474 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fabb 	bl	80081a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e07b      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c60:	3b01      	subs	r3, #1
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d034      	beq.n	8007cdc <HAL_I2C_Mem_Write+0x1c8>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d130      	bne.n	8007cdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2200      	movs	r2, #0
 8007c82:	2180      	movs	r1, #128	; 0x80
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fa4d 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e04d      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2bff      	cmp	r3, #255	; 0xff
 8007c9c:	d90e      	bls.n	8007cbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	22ff      	movs	r2, #255	; 0xff
 8007ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	8979      	ldrh	r1, [r7, #10]
 8007cac:	2300      	movs	r3, #0
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fbdd 	bl	8008474 <I2C_TransferConfig>
 8007cba:	e00f      	b.n	8007cdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	8979      	ldrh	r1, [r7, #10]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 fbcc 	bl	8008474 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d19e      	bne.n	8007c24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fa9a 	bl	8008224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e01a      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6859      	ldr	r1, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <HAL_I2C_Mem_Write+0x224>)
 8007d0e:	400b      	ands	r3, r1
 8007d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	e000      	b.n	8007d30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007d2e:	2302      	movs	r3, #2
  }
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	fe00e800 	.word	0xfe00e800

08007d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	817b      	strh	r3, [r7, #10]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	813b      	strh	r3, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	f040 80fd 	bne.w	8007f5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <HAL_I2C_Mem_Read+0x34>
 8007d6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d105      	bne.n	8007d7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0f1      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d101      	bne.n	8007d8a <HAL_I2C_Mem_Read+0x4e>
 8007d86:	2302      	movs	r3, #2
 8007d88:	e0ea      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d92:	f7fb f9cb 	bl	800312c <HAL_GetTick>
 8007d96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2319      	movs	r3, #25
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f9bd 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0d5      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2222      	movs	r2, #34	; 0x22
 8007db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ddc:	88f8      	ldrh	r0, [r7, #6]
 8007dde:	893a      	ldrh	r2, [r7, #8]
 8007de0:	8979      	ldrh	r1, [r7, #10]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4603      	mov	r3, r0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f921 	bl	8008034 <I2C_RequestMemoryRead>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e0ad      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2bff      	cmp	r3, #255	; 0xff
 8007e0c:	d90e      	bls.n	8007e2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	22ff      	movs	r2, #255	; 0xff
 8007e12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	8979      	ldrh	r1, [r7, #10]
 8007e1c:	4b52      	ldr	r3, [pc, #328]	; (8007f68 <HAL_I2C_Mem_Read+0x22c>)
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 fb25 	bl	8008474 <I2C_TransferConfig>
 8007e2a:	e00f      	b.n	8007e4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	8979      	ldrh	r1, [r7, #10]
 8007e3e:	4b4a      	ldr	r3, [pc, #296]	; (8007f68 <HAL_I2C_Mem_Read+0x22c>)
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fb14 	bl	8008474 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2200      	movs	r2, #0
 8007e54:	2104      	movs	r1, #4
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f964 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e07c      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d034      	beq.n	8007f0c <HAL_I2C_Mem_Read+0x1d0>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d130      	bne.n	8007f0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f935 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e04d      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	2bff      	cmp	r3, #255	; 0xff
 8007ecc:	d90e      	bls.n	8007eec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	22ff      	movs	r2, #255	; 0xff
 8007ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	8979      	ldrh	r1, [r7, #10]
 8007edc:	2300      	movs	r3, #0
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 fac5 	bl	8008474 <I2C_TransferConfig>
 8007eea:	e00f      	b.n	8007f0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	8979      	ldrh	r1, [r7, #10]
 8007efe:	2300      	movs	r3, #0
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 fab4 	bl	8008474 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d19a      	bne.n	8007e4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f982 	bl	8008224 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e01a      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6859      	ldr	r1, [r3, #4]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_I2C_Mem_Read+0x230>)
 8007f3e:	400b      	ands	r3, r1
 8007f40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	e000      	b.n	8007f60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007f5e:	2302      	movs	r3, #2
  }
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	80002400 	.word	0x80002400
 8007f6c:	fe00e800 	.word	0xfe00e800

08007f70 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f7e:	b2db      	uxtb	r3, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	817b      	strh	r3, [r7, #10]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	813b      	strh	r3, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	8979      	ldrh	r1, [r7, #10]
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <I2C_RequestMemoryWrite+0xa4>)
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fa5d 	bl	8008474 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fba:	69fa      	ldr	r2, [r7, #28]
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 f8f0 	bl	80081a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e02c      	b.n	8008028 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d105      	bne.n	8007fe0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fd4:	893b      	ldrh	r3, [r7, #8]
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	629a      	str	r2, [r3, #40]	; 0x28
 8007fde:	e015      	b.n	800800c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007fe0:	893b      	ldrh	r3, [r7, #8]
 8007fe2:	0a1b      	lsrs	r3, r3, #8
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	69b9      	ldr	r1, [r7, #24]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f8d6 	bl	80081a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e012      	b.n	8008028 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008002:	893b      	ldrh	r3, [r7, #8]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2200      	movs	r2, #0
 8008014:	2180      	movs	r1, #128	; 0x80
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f000 f884 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	80002000 	.word	0x80002000

08008034 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af02      	add	r7, sp, #8
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	461a      	mov	r2, r3
 8008042:	4603      	mov	r3, r0
 8008044:	817b      	strh	r3, [r7, #10]
 8008046:	460b      	mov	r3, r1
 8008048:	813b      	strh	r3, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	8979      	ldrh	r1, [r7, #10]
 8008054:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <I2C_RequestMemoryRead+0xa4>)
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	2300      	movs	r3, #0
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fa0a 	bl	8008474 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	69b9      	ldr	r1, [r7, #24]
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f89d 	bl	80081a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e02c      	b.n	80080ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d105      	bne.n	8008086 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800807a:	893b      	ldrh	r3, [r7, #8]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	629a      	str	r2, [r3, #40]	; 0x28
 8008084:	e015      	b.n	80080b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008086:	893b      	ldrh	r3, [r7, #8]
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	b29b      	uxth	r3, r3
 800808c:	b2da      	uxtb	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008094:	69fa      	ldr	r2, [r7, #28]
 8008096:	69b9      	ldr	r1, [r7, #24]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 f883 	bl	80081a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e012      	b.n	80080ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080a8:	893b      	ldrh	r3, [r7, #8]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2140      	movs	r1, #64	; 0x40
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f831 	bl	8008124 <I2C_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	80002000 	.word	0x80002000

080080dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d103      	bne.n	80080fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b01      	cmp	r3, #1
 8008106:	d007      	beq.n	8008118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699a      	ldr	r2, [r3, #24]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	619a      	str	r2, [r3, #24]
  }
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008134:	e022      	b.n	800817c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813c:	d01e      	beq.n	800817c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7fa fff5 	bl	800312c <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d113      	bne.n	800817c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2220      	movs	r2, #32
 8008164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e00f      	b.n	800819c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	4013      	ands	r3, r2
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	429a      	cmp	r2, r3
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	461a      	mov	r2, r3
 8008194:	79fb      	ldrb	r3, [r7, #7]
 8008196:	429a      	cmp	r2, r3
 8008198:	d0cd      	beq.n	8008136 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081b0:	e02c      	b.n	800820c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f870 	bl	800829c <I2C_IsErrorOccurred>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e02a      	b.n	800821c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d01e      	beq.n	800820c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ce:	f7fa ffad 	bl	800312c <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d302      	bcc.n	80081e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d113      	bne.n	800820c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e8:	f043 0220 	orr.w	r2, r3, #32
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e007      	b.n	800821c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b02      	cmp	r3, #2
 8008218:	d1cb      	bne.n	80081b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008230:	e028      	b.n	8008284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 f830 	bl	800829c <I2C_IsErrorOccurred>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e026      	b.n	8008294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008246:	f7fa ff71 	bl	800312c <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d302      	bcc.n	800825c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d113      	bne.n	8008284 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008260:	f043 0220 	orr.w	r2, r3, #32
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e007      	b.n	8008294 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b20      	cmp	r3, #32
 8008290:	d1cf      	bne.n	8008232 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	f003 0310 	and.w	r3, r3, #16
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d075      	beq.n	80083b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2210      	movs	r2, #16
 80082ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082d0:	e056      	b.n	8008380 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d8:	d052      	beq.n	8008380 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80082da:	f7fa ff27 	bl	800312c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <I2C_IsErrorOccurred+0x54>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d147      	bne.n	8008380 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008302:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800830e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008312:	d12e      	bne.n	8008372 <I2C_IsErrorOccurred+0xd6>
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800831a:	d02a      	beq.n	8008372 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800831c:	7cfb      	ldrb	r3, [r7, #19]
 800831e:	2b20      	cmp	r3, #32
 8008320:	d027      	beq.n	8008372 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685a      	ldr	r2, [r3, #4]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008330:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008332:	f7fa fefb 	bl	800312c <HAL_GetTick>
 8008336:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008338:	e01b      	b.n	8008372 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800833a:	f7fa fef7 	bl	800312c <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b19      	cmp	r3, #25
 8008346:	d914      	bls.n	8008372 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b20      	cmp	r3, #32
 800837e:	d1dc      	bne.n	800833a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f003 0320 	and.w	r3, r3, #32
 800838a:	2b20      	cmp	r3, #32
 800838c:	d003      	beq.n	8008396 <I2C_IsErrorOccurred+0xfa>
 800838e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008392:	2b00      	cmp	r3, #0
 8008394:	d09d      	beq.n	80082d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2220      	movs	r2, #32
 80083a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f043 0304 	orr.w	r3, r3, #4
 80083ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	f043 0301 	orr.w	r3, r3, #1
 80083cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	f043 0308 	orr.w	r3, r3, #8
 80083ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01c      	beq.n	8008464 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fe56 	bl	80080dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <I2C_IsErrorOccurred+0x1d4>)
 800843c:	400b      	ands	r3, r1
 800843e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	431a      	orrs	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008468:	4618      	mov	r0, r3
 800846a:	3728      	adds	r7, #40	; 0x28
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	fe00e800 	.word	0xfe00e800

08008474 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	817b      	strh	r3, [r7, #10]
 8008482:	4613      	mov	r3, r2
 8008484:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008486:	897b      	ldrh	r3, [r7, #10]
 8008488:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800848c:	7a7b      	ldrb	r3, [r7, #9]
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008494:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	4313      	orrs	r3, r2
 800849e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084a2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	0d5b      	lsrs	r3, r3, #21
 80084ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <I2C_TransferConfig+0x60>)
 80084b4:	430b      	orrs	r3, r1
 80084b6:	43db      	mvns	r3, r3
 80084b8:	ea02 0103 	and.w	r1, r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	03ff63ff 	.word	0x03ff63ff

080084d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	d138      	bne.n	8008560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e032      	b.n	8008562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2224      	movs	r2, #36	; 0x24
 8008508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0201 	bic.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800852a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e000      	b.n	8008562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
  }
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b20      	cmp	r3, #32
 8008582:	d139      	bne.n	80085f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800858e:	2302      	movs	r3, #2
 8008590:	e033      	b.n	80085fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2224      	movs	r2, #36	; 0x24
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0201 	bic.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80085c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0201 	orr.w	r2, r2, #1
 80085e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e000      	b.n	80085fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085f8:	2302      	movs	r3, #2
  }
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e0bf      	b.n	800879a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f9 fdea 	bl	8002208 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800864a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6999      	ldr	r1, [r3, #24]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008660:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6899      	ldr	r1, [r3, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b4a      	ldr	r3, [pc, #296]	; (80087a4 <HAL_LTDC_Init+0x19c>)
 800867c:	400b      	ands	r3, r1
 800867e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	041b      	lsls	r3, r3, #16
 8008686:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6899      	ldr	r1, [r3, #8]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	431a      	orrs	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68d9      	ldr	r1, [r3, #12]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <HAL_LTDC_Init+0x19c>)
 80086aa:	400b      	ands	r3, r1
 80086ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	041b      	lsls	r3, r3, #16
 80086b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68d9      	ldr	r1, [r3, #12]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1a      	ldr	r2, [r3, #32]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6919      	ldr	r1, [r3, #16]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b33      	ldr	r3, [pc, #204]	; (80087a4 <HAL_LTDC_Init+0x19c>)
 80086d8:	400b      	ands	r3, r1
 80086da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6919      	ldr	r1, [r3, #16]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	431a      	orrs	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6959      	ldr	r1, [r3, #20]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <HAL_LTDC_Init+0x19c>)
 8008706:	400b      	ands	r3, r1
 8008708:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6959      	ldr	r1, [r3, #20]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008738:	041b      	lsls	r3, r3, #16
 800873a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0206 	orr.w	r2, r2, #6
 8008776:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699a      	ldr	r2, [r3, #24]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	f000f800 	.word	0xf000f800

080087a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d023      	beq.n	8008812 <HAL_LTDC_IRQHandler+0x6a>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01e      	beq.n	8008812 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0204 	bic.w	r2, r2, #4
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2204      	movs	r2, #4
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087f2:	f043 0201 	orr.w	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2204      	movs	r2, #4
 8008800:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f86f 	bl	80088f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d023      	beq.n	8008864 <HAL_LTDC_IRQHandler+0xbc>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01e      	beq.n	8008864 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 0202 	bic.w	r2, r2, #2
 8008834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2202      	movs	r2, #2
 800883c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008844:	f043 0202 	orr.w	r2, r3, #2
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2204      	movs	r2, #4
 8008852:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f846 	bl	80088f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d01b      	beq.n	80088a6 <HAL_LTDC_IRQHandler+0xfe>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d016      	beq.n	80088a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0201 	bic.w	r2, r2, #1
 8008886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2201      	movs	r2, #1
 800888e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f82f 	bl	8008904 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01b      	beq.n	80088e8 <HAL_LTDC_IRQHandler+0x140>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d016      	beq.n	80088e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0208 	bic.w	r2, r2, #8
 80088c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2208      	movs	r2, #8
 80088d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f818 	bl	8008918 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80088e8:	bf00      	nop
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800892c:	b5b0      	push	{r4, r5, r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d101      	bne.n	8008946 <HAL_LTDC_ConfigLayer+0x1a>
 8008942:	2302      	movs	r3, #2
 8008944:	e02c      	b.n	80089a0 <HAL_LTDC_ConfigLayer+0x74>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2134      	movs	r1, #52	; 0x34
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	4413      	add	r3, r2
 8008962:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	4614      	mov	r4, r2
 800896a:	461d      	mov	r5, r3
 800896c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800896e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f81f 	bl	80089c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2201      	movs	r2, #1
 800898c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bdb0      	pop	{r4, r5, r7, pc}

080089a8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80089b6:	b2db      	uxtb	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b089      	sub	sp, #36	; 0x24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e0:	4413      	add	r3, r2
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	01db      	lsls	r3, r3, #7
 80089f0:	4413      	add	r3, r2
 80089f2:	3384      	adds	r3, #132	; 0x84
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	4611      	mov	r1, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	01d2      	lsls	r2, r2, #7
 8008a00:	440a      	add	r2, r1
 8008a02:	3284      	adds	r2, #132	; 0x84
 8008a04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008a08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	0c1b      	lsrs	r3, r3, #16
 8008a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1a:	4413      	add	r3, r2
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	440b      	add	r3, r1
 8008a2a:	3384      	adds	r3, #132	; 0x84
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a42:	4413      	add	r3, r2
 8008a44:	041b      	lsls	r3, r3, #16
 8008a46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	01db      	lsls	r3, r3, #7
 8008a52:	4413      	add	r3, r2
 8008a54:	3384      	adds	r3, #132	; 0x84
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	01d2      	lsls	r2, r2, #7
 8008a62:	440a      	add	r2, r1
 8008a64:	3284      	adds	r2, #132	; 0x84
 8008a66:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008a6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a7a:	4413      	add	r3, r2
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	01db      	lsls	r3, r3, #7
 8008a88:	440b      	add	r3, r1
 8008a8a:	3384      	adds	r3, #132	; 0x84
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	01db      	lsls	r3, r3, #7
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3384      	adds	r3, #132	; 0x84
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	01d2      	lsls	r2, r2, #7
 8008aae:	440a      	add	r2, r1
 8008ab0:	3284      	adds	r2, #132	; 0x84
 8008ab2:	f023 0307 	bic.w	r3, r3, #7
 8008ab6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	01db      	lsls	r3, r3, #7
 8008ac2:	4413      	add	r3, r2
 8008ac4:	3384      	adds	r3, #132	; 0x84
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008ade:	041b      	lsls	r3, r3, #16
 8008ae0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	061b      	lsls	r3, r3, #24
 8008ae8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	01db      	lsls	r3, r3, #7
 8008af4:	4413      	add	r3, r2
 8008af6:	3384      	adds	r3, #132	; 0x84
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	01db      	lsls	r3, r3, #7
 8008b04:	4413      	add	r3, r2
 8008b06:	3384      	adds	r3, #132	; 0x84
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b14:	461a      	mov	r2, r3
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4619      	mov	r1, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	01db      	lsls	r3, r3, #7
 8008b28:	440b      	add	r3, r1
 8008b2a:	3384      	adds	r3, #132	; 0x84
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	01db      	lsls	r3, r3, #7
 8008b3e:	4413      	add	r3, r2
 8008b40:	3384      	adds	r3, #132	; 0x84
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	01d2      	lsls	r2, r2, #7
 8008b4e:	440a      	add	r2, r1
 8008b50:	3284      	adds	r2, #132	; 0x84
 8008b52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	01db      	lsls	r3, r3, #7
 8008b62:	4413      	add	r3, r2
 8008b64:	3384      	adds	r3, #132	; 0x84
 8008b66:	461a      	mov	r2, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	01db      	lsls	r3, r3, #7
 8008b78:	4413      	add	r3, r2
 8008b7a:	3384      	adds	r3, #132	; 0x84
 8008b7c:	69da      	ldr	r2, [r3, #28]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	01db      	lsls	r3, r3, #7
 8008b88:	440b      	add	r3, r1
 8008b8a:	3384      	adds	r3, #132	; 0x84
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4b58      	ldr	r3, [pc, #352]	; (8008cf0 <LTDC_SetConfig+0x32c>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	6809      	ldr	r1, [r1, #0]
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	01c9      	lsls	r1, r1, #7
 8008ba6:	4401      	add	r1, r0
 8008ba8:	3184      	adds	r1, #132	; 0x84
 8008baa:	4313      	orrs	r3, r2
 8008bac:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	01db      	lsls	r3, r3, #7
 8008bb8:	4413      	add	r3, r2
 8008bba:	3384      	adds	r3, #132	; 0x84
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	01db      	lsls	r3, r3, #7
 8008bc8:	4413      	add	r3, r2
 8008bca:	3384      	adds	r3, #132	; 0x84
 8008bcc:	461a      	mov	r2, r3
 8008bce:	2300      	movs	r3, #0
 8008bd0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	01db      	lsls	r3, r3, #7
 8008bdc:	4413      	add	r3, r2
 8008bde:	3384      	adds	r3, #132	; 0x84
 8008be0:	461a      	mov	r2, r3
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	e01b      	b.n	8008c2e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d102      	bne.n	8008c04 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	e014      	b.n	8008c2e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	d00b      	beq.n	8008c24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d007      	beq.n	8008c24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d003      	beq.n	8008c24 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008c20:	2b07      	cmp	r3, #7
 8008c22:	d102      	bne.n	8008c2a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008c24:	2302      	movs	r3, #2
 8008c26:	61fb      	str	r3, [r7, #28]
 8008c28:	e001      	b.n	8008c2e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	01db      	lsls	r3, r3, #7
 8008c38:	4413      	add	r3, r2
 8008c3a:	3384      	adds	r3, #132	; 0x84
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	4611      	mov	r1, r2
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	01d2      	lsls	r2, r2, #7
 8008c48:	440a      	add	r2, r1
 8008c4a:	3284      	adds	r2, #132	; 0x84
 8008c4c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008c50:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	fb02 f303 	mul.w	r3, r2, r3
 8008c5c:	041a      	lsls	r2, r3, #16
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6859      	ldr	r1, [r3, #4]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	1acb      	subs	r3, r1, r3
 8008c68:	69f9      	ldr	r1, [r7, #28]
 8008c6a:	fb01 f303 	mul.w	r3, r1, r3
 8008c6e:	3303      	adds	r3, #3
 8008c70:	68f9      	ldr	r1, [r7, #12]
 8008c72:	6809      	ldr	r1, [r1, #0]
 8008c74:	4608      	mov	r0, r1
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	01c9      	lsls	r1, r1, #7
 8008c7a:	4401      	add	r1, r0
 8008c7c:	3184      	adds	r1, #132	; 0x84
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	01db      	lsls	r3, r3, #7
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3384      	adds	r3, #132	; 0x84
 8008c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4619      	mov	r1, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	01db      	lsls	r3, r3, #7
 8008c9c:	440b      	add	r3, r1
 8008c9e:	3384      	adds	r3, #132	; 0x84
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <LTDC_SetConfig+0x330>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	01db      	lsls	r3, r3, #7
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3384      	adds	r3, #132	; 0x84
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	01db      	lsls	r3, r3, #7
 8008cc8:	4413      	add	r3, r2
 8008cca:	3384      	adds	r3, #132	; 0x84
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	01d2      	lsls	r2, r2, #7
 8008cd8:	440a      	add	r2, r1
 8008cda:	3284      	adds	r2, #132	; 0x84
 8008cdc:	f043 0301 	orr.w	r3, r3, #1
 8008ce0:	6013      	str	r3, [r2, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	3724      	adds	r7, #36	; 0x24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	fffff8f8 	.word	0xfffff8f8
 8008cf4:	fffff800 	.word	0xfffff800

08008cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d06:	6013      	str	r3, [r2, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40007000 	.word	0x40007000

08008d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008d22:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d2e:	4b20      	ldr	r3, [pc, #128]	; (8008db0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1d      	ldr	r2, [pc, #116]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d44:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d46:	f7fa f9f1 	bl	800312c <HAL_GetTick>
 8008d4a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d4c:	e009      	b.n	8008d62 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d4e:	f7fa f9ed 	bl	800312c <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d5c:	d901      	bls.n	8008d62 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e022      	b.n	8008da8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008d62:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6e:	d1ee      	bne.n	8008d4e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a0f      	ldr	r2, [pc, #60]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d7c:	f7fa f9d6 	bl	800312c <HAL_GetTick>
 8008d80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d82:	e009      	b.n	8008d98 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008d84:	f7fa f9d2 	bl	800312c <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d92:	d901      	bls.n	8008d98 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e007      	b.n	8008da8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da4:	d1ee      	bne.n	8008d84 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40023800 	.word	0x40023800
 8008db4:	40007000 	.word	0x40007000

08008db8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008dc0:	f7fa f9b4 	bl	800312c <HAL_GetTick>
 8008dc4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e067      	b.n	8008ea0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10b      	bne.n	8008df4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f7f9 fad7 	bl	8002398 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008dea:	f241 3188 	movw	r1, #5000	; 0x1388
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f85e 	bl	8008eb0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	021a      	lsls	r2, r3, #8
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	2120      	movs	r1, #32
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f856 	bl	8008ecc <QSPI_WaitFlagStateUntilTimeout>
 8008e20:	4603      	mov	r3, r0
 8008e22:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008e24:	7afb      	ldrb	r3, [r7, #11]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d135      	bne.n	8008e96 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b1d      	ldr	r3, [pc, #116]	; (8008ea8 <HAL_QSPI_Init+0xf0>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6852      	ldr	r2, [r2, #4]
 8008e38:	0611      	lsls	r1, r2, #24
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68d2      	ldr	r2, [r2, #12]
 8008e3e:	4311      	orrs	r1, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	69d2      	ldr	r2, [r2, #28]
 8008e44:	4311      	orrs	r1, r2
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6a12      	ldr	r2, [r2, #32]
 8008e4a:	4311      	orrs	r1, r2
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	6812      	ldr	r2, [r2, #0]
 8008e50:	430b      	orrs	r3, r1
 8008e52:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	4b14      	ldr	r3, [pc, #80]	; (8008eac <HAL_QSPI_Init+0xf4>)
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6912      	ldr	r2, [r2, #16]
 8008e62:	0411      	lsls	r1, r2, #16
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6952      	ldr	r2, [r2, #20]
 8008e68:	4311      	orrs	r1, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	6992      	ldr	r2, [r2, #24]
 8008e6e:	4311      	orrs	r1, r2
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	430b      	orrs	r3, r1
 8008e76:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008e9e:	7afb      	ldrb	r3, [r7, #11]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	00ffff2f 	.word	0x00ffff2f
 8008eac:	ffe0f8fe 	.word	0xffe0f8fe

08008eb0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008edc:	e01a      	b.n	8008f14 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee4:	d016      	beq.n	8008f14 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ee6:	f7fa f921 	bl	800312c <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d302      	bcc.n	8008efc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10b      	bne.n	8008f14 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f08:	f043 0201 	orr.w	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e00e      	b.n	8008f32 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	bf14      	ite	ne
 8008f22:	2301      	movne	r3, #1
 8008f24:	2300      	moveq	r3, #0
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d1d6      	bne.n	8008ede <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008f44:	2300      	movs	r3, #0
 8008f46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e291      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 8087 	beq.w	800906e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f60:	4b96      	ldr	r3, [pc, #600]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f003 030c 	and.w	r3, r3, #12
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d00c      	beq.n	8008f86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f6c:	4b93      	ldr	r3, [pc, #588]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 030c 	and.w	r3, r3, #12
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d112      	bne.n	8008f9e <HAL_RCC_OscConfig+0x62>
 8008f78:	4b90      	ldr	r3, [pc, #576]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f84:	d10b      	bne.n	8008f9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f86:	4b8d      	ldr	r3, [pc, #564]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d06c      	beq.n	800906c <HAL_RCC_OscConfig+0x130>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d168      	bne.n	800906c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e26b      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa6:	d106      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x7a>
 8008fa8:	4b84      	ldr	r3, [pc, #528]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a83      	ldr	r2, [pc, #524]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	e02e      	b.n	8009014 <HAL_RCC_OscConfig+0xd8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10c      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x9c>
 8008fbe:	4b7f      	ldr	r3, [pc, #508]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a7e      	ldr	r2, [pc, #504]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	4b7c      	ldr	r3, [pc, #496]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a7b      	ldr	r2, [pc, #492]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e01d      	b.n	8009014 <HAL_RCC_OscConfig+0xd8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fe0:	d10c      	bne.n	8008ffc <HAL_RCC_OscConfig+0xc0>
 8008fe2:	4b76      	ldr	r3, [pc, #472]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a75      	ldr	r2, [pc, #468]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	4b73      	ldr	r3, [pc, #460]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a72      	ldr	r2, [pc, #456]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e00b      	b.n	8009014 <HAL_RCC_OscConfig+0xd8>
 8008ffc:	4b6f      	ldr	r3, [pc, #444]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a6e      	ldr	r2, [pc, #440]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4b6c      	ldr	r3, [pc, #432]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a6b      	ldr	r2, [pc, #428]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800900e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d013      	beq.n	8009044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800901c:	f7fa f886 	bl	800312c <HAL_GetTick>
 8009020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009022:	e008      	b.n	8009036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009024:	f7fa f882 	bl	800312c <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b64      	cmp	r3, #100	; 0x64
 8009030:	d901      	bls.n	8009036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e21f      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009036:	4b61      	ldr	r3, [pc, #388]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f0      	beq.n	8009024 <HAL_RCC_OscConfig+0xe8>
 8009042:	e014      	b.n	800906e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009044:	f7fa f872 	bl	800312c <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800904c:	f7fa f86e 	bl	800312c <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e20b      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905e:	4b57      	ldr	r3, [pc, #348]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f0      	bne.n	800904c <HAL_RCC_OscConfig+0x110>
 800906a:	e000      	b.n	800906e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800906c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	d069      	beq.n	800914e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800907a:	4b50      	ldr	r3, [pc, #320]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f003 030c 	and.w	r3, r3, #12
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009086:	4b4d      	ldr	r3, [pc, #308]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	f003 030c 	and.w	r3, r3, #12
 800908e:	2b08      	cmp	r3, #8
 8009090:	d11c      	bne.n	80090cc <HAL_RCC_OscConfig+0x190>
 8009092:	4b4a      	ldr	r3, [pc, #296]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d116      	bne.n	80090cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909e:	4b47      	ldr	r3, [pc, #284]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <HAL_RCC_OscConfig+0x17a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d001      	beq.n	80090b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e1df      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b6:	4b41      	ldr	r3, [pc, #260]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	493d      	ldr	r1, [pc, #244]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ca:	e040      	b.n	800914e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d023      	beq.n	800911c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090d4:	4b39      	ldr	r3, [pc, #228]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a38      	ldr	r2, [pc, #224]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090da:	f043 0301 	orr.w	r3, r3, #1
 80090de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e0:	f7fa f824 	bl	800312c <HAL_GetTick>
 80090e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e6:	e008      	b.n	80090fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090e8:	f7fa f820 	bl	800312c <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e1bd      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090fa:	4b30      	ldr	r3, [pc, #192]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f0      	beq.n	80090e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009106:	4b2d      	ldr	r3, [pc, #180]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	4929      	ldr	r1, [pc, #164]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009116:	4313      	orrs	r3, r2
 8009118:	600b      	str	r3, [r1, #0]
 800911a:	e018      	b.n	800914e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800911c:	4b27      	ldr	r3, [pc, #156]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a26      	ldr	r2, [pc, #152]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009122:	f023 0301 	bic.w	r3, r3, #1
 8009126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009128:	f7fa f800 	bl	800312c <HAL_GetTick>
 800912c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009130:	f7f9 fffc 	bl	800312c <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e199      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009142:	4b1e      	ldr	r3, [pc, #120]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1f0      	bne.n	8009130 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d038      	beq.n	80091cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d019      	beq.n	8009196 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009166:	4a15      	ldr	r2, [pc, #84]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009168:	f043 0301 	orr.w	r3, r3, #1
 800916c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800916e:	f7f9 ffdd 	bl	800312c <HAL_GetTick>
 8009172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009174:	e008      	b.n	8009188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009176:	f7f9 ffd9 	bl	800312c <HAL_GetTick>
 800917a:	4602      	mov	r2, r0
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b02      	cmp	r3, #2
 8009182:	d901      	bls.n	8009188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	e176      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009188:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800918a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800918c:	f003 0302 	and.w	r3, r3, #2
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0f0      	beq.n	8009176 <HAL_RCC_OscConfig+0x23a>
 8009194:	e01a      	b.n	80091cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 8009198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800919a:	4a08      	ldr	r2, [pc, #32]	; (80091bc <HAL_RCC_OscConfig+0x280>)
 800919c:	f023 0301 	bic.w	r3, r3, #1
 80091a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a2:	f7f9 ffc3 	bl	800312c <HAL_GetTick>
 80091a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a8:	e00a      	b.n	80091c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091aa:	f7f9 ffbf 	bl	800312c <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d903      	bls.n	80091c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e15c      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
 80091bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091c0:	4b91      	ldr	r3, [pc, #580]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80091c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1ee      	bne.n	80091aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0304 	and.w	r3, r3, #4
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 80a4 	beq.w	8009322 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091da:	4b8b      	ldr	r3, [pc, #556]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80091e6:	4b88      	ldr	r3, [pc, #544]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80091e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ea:	4a87      	ldr	r2, [pc, #540]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80091ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091f0:	6413      	str	r3, [r2, #64]	; 0x40
 80091f2:	4b85      	ldr	r3, [pc, #532]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091fa:	60bb      	str	r3, [r7, #8]
 80091fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091fe:	2301      	movs	r3, #1
 8009200:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009202:	4b82      	ldr	r3, [pc, #520]	; (800940c <HAL_RCC_OscConfig+0x4d0>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920a:	2b00      	cmp	r3, #0
 800920c:	d118      	bne.n	8009240 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800920e:	4b7f      	ldr	r3, [pc, #508]	; (800940c <HAL_RCC_OscConfig+0x4d0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a7e      	ldr	r2, [pc, #504]	; (800940c <HAL_RCC_OscConfig+0x4d0>)
 8009214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800921a:	f7f9 ff87 	bl	800312c <HAL_GetTick>
 800921e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009222:	f7f9 ff83 	bl	800312c <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b64      	cmp	r3, #100	; 0x64
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e120      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009234:	4b75      	ldr	r3, [pc, #468]	; (800940c <HAL_RCC_OscConfig+0x4d0>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d106      	bne.n	8009256 <HAL_RCC_OscConfig+0x31a>
 8009248:	4b6f      	ldr	r3, [pc, #444]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800924a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924c:	4a6e      	ldr	r2, [pc, #440]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800924e:	f043 0301 	orr.w	r3, r3, #1
 8009252:	6713      	str	r3, [r2, #112]	; 0x70
 8009254:	e02d      	b.n	80092b2 <HAL_RCC_OscConfig+0x376>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10c      	bne.n	8009278 <HAL_RCC_OscConfig+0x33c>
 800925e:	4b6a      	ldr	r3, [pc, #424]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009262:	4a69      	ldr	r2, [pc, #420]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	6713      	str	r3, [r2, #112]	; 0x70
 800926a:	4b67      	ldr	r3, [pc, #412]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800926c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926e:	4a66      	ldr	r2, [pc, #408]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009270:	f023 0304 	bic.w	r3, r3, #4
 8009274:	6713      	str	r3, [r2, #112]	; 0x70
 8009276:	e01c      	b.n	80092b2 <HAL_RCC_OscConfig+0x376>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	2b05      	cmp	r3, #5
 800927e:	d10c      	bne.n	800929a <HAL_RCC_OscConfig+0x35e>
 8009280:	4b61      	ldr	r3, [pc, #388]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009284:	4a60      	ldr	r2, [pc, #384]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009286:	f043 0304 	orr.w	r3, r3, #4
 800928a:	6713      	str	r3, [r2, #112]	; 0x70
 800928c:	4b5e      	ldr	r3, [pc, #376]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800928e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009290:	4a5d      	ldr	r2, [pc, #372]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009292:	f043 0301 	orr.w	r3, r3, #1
 8009296:	6713      	str	r3, [r2, #112]	; 0x70
 8009298:	e00b      	b.n	80092b2 <HAL_RCC_OscConfig+0x376>
 800929a:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	4a5a      	ldr	r2, [pc, #360]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80092a0:	f023 0301 	bic.w	r3, r3, #1
 80092a4:	6713      	str	r3, [r2, #112]	; 0x70
 80092a6:	4b58      	ldr	r3, [pc, #352]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	4a57      	ldr	r2, [pc, #348]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80092ac:	f023 0304 	bic.w	r3, r3, #4
 80092b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d015      	beq.n	80092e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ba:	f7f9 ff37 	bl	800312c <HAL_GetTick>
 80092be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c0:	e00a      	b.n	80092d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092c2:	f7f9 ff33 	bl	800312c <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e0ce      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d8:	4b4b      	ldr	r3, [pc, #300]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0ee      	beq.n	80092c2 <HAL_RCC_OscConfig+0x386>
 80092e4:	e014      	b.n	8009310 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e6:	f7f9 ff21 	bl	800312c <HAL_GetTick>
 80092ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092ec:	e00a      	b.n	8009304 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ee:	f7f9 ff1d 	bl	800312c <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e0b8      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009304:	4b40      	ldr	r3, [pc, #256]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1ee      	bne.n	80092ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d105      	bne.n	8009322 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009316:	4b3c      	ldr	r3, [pc, #240]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931a:	4a3b      	ldr	r2, [pc, #236]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800931c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 80a4 	beq.w	8009474 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f003 030c 	and.w	r3, r3, #12
 8009334:	2b08      	cmp	r3, #8
 8009336:	d06b      	beq.n	8009410 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d149      	bne.n	80093d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009340:	4b31      	ldr	r3, [pc, #196]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a30      	ldr	r2, [pc, #192]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800934a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800934c:	f7f9 feee 	bl	800312c <HAL_GetTick>
 8009350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009354:	f7f9 feea 	bl	800312c <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e087      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009366:	4b28      	ldr	r3, [pc, #160]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1f0      	bne.n	8009354 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69da      	ldr	r2, [r3, #28]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	019b      	lsls	r3, r3, #6
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	085b      	lsrs	r3, r3, #1
 800938a:	3b01      	subs	r3, #1
 800938c:	041b      	lsls	r3, r3, #16
 800938e:	431a      	orrs	r2, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	061b      	lsls	r3, r3, #24
 8009396:	4313      	orrs	r3, r2
 8009398:	4a1b      	ldr	r2, [pc, #108]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 800939a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800939e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093a0:	4b19      	ldr	r3, [pc, #100]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a18      	ldr	r2, [pc, #96]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ac:	f7f9 febe 	bl	800312c <HAL_GetTick>
 80093b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b2:	e008      	b.n	80093c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093b4:	f7f9 feba 	bl	800312c <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d901      	bls.n	80093c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e057      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093c6:	4b10      	ldr	r3, [pc, #64]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0f0      	beq.n	80093b4 <HAL_RCC_OscConfig+0x478>
 80093d2:	e04f      	b.n	8009474 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d4:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a0b      	ldr	r2, [pc, #44]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e0:	f7f9 fea4 	bl	800312c <HAL_GetTick>
 80093e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e6:	e008      	b.n	80093fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e8:	f7f9 fea0 	bl	800312c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e03d      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093fa:	4b03      	ldr	r3, [pc, #12]	; (8009408 <HAL_RCC_OscConfig+0x4cc>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1f0      	bne.n	80093e8 <HAL_RCC_OscConfig+0x4ac>
 8009406:	e035      	b.n	8009474 <HAL_RCC_OscConfig+0x538>
 8009408:	40023800 	.word	0x40023800
 800940c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <HAL_RCC_OscConfig+0x544>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d028      	beq.n	8009470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009428:	429a      	cmp	r2, r3
 800942a:	d121      	bne.n	8009470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009436:	429a      	cmp	r2, r3
 8009438:	d11a      	bne.n	8009470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009440:	4013      	ands	r3, r2
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009446:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009448:	4293      	cmp	r3, r2
 800944a:	d111      	bne.n	8009470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	3b01      	subs	r3, #1
 800945a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d107      	bne.n	8009470 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800946c:	429a      	cmp	r2, r3
 800946e:	d001      	beq.n	8009474 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40023800 	.word	0x40023800

08009484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009498:	2301      	movs	r3, #1
 800949a:	e0d0      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800949c:	4b6a      	ldr	r3, [pc, #424]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d910      	bls.n	80094cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094aa:	4b67      	ldr	r3, [pc, #412]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f023 020f 	bic.w	r2, r3, #15
 80094b2:	4965      	ldr	r1, [pc, #404]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ba:	4b63      	ldr	r3, [pc, #396]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d001      	beq.n	80094cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0b8      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d020      	beq.n	800951a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094e4:	4b59      	ldr	r3, [pc, #356]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	4a58      	ldr	r2, [pc, #352]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 80094ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094fc:	4b53      	ldr	r3, [pc, #332]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	4a52      	ldr	r2, [pc, #328]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009508:	4b50      	ldr	r3, [pc, #320]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	494d      	ldr	r1, [pc, #308]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009516:	4313      	orrs	r3, r2
 8009518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d040      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d107      	bne.n	800953e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800952e:	4b47      	ldr	r3, [pc, #284]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d115      	bne.n	8009566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e07f      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d107      	bne.n	8009556 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009546:	4b41      	ldr	r3, [pc, #260]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e073      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009556:	4b3d      	ldr	r3, [pc, #244]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e06b      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009566:	4b39      	ldr	r3, [pc, #228]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f023 0203 	bic.w	r2, r3, #3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	4936      	ldr	r1, [pc, #216]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009574:	4313      	orrs	r3, r2
 8009576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009578:	f7f9 fdd8 	bl	800312c <HAL_GetTick>
 800957c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800957e:	e00a      	b.n	8009596 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009580:	f7f9 fdd4 	bl	800312c <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	f241 3288 	movw	r2, #5000	; 0x1388
 800958e:	4293      	cmp	r3, r2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e053      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009596:	4b2d      	ldr	r3, [pc, #180]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f003 020c 	and.w	r2, r3, #12
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d1eb      	bne.n	8009580 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095a8:	4b27      	ldr	r3, [pc, #156]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d210      	bcs.n	80095d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f023 020f 	bic.w	r2, r3, #15
 80095be:	4922      	ldr	r1, [pc, #136]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <HAL_RCC_ClockConfig+0x1c4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d001      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e032      	b.n	800963e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0304 	and.w	r3, r3, #4
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d008      	beq.n	80095f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095e4:	4b19      	ldr	r3, [pc, #100]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	4916      	ldr	r1, [pc, #88]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 0308 	and.w	r3, r3, #8
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009602:	4b12      	ldr	r3, [pc, #72]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	00db      	lsls	r3, r3, #3
 8009610:	490e      	ldr	r1, [pc, #56]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 8009612:	4313      	orrs	r3, r2
 8009614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009616:	f000 f821 	bl	800965c <HAL_RCC_GetSysClockFreq>
 800961a:	4602      	mov	r2, r0
 800961c:	4b0b      	ldr	r3, [pc, #44]	; (800964c <HAL_RCC_ClockConfig+0x1c8>)
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	091b      	lsrs	r3, r3, #4
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	490a      	ldr	r1, [pc, #40]	; (8009650 <HAL_RCC_ClockConfig+0x1cc>)
 8009628:	5ccb      	ldrb	r3, [r1, r3]
 800962a:	fa22 f303 	lsr.w	r3, r2, r3
 800962e:	4a09      	ldr	r2, [pc, #36]	; (8009654 <HAL_RCC_ClockConfig+0x1d0>)
 8009630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009632:	4b09      	ldr	r3, [pc, #36]	; (8009658 <HAL_RCC_ClockConfig+0x1d4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f7f9 fba8 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	40023c00 	.word	0x40023c00
 800964c:	40023800 	.word	0x40023800
 8009650:	08029d98 	.word	0x08029d98
 8009654:	20000000 	.word	0x20000000
 8009658:	20000004 	.word	0x20000004

0800965c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800965c:	b5b0      	push	{r4, r5, r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009662:	2100      	movs	r1, #0
 8009664:	6079      	str	r1, [r7, #4]
 8009666:	2100      	movs	r1, #0
 8009668:	60f9      	str	r1, [r7, #12]
 800966a:	2100      	movs	r1, #0
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800966e:	2100      	movs	r1, #0
 8009670:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009672:	4952      	ldr	r1, [pc, #328]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 8009674:	6889      	ldr	r1, [r1, #8]
 8009676:	f001 010c 	and.w	r1, r1, #12
 800967a:	2908      	cmp	r1, #8
 800967c:	d00d      	beq.n	800969a <HAL_RCC_GetSysClockFreq+0x3e>
 800967e:	2908      	cmp	r1, #8
 8009680:	f200 8094 	bhi.w	80097ac <HAL_RCC_GetSysClockFreq+0x150>
 8009684:	2900      	cmp	r1, #0
 8009686:	d002      	beq.n	800968e <HAL_RCC_GetSysClockFreq+0x32>
 8009688:	2904      	cmp	r1, #4
 800968a:	d003      	beq.n	8009694 <HAL_RCC_GetSysClockFreq+0x38>
 800968c:	e08e      	b.n	80097ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800968e:	4b4c      	ldr	r3, [pc, #304]	; (80097c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8009690:	60bb      	str	r3, [r7, #8]
      break;
 8009692:	e08e      	b.n	80097b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009694:	4b4b      	ldr	r3, [pc, #300]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8009696:	60bb      	str	r3, [r7, #8]
      break;
 8009698:	e08b      	b.n	80097b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800969a:	4948      	ldr	r1, [pc, #288]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 800969c:	6849      	ldr	r1, [r1, #4]
 800969e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80096a2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80096a4:	4945      	ldr	r1, [pc, #276]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 80096a6:	6849      	ldr	r1, [r1, #4]
 80096a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d024      	beq.n	80096fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096b0:	4942      	ldr	r1, [pc, #264]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 80096b2:	6849      	ldr	r1, [r1, #4]
 80096b4:	0989      	lsrs	r1, r1, #6
 80096b6:	4608      	mov	r0, r1
 80096b8:	f04f 0100 	mov.w	r1, #0
 80096bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80096c0:	f04f 0500 	mov.w	r5, #0
 80096c4:	ea00 0204 	and.w	r2, r0, r4
 80096c8:	ea01 0305 	and.w	r3, r1, r5
 80096cc:	493d      	ldr	r1, [pc, #244]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80096ce:	fb01 f003 	mul.w	r0, r1, r3
 80096d2:	2100      	movs	r1, #0
 80096d4:	fb01 f102 	mul.w	r1, r1, r2
 80096d8:	1844      	adds	r4, r0, r1
 80096da:	493a      	ldr	r1, [pc, #232]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80096dc:	fba2 0101 	umull	r0, r1, r2, r1
 80096e0:	1863      	adds	r3, r4, r1
 80096e2:	4619      	mov	r1, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	f7f6 fde0 	bl	80002b0 <__aeabi_uldivmod>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4613      	mov	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	e04a      	b.n	8009790 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096fa:	4b30      	ldr	r3, [pc, #192]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	099b      	lsrs	r3, r3, #6
 8009700:	461a      	mov	r2, r3
 8009702:	f04f 0300 	mov.w	r3, #0
 8009706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800970a:	f04f 0100 	mov.w	r1, #0
 800970e:	ea02 0400 	and.w	r4, r2, r0
 8009712:	ea03 0501 	and.w	r5, r3, r1
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f04f 0200 	mov.w	r2, #0
 800971e:	f04f 0300 	mov.w	r3, #0
 8009722:	014b      	lsls	r3, r1, #5
 8009724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009728:	0142      	lsls	r2, r0, #5
 800972a:	4610      	mov	r0, r2
 800972c:	4619      	mov	r1, r3
 800972e:	1b00      	subs	r0, r0, r4
 8009730:	eb61 0105 	sbc.w	r1, r1, r5
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	018b      	lsls	r3, r1, #6
 800973e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009742:	0182      	lsls	r2, r0, #6
 8009744:	1a12      	subs	r2, r2, r0
 8009746:	eb63 0301 	sbc.w	r3, r3, r1
 800974a:	f04f 0000 	mov.w	r0, #0
 800974e:	f04f 0100 	mov.w	r1, #0
 8009752:	00d9      	lsls	r1, r3, #3
 8009754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009758:	00d0      	lsls	r0, r2, #3
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	1912      	adds	r2, r2, r4
 8009760:	eb45 0303 	adc.w	r3, r5, r3
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f04f 0100 	mov.w	r1, #0
 800976c:	0299      	lsls	r1, r3, #10
 800976e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009772:	0290      	lsls	r0, r2, #10
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4610      	mov	r0, r2
 800977a:	4619      	mov	r1, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	461a      	mov	r2, r3
 8009780:	f04f 0300 	mov.w	r3, #0
 8009784:	f7f6 fd94 	bl	80002b0 <__aeabi_uldivmod>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	4613      	mov	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009790:	4b0a      	ldr	r3, [pc, #40]	; (80097bc <HAL_RCC_GetSysClockFreq+0x160>)
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	0c1b      	lsrs	r3, r3, #16
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	3301      	adds	r3, #1
 800979c:	005b      	lsls	r3, r3, #1
 800979e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a8:	60bb      	str	r3, [r7, #8]
      break;
 80097aa:	e002      	b.n	80097b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097ac:	4b04      	ldr	r3, [pc, #16]	; (80097c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80097ae:	60bb      	str	r3, [r7, #8]
      break;
 80097b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097b2:	68bb      	ldr	r3, [r7, #8]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bdb0      	pop	{r4, r5, r7, pc}
 80097bc:	40023800 	.word	0x40023800
 80097c0:	00f42400 	.word	0x00f42400
 80097c4:	017d7840 	.word	0x017d7840

080097c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097cc:	4b03      	ldr	r3, [pc, #12]	; (80097dc <HAL_RCC_GetHCLKFreq+0x14>)
 80097ce:	681b      	ldr	r3, [r3, #0]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20000000 	.word	0x20000000

080097e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80097e4:	f7ff fff0 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 80097e8:	4602      	mov	r2, r0
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	0a9b      	lsrs	r3, r3, #10
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	4903      	ldr	r1, [pc, #12]	; (8009804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097f6:	5ccb      	ldrb	r3, [r1, r3]
 80097f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40023800 	.word	0x40023800
 8009804:	08029da8 	.word	0x08029da8

08009808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800980c:	f7ff ffdc 	bl	80097c8 <HAL_RCC_GetHCLKFreq>
 8009810:	4602      	mov	r2, r0
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	0b5b      	lsrs	r3, r3, #13
 8009818:	f003 0307 	and.w	r3, r3, #7
 800981c:	4903      	ldr	r1, [pc, #12]	; (800982c <HAL_RCC_GetPCLK2Freq+0x24>)
 800981e:	5ccb      	ldrb	r3, [r1, r3]
 8009820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009824:	4618      	mov	r0, r3
 8009826:	bd80      	pop	{r7, pc}
 8009828:	40023800 	.word	0x40023800
 800982c:	08029da8 	.word	0x08029da8

08009830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	220f      	movs	r2, #15
 800983e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009840:	4b12      	ldr	r3, [pc, #72]	; (800988c <HAL_RCC_GetClockConfig+0x5c>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0203 	and.w	r2, r3, #3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800984c:	4b0f      	ldr	r3, [pc, #60]	; (800988c <HAL_RCC_GetClockConfig+0x5c>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009858:	4b0c      	ldr	r3, [pc, #48]	; (800988c <HAL_RCC_GetClockConfig+0x5c>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009864:	4b09      	ldr	r3, [pc, #36]	; (800988c <HAL_RCC_GetClockConfig+0x5c>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	08db      	lsrs	r3, r3, #3
 800986a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <HAL_RCC_GetClockConfig+0x60>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 020f 	and.w	r2, r3, #15
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	601a      	str	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop
 800988c:	40023800 	.word	0x40023800
 8009890:	40023c00 	.word	0x40023c00

08009894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d012      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80098bc:	4b69      	ldr	r3, [pc, #420]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	4a68      	ldr	r2, [pc, #416]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80098c6:	6093      	str	r3, [r2, #8]
 80098c8:	4b66      	ldr	r3, [pc, #408]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d0:	4964      	ldr	r1, [pc, #400]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d017      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098ee:	4b5d      	ldr	r3, [pc, #372]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fc:	4959      	ldr	r1, [pc, #356]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800990c:	d101      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800990e:	2301      	movs	r3, #1
 8009910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800991a:	2301      	movs	r3, #1
 800991c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d017      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800992a:	4b4e      	ldr	r3, [pc, #312]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800992c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	494a      	ldr	r1, [pc, #296]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009948:	d101      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009956:	2301      	movs	r3, #1
 8009958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0320 	and.w	r3, r3, #32
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 808b 	beq.w	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009978:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	4a39      	ldr	r2, [pc, #228]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009982:	6413      	str	r3, [r2, #64]	; 0x40
 8009984:	4b37      	ldr	r3, [pc, #220]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009990:	4b35      	ldr	r3, [pc, #212]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a34      	ldr	r2, [pc, #208]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800999a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800999c:	f7f9 fbc6 	bl	800312c <HAL_GetTick>
 80099a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80099a2:	e008      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099a4:	f7f9 fbc2 	bl	800312c <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	2b64      	cmp	r3, #100	; 0x64
 80099b0:	d901      	bls.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e357      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80099b6:	4b2c      	ldr	r3, [pc, #176]	; (8009a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0f0      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80099c2:	4b28      	ldr	r3, [pc, #160]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d035      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d02e      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099e0:	4b20      	ldr	r3, [pc, #128]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80099ea:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ee:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80099f6:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099fa:	4a1a      	ldr	r2, [pc, #104]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009a02:	4a18      	ldr	r2, [pc, #96]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009a08:	4b16      	ldr	r3, [pc, #88]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d114      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7f9 fb8a 	bl	800312c <HAL_GetTick>
 8009a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a1a:	e00a      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a1c:	f7f9 fb86 	bl	800312c <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e319      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a32:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0ee      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a4a:	d111      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009a4c:	4b05      	ldr	r3, [pc, #20]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009a58:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009a5a:	400b      	ands	r3, r1
 8009a5c:	4901      	ldr	r1, [pc, #4]	; (8009a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	608b      	str	r3, [r1, #8]
 8009a62:	e00b      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009a64:	40023800 	.word	0x40023800
 8009a68:	40007000 	.word	0x40007000
 8009a6c:	0ffffcff 	.word	0x0ffffcff
 8009a70:	4bb1      	ldr	r3, [pc, #708]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	4ab0      	ldr	r2, [pc, #704]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a7a:	6093      	str	r3, [r2, #8]
 8009a7c:	4bae      	ldr	r3, [pc, #696]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a88:	49ab      	ldr	r1, [pc, #684]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d010      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a9a:	4ba7      	ldr	r3, [pc, #668]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aa0:	4aa5      	ldr	r2, [pc, #660]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009aaa:	4ba3      	ldr	r3, [pc, #652]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	49a0      	ldr	r1, [pc, #640]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ac8:	4b9b      	ldr	r3, [pc, #620]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ad6:	4998      	ldr	r1, [pc, #608]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009aea:	4b93      	ldr	r3, [pc, #588]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af8:	498f      	ldr	r1, [pc, #572]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b0c:	4b8a      	ldr	r3, [pc, #552]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b1a:	4987      	ldr	r1, [pc, #540]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b2e:	4b82      	ldr	r3, [pc, #520]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3c:	497e      	ldr	r1, [pc, #504]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b50:	4b79      	ldr	r3, [pc, #484]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b56:	f023 0203 	bic.w	r2, r3, #3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5e:	4976      	ldr	r1, [pc, #472]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b72:	4b71      	ldr	r3, [pc, #452]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b78:	f023 020c 	bic.w	r2, r3, #12
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b80:	496d      	ldr	r1, [pc, #436]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b94:	4b68      	ldr	r3, [pc, #416]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba2:	4965      	ldr	r1, [pc, #404]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bb6:	4b60      	ldr	r3, [pc, #384]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc4:	495c      	ldr	r1, [pc, #368]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bd8:	4b57      	ldr	r3, [pc, #348]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be6:	4954      	ldr	r1, [pc, #336]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009bfa:	4b4f      	ldr	r3, [pc, #316]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c08:	494b      	ldr	r1, [pc, #300]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00a      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009c1c:	4b46      	ldr	r3, [pc, #280]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2a:	4943      	ldr	r1, [pc, #268]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009c3e:	4b3e      	ldr	r3, [pc, #248]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4c:	493a      	ldr	r1, [pc, #232]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00a      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c60:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c6e:	4932      	ldr	r1, [pc, #200]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d011      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009c82:	4b2d      	ldr	r3, [pc, #180]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c90:	4929      	ldr	r1, [pc, #164]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ca0:	d101      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f003 0308 	and.w	r3, r3, #8
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cc2:	4b1d      	ldr	r3, [pc, #116]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd0:	4919      	ldr	r1, [pc, #100]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009ce4:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cf4:	4910      	ldr	r1, [pc, #64]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d006      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80d9 	beq.w	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a08      	ldr	r2, [pc, #32]	; (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009d16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d1c:	f7f9 fa06 	bl	800312c <HAL_GetTick>
 8009d20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d22:	e00b      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d24:	f7f9 fa02 	bl	800312c <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b64      	cmp	r3, #100	; 0x64
 8009d30:	d904      	bls.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e197      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009d36:	bf00      	nop
 8009d38:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d3c:	4b6c      	ldr	r3, [pc, #432]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1ed      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d021      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d11d      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d5c:	4b64      	ldr	r3, [pc, #400]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d62:	0c1b      	lsrs	r3, r3, #16
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d6a:	4b61      	ldr	r3, [pc, #388]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d70:	0e1b      	lsrs	r3, r3, #24
 8009d72:	f003 030f 	and.w	r3, r3, #15
 8009d76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	019a      	lsls	r2, r3, #6
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	041b      	lsls	r3, r3, #16
 8009d82:	431a      	orrs	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	061b      	lsls	r3, r3, #24
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	071b      	lsls	r3, r3, #28
 8009d90:	4957      	ldr	r1, [pc, #348]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dac:	d00a      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d02e      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dc2:	d129      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009dc4:	4b4a      	ldr	r3, [pc, #296]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dca:	0c1b      	lsrs	r3, r3, #16
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009dd2:	4b47      	ldr	r3, [pc, #284]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dd8:	0f1b      	lsrs	r3, r3, #28
 8009dda:	f003 0307 	and.w	r3, r3, #7
 8009dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	019a      	lsls	r2, r3, #6
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	041b      	lsls	r3, r3, #16
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	061b      	lsls	r3, r3, #24
 8009df2:	431a      	orrs	r2, r3
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	071b      	lsls	r3, r3, #28
 8009df8:	493d      	ldr	r1, [pc, #244]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009e00:	4b3b      	ldr	r3, [pc, #236]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e06:	f023 021f 	bic.w	r2, r3, #31
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4937      	ldr	r1, [pc, #220]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d01d      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e24:	4b32      	ldr	r3, [pc, #200]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2a:	0e1b      	lsrs	r3, r3, #24
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e32:	4b2f      	ldr	r3, [pc, #188]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e38:	0f1b      	lsrs	r3, r3, #28
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	019a      	lsls	r2, r3, #6
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	041b      	lsls	r3, r3, #16
 8009e4c:	431a      	orrs	r2, r3
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	061b      	lsls	r3, r3, #24
 8009e52:	431a      	orrs	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	071b      	lsls	r3, r3, #28
 8009e58:	4925      	ldr	r1, [pc, #148]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d011      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	019a      	lsls	r2, r3, #6
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	061b      	lsls	r3, r3, #24
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	071b      	lsls	r3, r3, #28
 8009e88:	4919      	ldr	r1, [pc, #100]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009e90:	4b17      	ldr	r3, [pc, #92]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a16      	ldr	r2, [pc, #88]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e9c:	f7f9 f946 	bl	800312c <HAL_GetTick>
 8009ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ea4:	f7f9 f942 	bl	800312c <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b64      	cmp	r3, #100	; 0x64
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e0d7      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009eb6:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	f040 80cd 	bne.w	800a064 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ed6:	f7f9 f929 	bl	800312c <HAL_GetTick>
 8009eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009edc:	e00a      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ede:	f7f9 f925 	bl	800312c <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	2b64      	cmp	r3, #100	; 0x64
 8009eea:	d903      	bls.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e0ba      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ef4:	4b5e      	ldr	r3, [pc, #376]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f00:	d0ed      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d003      	beq.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d009      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d02e      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d12a      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009f2a:	4b51      	ldr	r3, [pc, #324]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f38:	4b4d      	ldr	r3, [pc, #308]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3e:	0f1b      	lsrs	r3, r3, #28
 8009f40:	f003 0307 	and.w	r3, r3, #7
 8009f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	019a      	lsls	r2, r3, #6
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	041b      	lsls	r3, r3, #16
 8009f50:	431a      	orrs	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	061b      	lsls	r3, r3, #24
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	4944      	ldr	r1, [pc, #272]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009f66:	4b42      	ldr	r3, [pc, #264]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	3b01      	subs	r3, #1
 8009f76:	021b      	lsls	r3, r3, #8
 8009f78:	493d      	ldr	r1, [pc, #244]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d022      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f94:	d11d      	bne.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f96:	4b36      	ldr	r3, [pc, #216]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f9c:	0e1b      	lsrs	r3, r3, #24
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009fa4:	4b32      	ldr	r3, [pc, #200]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	0f1b      	lsrs	r3, r3, #28
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	019a      	lsls	r2, r3, #6
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	041b      	lsls	r3, r3, #16
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	061b      	lsls	r3, r3, #24
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	071b      	lsls	r3, r3, #28
 8009fca:	4929      	ldr	r1, [pc, #164]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0308 	and.w	r3, r3, #8
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d028      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009fde:	4b24      	ldr	r3, [pc, #144]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	0e1b      	lsrs	r3, r3, #24
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009fec:	4b20      	ldr	r3, [pc, #128]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff2:	0c1b      	lsrs	r3, r3, #16
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	019a      	lsls	r2, r3, #6
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	041b      	lsls	r3, r3, #16
 800a004:	431a      	orrs	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	061b      	lsls	r3, r3, #24
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	071b      	lsls	r3, r3, #28
 800a012:	4917      	ldr	r1, [pc, #92]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a014:	4313      	orrs	r3, r2
 800a016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a01a:	4b15      	ldr	r3, [pc, #84]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a028:	4911      	ldr	r1, [pc, #68]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a030:	4b0f      	ldr	r3, [pc, #60]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a0e      	ldr	r2, [pc, #56]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a03a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a03c:	f7f9 f876 	bl	800312c <HAL_GetTick>
 800a040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a042:	e008      	b.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a044:	f7f9 f872 	bl	800312c <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b64      	cmp	r3, #100	; 0x64
 800a050:	d901      	bls.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e007      	b.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a056:	4b06      	ldr	r3, [pc, #24]	; (800a070 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a062:	d1ef      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3720      	adds	r7, #32
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	40023800 	.word	0x40023800

0800a074 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a092:	f040 808c 	bne.w	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a096:	4b95      	ldr	r3, [pc, #596]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a09c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a0a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0ac:	d07c      	beq.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0b4:	d87d      	bhi.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0c2:	d039      	beq.n	800a138 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a0c4:	e075      	b.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a0c6:	4b89      	ldr	r3, [pc, #548]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d108      	bne.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a0d2:	4b86      	ldr	r3, [pc, #536]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0da:	4a85      	ldr	r2, [pc, #532]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a0dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	e007      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a0e4:	4b81      	ldr	r3, [pc, #516]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a0ec:	4a81      	ldr	r2, [pc, #516]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a0f4:	4b7d      	ldr	r3, [pc, #500]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fa:	0e1b      	lsrs	r3, r3, #24
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a102:	4b7a      	ldr	r3, [pc, #488]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a108:	099b      	lsrs	r3, r3, #6
 800a10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	fb02 f203 	mul.w	r2, r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a11c:	4b73      	ldr	r3, [pc, #460]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a122:	0a1b      	lsrs	r3, r3, #8
 800a124:	f003 031f 	and.w	r3, r3, #31
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	fbb2 f3f3 	udiv	r3, r2, r3
 800a134:	617b      	str	r3, [r7, #20]
        break;
 800a136:	e03d      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a138:	4b6c      	ldr	r3, [pc, #432]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d108      	bne.n	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a144:	4b69      	ldr	r3, [pc, #420]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a14c:	4a68      	ldr	r2, [pc, #416]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	e007      	b.n	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a156:	4b65      	ldr	r3, [pc, #404]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a15e:	4a65      	ldr	r2, [pc, #404]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a160:	fbb2 f3f3 	udiv	r3, r2, r3
 800a164:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a166:	4b61      	ldr	r3, [pc, #388]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a16c:	0e1b      	lsrs	r3, r3, #24
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a174:	4b5d      	ldr	r3, [pc, #372]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a17a:	099b      	lsrs	r3, r3, #6
 800a17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	fb02 f203 	mul.w	r2, r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a18e:	4b57      	ldr	r3, [pc, #348]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	3301      	adds	r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a4:	617b      	str	r3, [r7, #20]
        break;
 800a1a6:	e005      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1a8:	4b53      	ldr	r3, [pc, #332]	; (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a1aa:	617b      	str	r3, [r7, #20]
        break;
 800a1ac:	e002      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800a1ae:	bf00      	nop
 800a1b0:	e000      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800a1b2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1ba:	f040 808c 	bne.w	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a1be:	4b4b      	ldr	r3, [pc, #300]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a1cc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1d4:	d07c      	beq.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1dc:	d87d      	bhi.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1ea:	d039      	beq.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a1ec:	e075      	b.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a1ee:	4b3f      	ldr	r3, [pc, #252]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d108      	bne.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a1fa:	4b3c      	ldr	r3, [pc, #240]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a202:	4a3b      	ldr	r2, [pc, #236]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a204:	fbb2 f3f3 	udiv	r3, r2, r3
 800a208:	613b      	str	r3, [r7, #16]
 800a20a:	e007      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a20c:	4b37      	ldr	r3, [pc, #220]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a214:	4a37      	ldr	r2, [pc, #220]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a21c:	4b33      	ldr	r3, [pc, #204]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a222:	0e1b      	lsrs	r3, r3, #24
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a22a:	4b30      	ldr	r3, [pc, #192]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a22c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a230:	099b      	lsrs	r3, r3, #6
 800a232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	fb02 f203 	mul.w	r2, r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a242:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a244:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a24a:	0a1b      	lsrs	r3, r3, #8
 800a24c:	f003 031f 	and.w	r3, r3, #31
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25c:	617b      	str	r3, [r7, #20]
        break;
 800a25e:	e03d      	b.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a260:	4b22      	ldr	r3, [pc, #136]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d108      	bne.n	800a27e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a26c:	4b1f      	ldr	r3, [pc, #124]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a274:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a276:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27a:	613b      	str	r3, [r7, #16]
 800a27c:	e007      	b.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a27e:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a286:	4a1b      	ldr	r2, [pc, #108]	; (800a2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a288:	fbb2 f3f3 	udiv	r3, r2, r3
 800a28c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a28e:	4b17      	ldr	r3, [pc, #92]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a294:	0e1b      	lsrs	r3, r3, #24
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a29c:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2a2:	099b      	lsrs	r3, r3, #6
 800a2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	fb02 f203 	mul.w	r2, r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2b4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2bc:	f003 031f 	and.w	r3, r3, #31
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2cc:	617b      	str	r3, [r7, #20]
        break;
 800a2ce:	e005      	b.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a2d2:	617b      	str	r3, [r7, #20]
        break;
 800a2d4:	e002      	b.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800a2d6:	bf00      	nop
 800a2d8:	e000      	b.n	800a2dc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800a2da:	bf00      	nop

  return frequency;
 800a2dc:	697b      	ldr	r3, [r7, #20]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	40023800 	.word	0x40023800
 800a2f0:	00f42400 	.word	0x00f42400
 800a2f4:	017d7840 	.word	0x017d7840
 800a2f8:	00bb8000 	.word	0x00bb8000

0800a2fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e081      	b.n	800a412 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7f5b      	ldrb	r3, [r3, #29]
 800a312:	b2db      	uxtb	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	d105      	bne.n	800a324 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f8 f8ca 	bl	80024b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	22ca      	movs	r2, #202	; 0xca
 800a330:	625a      	str	r2, [r3, #36]	; 0x24
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2253      	movs	r2, #83	; 0x53
 800a338:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fb16 	bl	800a96c <RTC_EnterInitMode>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	22ff      	movs	r2, #255	; 0xff
 800a34c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2204      	movs	r2, #4
 800a352:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e05c      	b.n	800a412 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6899      	ldr	r1, [r3, #8]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b2e      	ldr	r3, [pc, #184]	; (800a41c <HAL_RTC_Init+0x120>)
 800a364:	400b      	ands	r3, r1
 800a366:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6899      	ldr	r1, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	431a      	orrs	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	430a      	orrs	r2, r1
 800a384:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	68d2      	ldr	r2, [r2, #12]
 800a38e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6919      	ldr	r1, [r3, #16]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	041a      	lsls	r2, r3, #16
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3b2:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f003 0320 	and.w	r3, r3, #32
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 faaa 	bl	800a91c <HAL_RTC_WaitForSynchro>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d008      	beq.n	800a3e0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	22ff      	movs	r2, #255	; 0xff
 800a3d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2204      	movs	r2, #4
 800a3da:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e018      	b.n	800a412 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f022 0208 	bic.w	r2, r2, #8
 800a3ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	22ff      	movs	r2, #255	; 0xff
 800a408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a410:	2300      	movs	r3, #0
  }
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	ff8fffbf 	.word	0xff8fffbf

0800a420 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	7f1b      	ldrb	r3, [r3, #28]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d101      	bne.n	800a43c <HAL_RTC_SetTime+0x1c>
 800a438:	2302      	movs	r3, #2
 800a43a:	e0a8      	b.n	800a58e <HAL_RTC_SetTime+0x16e>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2201      	movs	r2, #1
 800a440:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2202      	movs	r2, #2
 800a446:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d126      	bne.n	800a49c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2200      	movs	r2, #0
 800a460:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	4618      	mov	r0, r3
 800a468:	f000 faac 	bl	800a9c4 <RTC_ByteToBcd2>
 800a46c:	4603      	mov	r3, r0
 800a46e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 faa5 	bl	800a9c4 <RTC_ByteToBcd2>
 800a47a:	4603      	mov	r3, r0
 800a47c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a47e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	789b      	ldrb	r3, [r3, #2]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fa9d 	bl	800a9c4 <RTC_ByteToBcd2>
 800a48a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a48c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	7b1b      	ldrb	r3, [r3, #12]
 800a494:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e018      	b.n	800a4ce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a4bc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800a4c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	7b1b      	ldrb	r3, [r3, #12]
 800a4c8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	22ca      	movs	r2, #202	; 0xca
 800a4d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2253      	movs	r2, #83	; 0x53
 800a4dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 fa44 	bl	800a96c <RTC_EnterInitMode>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	22ff      	movs	r2, #255	; 0xff
 800a4f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2204      	movs	r2, #4
 800a4f6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e045      	b.n	800a58e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	6979      	ldr	r1, [r7, #20]
 800a508:	4b23      	ldr	r3, [pc, #140]	; (800a598 <HAL_RTC_SetTime+0x178>)
 800a50a:	400b      	ands	r3, r1
 800a50c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a51c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6899      	ldr	r1, [r3, #8]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	691a      	ldr	r2, [r3, #16]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	431a      	orrs	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a544:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d111      	bne.n	800a578 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f9e1 	bl	800a91c <HAL_RTC_WaitForSynchro>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	22ff      	movs	r2, #255	; 0xff
 800a566:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2204      	movs	r2, #4
 800a56c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e00a      	b.n	800a58e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	22ff      	movs	r2, #255	; 0xff
 800a57e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a58c:	2300      	movs	r3, #0
  }
}
 800a58e:	4618      	mov	r0, r3
 800a590:	371c      	adds	r7, #28
 800a592:	46bd      	mov	sp, r7
 800a594:	bd90      	pop	{r4, r7, pc}
 800a596:	bf00      	nop
 800a598:	007f7f7f 	.word	0x007f7f7f

0800a59c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b087      	sub	sp, #28
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	7f1b      	ldrb	r3, [r3, #28]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_RTC_SetDate+0x1c>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e092      	b.n	800a6de <HAL_RTC_SetDate+0x142>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10e      	bne.n	800a5e8 <HAL_RTC_SetDate+0x4c>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	785b      	ldrb	r3, [r3, #1]
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d008      	beq.n	800a5e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	f023 0310 	bic.w	r3, r3, #16
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	330a      	adds	r3, #10
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d11c      	bne.n	800a628 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	78db      	ldrb	r3, [r3, #3]
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 f9e6 	bl	800a9c4 <RTC_ByteToBcd2>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	4618      	mov	r0, r3
 800a602:	f000 f9df 	bl	800a9c4 <RTC_ByteToBcd2>
 800a606:	4603      	mov	r3, r0
 800a608:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a60a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	789b      	ldrb	r3, [r3, #2]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f9d7 	bl	800a9c4 <RTC_ByteToBcd2>
 800a616:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800a618:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e00e      	b.n	800a646 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	78db      	ldrb	r3, [r3, #3]
 800a62c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a634:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a636:	68ba      	ldr	r2, [r7, #8]
 800a638:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800a63a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	22ca      	movs	r2, #202	; 0xca
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2253      	movs	r2, #83	; 0x53
 800a654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f988 	bl	800a96c <RTC_EnterInitMode>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	22ff      	movs	r2, #255	; 0xff
 800a668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2204      	movs	r2, #4
 800a66e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e031      	b.n	800a6de <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	6979      	ldr	r1, [r7, #20]
 800a680:	4b19      	ldr	r3, [pc, #100]	; (800a6e8 <HAL_RTC_SetDate+0x14c>)
 800a682:	400b      	ands	r3, r1
 800a684:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a694:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	f003 0320 	and.w	r3, r3, #32
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d111      	bne.n	800a6c8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f939 	bl	800a91c <HAL_RTC_WaitForSynchro>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	22ff      	movs	r2, #255	; 0xff
 800a6b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2204      	movs	r2, #4
 800a6bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e00a      	b.n	800a6de <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	22ff      	movs	r2, #255	; 0xff
 800a6ce:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd90      	pop	{r4, r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	00ffff3f 	.word	0x00ffff3f

0800a6ec <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b089      	sub	sp, #36	; 0x24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	2300      	movs	r3, #0
 800a702:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	7f1b      	ldrb	r3, [r3, #28]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d101      	bne.n	800a710 <HAL_RTC_SetAlarm+0x24>
 800a70c:	2302      	movs	r3, #2
 800a70e:	e101      	b.n	800a914 <HAL_RTC_SetAlarm+0x228>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2202      	movs	r2, #2
 800a71a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d137      	bne.n	800a792 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2200      	movs	r2, #0
 800a734:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 f942 	bl	800a9c4 <RTC_ByteToBcd2>
 800a740:	4603      	mov	r3, r0
 800a742:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 f93b 	bl	800a9c4 <RTC_ByteToBcd2>
 800a74e:	4603      	mov	r3, r0
 800a750:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a752:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	789b      	ldrb	r3, [r3, #2]
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 f933 	bl	800a9c4 <RTC_ByteToBcd2>
 800a75e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800a760:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	7b1b      	ldrb	r3, [r3, #12]
 800a768:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a76a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a774:	4618      	mov	r0, r3
 800a776:	f000 f925 	bl	800a9c4 <RTC_ByteToBcd2>
 800a77a:	4603      	mov	r3, r0
 800a77c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a77e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800a786:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800a78c:	4313      	orrs	r3, r2
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	e023      	b.n	800a7da <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a7b2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800a7b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	7b1b      	ldrb	r3, [r3, #12]
 800a7be:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a7c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a7c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800a7ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800a7d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	22ca      	movs	r2, #202	; 0xca
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2253      	movs	r2, #83	; 0x53
 800a7f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7fe:	d13f      	bne.n	800a880 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a80e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a81e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a820:	f7f8 fc84 	bl	800312c <HAL_GetTick>
 800a824:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a826:	e013      	b.n	800a850 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a828:	f7f8 fc80 	bl	800312c <HAL_GetTick>
 800a82c:	4602      	mov	r2, r0
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a836:	d90b      	bls.n	800a850 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	22ff      	movs	r2, #255	; 0xff
 800a83e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2203      	movs	r2, #3
 800a844:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e061      	b.n	800a914 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0e4      	beq.n	800a828 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a87c:	609a      	str	r2, [r3, #8]
 800a87e:	e03e      	b.n	800a8fe <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689a      	ldr	r2, [r3, #8]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a88e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a89e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8a0:	f7f8 fc44 	bl	800312c <HAL_GetTick>
 800a8a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a8a6:	e013      	b.n	800a8d0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8a8:	f7f8 fc40 	bl	800312c <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8b6:	d90b      	bls.n	800a8d0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	22ff      	movs	r2, #255	; 0xff
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2203      	movs	r2, #3
 800a8c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e021      	b.n	800a914 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0e4      	beq.n	800a8a8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689a      	ldr	r2, [r3, #8]
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	22ff      	movs	r2, #255	; 0xff
 800a904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3724      	adds	r7, #36	; 0x24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd90      	pop	{r4, r7, pc}

0800a91c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68da      	ldr	r2, [r3, #12]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a936:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a938:	f7f8 fbf8 	bl	800312c <HAL_GetTick>
 800a93c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a93e:	e009      	b.n	800a954 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a940:	f7f8 fbf4 	bl	800312c <HAL_GetTick>
 800a944:	4602      	mov	r2, r0
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a94e:	d901      	bls.n	800a954 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e007      	b.n	800a964 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0ee      	beq.n	800a940 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	d119      	bne.n	800a9ba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f04f 32ff 	mov.w	r2, #4294967295
 800a98e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a990:	f7f8 fbcc 	bl	800312c <HAL_GetTick>
 800a994:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a996:	e009      	b.n	800a9ac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a998:	f7f8 fbc8 	bl	800312c <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9a6:	d901      	bls.n	800a9ac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e007      	b.n	800a9bc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d0ee      	beq.n	800a998 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a9d2:	e005      	b.n	800a9e0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a9da:	79fb      	ldrb	r3, [r7, #7]
 800a9dc:	3b0a      	subs	r3, #10
 800a9de:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a9e0:	79fb      	ldrb	r3, [r7, #7]
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	d8f6      	bhi.n	800a9d4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	b2db      	uxtb	r3, r3
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b087      	sub	sp, #28
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	7f1b      	ldrb	r3, [r3, #28]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d101      	bne.n	800aa1c <HAL_RTCEx_SetTimeStamp+0x1c>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	e03e      	b.n	800aa9a <HAL_RTCEx_SetTimeStamp+0x9a>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2202      	movs	r2, #2
 800aa26:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	; (800aaa8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	22ca      	movs	r2, #202	; 0xca
 800aa42:	625a      	str	r2, [r3, #36]	; 0x24
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2253      	movs	r2, #83	; 0x53
 800aa4a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0206 	bic.w	r2, r2, #6
 800aa5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689a      	ldr	r2, [r3, #8]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa82:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	22ff      	movs	r2, #255	; 0xff
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	fffff7f7 	.word	0xfffff7f7

0800aaac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e156      	b.n	800ad78 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7f8 f8ea 	bl	8002cb8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2202      	movs	r2, #2
 800aae8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f95b 	bl	800ada8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d00c      	beq.n	800ab14 <HAL_SAI_Init+0x68>
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d80d      	bhi.n	800ab1a <HAL_SAI_Init+0x6e>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <HAL_SAI_Init+0x5c>
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d003      	beq.n	800ab0e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800ab06:	e008      	b.n	800ab1a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61fb      	str	r3, [r7, #28]
      break;
 800ab0c:	e006      	b.n	800ab1c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800ab0e:	2310      	movs	r3, #16
 800ab10:	61fb      	str	r3, [r7, #28]
      break;
 800ab12:	e003      	b.n	800ab1c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ab14:	2320      	movs	r3, #32
 800ab16:	61fb      	str	r3, [r7, #28]
      break;
 800ab18:	e000      	b.n	800ab1c <HAL_SAI_Init+0x70>
      break;
 800ab1a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d81e      	bhi.n	800ab62 <HAL_SAI_Init+0xb6>
 800ab24:	a201      	add	r2, pc, #4	; (adr r2, 800ab2c <HAL_SAI_Init+0x80>)
 800ab26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab2a:	bf00      	nop
 800ab2c:	0800ab3d 	.word	0x0800ab3d
 800ab30:	0800ab43 	.word	0x0800ab43
 800ab34:	0800ab4b 	.word	0x0800ab4b
 800ab38:	0800ab53 	.word	0x0800ab53
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ab40:	e010      	b.n	800ab64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ab42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab46:	617b      	str	r3, [r7, #20]
    }
    break;
 800ab48:	e00c      	b.n	800ab64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab4e:	617b      	str	r3, [r7, #20]
    }
    break;
 800ab50:	e008      	b.n	800ab64 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ab52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ab56:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f043 0301 	orr.w	r3, r3, #1
 800ab5e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ab60:	e000      	b.n	800ab64 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ab62:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a85      	ldr	r2, [pc, #532]	; (800ad80 <HAL_SAI_Init+0x2d4>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d004      	beq.n	800ab78 <HAL_SAI_Init+0xcc>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a84      	ldr	r2, [pc, #528]	; (800ad84 <HAL_SAI_Init+0x2d8>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d103      	bne.n	800ab80 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ab78:	4a83      	ldr	r2, [pc, #524]	; (800ad88 <HAL_SAI_Init+0x2dc>)
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	e002      	b.n	800ab86 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ab80:	4a82      	ldr	r2, [pc, #520]	; (800ad8c <HAL_SAI_Init+0x2e0>)
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d04c      	beq.n	800ac28 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a7a      	ldr	r2, [pc, #488]	; (800ad80 <HAL_SAI_Init+0x2d4>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d004      	beq.n	800aba6 <HAL_SAI_Init+0xfa>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a78      	ldr	r2, [pc, #480]	; (800ad84 <HAL_SAI_Init+0x2d8>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d104      	bne.n	800abb0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800aba6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800abaa:	f7ff fa63 	bl	800a074 <HAL_RCCEx_GetPeriphCLKFreq>
 800abae:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a76      	ldr	r2, [pc, #472]	; (800ad90 <HAL_SAI_Init+0x2e4>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d004      	beq.n	800abc4 <HAL_SAI_Init+0x118>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a75      	ldr	r2, [pc, #468]	; (800ad94 <HAL_SAI_Init+0x2e8>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d104      	bne.n	800abce <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800abc4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800abc8:	f7ff fa54 	bl	800a074 <HAL_RCCEx_GetPeriphCLKFreq>
 800abcc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	461a      	mov	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	025b      	lsls	r3, r3, #9
 800abe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abe4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4a6b      	ldr	r2, [pc, #428]	; (800ad98 <HAL_SAI_Init+0x2ec>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	08da      	lsrs	r2, r3, #3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800abf4:	68f9      	ldr	r1, [r7, #12]
 800abf6:	4b68      	ldr	r3, [pc, #416]	; (800ad98 <HAL_SAI_Init+0x2ec>)
 800abf8:	fba3 2301 	umull	r2, r3, r3, r1
 800abfc:	08da      	lsrs	r2, r3, #3
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	005b      	lsls	r3, r3, #1
 800ac06:	1aca      	subs	r2, r1, r3
 800ac08:	2a08      	cmp	r2, #8
 800ac0a:	d904      	bls.n	800ac16 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1a:	2b04      	cmp	r3, #4
 800ac1c:	d104      	bne.n	800ac28 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	085a      	lsrs	r2, r3, #1
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_SAI_Init+0x18c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d109      	bne.n	800ac4c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d101      	bne.n	800ac44 <HAL_SAI_Init+0x198>
 800ac40:	2300      	movs	r3, #0
 800ac42:	e001      	b.n	800ac48 <HAL_SAI_Init+0x19c>
 800ac44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac48:	61bb      	str	r3, [r7, #24]
 800ac4a:	e008      	b.n	800ac5e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d102      	bne.n	800ac5a <HAL_SAI_Init+0x1ae>
 800ac54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac58:	e000      	b.n	800ac5c <HAL_SAI_Init+0x1b0>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	4b4c      	ldr	r3, [pc, #304]	; (800ad9c <HAL_SAI_Init+0x2f0>)
 800ac6a:	400b      	ands	r3, r1
 800ac6c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ac82:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ac96:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800aca2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	051b      	lsls	r3, r3, #20
 800acaa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	6859      	ldr	r1, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	4b38      	ldr	r3, [pc, #224]	; (800ada0 <HAL_SAI_Init+0x2f4>)
 800acc0:	400b      	ands	r3, r1
 800acc2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6859      	ldr	r1, [r3, #4]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699a      	ldr	r2, [r3, #24]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	431a      	orrs	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	430a      	orrs	r2, r1
 800ace0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6899      	ldr	r1, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	4b2d      	ldr	r3, [pc, #180]	; (800ada4 <HAL_SAI_Init+0x2f8>)
 800acee:	400b      	ands	r3, r1
 800acf0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6899      	ldr	r1, [r3, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ad02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800ad08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800ad0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad14:	3b01      	subs	r3, #1
 800ad16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ad18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68d9      	ldr	r1, [r3, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ad30:	400b      	ands	r3, r1
 800ad32:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68d9      	ldr	r1, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad42:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad48:	041b      	lsls	r3, r3, #16
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad50:	3b01      	subs	r3, #1
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	430a      	orrs	r2, r1
 800ad5c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3720      	adds	r7, #32
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	40015804 	.word	0x40015804
 800ad84:	40015824 	.word	0x40015824
 800ad88:	40015800 	.word	0x40015800
 800ad8c:	40015c00 	.word	0x40015c00
 800ad90:	40015c04 	.word	0x40015c04
 800ad94:	40015c24 	.word	0x40015c24
 800ad98:	cccccccd 	.word	0xcccccccd
 800ad9c:	ff05c010 	.word	0xff05c010
 800ada0:	ffff1ff0 	.word	0xffff1ff0
 800ada4:	fff88000 	.word	0xfff88000

0800ada8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <SAI_Disable+0x68>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <SAI_Disable+0x6c>)
 800adb6:	fba2 2303 	umull	r2, r3, r2, r3
 800adba:	0b1b      	lsrs	r3, r3, #12
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800add2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	1e5a      	subs	r2, r3, #1
 800add8:	60fa      	str	r2, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ade4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	72fb      	strb	r3, [r7, #11]
      break;
 800adf2:	e006      	b.n	800ae02 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e8      	bne.n	800add4 <SAI_Disable+0x2c>

  return status;
 800ae02:	7afb      	ldrb	r3, [r7, #11]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000000 	.word	0x20000000
 800ae14:	95cbec1b 	.word	0x95cbec1b

0800ae18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e022      	b.n	800ae70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d105      	bne.n	800ae42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f7 fb69 	bl	8002514 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f814 	bl	800ae78 <HAL_SD_InitCard>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e00a      	b.n	800ae70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae78:	b5b0      	push	{r4, r5, r7, lr}
 800ae7a:	b08e      	sub	sp, #56	; 0x38
 800ae7c:	af04      	add	r7, sp, #16
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800ae80:	2300      	movs	r3, #0
 800ae82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800ae84:	2300      	movs	r3, #0
 800ae86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800ae94:	2376      	movs	r3, #118	; 0x76
 800ae96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681d      	ldr	r5, [r3, #0]
 800ae9c:	466c      	mov	r4, sp
 800ae9e:	f107 0314 	add.w	r3, r7, #20
 800aea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aeaa:	f107 0308 	add.w	r3, r7, #8
 800aeae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f003 fb23 	bl	800e4fc <SDMMC_Init>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800aebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e059      	b.n	800af7c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aed6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4618      	mov	r0, r3
 800aede:	f003 fb46 	bl	800e56e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aef0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800aef2:	2002      	movs	r0, #2
 800aef4:	f7f8 f926 	bl	8003144 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fe0d 	bl	800bb18 <SD_PowerON>
 800aefe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00b      	beq.n	800af1e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	431a      	orrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e02e      	b.n	800af7c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fd2e 	bl	800b980 <SD_InitCard>
 800af24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af38:	6a3b      	ldr	r3, [r7, #32]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e01b      	b.n	800af7c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af4c:	4618      	mov	r0, r3
 800af4e:	f003 fba1 	bl	800e694 <SDMMC_CmdBlockLength>
 800af52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00f      	beq.n	800af7a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a09      	ldr	r2, [pc, #36]	; (800af84 <HAL_SD_InitCard+0x10c>)
 800af60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	431a      	orrs	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3728      	adds	r7, #40	; 0x28
 800af80:	46bd      	mov	sp, r7
 800af82:	bdb0      	pop	{r4, r5, r7, pc}
 800af84:	004005ff 	.word	0x004005ff

0800af88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d107      	bne.n	800afb0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e0c3      	b.n	800b138 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	f040 80bc 	bne.w	800b136 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800afc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	441a      	add	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afce:	429a      	cmp	r2, r3
 800afd0:	d907      	bls.n	800afe2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e0aa      	b.n	800b138 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2203      	movs	r2, #3
 800afe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2200      	movs	r2, #0
 800aff0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b006:	4a4e      	ldr	r2, [pc, #312]	; (800b140 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00e:	4a4d      	ldr	r2, [pc, #308]	; (800b144 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b010:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b016:	2200      	movs	r2, #0
 800b018:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	2200      	movs	r2, #0
 800b020:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	689a      	ldr	r2, [r3, #8]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3380      	adds	r3, #128	; 0x80
 800b048:	4619      	mov	r1, r3
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	025b      	lsls	r3, r3, #9
 800b050:	089b      	lsrs	r3, r3, #2
 800b052:	f7f8 fe81 	bl	8003d58 <HAL_DMA_Start_IT>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d017      	beq.n	800b08c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b06a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a35      	ldr	r2, [pc, #212]	; (800b148 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b072:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b078:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e055      	b.n	800b138 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f042 0208 	orr.w	r2, r2, #8
 800b09a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d002      	beq.n	800b0aa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	025b      	lsls	r3, r3, #9
 800b0a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	025b      	lsls	r3, r3, #9
 800b0b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b0b6:	2390      	movs	r3, #144	; 0x90
 800b0b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f107 0210 	add.w	r2, r7, #16
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f003 fab3 	bl	800e63c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d90a      	bls.n	800b0f2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2282      	movs	r2, #130	; 0x82
 800b0e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f003 fb17 	bl	800e71c <SDMMC_CmdReadMultiBlock>
 800b0ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b0f0:	e009      	b.n	800b106 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2281      	movs	r2, #129	; 0x81
 800b0f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0fe:	4618      	mov	r0, r3
 800b100:	f003 faea 	bl	800e6d8 <SDMMC_CmdReadSingleBlock>
 800b104:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d012      	beq.n	800b132 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b112:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b11a:	431a      	orrs	r2, r3
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b12e:	2301      	movs	r3, #1
 800b130:	e002      	b.n	800b138 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	e000      	b.n	800b138 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b136:	2302      	movs	r3, #2
  }
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3730      	adds	r7, #48	; 0x30
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	0800b86b 	.word	0x0800b86b
 800b144:	0800b8dd 	.word	0x0800b8dd
 800b148:	004005ff 	.word	0x004005ff

0800b14c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08c      	sub	sp, #48	; 0x30
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d107      	bne.n	800b174 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0c6      	b.n	800b302 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	f040 80bf 	bne.w	800b300 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	441a      	add	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b192:	429a      	cmp	r2, r3
 800b194:	d907      	bls.n	800b1a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e0ad      	b.n	800b302 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f042 021a 	orr.w	r2, r2, #26
 800b1c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ca:	4a50      	ldr	r2, [pc, #320]	; (800b30c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b1cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d2:	4a4f      	ldr	r2, [pc, #316]	; (800b310 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b1d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1da:	2200      	movs	r2, #0
 800b1dc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d002      	beq.n	800b1ec <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	025b      	lsls	r3, r3, #9
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d90a      	bls.n	800b208 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	22a0      	movs	r2, #160	; 0xa0
 800b1f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1fe:	4618      	mov	r0, r3
 800b200:	f003 fad0 	bl	800e7a4 <SDMMC_CmdWriteMultiBlock>
 800b204:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b206:	e009      	b.n	800b21c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2290      	movs	r2, #144	; 0x90
 800b20c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b214:	4618      	mov	r0, r3
 800b216:	f003 faa3 	bl	800e760 <SDMMC_CmdWriteSingleBlock>
 800b21a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a3b      	ldr	r2, [pc, #236]	; (800b314 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b230:	431a      	orrs	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e05c      	b.n	800b302 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f042 0208 	orr.w	r2, r2, #8
 800b256:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b25c:	2240      	movs	r2, #64	; 0x40
 800b25e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3380      	adds	r3, #128	; 0x80
 800b288:	461a      	mov	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	025b      	lsls	r3, r3, #9
 800b28e:	089b      	lsrs	r3, r3, #2
 800b290:	f7f8 fd62 	bl	8003d58 <HAL_DMA_Start_IT>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01a      	beq.n	800b2d0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f022 021a 	bic.w	r2, r2, #26
 800b2a8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a19      	ldr	r2, [pc, #100]	; (800b314 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e018      	b.n	800b302 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	025b      	lsls	r3, r3, #9
 800b2da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b2dc:	2390      	movs	r3, #144	; 0x90
 800b2de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f107 0210 	add.w	r2, r7, #16
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f003 f9a0 	bl	800e63c <SDMMC_ConfigData>

      return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	e000      	b.n	800b302 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3730      	adds	r7, #48	; 0x30
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0800b841 	.word	0x0800b841
 800b310:	0800b8dd 	.word	0x0800b8dd
 800b314:	004005ff 	.word	0x004005ff

0800b318 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b33a:	0f9b      	lsrs	r3, r3, #30
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b346:	0e9b      	lsrs	r3, r3, #26
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	f003 030f 	and.w	r3, r3, #15
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b358:	0e1b      	lsrs	r3, r3, #24
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	f003 0303 	and.w	r3, r3, #3
 800b360:	b2da      	uxtb	r2, r3
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b36a:	0c1b      	lsrs	r3, r3, #16
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b376:	0a1b      	lsrs	r3, r3, #8
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b382:	b2da      	uxtb	r2, r3
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b38c:	0d1b      	lsrs	r3, r3, #20
 800b38e:	b29a      	uxth	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b398:	0c1b      	lsrs	r3, r3, #16
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	f003 030f 	and.w	r3, r3, #15
 800b3a0:	b2da      	uxtb	r2, r3
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3aa:	0bdb      	lsrs	r3, r3, #15
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	f003 0301 	and.w	r3, r3, #1
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3bc:	0b9b      	lsrs	r3, r3, #14
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ce:	0b5b      	lsrs	r3, r3, #13
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3e0:	0b1b      	lsrs	r3, r3, #12
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	b2da      	uxtb	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d163      	bne.n	800b4c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b400:	009a      	lsls	r2, r3, #2
 800b402:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b406:	4013      	ands	r3, r2
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b40c:	0f92      	lsrs	r2, r2, #30
 800b40e:	431a      	orrs	r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b418:	0edb      	lsrs	r3, r3, #27
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0307 	and.w	r3, r3, #7
 800b420:	b2da      	uxtb	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b42a:	0e1b      	lsrs	r3, r3, #24
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	b2da      	uxtb	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b43c:	0d5b      	lsrs	r3, r3, #21
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	b2da      	uxtb	r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44e:	0c9b      	lsrs	r3, r3, #18
 800b450:	b2db      	uxtb	r3, r3
 800b452:	f003 0307 	and.w	r3, r3, #7
 800b456:	b2da      	uxtb	r2, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b460:	0bdb      	lsrs	r3, r3, #15
 800b462:	b2db      	uxtb	r3, r3
 800b464:	f003 0307 	and.w	r3, r3, #7
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	7e1b      	ldrb	r3, [r3, #24]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 0307 	and.w	r3, r3, #7
 800b482:	3302      	adds	r3, #2
 800b484:	2201      	movs	r2, #1
 800b486:	fa02 f303 	lsl.w	r3, r2, r3
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b48e:	fb02 f203 	mul.w	r2, r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	7a1b      	ldrb	r3, [r3, #8]
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	409a      	lsls	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b4b0:	0a52      	lsrs	r2, r2, #9
 800b4b2:	fb02 f203 	mul.w	r2, r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4c0:	661a      	str	r2, [r3, #96]	; 0x60
 800b4c2:	e031      	b.n	800b528 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d11d      	bne.n	800b508 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4d0:	041b      	lsls	r3, r3, #16
 800b4d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4da:	0c1b      	lsrs	r3, r3, #16
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	029a      	lsls	r2, r3, #10
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	661a      	str	r2, [r3, #96]	; 0x60
 800b506:	e00f      	b.n	800b528 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a58      	ldr	r2, [pc, #352]	; (800b670 <HAL_SD_GetCardCSD+0x344>)
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b514:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e09d      	b.n	800b664 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52c:	0b9b      	lsrs	r3, r3, #14
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	b2da      	uxtb	r2, r3
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b53e:	09db      	lsrs	r3, r3, #7
 800b540:	b2db      	uxtb	r3, r3
 800b542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b546:	b2da      	uxtb	r2, r3
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b550:	b2db      	uxtb	r3, r3
 800b552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b556:	b2da      	uxtb	r2, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b560:	0fdb      	lsrs	r3, r3, #31
 800b562:	b2da      	uxtb	r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56c:	0f5b      	lsrs	r3, r3, #29
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	f003 0303 	and.w	r3, r3, #3
 800b574:	b2da      	uxtb	r2, r3
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57e:	0e9b      	lsrs	r3, r3, #26
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 0307 	and.w	r3, r3, #7
 800b586:	b2da      	uxtb	r2, r3
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b590:	0d9b      	lsrs	r3, r3, #22
 800b592:	b2db      	uxtb	r3, r3
 800b594:	f003 030f 	and.w	r3, r3, #15
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a2:	0d5b      	lsrs	r3, r3, #21
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5be:	0c1b      	lsrs	r3, r3, #16
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d2:	0bdb      	lsrs	r3, r3, #15
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e6:	0b9b      	lsrs	r3, r3, #14
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	f003 0301 	and.w	r3, r3, #1
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	0b5b      	lsrs	r3, r3, #13
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	b2da      	uxtb	r2, r3
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b60e:	0b1b      	lsrs	r3, r3, #12
 800b610:	b2db      	uxtb	r3, r3
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b622:	0a9b      	lsrs	r3, r3, #10
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	b2da      	uxtb	r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b636:	0a1b      	lsrs	r3, r3, #8
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0303 	and.w	r3, r3, #3
 800b63e:	b2da      	uxtb	r2, r3
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b64a:	085b      	lsrs	r3, r3, #1
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b652:	b2da      	uxtb	r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	004005ff 	.word	0x004005ff

0800b674 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b6cc:	b5b0      	push	{r4, r5, r7, lr}
 800b6ce:	b08e      	sub	sp, #56	; 0x38
 800b6d0:	af04      	add	r7, sp, #16
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2203      	movs	r2, #3
 800b6e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d02e      	beq.n	800b74a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f2:	d106      	bne.n	800b702 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	639a      	str	r2, [r3, #56]	; 0x38
 800b700:	e029      	b.n	800b756 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b708:	d10a      	bne.n	800b720 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 faba 	bl	800bc84 <SD_WideBus_Enable>
 800b710:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	431a      	orrs	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38
 800b71e:	e01a      	b.n	800b756 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10a      	bne.n	800b73c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 faf7 	bl	800bd1a <SD_WideBus_Disable>
 800b72c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	431a      	orrs	r2, r3
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	639a      	str	r2, [r3, #56]	; 0x38
 800b73a:	e00c      	b.n	800b756 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	639a      	str	r2, [r3, #56]	; 0x38
 800b748:	e005      	b.n	800b756 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00b      	beq.n	800b776 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a26      	ldr	r2, [pc, #152]	; (800b7fc <HAL_SD_ConfigWideBusOperation+0x130>)
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b774:	e01f      	b.n	800b7b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	695b      	ldr	r3, [r3, #20]
 800b790:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681d      	ldr	r5, [r3, #0]
 800b79c:	466c      	mov	r4, sp
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f002 fea3 	bl	800e4fc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f002 ff68 	bl	800e694 <SDMMC_CmdBlockLength>
 800b7c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00c      	beq.n	800b7e6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0a      	ldr	r2, [pc, #40]	; (800b7fc <HAL_SD_ConfigWideBusOperation+0x130>)
 800b7d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	431a      	orrs	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800b7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3728      	adds	r7, #40	; 0x28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	004005ff 	.word	0x004005ff

0800b800 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b80c:	f107 030c 	add.w	r3, r7, #12
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 fa0e 	bl	800bc34 <SD_SendStatus>
 800b818:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	431a      	orrs	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	0a5b      	lsrs	r3, r3, #9
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b836:	693b      	ldr	r3, [r7, #16]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3718      	adds	r7, #24
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b85c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b87c:	2b82      	cmp	r3, #130	; 0x82
 800b87e:	d111      	bne.n	800b8a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4618      	mov	r0, r3
 800b886:	f002 ffaf 	bl	800e7e8 <SDMMC_CmdStopTransfer>
 800b88a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d008      	beq.n	800b8a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	431a      	orrs	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fd3a 	bl	800b318 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0208 	bic.w	r2, r2, #8
 800b8b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f004 fbc9 	bl	8010064 <HAL_SD_RxCpltCallback>
#endif
}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7f8 fb26 	bl	8003f3c <HAL_DMA_GetError>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d03e      	beq.n	800b974 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b904:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d002      	beq.n	800b912 <SD_DMAError+0x36>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d12d      	bne.n	800b96e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a19      	ldr	r2, [pc, #100]	; (800b97c <SD_DMAError+0xa0>)
 800b918:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b928:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f7ff ff62 	bl	800b800 <HAL_SD_GetCardState>
 800b93c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b06      	cmp	r3, #6
 800b942:	d002      	beq.n	800b94a <SD_DMAError+0x6e>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b05      	cmp	r3, #5
 800b948:	d10a      	bne.n	800b960 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f002 ff4a 	bl	800e7e8 <SDMMC_CmdStopTransfer>
 800b954:	4602      	mov	r2, r0
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95a:	431a      	orrs	r2, r3
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	2200      	movs	r2, #0
 800b96c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b96e:	6978      	ldr	r0, [r7, #20]
 800b970:	f7ff fcd2 	bl	800b318 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b974:	bf00      	nop
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	004005ff 	.word	0x004005ff

0800b980 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b980:	b5b0      	push	{r4, r5, r7, lr}
 800b982:	b094      	sub	sp, #80	; 0x50
 800b984:	af04      	add	r7, sp, #16
 800b986:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b988:	2301      	movs	r3, #1
 800b98a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4618      	mov	r0, r3
 800b992:	f002 fdfa 	bl	800e58a <SDMMC_GetPowerState>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d102      	bne.n	800b9a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b99c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b9a0:	e0b6      	b.n	800bb10 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d02f      	beq.n	800ba0a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f003 f825 	bl	800e9fe <SDMMC_CmdSendCID>
 800b9b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <SD_InitCard+0x40>
    {
      return errorstate;
 800b9bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9be:	e0a7      	b.n	800bb10 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f002 fe25 	bl	800e616 <SDMMC_GetResponse>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2104      	movs	r1, #4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f002 fe1c 	bl	800e616 <SDMMC_GetResponse>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2108      	movs	r1, #8
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f002 fe13 	bl	800e616 <SDMMC_GetResponse>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	210c      	movs	r1, #12
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f002 fe0a 	bl	800e616 <SDMMC_GetResponse>
 800ba02:	4602      	mov	r2, r0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0e:	2b03      	cmp	r3, #3
 800ba10:	d00d      	beq.n	800ba2e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f107 020e 	add.w	r2, r7, #14
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f003 f82b 	bl	800ea78 <SDMMC_CmdSetRelAdd>
 800ba22:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <SD_InitCard+0xae>
    {
      return errorstate;
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2c:	e070      	b.n	800bb10 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d036      	beq.n	800baa4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ba36:	89fb      	ldrh	r3, [r7, #14]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	041b      	lsls	r3, r3, #16
 800ba48:	4619      	mov	r1, r3
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	f002 fff5 	bl	800ea3a <SDMMC_CmdSendCSD>
 800ba50:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5a:	e059      	b.n	800bb10 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2100      	movs	r1, #0
 800ba62:	4618      	mov	r0, r3
 800ba64:	f002 fdd7 	bl	800e616 <SDMMC_GetResponse>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2104      	movs	r1, #4
 800ba74:	4618      	mov	r0, r3
 800ba76:	f002 fdce 	bl	800e616 <SDMMC_GetResponse>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2108      	movs	r1, #8
 800ba86:	4618      	mov	r0, r3
 800ba88:	f002 fdc5 	bl	800e616 <SDMMC_GetResponse>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	210c      	movs	r1, #12
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f002 fdbc 	bl	800e616 <SDMMC_GetResponse>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2104      	movs	r1, #4
 800baaa:	4618      	mov	r0, r3
 800baac:	f002 fdb3 	bl	800e616 <SDMMC_GetResponse>
 800bab0:	4603      	mov	r3, r0
 800bab2:	0d1a      	lsrs	r2, r3, #20
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bab8:	f107 0310 	add.w	r3, r7, #16
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff fc34 	bl	800b32c <HAL_SD_GetCardCSD>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bace:	e01f      	b.n	800bb10 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6819      	ldr	r1, [r3, #0]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad8:	041b      	lsls	r3, r3, #16
 800bada:	461a      	mov	r2, r3
 800badc:	f04f 0300 	mov.w	r3, #0
 800bae0:	4608      	mov	r0, r1
 800bae2:	f002 fea3 	bl	800e82c <SDMMC_CmdSelDesel>
 800bae6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <SD_InitCard+0x172>
  {
    return errorstate;
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	e00e      	b.n	800bb10 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681d      	ldr	r5, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	466c      	mov	r4, sp
 800bafa:	f103 0210 	add.w	r2, r3, #16
 800bafe:	ca07      	ldmia	r2, {r0, r1, r2}
 800bb00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb04:	3304      	adds	r3, #4
 800bb06:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f002 fcf7 	bl	800e4fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3740      	adds	r7, #64	; 0x40
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bdb0      	pop	{r4, r5, r7, pc}

0800bb18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bb24:	2300      	movs	r3, #0
 800bb26:	617b      	str	r3, [r7, #20]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f002 fe9e 	bl	800e872 <SDMMC_CmdGoIdleState>
 800bb36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <SD_PowerON+0x2a>
  {
    return errorstate;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	e072      	b.n	800bc28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 feb1 	bl	800e8ae <SDMMC_CmdOperCond>
 800bb4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00d      	beq.n	800bb70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f002 fe87 	bl	800e872 <SDMMC_CmdGoIdleState>
 800bb64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <SD_PowerON+0x5e>
    {
      return errorstate;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	e05b      	b.n	800bc28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d137      	bne.n	800bbee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2100      	movs	r1, #0
 800bb84:	4618      	mov	r0, r3
 800bb86:	f002 feb1 	bl	800e8ec <SDMMC_CmdAppCommand>
 800bb8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d02d      	beq.n	800bbee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb96:	e047      	b.n	800bc28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f002 fea4 	bl	800e8ec <SDMMC_CmdAppCommand>
 800bba4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <SD_PowerON+0x98>
    {
      return errorstate;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	e03b      	b.n	800bc28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	491e      	ldr	r1, [pc, #120]	; (800bc30 <SD_PowerON+0x118>)
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f002 feba 	bl	800e930 <SDMMC_CmdAppOperCommand>
 800bbbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bbc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bbc8:	e02e      	b.n	800bc28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f002 fd20 	bl	800e616 <SDMMC_GetResponse>
 800bbd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	0fdb      	lsrs	r3, r3, #31
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <SD_PowerON+0xcc>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e000      	b.n	800bbe6 <SD_PowerON+0xce>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	613b      	str	r3, [r7, #16]

    count++;
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	3301      	adds	r3, #1
 800bbec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d802      	bhi.n	800bbfe <SD_PowerON+0xe6>
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0cc      	beq.n	800bb98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d902      	bls.n	800bc0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bc08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc0c:	e00c      	b.n	800bc28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	645a      	str	r2, [r3, #68]	; 0x44
 800bc1e:	e002      	b.n	800bc26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	c1100000 	.word	0xc1100000

0800bc34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bc44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc48:	e018      	b.n	800bc7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc52:	041b      	lsls	r3, r3, #16
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f002 ff2f 	bl	800eaba <SDMMC_CmdSendStatus>
 800bc5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	e009      	b.n	800bc7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2100      	movs	r1, #0
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f002 fcd1 	bl	800e616 <SDMMC_GetResponse>
 800bc74:	4602      	mov	r2, r0
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	2300      	movs	r3, #0
 800bc92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2100      	movs	r1, #0
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f002 fcbb 	bl	800e616 <SDMMC_GetResponse>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcaa:	d102      	bne.n	800bcb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bcac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bcb0:	e02f      	b.n	800bd12 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bcb2:	f107 030c 	add.w	r3, r7, #12
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f879 	bl	800bdb0 <SD_FindSCR>
 800bcbe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	e023      	b.n	800bd12 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d01c      	beq.n	800bd0e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcdc:	041b      	lsls	r3, r3, #16
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f002 fe03 	bl	800e8ec <SDMMC_CmdAppCommand>
 800bce6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	e00f      	b.n	800bd12 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2102      	movs	r1, #2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f002 fe3d 	bl	800e978 <SDMMC_CmdBusWidth>
 800bcfe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	e003      	b.n	800bd12 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e001      	b.n	800bd12 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bd0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b086      	sub	sp, #24
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2100      	movs	r1, #0
 800bd30:	4618      	mov	r0, r3
 800bd32:	f002 fc70 	bl	800e616 <SDMMC_GetResponse>
 800bd36:	4603      	mov	r3, r0
 800bd38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd40:	d102      	bne.n	800bd48 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd46:	e02f      	b.n	800bda8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bd48:	f107 030c 	add.w	r3, r7, #12
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f82e 	bl	800bdb0 <SD_FindSCR>
 800bd54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	e023      	b.n	800bda8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d01c      	beq.n	800bda4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd72:	041b      	lsls	r3, r3, #16
 800bd74:	4619      	mov	r1, r3
 800bd76:	4610      	mov	r0, r2
 800bd78:	f002 fdb8 	bl	800e8ec <SDMMC_CmdAppCommand>
 800bd7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	e00f      	b.n	800bda8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f002 fdf2 	bl	800e978 <SDMMC_CmdBusWidth>
 800bd94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d001      	beq.n	800bda0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	e003      	b.n	800bda8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	e001      	b.n	800bda8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bda4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3718      	adds	r7, #24
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bdb0:	b590      	push	{r4, r7, lr}
 800bdb2:	b08f      	sub	sp, #60	; 0x3c
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bdba:	f7f7 f9b7 	bl	800312c <HAL_GetTick>
 800bdbe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60bb      	str	r3, [r7, #8]
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2108      	movs	r1, #8
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f002 fc5c 	bl	800e694 <SDMMC_CmdBlockLength>
 800bddc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	e0b2      	b.n	800bf4e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdf0:	041b      	lsls	r3, r3, #16
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	4610      	mov	r0, r2
 800bdf6:	f002 fd79 	bl	800e8ec <SDMMC_CmdAppCommand>
 800bdfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d001      	beq.n	800be06 <SD_FindSCR+0x56>
  {
    return errorstate;
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	e0a3      	b.n	800bf4e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800be06:	f04f 33ff 	mov.w	r3, #4294967295
 800be0a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800be0c:	2308      	movs	r3, #8
 800be0e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800be10:	2330      	movs	r3, #48	; 0x30
 800be12:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800be14:	2302      	movs	r3, #2
 800be16:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800be18:	2300      	movs	r3, #0
 800be1a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800be1c:	2301      	movs	r3, #1
 800be1e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f107 0210 	add.w	r2, r7, #16
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 fc06 	bl	800e63c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4618      	mov	r0, r3
 800be36:	f002 fdc1 	bl	800e9bc <SDMMC_CmdSendSCR>
 800be3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d02a      	beq.n	800be98 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	e083      	b.n	800bf4e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00f      	beq.n	800be74 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6819      	ldr	r1, [r3, #0]
 800be58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	f107 0208 	add.w	r2, r7, #8
 800be60:	18d4      	adds	r4, r2, r3
 800be62:	4608      	mov	r0, r1
 800be64:	f002 fb76 	bl	800e554 <SDMMC_ReadFIFO>
 800be68:	4603      	mov	r3, r0
 800be6a:	6023      	str	r3, [r4, #0]
      index++;
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	3301      	adds	r3, #1
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
 800be72:	e006      	b.n	800be82 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d012      	beq.n	800bea8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800be82:	f7f7 f953 	bl	800312c <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be90:	d102      	bne.n	800be98 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800be92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be96:	e05a      	b.n	800bf4e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be9e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d0cf      	beq.n	800be46 <SD_FindSCR+0x96>
 800bea6:	e000      	b.n	800beaa <SD_FindSCR+0xfa>
      break;
 800bea8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb0:	f003 0308 	and.w	r3, r3, #8
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d005      	beq.n	800bec4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2208      	movs	r2, #8
 800bebe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bec0:	2308      	movs	r3, #8
 800bec2:	e044      	b.n	800bf4e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	f003 0302 	and.w	r3, r3, #2
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2202      	movs	r2, #2
 800bed8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800beda:	2302      	movs	r3, #2
 800bedc:	e037      	b.n	800bf4e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee4:	f003 0320 	and.w	r3, r3, #32
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d005      	beq.n	800bef8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2220      	movs	r2, #32
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bef4:	2320      	movs	r3, #32
 800bef6:	e02a      	b.n	800bf4e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf00:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	061a      	lsls	r2, r3, #24
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf0e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf18:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	0e1b      	lsrs	r3, r3, #24
 800bf1e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf22:	601a      	str	r2, [r3, #0]
    scr++;
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	3304      	adds	r3, #4
 800bf28:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	061a      	lsls	r2, r3, #24
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf36:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	0a1b      	lsrs	r3, r3, #8
 800bf3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf40:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	0e1b      	lsrs	r3, r3, #24
 800bf46:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	373c      	adds	r7, #60	; 0x3c
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd90      	pop	{r4, r7, pc}

0800bf56 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e025      	b.n	800bfb6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d106      	bne.n	800bf84 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7f6 fe90 	bl	8002ca4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2202      	movs	r2, #2
 800bf88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f002 f9ae 	bl	800e2f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6818      	ldr	r0, [r3, #0]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	f002 fa02 	bl	800e3b0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800bfbe:	b580      	push	{r7, lr}
 800bfc0:	b086      	sub	sp, #24
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	60f8      	str	r0, [r7, #12]
 800bfc6:	60b9      	str	r1, [r7, #8]
 800bfc8:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bfd0:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d101      	bne.n	800bfdc <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e021      	b.n	800c020 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d002      	beq.n	800bfe8 <HAL_SDRAM_SendCommand+0x2a>
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	2b05      	cmp	r3, #5
 800bfe6:	d118      	bne.n	800c01a <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2202      	movs	r2, #2
 800bfec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f002 fa43 	bl	800e484 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d104      	bne.n	800c010 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2205      	movs	r2, #5
 800c00a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c00e:	e006      	b.n	800c01e <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c018:	e001      	b.n	800c01e <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e000      	b.n	800c020 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d101      	bne.n	800c042 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c03e:	2302      	movs	r3, #2
 800c040:	e016      	b.n	800c070 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d10f      	bne.n	800c06e <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2202      	movs	r2, #2
 800c052:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f002 fa35 	bl	800e4cc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e000      	b.n	800c070 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
}
 800c070:	4618      	mov	r0, r3
 800c072:	3708      	adds	r7, #8
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e04c      	b.n	800c124 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7f6 fa9a 	bl	80025d8 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f022 0203 	bic.w	r2, r2, #3
 800c0ba:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4b19      	ldr	r3, [pc, #100]	; (800c12c <HAL_SPDIFRX_Init+0xb4>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800c0d4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800c0da:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800c0e0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800c0e6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800c0ec:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800c0f2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800c0f8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800c0fe:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800c104:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	4313      	orrs	r3, r2
 800c10a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	fff88407 	.word	0xfff88407

0800c130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d101      	bne.n	800c142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e049      	b.n	800c1d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d106      	bne.n	800c15c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f7f6 faa2 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4619      	mov	r1, r3
 800c16e:	4610      	mov	r0, r2
 800c170:	f000 fc2a 	bl	800c9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2201      	movs	r2, #1
 800c190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
	...

0800c1e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b085      	sub	sp, #20
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d001      	beq.n	800c1f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e054      	b.n	800c2a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68da      	ldr	r2, [r3, #12]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f042 0201 	orr.w	r2, r2, #1
 800c20e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a26      	ldr	r2, [pc, #152]	; (800c2b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d022      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c222:	d01d      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a22      	ldr	r2, [pc, #136]	; (800c2b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d018      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a21      	ldr	r2, [pc, #132]	; (800c2b8 <HAL_TIM_Base_Start_IT+0xd8>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d013      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a1f      	ldr	r2, [pc, #124]	; (800c2bc <HAL_TIM_Base_Start_IT+0xdc>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00e      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a1e      	ldr	r2, [pc, #120]	; (800c2c0 <HAL_TIM_Base_Start_IT+0xe0>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d009      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a1c      	ldr	r2, [pc, #112]	; (800c2c4 <HAL_TIM_Base_Start_IT+0xe4>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d004      	beq.n	800c260 <HAL_TIM_Base_Start_IT+0x80>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a1b      	ldr	r2, [pc, #108]	; (800c2c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d115      	bne.n	800c28c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689a      	ldr	r2, [r3, #8]
 800c266:	4b19      	ldr	r3, [pc, #100]	; (800c2cc <HAL_TIM_Base_Start_IT+0xec>)
 800c268:	4013      	ands	r3, r2
 800c26a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2b06      	cmp	r3, #6
 800c270:	d015      	beq.n	800c29e <HAL_TIM_Base_Start_IT+0xbe>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c278:	d011      	beq.n	800c29e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f042 0201 	orr.w	r2, r2, #1
 800c288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c28a:	e008      	b.n	800c29e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f042 0201 	orr.w	r2, r2, #1
 800c29a:	601a      	str	r2, [r3, #0]
 800c29c:	e000      	b.n	800c2a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c29e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	40010000 	.word	0x40010000
 800c2b4:	40000400 	.word	0x40000400
 800c2b8:	40000800 	.word	0x40000800
 800c2bc:	40000c00 	.word	0x40000c00
 800c2c0:	40010400 	.word	0x40010400
 800c2c4:	40014000 	.word	0x40014000
 800c2c8:	40001800 	.word	0x40001800
 800c2cc:	00010007 	.word	0x00010007

0800c2d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e049      	b.n	800c376 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7f6 fa40 	bl	800277c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3304      	adds	r3, #4
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f000 fb5a 	bl	800c9c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c37e:	b580      	push	{r7, lr}
 800c380:	b082      	sub	sp, #8
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b02      	cmp	r3, #2
 800c392:	d122      	bne.n	800c3da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f003 0302 	and.w	r3, r3, #2
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d11b      	bne.n	800c3da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f06f 0202 	mvn.w	r2, #2
 800c3aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	f003 0303 	and.w	r3, r3, #3
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d003      	beq.n	800c3c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fae3 	bl	800c98c <HAL_TIM_IC_CaptureCallback>
 800c3c6:	e005      	b.n	800c3d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fad5 	bl	800c978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fae6 	bl	800c9a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	f003 0304 	and.w	r3, r3, #4
 800c3e4:	2b04      	cmp	r3, #4
 800c3e6:	d122      	bne.n	800c42e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	f003 0304 	and.w	r3, r3, #4
 800c3f2:	2b04      	cmp	r3, #4
 800c3f4:	d11b      	bne.n	800c42e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f06f 0204 	mvn.w	r2, #4
 800c3fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2202      	movs	r2, #2
 800c404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c410:	2b00      	cmp	r3, #0
 800c412:	d003      	beq.n	800c41c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 fab9 	bl	800c98c <HAL_TIM_IC_CaptureCallback>
 800c41a:	e005      	b.n	800c428 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f000 faab 	bl	800c978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fabc 	bl	800c9a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	f003 0308 	and.w	r3, r3, #8
 800c438:	2b08      	cmp	r3, #8
 800c43a:	d122      	bne.n	800c482 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f003 0308 	and.w	r3, r3, #8
 800c446:	2b08      	cmp	r3, #8
 800c448:	d11b      	bne.n	800c482 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f06f 0208 	mvn.w	r2, #8
 800c452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2204      	movs	r2, #4
 800c458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	69db      	ldr	r3, [r3, #28]
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fa8f 	bl	800c98c <HAL_TIM_IC_CaptureCallback>
 800c46e:	e005      	b.n	800c47c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fa81 	bl	800c978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fa92 	bl	800c9a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	f003 0310 	and.w	r3, r3, #16
 800c48c:	2b10      	cmp	r3, #16
 800c48e:	d122      	bne.n	800c4d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	f003 0310 	and.w	r3, r3, #16
 800c49a:	2b10      	cmp	r3, #16
 800c49c:	d11b      	bne.n	800c4d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f06f 0210 	mvn.w	r2, #16
 800c4a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2208      	movs	r2, #8
 800c4ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	69db      	ldr	r3, [r3, #28]
 800c4b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa65 	bl	800c98c <HAL_TIM_IC_CaptureCallback>
 800c4c2:	e005      	b.n	800c4d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fa57 	bl	800c978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fa68 	bl	800c9a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	691b      	ldr	r3, [r3, #16]
 800c4dc:	f003 0301 	and.w	r3, r3, #1
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d10e      	bne.n	800c502 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f003 0301 	and.w	r3, r3, #1
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d107      	bne.n	800c502 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f06f 0201 	mvn.w	r2, #1
 800c4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7f5 fc01 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	691b      	ldr	r3, [r3, #16]
 800c508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c50c:	2b80      	cmp	r3, #128	; 0x80
 800c50e:	d10e      	bne.n	800c52e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c51a:	2b80      	cmp	r3, #128	; 0x80
 800c51c:	d107      	bne.n	800c52e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fefb 	bl	800d324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c53c:	d10e      	bne.n	800c55c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c548:	2b80      	cmp	r3, #128	; 0x80
 800c54a:	d107      	bne.n	800c55c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 feee 	bl	800d338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	691b      	ldr	r3, [r3, #16]
 800c562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c566:	2b40      	cmp	r3, #64	; 0x40
 800c568:	d10e      	bne.n	800c588 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	d107      	bne.n	800c588 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 fa16 	bl	800c9b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b20      	cmp	r3, #32
 800c594:	d10e      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f003 0320 	and.w	r3, r3, #32
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d107      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f06f 0220 	mvn.w	r2, #32
 800c5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 feae 	bl	800d310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5b4:	bf00      	nop
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d101      	bne.n	800c5da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c5d6:	2302      	movs	r3, #2
 800c5d8:	e0ff      	b.n	800c7da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2b14      	cmp	r3, #20
 800c5e6:	f200 80f0 	bhi.w	800c7ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c5ea:	a201      	add	r2, pc, #4	; (adr r2, 800c5f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c645 	.word	0x0800c645
 800c5f4:	0800c7cb 	.word	0x0800c7cb
 800c5f8:	0800c7cb 	.word	0x0800c7cb
 800c5fc:	0800c7cb 	.word	0x0800c7cb
 800c600:	0800c685 	.word	0x0800c685
 800c604:	0800c7cb 	.word	0x0800c7cb
 800c608:	0800c7cb 	.word	0x0800c7cb
 800c60c:	0800c7cb 	.word	0x0800c7cb
 800c610:	0800c6c7 	.word	0x0800c6c7
 800c614:	0800c7cb 	.word	0x0800c7cb
 800c618:	0800c7cb 	.word	0x0800c7cb
 800c61c:	0800c7cb 	.word	0x0800c7cb
 800c620:	0800c707 	.word	0x0800c707
 800c624:	0800c7cb 	.word	0x0800c7cb
 800c628:	0800c7cb 	.word	0x0800c7cb
 800c62c:	0800c7cb 	.word	0x0800c7cb
 800c630:	0800c749 	.word	0x0800c749
 800c634:	0800c7cb 	.word	0x0800c7cb
 800c638:	0800c7cb 	.word	0x0800c7cb
 800c63c:	0800c7cb 	.word	0x0800c7cb
 800c640:	0800c789 	.word	0x0800c789
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fa5c 	bl	800cb08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	699a      	ldr	r2, [r3, #24]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f042 0208 	orr.w	r2, r2, #8
 800c65e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	699a      	ldr	r2, [r3, #24]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f022 0204 	bic.w	r2, r2, #4
 800c66e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6999      	ldr	r1, [r3, #24]
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	691a      	ldr	r2, [r3, #16]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	619a      	str	r2, [r3, #24]
      break;
 800c682:	e0a5      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 faae 	bl	800cbec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c69e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	699a      	ldr	r2, [r3, #24]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6999      	ldr	r1, [r3, #24]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	021a      	lsls	r2, r3, #8
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	619a      	str	r2, [r3, #24]
      break;
 800c6c4:	e084      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fb05 	bl	800ccdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69da      	ldr	r2, [r3, #28]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f042 0208 	orr.w	r2, r2, #8
 800c6e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69da      	ldr	r2, [r3, #28]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0204 	bic.w	r2, r2, #4
 800c6f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69d9      	ldr	r1, [r3, #28]
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	691a      	ldr	r2, [r3, #16]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	61da      	str	r2, [r3, #28]
      break;
 800c704:	e064      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68b9      	ldr	r1, [r7, #8]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fb5b 	bl	800cdc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69da      	ldr	r2, [r3, #28]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	69d9      	ldr	r1, [r3, #28]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	021a      	lsls	r2, r3, #8
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	430a      	orrs	r2, r1
 800c744:	61da      	str	r2, [r3, #28]
      break;
 800c746:	e043      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68b9      	ldr	r1, [r7, #8]
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fb92 	bl	800ce78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f042 0208 	orr.w	r2, r2, #8
 800c762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0204 	bic.w	r2, r2, #4
 800c772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	691a      	ldr	r2, [r3, #16]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c786:	e023      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68b9      	ldr	r1, [r7, #8]
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fbc4 	bl	800cf1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c7a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c7b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	021a      	lsls	r2, r3, #8
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c7c8:	e002      	b.n	800c7d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3718      	adds	r7, #24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop

0800c7e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d101      	bne.n	800c800 <HAL_TIM_ConfigClockSource+0x1c>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	e0b4      	b.n	800c96a <HAL_TIM_ConfigClockSource+0x186>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2201      	movs	r2, #1
 800c804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	4b56      	ldr	r3, [pc, #344]	; (800c974 <HAL_TIM_ConfigClockSource+0x190>)
 800c81c:	4013      	ands	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c838:	d03e      	beq.n	800c8b8 <HAL_TIM_ConfigClockSource+0xd4>
 800c83a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c83e:	f200 8087 	bhi.w	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c846:	f000 8086 	beq.w	800c956 <HAL_TIM_ConfigClockSource+0x172>
 800c84a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c84e:	d87f      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c850:	2b70      	cmp	r3, #112	; 0x70
 800c852:	d01a      	beq.n	800c88a <HAL_TIM_ConfigClockSource+0xa6>
 800c854:	2b70      	cmp	r3, #112	; 0x70
 800c856:	d87b      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c858:	2b60      	cmp	r3, #96	; 0x60
 800c85a:	d050      	beq.n	800c8fe <HAL_TIM_ConfigClockSource+0x11a>
 800c85c:	2b60      	cmp	r3, #96	; 0x60
 800c85e:	d877      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c860:	2b50      	cmp	r3, #80	; 0x50
 800c862:	d03c      	beq.n	800c8de <HAL_TIM_ConfigClockSource+0xfa>
 800c864:	2b50      	cmp	r3, #80	; 0x50
 800c866:	d873      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d058      	beq.n	800c91e <HAL_TIM_ConfigClockSource+0x13a>
 800c86c:	2b40      	cmp	r3, #64	; 0x40
 800c86e:	d86f      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c870:	2b30      	cmp	r3, #48	; 0x30
 800c872:	d064      	beq.n	800c93e <HAL_TIM_ConfigClockSource+0x15a>
 800c874:	2b30      	cmp	r3, #48	; 0x30
 800c876:	d86b      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c878:	2b20      	cmp	r3, #32
 800c87a:	d060      	beq.n	800c93e <HAL_TIM_ConfigClockSource+0x15a>
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	d867      	bhi.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
 800c880:	2b00      	cmp	r3, #0
 800c882:	d05c      	beq.n	800c93e <HAL_TIM_ConfigClockSource+0x15a>
 800c884:	2b10      	cmp	r3, #16
 800c886:	d05a      	beq.n	800c93e <HAL_TIM_ConfigClockSource+0x15a>
 800c888:	e062      	b.n	800c950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6818      	ldr	r0, [r3, #0]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	6899      	ldr	r1, [r3, #8]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	f000 fc0d 	bl	800d0b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c8ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68ba      	ldr	r2, [r7, #8]
 800c8b4:	609a      	str	r2, [r3, #8]
      break;
 800c8b6:	e04f      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	6899      	ldr	r1, [r3, #8]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f000 fbf6 	bl	800d0b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8da:	609a      	str	r2, [r3, #8]
      break;
 800c8dc:	e03c      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	6859      	ldr	r1, [r3, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f000 fb6a 	bl	800cfc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2150      	movs	r1, #80	; 0x50
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fbc3 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c8fc:	e02c      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6859      	ldr	r1, [r3, #4]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f000 fb89 	bl	800d022 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2160      	movs	r1, #96	; 0x60
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fbb3 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c91c:	e01c      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	6859      	ldr	r1, [r3, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f000 fb4a 	bl	800cfc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2140      	movs	r1, #64	; 0x40
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fba3 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c93c:	e00c      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4619      	mov	r1, r3
 800c948:	4610      	mov	r0, r2
 800c94a:	f000 fb9a 	bl	800d082 <TIM_ITRx_SetConfig>
      break;
 800c94e:	e003      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	73fb      	strb	r3, [r7, #15]
      break;
 800c954:	e000      	b.n	800c958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c968:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	fffeff88 	.word	0xfffeff88

0800c978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c994:	bf00      	nop
 800c996:	370c      	adds	r7, #12
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4a40      	ldr	r2, [pc, #256]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d013      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9e6:	d00f      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a3d      	ldr	r2, [pc, #244]	; (800cae0 <TIM_Base_SetConfig+0x118>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d00b      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a3c      	ldr	r2, [pc, #240]	; (800cae4 <TIM_Base_SetConfig+0x11c>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d007      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a3b      	ldr	r2, [pc, #236]	; (800cae8 <TIM_Base_SetConfig+0x120>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d003      	beq.n	800ca08 <TIM_Base_SetConfig+0x40>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a3a      	ldr	r2, [pc, #232]	; (800caec <TIM_Base_SetConfig+0x124>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d108      	bne.n	800ca1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	4313      	orrs	r3, r2
 800ca18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a2f      	ldr	r2, [pc, #188]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d02b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca28:	d027      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	4a2c      	ldr	r2, [pc, #176]	; (800cae0 <TIM_Base_SetConfig+0x118>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d023      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	4a2b      	ldr	r2, [pc, #172]	; (800cae4 <TIM_Base_SetConfig+0x11c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d01f      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a2a      	ldr	r2, [pc, #168]	; (800cae8 <TIM_Base_SetConfig+0x120>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d01b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	4a29      	ldr	r2, [pc, #164]	; (800caec <TIM_Base_SetConfig+0x124>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d017      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	4a28      	ldr	r2, [pc, #160]	; (800caf0 <TIM_Base_SetConfig+0x128>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d013      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4a27      	ldr	r2, [pc, #156]	; (800caf4 <TIM_Base_SetConfig+0x12c>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00f      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a26      	ldr	r2, [pc, #152]	; (800caf8 <TIM_Base_SetConfig+0x130>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00b      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a25      	ldr	r2, [pc, #148]	; (800cafc <TIM_Base_SetConfig+0x134>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d007      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a24      	ldr	r2, [pc, #144]	; (800cb00 <TIM_Base_SetConfig+0x138>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_Base_SetConfig+0xb2>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a23      	ldr	r2, [pc, #140]	; (800cb04 <TIM_Base_SetConfig+0x13c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d108      	bne.n	800ca8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	68db      	ldr	r3, [r3, #12]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	689a      	ldr	r2, [r3, #8]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a0a      	ldr	r2, [pc, #40]	; (800cadc <TIM_Base_SetConfig+0x114>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d003      	beq.n	800cac0 <TIM_Base_SetConfig+0xf8>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a0c      	ldr	r2, [pc, #48]	; (800caec <TIM_Base_SetConfig+0x124>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d103      	bne.n	800cac8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	691a      	ldr	r2, [r3, #16]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	615a      	str	r2, [r3, #20]
}
 800cace:	bf00      	nop
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	40010000 	.word	0x40010000
 800cae0:	40000400 	.word	0x40000400
 800cae4:	40000800 	.word	0x40000800
 800cae8:	40000c00 	.word	0x40000c00
 800caec:	40010400 	.word	0x40010400
 800caf0:	40014000 	.word	0x40014000
 800caf4:	40014400 	.word	0x40014400
 800caf8:	40014800 	.word	0x40014800
 800cafc:	40001800 	.word	0x40001800
 800cb00:	40001c00 	.word	0x40001c00
 800cb04:	40002000 	.word	0x40002000

0800cb08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	f023 0201 	bic.w	r2, r3, #1
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <TIM_OC1_SetConfig+0xd8>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f023 0303 	bic.w	r3, r3, #3
 800cb3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f023 0302 	bic.w	r3, r3, #2
 800cb50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a21      	ldr	r2, [pc, #132]	; (800cbe4 <TIM_OC1_SetConfig+0xdc>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d003      	beq.n	800cb6c <TIM_OC1_SetConfig+0x64>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a20      	ldr	r2, [pc, #128]	; (800cbe8 <TIM_OC1_SetConfig+0xe0>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d10c      	bne.n	800cb86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f023 0308 	bic.w	r3, r3, #8
 800cb72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f023 0304 	bic.w	r3, r3, #4
 800cb84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a16      	ldr	r2, [pc, #88]	; (800cbe4 <TIM_OC1_SetConfig+0xdc>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d003      	beq.n	800cb96 <TIM_OC1_SetConfig+0x8e>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a15      	ldr	r2, [pc, #84]	; (800cbe8 <TIM_OC1_SetConfig+0xe0>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d111      	bne.n	800cbba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	693a      	ldr	r2, [r7, #16]
 800cbbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	697a      	ldr	r2, [r7, #20]
 800cbd2:	621a      	str	r2, [r3, #32]
}
 800cbd4:	bf00      	nop
 800cbd6:	371c      	adds	r7, #28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	fffeff8f 	.word	0xfffeff8f
 800cbe4:	40010000 	.word	0x40010000
 800cbe8:	40010400 	.word	0x40010400

0800cbec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6a1b      	ldr	r3, [r3, #32]
 800cbfa:	f023 0210 	bic.w	r2, r3, #16
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	4b2e      	ldr	r3, [pc, #184]	; (800ccd0 <TIM_OC2_SetConfig+0xe4>)
 800cc18:	4013      	ands	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	021b      	lsls	r3, r3, #8
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	f023 0320 	bic.w	r3, r3, #32
 800cc36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a23      	ldr	r2, [pc, #140]	; (800ccd4 <TIM_OC2_SetConfig+0xe8>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d003      	beq.n	800cc54 <TIM_OC2_SetConfig+0x68>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	4a22      	ldr	r2, [pc, #136]	; (800ccd8 <TIM_OC2_SetConfig+0xec>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d10d      	bne.n	800cc70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	011b      	lsls	r3, r3, #4
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	4a18      	ldr	r2, [pc, #96]	; (800ccd4 <TIM_OC2_SetConfig+0xe8>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d003      	beq.n	800cc80 <TIM_OC2_SetConfig+0x94>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a17      	ldr	r2, [pc, #92]	; (800ccd8 <TIM_OC2_SetConfig+0xec>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d113      	bne.n	800cca8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	695b      	ldr	r3, [r3, #20]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	621a      	str	r2, [r3, #32]
}
 800ccc2:	bf00      	nop
 800ccc4:	371c      	adds	r7, #28
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	feff8fff 	.word	0xfeff8fff
 800ccd4:	40010000 	.word	0x40010000
 800ccd8:	40010400 	.word	0x40010400

0800ccdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b087      	sub	sp, #28
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	4b2d      	ldr	r3, [pc, #180]	; (800cdbc <TIM_OC3_SetConfig+0xe0>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f023 0303 	bic.w	r3, r3, #3
 800cd12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	68fa      	ldr	r2, [r7, #12]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	021b      	lsls	r3, r3, #8
 800cd2c:	697a      	ldr	r2, [r7, #20]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a22      	ldr	r2, [pc, #136]	; (800cdc0 <TIM_OC3_SetConfig+0xe4>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d003      	beq.n	800cd42 <TIM_OC3_SetConfig+0x66>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	4a21      	ldr	r2, [pc, #132]	; (800cdc4 <TIM_OC3_SetConfig+0xe8>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d10d      	bne.n	800cd5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	021b      	lsls	r3, r3, #8
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a17      	ldr	r2, [pc, #92]	; (800cdc0 <TIM_OC3_SetConfig+0xe4>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d003      	beq.n	800cd6e <TIM_OC3_SetConfig+0x92>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a16      	ldr	r2, [pc, #88]	; (800cdc4 <TIM_OC3_SetConfig+0xe8>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d113      	bne.n	800cd96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cd7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	695b      	ldr	r3, [r3, #20]
 800cd82:	011b      	lsls	r3, r3, #4
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	011b      	lsls	r3, r3, #4
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	685a      	ldr	r2, [r3, #4]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	697a      	ldr	r2, [r7, #20]
 800cdae:	621a      	str	r2, [r3, #32]
}
 800cdb0:	bf00      	nop
 800cdb2:	371c      	adds	r7, #28
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	fffeff8f 	.word	0xfffeff8f
 800cdc0:	40010000 	.word	0x40010000
 800cdc4:	40010400 	.word	0x40010400

0800cdc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b087      	sub	sp, #28
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	685b      	ldr	r3, [r3, #4]
 800cde8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	4b1e      	ldr	r3, [pc, #120]	; (800ce6c <TIM_OC4_SetConfig+0xa4>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	021b      	lsls	r3, r3, #8
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	031b      	lsls	r3, r3, #12
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a13      	ldr	r2, [pc, #76]	; (800ce70 <TIM_OC4_SetConfig+0xa8>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d003      	beq.n	800ce30 <TIM_OC4_SetConfig+0x68>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a12      	ldr	r2, [pc, #72]	; (800ce74 <TIM_OC4_SetConfig+0xac>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d109      	bne.n	800ce44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	695b      	ldr	r3, [r3, #20]
 800ce3c:	019b      	lsls	r3, r3, #6
 800ce3e:	697a      	ldr	r2, [r7, #20]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	621a      	str	r2, [r3, #32]
}
 800ce5e:	bf00      	nop
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	feff8fff 	.word	0xfeff8fff
 800ce70:	40010000 	.word	0x40010000
 800ce74:	40010400 	.word	0x40010400

0800ce78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	4b1b      	ldr	r3, [pc, #108]	; (800cf10 <TIM_OC5_SetConfig+0x98>)
 800cea4:	4013      	ands	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ceb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	041b      	lsls	r3, r3, #16
 800cec0:	693a      	ldr	r2, [r7, #16]
 800cec2:	4313      	orrs	r3, r2
 800cec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a12      	ldr	r2, [pc, #72]	; (800cf14 <TIM_OC5_SetConfig+0x9c>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d003      	beq.n	800ced6 <TIM_OC5_SetConfig+0x5e>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a11      	ldr	r2, [pc, #68]	; (800cf18 <TIM_OC5_SetConfig+0xa0>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d109      	bne.n	800ceea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cedc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	021b      	lsls	r3, r3, #8
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	621a      	str	r2, [r3, #32]
}
 800cf04:	bf00      	nop
 800cf06:	371c      	adds	r7, #28
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr
 800cf10:	fffeff8f 	.word	0xfffeff8f
 800cf14:	40010000 	.word	0x40010000
 800cf18:	40010400 	.word	0x40010400

0800cf1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b087      	sub	sp, #28
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4b1c      	ldr	r3, [pc, #112]	; (800cfb8 <TIM_OC6_SetConfig+0x9c>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	021b      	lsls	r3, r3, #8
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	051b      	lsls	r3, r3, #20
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a13      	ldr	r2, [pc, #76]	; (800cfbc <TIM_OC6_SetConfig+0xa0>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d003      	beq.n	800cf7c <TIM_OC6_SetConfig+0x60>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a12      	ldr	r2, [pc, #72]	; (800cfc0 <TIM_OC6_SetConfig+0xa4>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d109      	bne.n	800cf90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cf82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	029b      	lsls	r3, r3, #10
 800cf8a:	697a      	ldr	r2, [r7, #20]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	621a      	str	r2, [r3, #32]
}
 800cfaa:	bf00      	nop
 800cfac:	371c      	adds	r7, #28
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	feff8fff 	.word	0xfeff8fff
 800cfbc:	40010000 	.word	0x40010000
 800cfc0:	40010400 	.word	0x40010400

0800cfc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b087      	sub	sp, #28
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6a1b      	ldr	r3, [r3, #32]
 800cfd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	f023 0201 	bic.w	r2, r3, #1
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	011b      	lsls	r3, r3, #4
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f023 030a 	bic.w	r3, r3, #10
 800d000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	4313      	orrs	r3, r2
 800d008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	693a      	ldr	r2, [r7, #16]
 800d00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	621a      	str	r2, [r3, #32]
}
 800d016:	bf00      	nop
 800d018:	371c      	adds	r7, #28
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d022:	b480      	push	{r7}
 800d024:	b087      	sub	sp, #28
 800d026:	af00      	add	r7, sp, #0
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	60b9      	str	r1, [r7, #8]
 800d02c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6a1b      	ldr	r3, [r3, #32]
 800d032:	f023 0210 	bic.w	r2, r3, #16
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6a1b      	ldr	r3, [r3, #32]
 800d044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d04c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	031b      	lsls	r3, r3, #12
 800d052:	697a      	ldr	r2, [r7, #20]
 800d054:	4313      	orrs	r3, r2
 800d056:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d05e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	4313      	orrs	r3, r2
 800d068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	621a      	str	r2, [r3, #32]
}
 800d076:	bf00      	nop
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f043 0307 	orr.w	r3, r3, #7
 800d0a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	609a      	str	r2, [r3, #8]
}
 800d0ac:	bf00      	nop
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
 800d0c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	021a      	lsls	r2, r3, #8
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	609a      	str	r2, [r3, #8]
}
 800d0ec:	bf00      	nop
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d101      	bne.n	800d110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e06d      	b.n	800d1ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2202      	movs	r2, #2
 800d11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a30      	ldr	r2, [pc, #192]	; (800d1f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d004      	beq.n	800d144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a2f      	ldr	r2, [pc, #188]	; (800d1fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d108      	bne.n	800d156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d14a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4313      	orrs	r3, r2
 800d154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d15c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	4313      	orrs	r3, r2
 800d166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a20      	ldr	r2, [pc, #128]	; (800d1f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d022      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d182:	d01d      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a1d      	ldr	r2, [pc, #116]	; (800d200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d018      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4a1c      	ldr	r2, [pc, #112]	; (800d204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d013      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4a1a      	ldr	r2, [pc, #104]	; (800d208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d00e      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	4a15      	ldr	r2, [pc, #84]	; (800d1fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d009      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a16      	ldr	r2, [pc, #88]	; (800d20c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d004      	beq.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a15      	ldr	r2, [pc, #84]	; (800d210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d10c      	bne.n	800d1da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	40010000 	.word	0x40010000
 800d1fc:	40010400 	.word	0x40010400
 800d200:	40000400 	.word	0x40000400
 800d204:	40000800 	.word	0x40000800
 800d208:	40000c00 	.word	0x40000c00
 800d20c:	40014000 	.word	0x40014000
 800d210:	40001800 	.word	0x40001800

0800d214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d21e:	2300      	movs	r3, #0
 800d220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d101      	bne.n	800d230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d22c:	2302      	movs	r3, #2
 800d22e:	e065      	b.n	800d2fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	4313      	orrs	r3, r2
 800d244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	4313      	orrs	r3, r2
 800d252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	4313      	orrs	r3, r2
 800d260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	695b      	ldr	r3, [r3, #20]
 800d288:	4313      	orrs	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d296:	4313      	orrs	r3, r2
 800d298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	041b      	lsls	r3, r3, #16
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a16      	ldr	r2, [pc, #88]	; (800d308 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d004      	beq.n	800d2be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a14      	ldr	r2, [pc, #80]	; (800d30c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d115      	bne.n	800d2ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c8:	051b      	lsls	r3, r3, #20
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	69db      	ldr	r3, [r3, #28]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68fa      	ldr	r2, [r7, #12]
 800d2f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	40010000 	.word	0x40010000
 800d30c:	40010400 	.word	0x40010400

0800d310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d318:	bf00      	nop
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr

0800d338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d340:	bf00      	nop
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	e040      	b.n	800d3e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d362:	2b00      	cmp	r3, #0
 800d364:	d106      	bne.n	800d374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7f5 faf2 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2224      	movs	r2, #36	; 0x24
 800d378:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f022 0201 	bic.w	r2, r2, #1
 800d388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fb16 	bl	800d9bc <UART_SetConfig>
 800d390:	4603      	mov	r3, r0
 800d392:	2b01      	cmp	r3, #1
 800d394:	d101      	bne.n	800d39a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e022      	b.n	800d3e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d002      	beq.n	800d3a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fd6c 	bl	800de80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	689a      	ldr	r2, [r3, #8]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f042 0201 	orr.w	r2, r2, #1
 800d3d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 fdf3 	bl	800dfc4 <UART_CheckIdleState>
 800d3de:	4603      	mov	r3, r0
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b0ba      	sub	sp, #232	; 0xe8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d40e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d412:	f640 030f 	movw	r3, #2063	; 0x80f
 800d416:	4013      	ands	r3, r2
 800d418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d41c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d420:	2b00      	cmp	r3, #0
 800d422:	d115      	bne.n	800d450 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d428:	f003 0320 	and.w	r3, r3, #32
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00f      	beq.n	800d450 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d434:	f003 0320 	and.w	r3, r3, #32
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 828f 	beq.w	800d964 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	4798      	blx	r3
      }
      return;
 800d44e:	e289      	b.n	800d964 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 8117 	beq.w	800d688 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d466:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d46a:	4b85      	ldr	r3, [pc, #532]	; (800d680 <HAL_UART_IRQHandler+0x298>)
 800d46c:	4013      	ands	r3, r2
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 810a 	beq.w	800d688 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d011      	beq.n	800d4a4 <HAL_UART_IRQHandler+0xbc>
 800d480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00b      	beq.n	800d4a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2201      	movs	r2, #1
 800d492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d49a:	f043 0201 	orr.w	r2, r3, #1
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a8:	f003 0302 	and.w	r3, r3, #2
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d011      	beq.n	800d4d4 <HAL_UART_IRQHandler+0xec>
 800d4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00b      	beq.n	800d4d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ca:	f043 0204 	orr.w	r2, r3, #4
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d8:	f003 0304 	and.w	r3, r3, #4
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d011      	beq.n	800d504 <HAL_UART_IRQHandler+0x11c>
 800d4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4e4:	f003 0301 	and.w	r3, r3, #1
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2204      	movs	r2, #4
 800d4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4fa:	f043 0202 	orr.w	r2, r3, #2
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d508:	f003 0308 	and.w	r3, r3, #8
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d017      	beq.n	800d540 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d514:	f003 0320 	and.w	r3, r3, #32
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d105      	bne.n	800d528 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d51c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d520:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00b      	beq.n	800d540 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2208      	movs	r2, #8
 800d52e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d536:	f043 0208 	orr.w	r2, r3, #8
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d012      	beq.n	800d572 <HAL_UART_IRQHandler+0x18a>
 800d54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d550:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00c      	beq.n	800d572 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d568:	f043 0220 	orr.w	r2, r3, #32
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 81f5 	beq.w	800d968 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d582:	f003 0320 	and.w	r3, r3, #32
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00d      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d007      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ba:	2b40      	cmp	r3, #64	; 0x40
 800d5bc:	d005      	beq.n	800d5ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d5be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d5c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d04f      	beq.n	800d66a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fdf1 	bl	800e1b2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5da:	2b40      	cmp	r3, #64	; 0x40
 800d5dc:	d141      	bne.n	800d662 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3308      	adds	r3, #8
 800d5e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3308      	adds	r3, #8
 800d606:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d60a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d60e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d616:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1d9      	bne.n	800d5de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d013      	beq.n	800d65a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	4a13      	ldr	r2, [pc, #76]	; (800d684 <HAL_UART_IRQHandler+0x29c>)
 800d638:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f6 fc5a 	bl	8003ef8 <HAL_DMA_Abort_IT>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d654:	4610      	mov	r0, r2
 800d656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d658:	e00f      	b.n	800d67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f998 	bl	800d990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d660:	e00b      	b.n	800d67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f994 	bl	800d990 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d668:	e007      	b.n	800d67a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f990 	bl	800d990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d678:	e176      	b.n	800d968 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d67a:	bf00      	nop
    return;
 800d67c:	e174      	b.n	800d968 <HAL_UART_IRQHandler+0x580>
 800d67e:	bf00      	nop
 800d680:	04000120 	.word	0x04000120
 800d684:	0800e279 	.word	0x0800e279

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	f040 8144 	bne.w	800d91a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d696:	f003 0310 	and.w	r3, r3, #16
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 813d 	beq.w	800d91a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f000 8136 	beq.w	800d91a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2210      	movs	r2, #16
 800d6b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c0:	2b40      	cmp	r3, #64	; 0x40
 800d6c2:	f040 80b2 	bne.w	800d82a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f000 8148 	beq.w	800d96c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	f080 8140 	bcs.w	800d96c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d6f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d700:	f000 8085 	beq.w	800d80e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d710:	e853 3f00 	ldrex	r3, [r3]
 800d714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d718:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d71c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d720:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	461a      	mov	r2, r3
 800d72a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d72e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d732:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d73a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d73e:	e841 2300 	strex	r3, r2, [r1]
 800d742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1da      	bne.n	800d704 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3308      	adds	r3, #8
 800d754:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d758:	e853 3f00 	ldrex	r3, [r3]
 800d75c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d75e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d760:	f023 0301 	bic.w	r3, r3, #1
 800d764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3308      	adds	r3, #8
 800d76e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d772:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d776:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d778:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d77a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d77e:	e841 2300 	strex	r3, r2, [r1]
 800d782:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1e1      	bne.n	800d74e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3308      	adds	r3, #8
 800d790:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d794:	e853 3f00 	ldrex	r3, [r3]
 800d798:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d79a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	3308      	adds	r3, #8
 800d7aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d7b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e3      	bne.n	800d78a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d6:	e853 3f00 	ldrex	r3, [r3]
 800d7da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7de:	f023 0310 	bic.w	r3, r3, #16
 800d7e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d7f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d7f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d7f8:	e841 2300 	strex	r3, r2, [r1]
 800d7fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1e4      	bne.n	800d7ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d808:	4618      	mov	r0, r3
 800d80a:	f7f6 fb05 	bl	8003e18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	1ad3      	subs	r3, r2, r3
 800d81e:	b29b      	uxth	r3, r3
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f8be 	bl	800d9a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d828:	e0a0      	b.n	800d96c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d836:	b29b      	uxth	r3, r3
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d844:	b29b      	uxth	r3, r3
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 8092 	beq.w	800d970 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800d84c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d850:	2b00      	cmp	r3, #0
 800d852:	f000 808d 	beq.w	800d970 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85e:	e853 3f00 	ldrex	r3, [r3]
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d86a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d878:	647b      	str	r3, [r7, #68]	; 0x44
 800d87a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d87e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d880:	e841 2300 	strex	r3, r2, [r1]
 800d884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d1e4      	bne.n	800d856 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	3308      	adds	r3, #8
 800d892:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	e853 3f00 	ldrex	r3, [r3]
 800d89a:	623b      	str	r3, [r7, #32]
   return(result);
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	f023 0301 	bic.w	r3, r3, #1
 800d8a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d8b0:	633a      	str	r2, [r7, #48]	; 0x30
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e3      	bne.n	800d88c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2220      	movs	r2, #32
 800d8c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	e853 3f00 	ldrex	r3, [r3]
 800d8e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f023 0310 	bic.w	r3, r3, #16
 800d8ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fc:	69b9      	ldr	r1, [r7, #24]
 800d8fe:	69fa      	ldr	r2, [r7, #28]
 800d900:	e841 2300 	strex	r3, r2, [r1]
 800d904:	617b      	str	r3, [r7, #20]
   return(result);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1e4      	bne.n	800d8d6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d90c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d910:	4619      	mov	r1, r3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f846 	bl	800d9a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d918:	e02a      	b.n	800d970 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d91a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00e      	beq.n	800d944 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d008      	beq.n	800d944 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d936:	2b00      	cmp	r3, #0
 800d938:	d01c      	beq.n	800d974 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	4798      	blx	r3
    }
    return;
 800d942:	e017      	b.n	800d974 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d012      	beq.n	800d976 <HAL_UART_IRQHandler+0x58e>
 800d950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00c      	beq.n	800d976 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fca1 	bl	800e2a4 <UART_EndTransmit_IT>
    return;
 800d962:	e008      	b.n	800d976 <HAL_UART_IRQHandler+0x58e>
      return;
 800d964:	bf00      	nop
 800d966:	e006      	b.n	800d976 <HAL_UART_IRQHandler+0x58e>
    return;
 800d968:	bf00      	nop
 800d96a:	e004      	b.n	800d976 <HAL_UART_IRQHandler+0x58e>
      return;
 800d96c:	bf00      	nop
 800d96e:	e002      	b.n	800d976 <HAL_UART_IRQHandler+0x58e>
      return;
 800d970:	bf00      	nop
 800d972:	e000      	b.n	800d976 <HAL_UART_IRQHandler+0x58e>
    return;
 800d974:	bf00      	nop
  }

}
 800d976:	37e8      	adds	r7, #232	; 0xe8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d984:	bf00      	nop
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	689a      	ldr	r2, [r3, #8]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	4ba7      	ldr	r3, [pc, #668]	; (800dc84 <UART_SetConfig+0x2c8>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	6812      	ldr	r2, [r2, #0]
 800d9ee:	6979      	ldr	r1, [r7, #20]
 800d9f0:	430b      	orrs	r3, r1
 800d9f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	685b      	ldr	r3, [r3, #4]
 800d9fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68da      	ldr	r2, [r3, #12]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	430a      	orrs	r2, r1
 800da08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	699b      	ldr	r3, [r3, #24]
 800da0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a1b      	ldr	r3, [r3, #32]
 800da14:	697a      	ldr	r2, [r7, #20]
 800da16:	4313      	orrs	r3, r2
 800da18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	430a      	orrs	r2, r1
 800da2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a95      	ldr	r2, [pc, #596]	; (800dc88 <UART_SetConfig+0x2cc>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d120      	bne.n	800da7a <UART_SetConfig+0xbe>
 800da38:	4b94      	ldr	r3, [pc, #592]	; (800dc8c <UART_SetConfig+0x2d0>)
 800da3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3e:	f003 0303 	and.w	r3, r3, #3
 800da42:	2b03      	cmp	r3, #3
 800da44:	d816      	bhi.n	800da74 <UART_SetConfig+0xb8>
 800da46:	a201      	add	r2, pc, #4	; (adr r2, 800da4c <UART_SetConfig+0x90>)
 800da48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4c:	0800da5d 	.word	0x0800da5d
 800da50:	0800da69 	.word	0x0800da69
 800da54:	0800da63 	.word	0x0800da63
 800da58:	0800da6f 	.word	0x0800da6f
 800da5c:	2301      	movs	r3, #1
 800da5e:	77fb      	strb	r3, [r7, #31]
 800da60:	e14f      	b.n	800dd02 <UART_SetConfig+0x346>
 800da62:	2302      	movs	r3, #2
 800da64:	77fb      	strb	r3, [r7, #31]
 800da66:	e14c      	b.n	800dd02 <UART_SetConfig+0x346>
 800da68:	2304      	movs	r3, #4
 800da6a:	77fb      	strb	r3, [r7, #31]
 800da6c:	e149      	b.n	800dd02 <UART_SetConfig+0x346>
 800da6e:	2308      	movs	r3, #8
 800da70:	77fb      	strb	r3, [r7, #31]
 800da72:	e146      	b.n	800dd02 <UART_SetConfig+0x346>
 800da74:	2310      	movs	r3, #16
 800da76:	77fb      	strb	r3, [r7, #31]
 800da78:	e143      	b.n	800dd02 <UART_SetConfig+0x346>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a84      	ldr	r2, [pc, #528]	; (800dc90 <UART_SetConfig+0x2d4>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d132      	bne.n	800daea <UART_SetConfig+0x12e>
 800da84:	4b81      	ldr	r3, [pc, #516]	; (800dc8c <UART_SetConfig+0x2d0>)
 800da86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da8a:	f003 030c 	and.w	r3, r3, #12
 800da8e:	2b0c      	cmp	r3, #12
 800da90:	d828      	bhi.n	800dae4 <UART_SetConfig+0x128>
 800da92:	a201      	add	r2, pc, #4	; (adr r2, 800da98 <UART_SetConfig+0xdc>)
 800da94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da98:	0800dacd 	.word	0x0800dacd
 800da9c:	0800dae5 	.word	0x0800dae5
 800daa0:	0800dae5 	.word	0x0800dae5
 800daa4:	0800dae5 	.word	0x0800dae5
 800daa8:	0800dad9 	.word	0x0800dad9
 800daac:	0800dae5 	.word	0x0800dae5
 800dab0:	0800dae5 	.word	0x0800dae5
 800dab4:	0800dae5 	.word	0x0800dae5
 800dab8:	0800dad3 	.word	0x0800dad3
 800dabc:	0800dae5 	.word	0x0800dae5
 800dac0:	0800dae5 	.word	0x0800dae5
 800dac4:	0800dae5 	.word	0x0800dae5
 800dac8:	0800dadf 	.word	0x0800dadf
 800dacc:	2300      	movs	r3, #0
 800dace:	77fb      	strb	r3, [r7, #31]
 800dad0:	e117      	b.n	800dd02 <UART_SetConfig+0x346>
 800dad2:	2302      	movs	r3, #2
 800dad4:	77fb      	strb	r3, [r7, #31]
 800dad6:	e114      	b.n	800dd02 <UART_SetConfig+0x346>
 800dad8:	2304      	movs	r3, #4
 800dada:	77fb      	strb	r3, [r7, #31]
 800dadc:	e111      	b.n	800dd02 <UART_SetConfig+0x346>
 800dade:	2308      	movs	r3, #8
 800dae0:	77fb      	strb	r3, [r7, #31]
 800dae2:	e10e      	b.n	800dd02 <UART_SetConfig+0x346>
 800dae4:	2310      	movs	r3, #16
 800dae6:	77fb      	strb	r3, [r7, #31]
 800dae8:	e10b      	b.n	800dd02 <UART_SetConfig+0x346>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a69      	ldr	r2, [pc, #420]	; (800dc94 <UART_SetConfig+0x2d8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d120      	bne.n	800db36 <UART_SetConfig+0x17a>
 800daf4:	4b65      	ldr	r3, [pc, #404]	; (800dc8c <UART_SetConfig+0x2d0>)
 800daf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dafa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dafe:	2b30      	cmp	r3, #48	; 0x30
 800db00:	d013      	beq.n	800db2a <UART_SetConfig+0x16e>
 800db02:	2b30      	cmp	r3, #48	; 0x30
 800db04:	d814      	bhi.n	800db30 <UART_SetConfig+0x174>
 800db06:	2b20      	cmp	r3, #32
 800db08:	d009      	beq.n	800db1e <UART_SetConfig+0x162>
 800db0a:	2b20      	cmp	r3, #32
 800db0c:	d810      	bhi.n	800db30 <UART_SetConfig+0x174>
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d002      	beq.n	800db18 <UART_SetConfig+0x15c>
 800db12:	2b10      	cmp	r3, #16
 800db14:	d006      	beq.n	800db24 <UART_SetConfig+0x168>
 800db16:	e00b      	b.n	800db30 <UART_SetConfig+0x174>
 800db18:	2300      	movs	r3, #0
 800db1a:	77fb      	strb	r3, [r7, #31]
 800db1c:	e0f1      	b.n	800dd02 <UART_SetConfig+0x346>
 800db1e:	2302      	movs	r3, #2
 800db20:	77fb      	strb	r3, [r7, #31]
 800db22:	e0ee      	b.n	800dd02 <UART_SetConfig+0x346>
 800db24:	2304      	movs	r3, #4
 800db26:	77fb      	strb	r3, [r7, #31]
 800db28:	e0eb      	b.n	800dd02 <UART_SetConfig+0x346>
 800db2a:	2308      	movs	r3, #8
 800db2c:	77fb      	strb	r3, [r7, #31]
 800db2e:	e0e8      	b.n	800dd02 <UART_SetConfig+0x346>
 800db30:	2310      	movs	r3, #16
 800db32:	77fb      	strb	r3, [r7, #31]
 800db34:	e0e5      	b.n	800dd02 <UART_SetConfig+0x346>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a57      	ldr	r2, [pc, #348]	; (800dc98 <UART_SetConfig+0x2dc>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d120      	bne.n	800db82 <UART_SetConfig+0x1c6>
 800db40:	4b52      	ldr	r3, [pc, #328]	; (800dc8c <UART_SetConfig+0x2d0>)
 800db42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800db4a:	2bc0      	cmp	r3, #192	; 0xc0
 800db4c:	d013      	beq.n	800db76 <UART_SetConfig+0x1ba>
 800db4e:	2bc0      	cmp	r3, #192	; 0xc0
 800db50:	d814      	bhi.n	800db7c <UART_SetConfig+0x1c0>
 800db52:	2b80      	cmp	r3, #128	; 0x80
 800db54:	d009      	beq.n	800db6a <UART_SetConfig+0x1ae>
 800db56:	2b80      	cmp	r3, #128	; 0x80
 800db58:	d810      	bhi.n	800db7c <UART_SetConfig+0x1c0>
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d002      	beq.n	800db64 <UART_SetConfig+0x1a8>
 800db5e:	2b40      	cmp	r3, #64	; 0x40
 800db60:	d006      	beq.n	800db70 <UART_SetConfig+0x1b4>
 800db62:	e00b      	b.n	800db7c <UART_SetConfig+0x1c0>
 800db64:	2300      	movs	r3, #0
 800db66:	77fb      	strb	r3, [r7, #31]
 800db68:	e0cb      	b.n	800dd02 <UART_SetConfig+0x346>
 800db6a:	2302      	movs	r3, #2
 800db6c:	77fb      	strb	r3, [r7, #31]
 800db6e:	e0c8      	b.n	800dd02 <UART_SetConfig+0x346>
 800db70:	2304      	movs	r3, #4
 800db72:	77fb      	strb	r3, [r7, #31]
 800db74:	e0c5      	b.n	800dd02 <UART_SetConfig+0x346>
 800db76:	2308      	movs	r3, #8
 800db78:	77fb      	strb	r3, [r7, #31]
 800db7a:	e0c2      	b.n	800dd02 <UART_SetConfig+0x346>
 800db7c:	2310      	movs	r3, #16
 800db7e:	77fb      	strb	r3, [r7, #31]
 800db80:	e0bf      	b.n	800dd02 <UART_SetConfig+0x346>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a45      	ldr	r2, [pc, #276]	; (800dc9c <UART_SetConfig+0x2e0>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d125      	bne.n	800dbd8 <UART_SetConfig+0x21c>
 800db8c:	4b3f      	ldr	r3, [pc, #252]	; (800dc8c <UART_SetConfig+0x2d0>)
 800db8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db9a:	d017      	beq.n	800dbcc <UART_SetConfig+0x210>
 800db9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dba0:	d817      	bhi.n	800dbd2 <UART_SetConfig+0x216>
 800dba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba6:	d00b      	beq.n	800dbc0 <UART_SetConfig+0x204>
 800dba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbac:	d811      	bhi.n	800dbd2 <UART_SetConfig+0x216>
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <UART_SetConfig+0x1fe>
 800dbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbb6:	d006      	beq.n	800dbc6 <UART_SetConfig+0x20a>
 800dbb8:	e00b      	b.n	800dbd2 <UART_SetConfig+0x216>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	77fb      	strb	r3, [r7, #31]
 800dbbe:	e0a0      	b.n	800dd02 <UART_SetConfig+0x346>
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	77fb      	strb	r3, [r7, #31]
 800dbc4:	e09d      	b.n	800dd02 <UART_SetConfig+0x346>
 800dbc6:	2304      	movs	r3, #4
 800dbc8:	77fb      	strb	r3, [r7, #31]
 800dbca:	e09a      	b.n	800dd02 <UART_SetConfig+0x346>
 800dbcc:	2308      	movs	r3, #8
 800dbce:	77fb      	strb	r3, [r7, #31]
 800dbd0:	e097      	b.n	800dd02 <UART_SetConfig+0x346>
 800dbd2:	2310      	movs	r3, #16
 800dbd4:	77fb      	strb	r3, [r7, #31]
 800dbd6:	e094      	b.n	800dd02 <UART_SetConfig+0x346>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a30      	ldr	r2, [pc, #192]	; (800dca0 <UART_SetConfig+0x2e4>)
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	d125      	bne.n	800dc2e <UART_SetConfig+0x272>
 800dbe2:	4b2a      	ldr	r3, [pc, #168]	; (800dc8c <UART_SetConfig+0x2d0>)
 800dbe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dbec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dbf0:	d017      	beq.n	800dc22 <UART_SetConfig+0x266>
 800dbf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dbf6:	d817      	bhi.n	800dc28 <UART_SetConfig+0x26c>
 800dbf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbfc:	d00b      	beq.n	800dc16 <UART_SetConfig+0x25a>
 800dbfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc02:	d811      	bhi.n	800dc28 <UART_SetConfig+0x26c>
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d003      	beq.n	800dc10 <UART_SetConfig+0x254>
 800dc08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc0c:	d006      	beq.n	800dc1c <UART_SetConfig+0x260>
 800dc0e:	e00b      	b.n	800dc28 <UART_SetConfig+0x26c>
 800dc10:	2301      	movs	r3, #1
 800dc12:	77fb      	strb	r3, [r7, #31]
 800dc14:	e075      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc16:	2302      	movs	r3, #2
 800dc18:	77fb      	strb	r3, [r7, #31]
 800dc1a:	e072      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	77fb      	strb	r3, [r7, #31]
 800dc20:	e06f      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc22:	2308      	movs	r3, #8
 800dc24:	77fb      	strb	r3, [r7, #31]
 800dc26:	e06c      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc28:	2310      	movs	r3, #16
 800dc2a:	77fb      	strb	r3, [r7, #31]
 800dc2c:	e069      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a1c      	ldr	r2, [pc, #112]	; (800dca4 <UART_SetConfig+0x2e8>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d137      	bne.n	800dca8 <UART_SetConfig+0x2ec>
 800dc38:	4b14      	ldr	r3, [pc, #80]	; (800dc8c <UART_SetConfig+0x2d0>)
 800dc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800dc42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dc46:	d017      	beq.n	800dc78 <UART_SetConfig+0x2bc>
 800dc48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dc4c:	d817      	bhi.n	800dc7e <UART_SetConfig+0x2c2>
 800dc4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc52:	d00b      	beq.n	800dc6c <UART_SetConfig+0x2b0>
 800dc54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc58:	d811      	bhi.n	800dc7e <UART_SetConfig+0x2c2>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <UART_SetConfig+0x2aa>
 800dc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc62:	d006      	beq.n	800dc72 <UART_SetConfig+0x2b6>
 800dc64:	e00b      	b.n	800dc7e <UART_SetConfig+0x2c2>
 800dc66:	2300      	movs	r3, #0
 800dc68:	77fb      	strb	r3, [r7, #31]
 800dc6a:	e04a      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	77fb      	strb	r3, [r7, #31]
 800dc70:	e047      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc72:	2304      	movs	r3, #4
 800dc74:	77fb      	strb	r3, [r7, #31]
 800dc76:	e044      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc78:	2308      	movs	r3, #8
 800dc7a:	77fb      	strb	r3, [r7, #31]
 800dc7c:	e041      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc7e:	2310      	movs	r3, #16
 800dc80:	77fb      	strb	r3, [r7, #31]
 800dc82:	e03e      	b.n	800dd02 <UART_SetConfig+0x346>
 800dc84:	efff69f3 	.word	0xefff69f3
 800dc88:	40011000 	.word	0x40011000
 800dc8c:	40023800 	.word	0x40023800
 800dc90:	40004400 	.word	0x40004400
 800dc94:	40004800 	.word	0x40004800
 800dc98:	40004c00 	.word	0x40004c00
 800dc9c:	40005000 	.word	0x40005000
 800dca0:	40011400 	.word	0x40011400
 800dca4:	40007800 	.word	0x40007800
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a71      	ldr	r2, [pc, #452]	; (800de74 <UART_SetConfig+0x4b8>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d125      	bne.n	800dcfe <UART_SetConfig+0x342>
 800dcb2:	4b71      	ldr	r3, [pc, #452]	; (800de78 <UART_SetConfig+0x4bc>)
 800dcb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dcbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dcc0:	d017      	beq.n	800dcf2 <UART_SetConfig+0x336>
 800dcc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dcc6:	d817      	bhi.n	800dcf8 <UART_SetConfig+0x33c>
 800dcc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dccc:	d00b      	beq.n	800dce6 <UART_SetConfig+0x32a>
 800dcce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcd2:	d811      	bhi.n	800dcf8 <UART_SetConfig+0x33c>
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d003      	beq.n	800dce0 <UART_SetConfig+0x324>
 800dcd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcdc:	d006      	beq.n	800dcec <UART_SetConfig+0x330>
 800dcde:	e00b      	b.n	800dcf8 <UART_SetConfig+0x33c>
 800dce0:	2300      	movs	r3, #0
 800dce2:	77fb      	strb	r3, [r7, #31]
 800dce4:	e00d      	b.n	800dd02 <UART_SetConfig+0x346>
 800dce6:	2302      	movs	r3, #2
 800dce8:	77fb      	strb	r3, [r7, #31]
 800dcea:	e00a      	b.n	800dd02 <UART_SetConfig+0x346>
 800dcec:	2304      	movs	r3, #4
 800dcee:	77fb      	strb	r3, [r7, #31]
 800dcf0:	e007      	b.n	800dd02 <UART_SetConfig+0x346>
 800dcf2:	2308      	movs	r3, #8
 800dcf4:	77fb      	strb	r3, [r7, #31]
 800dcf6:	e004      	b.n	800dd02 <UART_SetConfig+0x346>
 800dcf8:	2310      	movs	r3, #16
 800dcfa:	77fb      	strb	r3, [r7, #31]
 800dcfc:	e001      	b.n	800dd02 <UART_SetConfig+0x346>
 800dcfe:	2310      	movs	r3, #16
 800dd00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	69db      	ldr	r3, [r3, #28]
 800dd06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd0a:	d15a      	bne.n	800ddc2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800dd0c:	7ffb      	ldrb	r3, [r7, #31]
 800dd0e:	2b08      	cmp	r3, #8
 800dd10:	d827      	bhi.n	800dd62 <UART_SetConfig+0x3a6>
 800dd12:	a201      	add	r2, pc, #4	; (adr r2, 800dd18 <UART_SetConfig+0x35c>)
 800dd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	0800dd63 	.word	0x0800dd63
 800dd28:	0800dd53 	.word	0x0800dd53
 800dd2c:	0800dd63 	.word	0x0800dd63
 800dd30:	0800dd63 	.word	0x0800dd63
 800dd34:	0800dd63 	.word	0x0800dd63
 800dd38:	0800dd5b 	.word	0x0800dd5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd3c:	f7fb fd50 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 800dd40:	61b8      	str	r0, [r7, #24]
        break;
 800dd42:	e013      	b.n	800dd6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd44:	f7fb fd60 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800dd48:	61b8      	str	r0, [r7, #24]
        break;
 800dd4a:	e00f      	b.n	800dd6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd4c:	4b4b      	ldr	r3, [pc, #300]	; (800de7c <UART_SetConfig+0x4c0>)
 800dd4e:	61bb      	str	r3, [r7, #24]
        break;
 800dd50:	e00c      	b.n	800dd6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd52:	f7fb fc83 	bl	800965c <HAL_RCC_GetSysClockFreq>
 800dd56:	61b8      	str	r0, [r7, #24]
        break;
 800dd58:	e008      	b.n	800dd6c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd5e:	61bb      	str	r3, [r7, #24]
        break;
 800dd60:	e004      	b.n	800dd6c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800dd62:	2300      	movs	r3, #0
 800dd64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	77bb      	strb	r3, [r7, #30]
        break;
 800dd6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d074      	beq.n	800de5c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	005a      	lsls	r2, r3, #1
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	085b      	lsrs	r3, r3, #1
 800dd7c:	441a      	add	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2b0f      	cmp	r3, #15
 800dd8c:	d916      	bls.n	800ddbc <UART_SetConfig+0x400>
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd94:	d212      	bcs.n	800ddbc <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	f023 030f 	bic.w	r3, r3, #15
 800dd9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	085b      	lsrs	r3, r3, #1
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	f003 0307 	and.w	r3, r3, #7
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	89fb      	ldrh	r3, [r7, #14]
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	89fa      	ldrh	r2, [r7, #14]
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	e04f      	b.n	800de5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	77bb      	strb	r3, [r7, #30]
 800ddc0:	e04c      	b.n	800de5c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddc2:	7ffb      	ldrb	r3, [r7, #31]
 800ddc4:	2b08      	cmp	r3, #8
 800ddc6:	d828      	bhi.n	800de1a <UART_SetConfig+0x45e>
 800ddc8:	a201      	add	r2, pc, #4	; (adr r2, 800ddd0 <UART_SetConfig+0x414>)
 800ddca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddce:	bf00      	nop
 800ddd0:	0800ddf5 	.word	0x0800ddf5
 800ddd4:	0800ddfd 	.word	0x0800ddfd
 800ddd8:	0800de05 	.word	0x0800de05
 800dddc:	0800de1b 	.word	0x0800de1b
 800dde0:	0800de0b 	.word	0x0800de0b
 800dde4:	0800de1b 	.word	0x0800de1b
 800dde8:	0800de1b 	.word	0x0800de1b
 800ddec:	0800de1b 	.word	0x0800de1b
 800ddf0:	0800de13 	.word	0x0800de13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddf4:	f7fb fcf4 	bl	80097e0 <HAL_RCC_GetPCLK1Freq>
 800ddf8:	61b8      	str	r0, [r7, #24]
        break;
 800ddfa:	e013      	b.n	800de24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddfc:	f7fb fd04 	bl	8009808 <HAL_RCC_GetPCLK2Freq>
 800de00:	61b8      	str	r0, [r7, #24]
        break;
 800de02:	e00f      	b.n	800de24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de04:	4b1d      	ldr	r3, [pc, #116]	; (800de7c <UART_SetConfig+0x4c0>)
 800de06:	61bb      	str	r3, [r7, #24]
        break;
 800de08:	e00c      	b.n	800de24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de0a:	f7fb fc27 	bl	800965c <HAL_RCC_GetSysClockFreq>
 800de0e:	61b8      	str	r0, [r7, #24]
        break;
 800de10:	e008      	b.n	800de24 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de16:	61bb      	str	r3, [r7, #24]
        break;
 800de18:	e004      	b.n	800de24 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800de1a:	2300      	movs	r3, #0
 800de1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800de1e:	2301      	movs	r3, #1
 800de20:	77bb      	strb	r3, [r7, #30]
        break;
 800de22:	bf00      	nop
    }

    if (pclk != 0U)
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d018      	beq.n	800de5c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	085a      	lsrs	r2, r3, #1
 800de30:	69bb      	ldr	r3, [r7, #24]
 800de32:	441a      	add	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	fbb2 f3f3 	udiv	r3, r2, r3
 800de3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2b0f      	cmp	r3, #15
 800de42:	d909      	bls.n	800de58 <UART_SetConfig+0x49c>
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de4a:	d205      	bcs.n	800de58 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	b29a      	uxth	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60da      	str	r2, [r3, #12]
 800de56:	e001      	b.n	800de5c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2200      	movs	r2, #0
 800de66:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800de68:	7fbb      	ldrb	r3, [r7, #30]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	40007c00 	.word	0x40007c00
 800de78:	40023800 	.word	0x40023800
 800de7c:	00f42400 	.word	0x00f42400

0800de80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00a      	beq.n	800deaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00a      	beq.n	800decc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d00a      	beq.n	800deee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	430a      	orrs	r2, r1
 800deec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def2:	f003 0308 	and.w	r3, r3, #8
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00a      	beq.n	800df10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	430a      	orrs	r2, r1
 800df0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00a      	beq.n	800df32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	430a      	orrs	r2, r1
 800df30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00a      	beq.n	800df54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	430a      	orrs	r2, r1
 800df52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01a      	beq.n	800df96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	430a      	orrs	r2, r1
 800df74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df7e:	d10a      	bne.n	800df96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	430a      	orrs	r2, r1
 800df94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00a      	beq.n	800dfb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	605a      	str	r2, [r3, #4]
  }
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af02      	add	r7, sp, #8
 800dfca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dfd4:	f7f5 f8aa 	bl	800312c <HAL_GetTick>
 800dfd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0308 	and.w	r3, r3, #8
 800dfe4:	2b08      	cmp	r3, #8
 800dfe6:	d10e      	bne.n	800e006 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f817 	bl	800e02a <UART_WaitOnFlagUntilTimeout>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d001      	beq.n	800e006 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e002:	2303      	movs	r3, #3
 800e004:	e00d      	b.n	800e022 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2220      	movs	r2, #32
 800e00a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2220      	movs	r2, #32
 800e010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b09c      	sub	sp, #112	; 0x70
 800e02e:	af00      	add	r7, sp, #0
 800e030:	60f8      	str	r0, [r7, #12]
 800e032:	60b9      	str	r1, [r7, #8]
 800e034:	603b      	str	r3, [r7, #0]
 800e036:	4613      	mov	r3, r2
 800e038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e03a:	e0a5      	b.n	800e188 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e03c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e042:	f000 80a1 	beq.w	800e188 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e046:	f7f5 f871 	bl	800312c <HAL_GetTick>
 800e04a:	4602      	mov	r2, r0
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e052:	429a      	cmp	r2, r3
 800e054:	d302      	bcc.n	800e05c <UART_WaitOnFlagUntilTimeout+0x32>
 800e056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d13e      	bne.n	800e0da <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e064:	e853 3f00 	ldrex	r3, [r3]
 800e068:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e06c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e070:	667b      	str	r3, [r7, #100]	; 0x64
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e07a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e07c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e082:	e841 2300 	strex	r3, r2, [r1]
 800e086:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1e6      	bne.n	800e05c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	3308      	adds	r3, #8
 800e094:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e098:	e853 3f00 	ldrex	r3, [r3]
 800e09c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	f023 0301 	bic.w	r3, r3, #1
 800e0a4:	663b      	str	r3, [r7, #96]	; 0x60
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e0ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800e0b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e0b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0b6:	e841 2300 	strex	r3, r2, [r1]
 800e0ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e0bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1e5      	bne.n	800e08e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2220      	movs	r2, #32
 800e0c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2220      	movs	r2, #32
 800e0cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e067      	b.n	800e1aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d04f      	beq.n	800e188 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	69db      	ldr	r3, [r3, #28]
 800e0ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0f6:	d147      	bne.n	800e188 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e100:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10a:	e853 3f00 	ldrex	r3, [r3]
 800e10e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e116:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	461a      	mov	r2, r3
 800e11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e120:	637b      	str	r3, [r7, #52]	; 0x34
 800e122:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e128:	e841 2300 	strex	r3, r2, [r1]
 800e12c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e6      	bne.n	800e102 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3308      	adds	r3, #8
 800e13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	e853 3f00 	ldrex	r3, [r3]
 800e142:	613b      	str	r3, [r7, #16]
   return(result);
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f023 0301 	bic.w	r3, r3, #1
 800e14a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	3308      	adds	r3, #8
 800e152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e154:	623a      	str	r2, [r7, #32]
 800e156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e158:	69f9      	ldr	r1, [r7, #28]
 800e15a:	6a3a      	ldr	r2, [r7, #32]
 800e15c:	e841 2300 	strex	r3, r2, [r1]
 800e160:	61bb      	str	r3, [r7, #24]
   return(result);
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1e5      	bne.n	800e134 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2220      	movs	r2, #32
 800e16c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2220      	movs	r2, #32
 800e172:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2220      	movs	r2, #32
 800e178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e184:	2303      	movs	r3, #3
 800e186:	e010      	b.n	800e1aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	69da      	ldr	r2, [r3, #28]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	4013      	ands	r3, r2
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	429a      	cmp	r2, r3
 800e196:	bf0c      	ite	eq
 800e198:	2301      	moveq	r3, #1
 800e19a:	2300      	movne	r3, #0
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	461a      	mov	r2, r3
 800e1a0:	79fb      	ldrb	r3, [r7, #7]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	f43f af4a 	beq.w	800e03c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e1a8:	2300      	movs	r3, #0
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3770      	adds	r7, #112	; 0x70
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e1b2:	b480      	push	{r7}
 800e1b4:	b095      	sub	sp, #84	; 0x54
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1c2:	e853 3f00 	ldrex	r3, [r3]
 800e1c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d8:	643b      	str	r3, [r7, #64]	; 0x40
 800e1da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e1de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1e0:	e841 2300 	strex	r3, r2, [r1]
 800e1e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1e6      	bne.n	800e1ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	e853 3f00 	ldrex	r3, [r3]
 800e1fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	f023 0301 	bic.w	r3, r3, #1
 800e202:	64bb      	str	r3, [r7, #72]	; 0x48
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	3308      	adds	r3, #8
 800e20a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e20c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e20e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e214:	e841 2300 	strex	r3, r2, [r1]
 800e218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1e5      	bne.n	800e1ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e224:	2b01      	cmp	r3, #1
 800e226:	d118      	bne.n	800e25a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	e853 3f00 	ldrex	r3, [r3]
 800e234:	60bb      	str	r3, [r7, #8]
   return(result);
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	f023 0310 	bic.w	r3, r3, #16
 800e23c:	647b      	str	r3, [r7, #68]	; 0x44
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e246:	61bb      	str	r3, [r7, #24]
 800e248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	6979      	ldr	r1, [r7, #20]
 800e24c:	69ba      	ldr	r2, [r7, #24]
 800e24e:	e841 2300 	strex	r3, r2, [r1]
 800e252:	613b      	str	r3, [r7, #16]
   return(result);
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1e6      	bne.n	800e228 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2220      	movs	r2, #32
 800e25e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e26c:	bf00      	nop
 800e26e:	3754      	adds	r7, #84	; 0x54
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7ff fb7a 	bl	800d990 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e29c:	bf00      	nop
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b088      	sub	sp, #32
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	e853 3f00 	ldrex	r3, [r3]
 800e2b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2c0:	61fb      	str	r3, [r7, #28]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	61bb      	str	r3, [r7, #24]
 800e2cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ce:	6979      	ldr	r1, [r7, #20]
 800e2d0:	69ba      	ldr	r2, [r7, #24]
 800e2d2:	e841 2300 	strex	r3, r2, [r1]
 800e2d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1e6      	bne.n	800e2ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2220      	movs	r2, #32
 800e2e2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f7ff fb46 	bl	800d97c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e2f0:	bf00      	nop
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d121      	bne.n	800e34e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	4b27      	ldr	r3, [pc, #156]	; (800e3ac <FMC_SDRAM_Init+0xb4>)
 800e310:	4013      	ands	r3, r2
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	6851      	ldr	r1, [r2, #4]
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	6892      	ldr	r2, [r2, #8]
 800e31a:	4311      	orrs	r1, r2
 800e31c:	683a      	ldr	r2, [r7, #0]
 800e31e:	68d2      	ldr	r2, [r2, #12]
 800e320:	4311      	orrs	r1, r2
 800e322:	683a      	ldr	r2, [r7, #0]
 800e324:	6912      	ldr	r2, [r2, #16]
 800e326:	4311      	orrs	r1, r2
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	6952      	ldr	r2, [r2, #20]
 800e32c:	4311      	orrs	r1, r2
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	6992      	ldr	r2, [r2, #24]
 800e332:	4311      	orrs	r1, r2
 800e334:	683a      	ldr	r2, [r7, #0]
 800e336:	69d2      	ldr	r2, [r2, #28]
 800e338:	4311      	orrs	r1, r2
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	6a12      	ldr	r2, [r2, #32]
 800e33e:	4311      	orrs	r1, r2
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e344:	430a      	orrs	r2, r1
 800e346:	431a      	orrs	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	e026      	b.n	800e39c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	69d9      	ldr	r1, [r3, #28]
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	4319      	orrs	r1, r3
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	430b      	orrs	r3, r1
 800e366:	431a      	orrs	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	685a      	ldr	r2, [r3, #4]
 800e370:	4b0e      	ldr	r3, [pc, #56]	; (800e3ac <FMC_SDRAM_Init+0xb4>)
 800e372:	4013      	ands	r3, r2
 800e374:	683a      	ldr	r2, [r7, #0]
 800e376:	6851      	ldr	r1, [r2, #4]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	6892      	ldr	r2, [r2, #8]
 800e37c:	4311      	orrs	r1, r2
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	68d2      	ldr	r2, [r2, #12]
 800e382:	4311      	orrs	r1, r2
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	6912      	ldr	r2, [r2, #16]
 800e388:	4311      	orrs	r1, r2
 800e38a:	683a      	ldr	r2, [r7, #0]
 800e38c:	6952      	ldr	r2, [r2, #20]
 800e38e:	4311      	orrs	r1, r2
 800e390:	683a      	ldr	r2, [r7, #0]
 800e392:	6992      	ldr	r2, [r2, #24]
 800e394:	430a      	orrs	r2, r1
 800e396:	431a      	orrs	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	ffff8000 	.word	0xffff8000

0800e3b0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d128      	bne.n	800e414 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	1e59      	subs	r1, r3, #1
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	4319      	orrs	r1, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	3b01      	subs	r3, #1
 800e3e0:	021b      	lsls	r3, r3, #8
 800e3e2:	4319      	orrs	r1, r3
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	031b      	lsls	r3, r3, #12
 800e3ec:	4319      	orrs	r1, r3
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	3b01      	subs	r3, #1
 800e3f4:	041b      	lsls	r3, r3, #16
 800e3f6:	4319      	orrs	r1, r3
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	695b      	ldr	r3, [r3, #20]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	051b      	lsls	r3, r3, #20
 800e400:	4319      	orrs	r1, r3
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	3b01      	subs	r3, #1
 800e408:	061b      	lsls	r3, r3, #24
 800e40a:	430b      	orrs	r3, r1
 800e40c:	431a      	orrs	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	609a      	str	r2, [r3, #8]
 800e412:	e02d      	b.n	800e470 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	4b19      	ldr	r3, [pc, #100]	; (800e480 <FMC_SDRAM_Timing_Init+0xd0>)
 800e41a:	4013      	ands	r3, r2
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	68d2      	ldr	r2, [r2, #12]
 800e420:	3a01      	subs	r2, #1
 800e422:	0311      	lsls	r1, r2, #12
 800e424:	68ba      	ldr	r2, [r7, #8]
 800e426:	6952      	ldr	r2, [r2, #20]
 800e428:	3a01      	subs	r2, #1
 800e42a:	0512      	lsls	r2, r2, #20
 800e42c:	430a      	orrs	r2, r1
 800e42e:	431a      	orrs	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	1e59      	subs	r1, r3, #1
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	3b01      	subs	r3, #1
 800e448:	011b      	lsls	r3, r3, #4
 800e44a:	4319      	orrs	r1, r3
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	3b01      	subs	r3, #1
 800e452:	021b      	lsls	r3, r3, #8
 800e454:	4319      	orrs	r1, r3
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	041b      	lsls	r3, r3, #16
 800e45e:	4319      	orrs	r1, r3
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	3b01      	subs	r3, #1
 800e466:	061b      	lsls	r3, r3, #24
 800e468:	430b      	orrs	r3, r1
 800e46a:	431a      	orrs	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3714      	adds	r7, #20
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	ff0f0fff 	.word	0xff0f0fff

0800e484 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	691a      	ldr	r2, [r3, #16]
 800e494:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <FMC_SDRAM_SendCommand+0x44>)
 800e496:	4013      	ands	r3, r2
 800e498:	68ba      	ldr	r2, [r7, #8]
 800e49a:	6811      	ldr	r1, [r2, #0]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	6852      	ldr	r2, [r2, #4]
 800e4a0:	4311      	orrs	r1, r2
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	6892      	ldr	r2, [r2, #8]
 800e4a6:	3a01      	subs	r2, #1
 800e4a8:	0152      	lsls	r2, r2, #5
 800e4aa:	4311      	orrs	r1, r2
 800e4ac:	68ba      	ldr	r2, [r7, #8]
 800e4ae:	68d2      	ldr	r2, [r2, #12]
 800e4b0:	0252      	lsls	r2, r2, #9
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	431a      	orrs	r2, r3
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr
 800e4c8:	ffc00000 	.word	0xffc00000

0800e4cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b083      	sub	sp, #12
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	695a      	ldr	r2, [r3, #20]
 800e4da:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e4dc:	4013      	ands	r3, r2
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	0052      	lsls	r2, r2, #1
 800e4e2:	431a      	orrs	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	ffffc001 	.word	0xffffc001

0800e4fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e4fc:	b084      	sub	sp, #16
 800e4fe:	b480      	push	{r7}
 800e500:	b085      	sub	sp, #20
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	f107 001c 	add.w	r0, r7, #28
 800e50a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e50e:	2300      	movs	r3, #0
 800e510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e512:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e514:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e516:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e51a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e51e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e522:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e526:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	4b07      	ldr	r3, [pc, #28]	; (800e550 <SDMMC_Init+0x54>)
 800e534:	4013      	ands	r3, r2
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	431a      	orrs	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3714      	adds	r7, #20
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	b004      	add	sp, #16
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	ffff8100 	.word	0xffff8100

0800e554 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e562:	4618      	mov	r0, r3
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr

0800e56e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e56e:	b480      	push	{r7}
 800e570:	b083      	sub	sp, #12
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2203      	movs	r2, #3
 800e57a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	370c      	adds	r7, #12
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e58a:	b480      	push	{r7}
 800e58c:	b083      	sub	sp, #12
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f003 0303 	and.w	r3, r3, #3
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
	...

0800e5a8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e5c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e5cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e5d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68da      	ldr	r2, [r3, #12]
 800e5de:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <SDMMC_SendCommand+0x50>)
 800e5e0:	4013      	ands	r3, r2
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	431a      	orrs	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3714      	adds	r7, #20
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	fffff000 	.word	0xfffff000

0800e5fc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	691b      	ldr	r3, [r3, #16]
 800e608:	b2db      	uxtb	r3, r3
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e616:	b480      	push	{r7}
 800e618:	b085      	sub	sp, #20
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
 800e61e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3314      	adds	r3, #20
 800e624:	461a      	mov	r2, r3
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	4413      	add	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
}  
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e646:	2300      	movs	r3, #0
 800e648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	685a      	ldr	r2, [r3, #4]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e662:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e668:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e66e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	431a      	orrs	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e686:	2300      	movs	r3, #0

}
 800e688:	4618      	mov	r0, r3
 800e68a:	3714      	adds	r7, #20
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e6a2:	2310      	movs	r3, #16
 800e6a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6a6:	2340      	movs	r3, #64	; 0x40
 800e6a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6b4:	f107 0308 	add.w	r3, r7, #8
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f7ff ff74 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6c4:	2110      	movs	r1, #16
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 fa1a 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ce:	69fb      	ldr	r3, [r7, #28]
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3720      	adds	r7, #32
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e6e6:	2311      	movs	r3, #17
 800e6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6ea:	2340      	movs	r3, #64	; 0x40
 800e6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6f8:	f107 0308 	add.w	r3, r7, #8
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff ff52 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e704:	f241 3288 	movw	r2, #5000	; 0x1388
 800e708:	2111      	movs	r1, #17
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f9f8 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e712:	69fb      	ldr	r3, [r7, #28]
}
 800e714:	4618      	mov	r0, r3
 800e716:	3720      	adds	r7, #32
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b088      	sub	sp, #32
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e72a:	2312      	movs	r3, #18
 800e72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e72e:	2340      	movs	r3, #64	; 0x40
 800e730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e732:	2300      	movs	r3, #0
 800e734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e73c:	f107 0308 	add.w	r3, r7, #8
 800e740:	4619      	mov	r1, r3
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f7ff ff30 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e748:	f241 3288 	movw	r2, #5000	; 0x1388
 800e74c:	2112      	movs	r1, #18
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 f9d6 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e756:	69fb      	ldr	r3, [r7, #28]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3720      	adds	r7, #32
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e76e:	2318      	movs	r3, #24
 800e770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e772:	2340      	movs	r3, #64	; 0x40
 800e774:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e776:	2300      	movs	r3, #0
 800e778:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e77a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e77e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e780:	f107 0308 	add.w	r3, r7, #8
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7ff ff0e 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e790:	2118      	movs	r1, #24
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f9b4 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e798:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e79a:	69fb      	ldr	r3, [r7, #28]
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3720      	adds	r7, #32
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e7b2:	2319      	movs	r3, #25
 800e7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7b6:	2340      	movs	r3, #64	; 0x40
 800e7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e7c4:	f107 0308 	add.w	r3, r7, #8
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7ff feec 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7d4:	2119      	movs	r1, #25
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f992 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e7dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7de:	69fb      	ldr	r3, [r7, #28]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3720      	adds	r7, #32
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b088      	sub	sp, #32
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e7f4:	230c      	movs	r3, #12
 800e7f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e7f8:	2340      	movs	r3, #64	; 0x40
 800e7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e806:	f107 0308 	add.w	r3, r7, #8
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7ff fecb 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e812:	4a05      	ldr	r2, [pc, #20]	; (800e828 <SDMMC_CmdStopTransfer+0x40>)
 800e814:	210c      	movs	r1, #12
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f972 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e81c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e81e:	69fb      	ldr	r3, [r7, #28]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3720      	adds	r7, #32
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	05f5e100 	.word	0x05f5e100

0800e82c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b08a      	sub	sp, #40	; 0x28
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e83c:	2307      	movs	r3, #7
 800e83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e840:	2340      	movs	r3, #64	; 0x40
 800e842:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e844:	2300      	movs	r3, #0
 800e846:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e84e:	f107 0310 	add.w	r3, r7, #16
 800e852:	4619      	mov	r1, r3
 800e854:	68f8      	ldr	r0, [r7, #12]
 800e856:	f7ff fea7 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e85a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85e:	2107      	movs	r1, #7
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f94d 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e866:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3728      	adds	r7, #40	; 0x28
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e87a:	2300      	movs	r3, #0
 800e87c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e87e:	2300      	movs	r3, #0
 800e880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e882:	2300      	movs	r3, #0
 800e884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e886:	2300      	movs	r3, #0
 800e888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e88e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e890:	f107 0308 	add.w	r3, r7, #8
 800e894:	4619      	mov	r1, r3
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff fe86 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 fb67 	bl	800ef70 <SDMMC_GetCmdError>
 800e8a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8a4:	69fb      	ldr	r3, [r7, #28]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3720      	adds	r7, #32
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b088      	sub	sp, #32
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e8b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e8ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e8bc:	2308      	movs	r3, #8
 800e8be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8c0:	2340      	movs	r3, #64	; 0x40
 800e8c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e8c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e8ce:	f107 0308 	add.w	r3, r7, #8
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff fe67 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f000 fafa 	bl	800eed4 <SDMMC_GetCmdResp7>
 800e8e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8e2:	69fb      	ldr	r3, [r7, #28]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3720      	adds	r7, #32
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e8fa:	2337      	movs	r3, #55	; 0x37
 800e8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e8fe:	2340      	movs	r3, #64	; 0x40
 800e900:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e902:	2300      	movs	r3, #0
 800e904:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e90a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e90c:	f107 0308 	add.w	r3, r7, #8
 800e910:	4619      	mov	r1, r3
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f7ff fe48 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e918:	f241 3288 	movw	r2, #5000	; 0x1388
 800e91c:	2137      	movs	r1, #55	; 0x37
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f8ee 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e926:	69fb      	ldr	r3, [r7, #28]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3720      	adds	r7, #32
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e93a:	683a      	ldr	r2, [r7, #0]
 800e93c:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <SDMMC_CmdAppOperCommand+0x44>)
 800e93e:	4313      	orrs	r3, r2
 800e940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e942:	2329      	movs	r3, #41	; 0x29
 800e944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e946:	2340      	movs	r3, #64	; 0x40
 800e948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e94a:	2300      	movs	r3, #0
 800e94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e954:	f107 0308 	add.w	r3, r7, #8
 800e958:	4619      	mov	r1, r3
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f7ff fe24 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 fa03 	bl	800ed6c <SDMMC_GetCmdResp3>
 800e966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e968:	69fb      	ldr	r3, [r7, #28]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3720      	adds	r7, #32
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	80100000 	.word	0x80100000

0800e978 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b088      	sub	sp, #32
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e986:	2306      	movs	r3, #6
 800e988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e98a:	2340      	movs	r3, #64	; 0x40
 800e98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e996:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e998:	f107 0308 	add.w	r3, r7, #8
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7ff fe02 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800e9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9a8:	2106      	movs	r1, #6
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f8a8 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9b2:	69fb      	ldr	r3, [r7, #28]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3720      	adds	r7, #32
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b088      	sub	sp, #32
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e9c8:	2333      	movs	r3, #51	; 0x33
 800e9ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e9cc:	2340      	movs	r3, #64	; 0x40
 800e9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e9da:	f107 0308 	add.w	r3, r7, #8
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7ff fde1 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800e9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9ea:	2133      	movs	r1, #51	; 0x33
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f000 f887 	bl	800eb00 <SDMMC_GetCmdResp1>
 800e9f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3720      	adds	r7, #32
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b088      	sub	sp, #32
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ea0a:	2302      	movs	r3, #2
 800ea0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea0e:	23c0      	movs	r3, #192	; 0xc0
 800ea10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea12:	2300      	movs	r3, #0
 800ea14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea1c:	f107 0308 	add.w	r3, r7, #8
 800ea20:	4619      	mov	r1, r3
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff fdc0 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 f957 	bl	800ecdc <SDMMC_GetCmdResp2>
 800ea2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea30:	69fb      	ldr	r3, [r7, #28]
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3720      	adds	r7, #32
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b088      	sub	sp, #32
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
 800ea42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ea48:	2309      	movs	r3, #9
 800ea4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ea4c:	23c0      	movs	r3, #192	; 0xc0
 800ea4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea50:	2300      	movs	r3, #0
 800ea52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea5a:	f107 0308 	add.w	r3, r7, #8
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7ff fda1 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 f938 	bl	800ecdc <SDMMC_GetCmdResp2>
 800ea6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea6e:	69fb      	ldr	r3, [r7, #28]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3720      	adds	r7, #32
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ea86:	2303      	movs	r3, #3
 800ea88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea8a:	2340      	movs	r3, #64	; 0x40
 800ea8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea98:	f107 0308 	add.w	r3, r7, #8
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff fd82 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eaa4:	683a      	ldr	r2, [r7, #0]
 800eaa6:	2103      	movs	r1, #3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f000 f99d 	bl	800ede8 <SDMMC_GetCmdResp6>
 800eaae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eab0:	69fb      	ldr	r3, [r7, #28]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3720      	adds	r7, #32
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b088      	sub	sp, #32
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eac8:	230d      	movs	r3, #13
 800eaca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eacc:	2340      	movs	r3, #64	; 0x40
 800eace:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ead0:	2300      	movs	r3, #0
 800ead2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ead4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ead8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eada:	f107 0308 	add.w	r3, r7, #8
 800eade:	4619      	mov	r1, r3
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7ff fd61 	bl	800e5a8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800eae6:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaea:	210d      	movs	r1, #13
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 f807 	bl	800eb00 <SDMMC_GetCmdResp1>
 800eaf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3720      	adds	r7, #32
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
	...

0800eb00 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b088      	sub	sp, #32
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	607a      	str	r2, [r7, #4]
 800eb0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800eb0e:	4b70      	ldr	r3, [pc, #448]	; (800ecd0 <SDMMC_GetCmdResp1+0x1d0>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	4a70      	ldr	r2, [pc, #448]	; (800ecd4 <SDMMC_GetCmdResp1+0x1d4>)
 800eb14:	fba2 2303 	umull	r2, r3, r2, r3
 800eb18:	0a5a      	lsrs	r2, r3, #9
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	fb02 f303 	mul.w	r3, r2, r3
 800eb20:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	1e5a      	subs	r2, r3, #1
 800eb26:	61fa      	str	r2, [r7, #28]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d102      	bne.n	800eb32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb30:	e0c9      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d0ef      	beq.n	800eb22 <SDMMC_GetCmdResp1+0x22>
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1ea      	bne.n	800eb22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb50:	f003 0304 	and.w	r3, r3, #4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2204      	movs	r2, #4
 800eb5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb5e:	2304      	movs	r3, #4
 800eb60:	e0b1      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d004      	beq.n	800eb78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2201      	movs	r2, #1
 800eb72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb74:	2301      	movs	r3, #1
 800eb76:	e0a6      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	22c5      	movs	r2, #197	; 0xc5
 800eb7c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f7ff fd3c 	bl	800e5fc <SDMMC_GetCommandResponse>
 800eb84:	4603      	mov	r3, r0
 800eb86:	461a      	mov	r2, r3
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d001      	beq.n	800eb92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e099      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eb92:	2100      	movs	r1, #0
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f7ff fd3e 	bl	800e616 <SDMMC_GetResponse>
 800eb9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	4b4e      	ldr	r3, [pc, #312]	; (800ecd8 <SDMMC_GetCmdResp1+0x1d8>)
 800eba0:	4013      	ands	r3, r2
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	e08d      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	da02      	bge.n	800ebb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ebb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ebb4:	e087      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ebc0:	2340      	movs	r3, #64	; 0x40
 800ebc2:	e080      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ebce:	2380      	movs	r3, #128	; 0x80
 800ebd0:	e079      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ebdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebe0:	e071      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ebec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebf0:	e069      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d002      	beq.n	800ec02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ebfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec00:	e061      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d002      	beq.n	800ec12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec10:	e059      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec20:	e051      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec30:	e049      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d002      	beq.n	800ec42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ec3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ec40:	e041      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ec4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec50:	e039      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d002      	beq.n	800ec62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ec5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ec60:	e031      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ec6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ec70:	e029      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d002      	beq.n	800ec82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ec7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ec80:	e021      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ec8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ec90:	e019      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ec9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eca0:	e011      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ecac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ecb0:	e009      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f003 0308 	and.w	r3, r3, #8
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d002      	beq.n	800ecc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ecbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ecc0:	e001      	b.n	800ecc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	20000000 	.word	0x20000000
 800ecd4:	10624dd3 	.word	0x10624dd3
 800ecd8:	fdffe008 	.word	0xfdffe008

0800ecdc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ece4:	4b1f      	ldr	r3, [pc, #124]	; (800ed64 <SDMMC_GetCmdResp2+0x88>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a1f      	ldr	r2, [pc, #124]	; (800ed68 <SDMMC_GetCmdResp2+0x8c>)
 800ecea:	fba2 2303 	umull	r2, r3, r2, r3
 800ecee:	0a5b      	lsrs	r3, r3, #9
 800ecf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ecf4:	fb02 f303 	mul.w	r3, r2, r3
 800ecf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	1e5a      	subs	r2, r3, #1
 800ecfe:	60fa      	str	r2, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d102      	bne.n	800ed0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed08:	e026      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0ef      	beq.n	800ecfa <SDMMC_GetCmdResp2+0x1e>
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1ea      	bne.n	800ecfa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed28:	f003 0304 	and.w	r3, r3, #4
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d004      	beq.n	800ed3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2204      	movs	r2, #4
 800ed34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ed36:	2304      	movs	r3, #4
 800ed38:	e00e      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed3e:	f003 0301 	and.w	r3, r3, #1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d004      	beq.n	800ed50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	e003      	b.n	800ed58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	22c5      	movs	r2, #197	; 0xc5
 800ed54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr
 800ed64:	20000000 	.word	0x20000000
 800ed68:	10624dd3 	.word	0x10624dd3

0800ed6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b085      	sub	sp, #20
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ed74:	4b1a      	ldr	r3, [pc, #104]	; (800ede0 <SDMMC_GetCmdResp3+0x74>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a1a      	ldr	r2, [pc, #104]	; (800ede4 <SDMMC_GetCmdResp3+0x78>)
 800ed7a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed7e:	0a5b      	lsrs	r3, r3, #9
 800ed80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed84:	fb02 f303 	mul.w	r3, r2, r3
 800ed88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	1e5a      	subs	r2, r3, #1
 800ed8e:	60fa      	str	r2, [r7, #12]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d102      	bne.n	800ed9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ed94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed98:	e01b      	b.n	800edd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0ef      	beq.n	800ed8a <SDMMC_GetCmdResp3+0x1e>
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1ea      	bne.n	800ed8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edb8:	f003 0304 	and.w	r3, r3, #4
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d004      	beq.n	800edca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2204      	movs	r2, #4
 800edc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800edc6:	2304      	movs	r3, #4
 800edc8:	e003      	b.n	800edd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	22c5      	movs	r2, #197	; 0xc5
 800edce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3714      	adds	r7, #20
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	20000000 	.word	0x20000000
 800ede4:	10624dd3 	.word	0x10624dd3

0800ede8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b088      	sub	sp, #32
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	460b      	mov	r3, r1
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800edf6:	4b35      	ldr	r3, [pc, #212]	; (800eecc <SDMMC_GetCmdResp6+0xe4>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a35      	ldr	r2, [pc, #212]	; (800eed0 <SDMMC_GetCmdResp6+0xe8>)
 800edfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ee00:	0a5b      	lsrs	r3, r3, #9
 800ee02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee06:	fb02 f303 	mul.w	r3, r2, r3
 800ee0a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	1e5a      	subs	r2, r3, #1
 800ee10:	61fa      	str	r2, [r7, #28]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d102      	bne.n	800ee1c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee1a:	e052      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee20:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d0ef      	beq.n	800ee0c <SDMMC_GetCmdResp6+0x24>
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d1ea      	bne.n	800ee0c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee3a:	f003 0304 	and.w	r3, r3, #4
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d004      	beq.n	800ee4c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2204      	movs	r2, #4
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee48:	2304      	movs	r3, #4
 800ee4a:	e03a      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee50:	f003 0301 	and.w	r3, r3, #1
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e02f      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f7ff fbca 	bl	800e5fc <SDMMC_GetCommandResponse>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	7afb      	ldrb	r3, [r7, #11]
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d001      	beq.n	800ee76 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee72:	2301      	movs	r3, #1
 800ee74:	e025      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	22c5      	movs	r2, #197	; 0xc5
 800ee7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7ff fbc9 	bl	800e616 <SDMMC_GetResponse>
 800ee84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d106      	bne.n	800ee9e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	0c1b      	lsrs	r3, r3, #16
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e011      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eeac:	e009      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eeb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eebc:	e001      	b.n	800eec2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3720      	adds	r7, #32
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20000000 	.word	0x20000000
 800eed0:	10624dd3 	.word	0x10624dd3

0800eed4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eedc:	4b22      	ldr	r3, [pc, #136]	; (800ef68 <SDMMC_GetCmdResp7+0x94>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	4a22      	ldr	r2, [pc, #136]	; (800ef6c <SDMMC_GetCmdResp7+0x98>)
 800eee2:	fba2 2303 	umull	r2, r3, r2, r3
 800eee6:	0a5b      	lsrs	r3, r3, #9
 800eee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeec:	fb02 f303 	mul.w	r3, r2, r3
 800eef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	1e5a      	subs	r2, r3, #1
 800eef6:	60fa      	str	r2, [r7, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d102      	bne.n	800ef02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eefc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef00:	e02c      	b.n	800ef5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0ef      	beq.n	800eef2 <SDMMC_GetCmdResp7+0x1e>
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1ea      	bne.n	800eef2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2204      	movs	r2, #4
 800ef2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef2e:	2304      	movs	r3, #4
 800ef30:	e014      	b.n	800ef5c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d004      	beq.n	800ef48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef44:	2301      	movs	r3, #1
 800ef46:	e009      	b.n	800ef5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d002      	beq.n	800ef5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2240      	movs	r2, #64	; 0x40
 800ef58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ef5a:	2300      	movs	r3, #0
  
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20000000 	.word	0x20000000
 800ef6c:	10624dd3 	.word	0x10624dd3

0800ef70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b085      	sub	sp, #20
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <SDMMC_GetCmdError+0x50>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a11      	ldr	r2, [pc, #68]	; (800efc4 <SDMMC_GetCmdError+0x54>)
 800ef7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ef82:	0a5b      	lsrs	r3, r3, #9
 800ef84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef88:	fb02 f303 	mul.w	r3, r2, r3
 800ef8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	1e5a      	subs	r2, r3, #1
 800ef92:	60fa      	str	r2, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d102      	bne.n	800ef9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef9c:	e009      	b.n	800efb2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0f1      	beq.n	800ef8e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	22c5      	movs	r2, #197	; 0xc5
 800efae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3714      	adds	r7, #20
 800efb6:	46bd      	mov	sp, r7
 800efb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop
 800efc0:	20000000 	.word	0x20000000
 800efc4:	10624dd3 	.word	0x10624dd3

0800efc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800efc8:	b084      	sub	sp, #16
 800efca:	b580      	push	{r7, lr}
 800efcc:	b084      	sub	sp, #16
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
 800efd2:	f107 001c 	add.w	r0, r7, #28
 800efd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800efda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d120      	bne.n	800f022 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	68da      	ldr	r2, [r3, #12]
 800eff0:	4b20      	ldr	r3, [pc, #128]	; (800f074 <USB_CoreInit+0xac>)
 800eff2:	4013      	ands	r3, r2
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f006:	2b01      	cmp	r3, #1
 800f008:	d105      	bne.n	800f016 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 f9b4 	bl	800f384 <USB_CoreReset>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73fb      	strb	r3, [r7, #15]
 800f020:	e010      	b.n	800f044 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 f9a8 	bl	800f384 <USB_CoreReset>
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f03c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f046:	2b01      	cmp	r3, #1
 800f048:	d10b      	bne.n	800f062 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	f043 0206 	orr.w	r2, r3, #6
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	f043 0220 	orr.w	r2, r3, #32
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f062:	7bfb      	ldrb	r3, [r7, #15]
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f06e:	b004      	add	sp, #16
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	ffbdffbf 	.word	0xffbdffbf

0800f078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f043 0201 	orr.w	r2, r3, #1
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr

0800f09a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f09a:	b480      	push	{r7}
 800f09c:	b083      	sub	sp, #12
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	f023 0201 	bic.w	r2, r3, #1
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f0d8:	78fb      	ldrb	r3, [r7, #3]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d115      	bne.n	800f10a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f0ea:	2001      	movs	r0, #1
 800f0ec:	f7f4 f82a 	bl	8003144 <HAL_Delay>
      ms++;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	3301      	adds	r3, #1
 800f0f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f935 	bl	800f366 <USB_GetMode>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d01e      	beq.n	800f140 <USB_SetCurrentMode+0x84>
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b31      	cmp	r3, #49	; 0x31
 800f106:	d9f0      	bls.n	800f0ea <USB_SetCurrentMode+0x2e>
 800f108:	e01a      	b.n	800f140 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f10a:	78fb      	ldrb	r3, [r7, #3]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d115      	bne.n	800f13c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f11c:	2001      	movs	r0, #1
 800f11e:	f7f4 f811 	bl	8003144 <HAL_Delay>
      ms++;
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3301      	adds	r3, #1
 800f126:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 f91c 	bl	800f366 <USB_GetMode>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d005      	beq.n	800f140 <USB_SetCurrentMode+0x84>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2b31      	cmp	r3, #49	; 0x31
 800f138:	d9f0      	bls.n	800f11c <USB_SetCurrentMode+0x60>
 800f13a:	e001      	b.n	800f140 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f13c:	2301      	movs	r3, #1
 800f13e:	e005      	b.n	800f14c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2b32      	cmp	r3, #50	; 0x32
 800f144:	d101      	bne.n	800f14a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f146:	2301      	movs	r3, #1
 800f148:	e000      	b.n	800f14c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f15e:	2300      	movs	r3, #0
 800f160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	3301      	adds	r3, #1
 800f166:	60fb      	str	r3, [r7, #12]
 800f168:	4a12      	ldr	r2, [pc, #72]	; (800f1b4 <USB_FlushTxFifo+0x60>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d901      	bls.n	800f172 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f16e:	2303      	movs	r3, #3
 800f170:	e01a      	b.n	800f1a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	691b      	ldr	r3, [r3, #16]
 800f176:	2b00      	cmp	r3, #0
 800f178:	daf3      	bge.n	800f162 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f17a:	2300      	movs	r3, #0
 800f17c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	019b      	lsls	r3, r3, #6
 800f182:	f043 0220 	orr.w	r2, r3, #32
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3301      	adds	r3, #1
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	4a08      	ldr	r2, [pc, #32]	; (800f1b4 <USB_FlushTxFifo+0x60>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d901      	bls.n	800f19a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800f196:	2303      	movs	r3, #3
 800f198:	e006      	b.n	800f1a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	691b      	ldr	r3, [r3, #16]
 800f19e:	f003 0320 	and.w	r3, r3, #32
 800f1a2:	2b20      	cmp	r3, #32
 800f1a4:	d0f1      	beq.n	800f18a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3714      	adds	r7, #20
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr
 800f1b4:	00030d40 	.word	0x00030d40

0800f1b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	60fb      	str	r3, [r7, #12]
 800f1ca:	4a11      	ldr	r2, [pc, #68]	; (800f210 <USB_FlushRxFifo+0x58>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d901      	bls.n	800f1d4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e017      	b.n	800f204 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	daf3      	bge.n	800f1c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2210      	movs	r2, #16
 800f1e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	4a08      	ldr	r2, [pc, #32]	; (800f210 <USB_FlushRxFifo+0x58>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d901      	bls.n	800f1f6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800f1f2:	2303      	movs	r3, #3
 800f1f4:	e006      	b.n	800f204 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	f003 0310 	and.w	r3, r3, #16
 800f1fe:	2b10      	cmp	r3, #16
 800f200:	d0f1      	beq.n	800f1e6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3714      	adds	r7, #20
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr
 800f210:	00030d40 	.word	0x00030d40

0800f214 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f214:	b480      	push	{r7}
 800f216:	b089      	sub	sp, #36	; 0x24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	4611      	mov	r1, r2
 800f220:	461a      	mov	r2, r3
 800f222:	460b      	mov	r3, r1
 800f224:	71fb      	strb	r3, [r7, #7]
 800f226:	4613      	mov	r3, r2
 800f228:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f236:	2b00      	cmp	r3, #0
 800f238:	d123      	bne.n	800f282 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f23a:	88bb      	ldrh	r3, [r7, #4]
 800f23c:	3303      	adds	r3, #3
 800f23e:	089b      	lsrs	r3, r3, #2
 800f240:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f242:	2300      	movs	r3, #0
 800f244:	61bb      	str	r3, [r7, #24]
 800f246:	e018      	b.n	800f27a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	031a      	lsls	r2, r3, #12
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	4413      	add	r3, r2
 800f250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f254:	461a      	mov	r2, r3
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	3301      	adds	r3, #1
 800f260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	3301      	adds	r3, #1
 800f266:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	3301      	adds	r3, #1
 800f26c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	3301      	adds	r3, #1
 800f272:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	3301      	adds	r3, #1
 800f278:	61bb      	str	r3, [r7, #24]
 800f27a:	69ba      	ldr	r2, [r7, #24]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d3e2      	bcc.n	800f248 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3724      	adds	r7, #36	; 0x24
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f290:	b480      	push	{r7}
 800f292:	b08b      	sub	sp, #44	; 0x2c
 800f294:	af00      	add	r7, sp, #0
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	4613      	mov	r3, r2
 800f29c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f2a6:	88fb      	ldrh	r3, [r7, #6]
 800f2a8:	089b      	lsrs	r3, r3, #2
 800f2aa:	b29b      	uxth	r3, r3
 800f2ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f2ae:	88fb      	ldrh	r3, [r7, #6]
 800f2b0:	f003 0303 	and.w	r3, r3, #3
 800f2b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	623b      	str	r3, [r7, #32]
 800f2ba:	e014      	b.n	800f2e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	601a      	str	r2, [r3, #0]
    pDest++;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800f2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2dc:	3301      	adds	r3, #1
 800f2de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	623b      	str	r3, [r7, #32]
 800f2e6:	6a3a      	ldr	r2, [r7, #32]
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d3e6      	bcc.n	800f2bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f2ee:	8bfb      	ldrh	r3, [r7, #30]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d01e      	beq.n	800f332 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f2fe:	461a      	mov	r2, r3
 800f300:	f107 0310 	add.w	r3, r7, #16
 800f304:	6812      	ldr	r2, [r2, #0]
 800f306:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	00db      	lsls	r3, r3, #3
 800f310:	fa22 f303 	lsr.w	r3, r2, r3
 800f314:	b2da      	uxtb	r2, r3
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	701a      	strb	r2, [r3, #0]
      i++;
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	3301      	adds	r3, #1
 800f31e:	623b      	str	r3, [r7, #32]
      pDest++;
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	3301      	adds	r3, #1
 800f324:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800f326:	8bfb      	ldrh	r3, [r7, #30]
 800f328:	3b01      	subs	r3, #1
 800f32a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f32c:	8bfb      	ldrh	r3, [r7, #30]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1ea      	bne.n	800f308 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f334:	4618      	mov	r0, r3
 800f336:	372c      	adds	r7, #44	; 0x2c
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	695b      	ldr	r3, [r3, #20]
 800f34c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	699b      	ldr	r3, [r3, #24]
 800f352:	68fa      	ldr	r2, [r7, #12]
 800f354:	4013      	ands	r3, r2
 800f356:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f358:	68fb      	ldr	r3, [r7, #12]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f366:	b480      	push	{r7}
 800f368:	b083      	sub	sp, #12
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	f003 0301 	and.w	r3, r3, #1
}
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f384:	b480      	push	{r7}
 800f386:	b085      	sub	sp, #20
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	3301      	adds	r3, #1
 800f394:	60fb      	str	r3, [r7, #12]
 800f396:	4a13      	ldr	r2, [pc, #76]	; (800f3e4 <USB_CoreReset+0x60>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d901      	bls.n	800f3a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f39c:	2303      	movs	r3, #3
 800f39e:	e01a      	b.n	800f3d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	daf3      	bge.n	800f390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	f043 0201 	orr.w	r2, r3, #1
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	3301      	adds	r3, #1
 800f3bc:	60fb      	str	r3, [r7, #12]
 800f3be:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <USB_CoreReset+0x60>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d901      	bls.n	800f3c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	e006      	b.n	800f3d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d0f1      	beq.n	800f3b8 <USB_CoreReset+0x34>

  return HAL_OK;
 800f3d4:	2300      	movs	r3, #0
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop
 800f3e4:	00030d40 	.word	0x00030d40

0800f3e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b086      	sub	sp, #24
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f3f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f408:	461a      	mov	r2, r3
 800f40a:	2300      	movs	r3, #0
 800f40c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f412:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f422:	2b00      	cmp	r3, #0
 800f424:	d018      	beq.n	800f458 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d10a      	bne.n	800f442 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f43a:	f043 0304 	orr.w	r3, r3, #4
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	e014      	b.n	800f46c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68fa      	ldr	r2, [r7, #12]
 800f44c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f450:	f023 0304 	bic.w	r3, r3, #4
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	e009      	b.n	800f46c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f466:	f023 0304 	bic.w	r3, r3, #4
 800f46a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f46c:	2110      	movs	r1, #16
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff fe70 	bl	800f154 <USB_FlushTxFifo>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fe9a 	bl	800f1b8 <USB_FlushRxFifo>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f48e:	2300      	movs	r3, #0
 800f490:	613b      	str	r3, [r7, #16]
 800f492:	e015      	b.n	800f4c0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	015a      	lsls	r2, r3, #5
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	4413      	add	r3, r2
 800f49c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	015a      	lsls	r2, r3, #5
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	613b      	str	r3, [r7, #16]
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d3e5      	bcc.n	800f494 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00b      	beq.n	800f4fa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f4e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4a13      	ldr	r2, [pc, #76]	; (800f53c <USB_HostInit+0x154>)
 800f4ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a13      	ldr	r2, [pc, #76]	; (800f540 <USB_HostInit+0x158>)
 800f4f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f4f8:	e009      	b.n	800f50e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2280      	movs	r2, #128	; 0x80
 800f4fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a10      	ldr	r2, [pc, #64]	; (800f544 <USB_HostInit+0x15c>)
 800f504:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4a0f      	ldr	r2, [pc, #60]	; (800f548 <USB_HostInit+0x160>)
 800f50a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	f043 0210 	orr.w	r2, r3, #16
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	699a      	ldr	r2, [r3, #24]
 800f524:	4b09      	ldr	r3, [pc, #36]	; (800f54c <USB_HostInit+0x164>)
 800f526:	4313      	orrs	r3, r2
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3718      	adds	r7, #24
 800f532:	46bd      	mov	sp, r7
 800f534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f538:	b004      	add	sp, #16
 800f53a:	4770      	bx	lr
 800f53c:	01000200 	.word	0x01000200
 800f540:	00e00300 	.word	0x00e00300
 800f544:	00600080 	.word	0x00600080
 800f548:	004000e0 	.word	0x004000e0
 800f54c:	a3200008 	.word	0xa3200008

0800f550 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	460b      	mov	r3, r1
 800f55a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68fa      	ldr	r2, [r7, #12]
 800f56a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f56e:	f023 0303 	bic.w	r3, r3, #3
 800f572:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	78fb      	ldrb	r3, [r7, #3]
 800f57e:	f003 0303 	and.w	r3, r3, #3
 800f582:	68f9      	ldr	r1, [r7, #12]
 800f584:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f588:	4313      	orrs	r3, r2
 800f58a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f58c:	78fb      	ldrb	r3, [r7, #3]
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d107      	bne.n	800f5a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f598:	461a      	mov	r2, r3
 800f59a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800f59e:	6053      	str	r3, [r2, #4]
 800f5a0:	e009      	b.n	800f5b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800f5a2:	78fb      	ldrb	r3, [r7, #3]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d106      	bne.n	800f5b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f241 7370 	movw	r3, #6000	; 0x1770
 800f5b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3714      	adds	r7, #20
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f5e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f5ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f5f4:	2064      	movs	r0, #100	; 0x64
 800f5f6:	f7f3 fda5 	bl	8003144 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f606:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f608:	200a      	movs	r0, #10
 800f60a:	f7f3 fd9b 	bl	8003144 <HAL_Delay>

  return HAL_OK;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	3710      	adds	r7, #16
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	460b      	mov	r3, r1
 800f622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f628:	2300      	movs	r3, #0
 800f62a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800f63c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f644:	2b00      	cmp	r3, #0
 800f646:	d109      	bne.n	800f65c <USB_DriveVbus+0x44>
 800f648:	78fb      	ldrb	r3, [r7, #3]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d106      	bne.n	800f65c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f65a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f666:	d109      	bne.n	800f67c <USB_DriveVbus+0x64>
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d106      	bne.n	800f67c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800f676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f67a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f67c:	2300      	movs	r3, #0
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3714      	adds	r7, #20
 800f682:	46bd      	mov	sp, r7
 800f684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f688:	4770      	bx	lr

0800f68a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f68a:	b480      	push	{r7}
 800f68c:	b085      	sub	sp, #20
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f696:	2300      	movs	r3, #0
 800f698:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	0c5b      	lsrs	r3, r3, #17
 800f6a8:	f003 0303 	and.w	r3, r3, #3
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3714      	adds	r7, #20
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f6ca:	689b      	ldr	r3, [r3, #8]
 800f6cc:	b29b      	uxth	r3, r3
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3714      	adds	r7, #20
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr
	...

0800f6dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b088      	sub	sp, #32
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	4608      	mov	r0, r1
 800f6e6:	4611      	mov	r1, r2
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	70fb      	strb	r3, [r7, #3]
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	70bb      	strb	r3, [r7, #2]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800f6fe:	78fb      	ldrb	r3, [r7, #3]
 800f700:	015a      	lsls	r2, r3, #5
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	4413      	add	r3, r2
 800f706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f70a:	461a      	mov	r2, r3
 800f70c:	f04f 33ff 	mov.w	r3, #4294967295
 800f710:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f716:	2b03      	cmp	r3, #3
 800f718:	d87e      	bhi.n	800f818 <USB_HC_Init+0x13c>
 800f71a:	a201      	add	r2, pc, #4	; (adr r2, 800f720 <USB_HC_Init+0x44>)
 800f71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f720:	0800f731 	.word	0x0800f731
 800f724:	0800f7db 	.word	0x0800f7db
 800f728:	0800f731 	.word	0x0800f731
 800f72c:	0800f79d 	.word	0x0800f79d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	015a      	lsls	r2, r3, #5
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	4413      	add	r3, r2
 800f738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f73c:	461a      	mov	r2, r3
 800f73e:	f240 439d 	movw	r3, #1181	; 0x49d
 800f742:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f744:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	da10      	bge.n	800f76e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f74c:	78fb      	ldrb	r3, [r7, #3]
 800f74e:	015a      	lsls	r2, r3, #5
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	4413      	add	r3, r2
 800f754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	78fa      	ldrb	r2, [r7, #3]
 800f75c:	0151      	lsls	r1, r2, #5
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	440a      	add	r2, r1
 800f762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f76a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800f76c:	e057      	b.n	800f81e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f776:	2b00      	cmp	r3, #0
 800f778:	d051      	beq.n	800f81e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	015a      	lsls	r2, r3, #5
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	4413      	add	r3, r2
 800f782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	78fa      	ldrb	r2, [r7, #3]
 800f78a:	0151      	lsls	r1, r2, #5
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	440a      	add	r2, r1
 800f790:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f794:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f798:	60d3      	str	r3, [r2, #12]
      break;
 800f79a:	e040      	b.n	800f81e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f79c:	78fb      	ldrb	r3, [r7, #3]
 800f79e:	015a      	lsls	r2, r3, #5
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	f240 639d 	movw	r3, #1693	; 0x69d
 800f7ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f7b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	da34      	bge.n	800f822 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f7b8:	78fb      	ldrb	r3, [r7, #3]
 800f7ba:	015a      	lsls	r2, r3, #5
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	4413      	add	r3, r2
 800f7c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	78fa      	ldrb	r2, [r7, #3]
 800f7c8:	0151      	lsls	r1, r2, #5
 800f7ca:	693a      	ldr	r2, [r7, #16]
 800f7cc:	440a      	add	r2, r1
 800f7ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f7d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f7d8:	e023      	b.n	800f822 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f7da:	78fb      	ldrb	r3, [r7, #3]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	f240 2325 	movw	r3, #549	; 0x225
 800f7ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f7ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	da17      	bge.n	800f826 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f7f6:	78fb      	ldrb	r3, [r7, #3]
 800f7f8:	015a      	lsls	r2, r3, #5
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	78fa      	ldrb	r2, [r7, #3]
 800f806:	0151      	lsls	r1, r2, #5
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	440a      	add	r2, r1
 800f80c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f810:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800f814:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f816:	e006      	b.n	800f826 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800f818:	2301      	movs	r3, #1
 800f81a:	77fb      	strb	r3, [r7, #31]
      break;
 800f81c:	e004      	b.n	800f828 <USB_HC_Init+0x14c>
      break;
 800f81e:	bf00      	nop
 800f820:	e002      	b.n	800f828 <USB_HC_Init+0x14c>
      break;
 800f822:	bf00      	nop
 800f824:	e000      	b.n	800f828 <USB_HC_Init+0x14c>
      break;
 800f826:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800f828:	78fb      	ldrb	r3, [r7, #3]
 800f82a:	015a      	lsls	r2, r3, #5
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	4413      	add	r3, r2
 800f830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f834:	68db      	ldr	r3, [r3, #12]
 800f836:	78fa      	ldrb	r2, [r7, #3]
 800f838:	0151      	lsls	r1, r2, #5
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	440a      	add	r2, r1
 800f83e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f842:	f043 0302 	orr.w	r3, r3, #2
 800f846:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f84e:	699a      	ldr	r2, [r3, #24]
 800f850:	78fb      	ldrb	r3, [r7, #3]
 800f852:	f003 030f 	and.w	r3, r3, #15
 800f856:	2101      	movs	r1, #1
 800f858:	fa01 f303 	lsl.w	r3, r1, r3
 800f85c:	6939      	ldr	r1, [r7, #16]
 800f85e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f862:	4313      	orrs	r3, r2
 800f864:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	699b      	ldr	r3, [r3, #24]
 800f86a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f876:	2b00      	cmp	r3, #0
 800f878:	da03      	bge.n	800f882 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f87e:	61bb      	str	r3, [r7, #24]
 800f880:	e001      	b.n	800f886 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800f882:	2300      	movs	r3, #0
 800f884:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff feff 	bl	800f68a <USB_GetHostSpeed>
 800f88c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800f88e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f892:	2b02      	cmp	r3, #2
 800f894:	d106      	bne.n	800f8a4 <USB_HC_Init+0x1c8>
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2b02      	cmp	r3, #2
 800f89a:	d003      	beq.n	800f8a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f89c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	e001      	b.n	800f8a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f8a8:	787b      	ldrb	r3, [r7, #1]
 800f8aa:	059b      	lsls	r3, r3, #22
 800f8ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f8b0:	78bb      	ldrb	r3, [r7, #2]
 800f8b2:	02db      	lsls	r3, r3, #11
 800f8b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f8b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f8ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f8be:	049b      	lsls	r3, r3, #18
 800f8c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f8c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f8c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f8c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f8cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f8d2:	78fb      	ldrb	r3, [r7, #3]
 800f8d4:	0159      	lsls	r1, r3, #5
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	440b      	add	r3, r1
 800f8da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f8e4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800f8e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f8ea:	2b03      	cmp	r3, #3
 800f8ec:	d10f      	bne.n	800f90e <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800f8ee:	78fb      	ldrb	r3, [r7, #3]
 800f8f0:	015a      	lsls	r2, r3, #5
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	78fa      	ldrb	r2, [r7, #3]
 800f8fe:	0151      	lsls	r1, r2, #5
 800f900:	693a      	ldr	r2, [r7, #16]
 800f902:	440a      	add	r2, r1
 800f904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f90c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f90e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3720      	adds	r7, #32
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08c      	sub	sp, #48	; 0x30
 800f91c:	af02      	add	r7, sp, #8
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	4613      	mov	r3, r2
 800f924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	785b      	ldrb	r3, [r3, #1]
 800f92e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800f930:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f934:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d02d      	beq.n	800f99e <USB_HC_StartXfer+0x86>
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	791b      	ldrb	r3, [r3, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d129      	bne.n	800f99e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800f94a:	79fb      	ldrb	r3, [r7, #7]
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d117      	bne.n	800f980 <USB_HC_StartXfer+0x68>
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	79db      	ldrb	r3, [r3, #7]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d003      	beq.n	800f960 <USB_HC_StartXfer+0x48>
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	79db      	ldrb	r3, [r3, #7]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d10f      	bne.n	800f980 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	015a      	lsls	r2, r3, #5
 800f964:	6a3b      	ldr	r3, [r7, #32]
 800f966:	4413      	add	r3, r2
 800f968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	0151      	lsls	r1, r2, #5
 800f972:	6a3a      	ldr	r2, [r7, #32]
 800f974:	440a      	add	r2, r1
 800f976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800f97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f97e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800f980:	79fb      	ldrb	r3, [r7, #7]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d10b      	bne.n	800f99e <USB_HC_StartXfer+0x86>
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	795b      	ldrb	r3, [r3, #5]
 800f98a:	2b01      	cmp	r3, #1
 800f98c:	d107      	bne.n	800f99e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	785b      	ldrb	r3, [r3, #1]
 800f992:	4619      	mov	r1, r3
 800f994:	68f8      	ldr	r0, [r7, #12]
 800f996:	f000 fa0d 	bl	800fdb4 <USB_DoPing>
      return HAL_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	e0f8      	b.n	800fb90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	695b      	ldr	r3, [r3, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d018      	beq.n	800f9d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	68ba      	ldr	r2, [r7, #8]
 800f9ac:	8912      	ldrh	r2, [r2, #8]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	68ba      	ldr	r2, [r7, #8]
 800f9b4:	8912      	ldrh	r2, [r2, #8]
 800f9b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800f9bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f9be:	8b7b      	ldrh	r3, [r7, #26]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d90b      	bls.n	800f9dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800f9c4:	8b7b      	ldrh	r3, [r7, #26]
 800f9c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f9c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	8912      	ldrh	r2, [r2, #8]
 800f9ce:	fb02 f203 	mul.w	r2, r2, r3
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	611a      	str	r2, [r3, #16]
 800f9d6:	e001      	b.n	800f9dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	78db      	ldrb	r3, [r3, #3]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d007      	beq.n	800f9f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800f9e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	8912      	ldrh	r2, [r2, #8]
 800f9ea:	fb02 f203 	mul.w	r2, r2, r3
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	611a      	str	r2, [r3, #16]
 800f9f2:	e003      	b.n	800f9fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	695a      	ldr	r2, [r3, #20]
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fa04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fa06:	04d9      	lsls	r1, r3, #19
 800fa08:	4b63      	ldr	r3, [pc, #396]	; (800fb98 <USB_HC_StartXfer+0x280>)
 800fa0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fa0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	7a9b      	ldrb	r3, [r3, #10]
 800fa12:	075b      	lsls	r3, r3, #29
 800fa14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fa18:	69f9      	ldr	r1, [r7, #28]
 800fa1a:	0148      	lsls	r0, r1, #5
 800fa1c:	6a39      	ldr	r1, [r7, #32]
 800fa1e:	4401      	add	r1, r0
 800fa20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fa24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fa26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d009      	beq.n	800fa42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	68d9      	ldr	r1, [r3, #12]
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	015a      	lsls	r2, r3, #5
 800fa36:	6a3b      	ldr	r3, [r7, #32]
 800fa38:	4413      	add	r3, r2
 800fa3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa3e:	460a      	mov	r2, r1
 800fa40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fa42:	6a3b      	ldr	r3, [r7, #32]
 800fa44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f003 0301 	and.w	r3, r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	bf0c      	ite	eq
 800fa52:	2301      	moveq	r3, #1
 800fa54:	2300      	movne	r3, #0
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	015a      	lsls	r2, r3, #5
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	4413      	add	r3, r2
 800fa62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	69fa      	ldr	r2, [r7, #28]
 800fa6a:	0151      	lsls	r1, r2, #5
 800fa6c:	6a3a      	ldr	r2, [r7, #32]
 800fa6e:	440a      	add	r2, r1
 800fa70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fa74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fa78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	015a      	lsls	r2, r3, #5
 800fa7e:	6a3b      	ldr	r3, [r7, #32]
 800fa80:	4413      	add	r3, r2
 800fa82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	7e7b      	ldrb	r3, [r7, #25]
 800fa8a:	075b      	lsls	r3, r3, #29
 800fa8c:	69f9      	ldr	r1, [r7, #28]
 800fa8e:	0148      	lsls	r0, r1, #5
 800fa90:	6a39      	ldr	r1, [r7, #32]
 800fa92:	4401      	add	r1, r0
 800fa94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800fa98:	4313      	orrs	r3, r2
 800fa9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	015a      	lsls	r2, r3, #5
 800faa0:	6a3b      	ldr	r3, [r7, #32]
 800faa2:	4413      	add	r3, r2
 800faa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fab2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	78db      	ldrb	r3, [r3, #3]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d004      	beq.n	800fac6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fac2:	613b      	str	r3, [r7, #16]
 800fac4:	e003      	b.n	800face <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800facc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fad4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	015a      	lsls	r2, r3, #5
 800fada:	6a3b      	ldr	r3, [r7, #32]
 800fadc:	4413      	add	r3, r2
 800fade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fae2:	461a      	mov	r2, r3
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800faee:	2300      	movs	r3, #0
 800faf0:	e04e      	b.n	800fb90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	78db      	ldrb	r3, [r3, #3]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d149      	bne.n	800fb8e <USB_HC_StartXfer+0x276>
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	695b      	ldr	r3, [r3, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d045      	beq.n	800fb8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	79db      	ldrb	r3, [r3, #7]
 800fb06:	2b03      	cmp	r3, #3
 800fb08:	d830      	bhi.n	800fb6c <USB_HC_StartXfer+0x254>
 800fb0a:	a201      	add	r2, pc, #4	; (adr r2, 800fb10 <USB_HC_StartXfer+0x1f8>)
 800fb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb10:	0800fb21 	.word	0x0800fb21
 800fb14:	0800fb45 	.word	0x0800fb45
 800fb18:	0800fb21 	.word	0x0800fb21
 800fb1c:	0800fb45 	.word	0x0800fb45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	695b      	ldr	r3, [r3, #20]
 800fb24:	3303      	adds	r3, #3
 800fb26:	089b      	lsrs	r3, r3, #2
 800fb28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800fb2a:	8afa      	ldrh	r2, [r7, #22]
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d91c      	bls.n	800fb70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	f043 0220 	orr.w	r2, r3, #32
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	619a      	str	r2, [r3, #24]
        }
        break;
 800fb42:	e015      	b.n	800fb70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	695b      	ldr	r3, [r3, #20]
 800fb48:	3303      	adds	r3, #3
 800fb4a:	089b      	lsrs	r3, r3, #2
 800fb4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800fb4e:	8afa      	ldrh	r2, [r7, #22]
 800fb50:	6a3b      	ldr	r3, [r7, #32]
 800fb52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d90a      	bls.n	800fb74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	699b      	ldr	r3, [r3, #24]
 800fb62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	619a      	str	r2, [r3, #24]
        }
        break;
 800fb6a:	e003      	b.n	800fb74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800fb6c:	bf00      	nop
 800fb6e:	e002      	b.n	800fb76 <USB_HC_StartXfer+0x25e>
        break;
 800fb70:	bf00      	nop
 800fb72:	e000      	b.n	800fb76 <USB_HC_StartXfer+0x25e>
        break;
 800fb74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	68d9      	ldr	r1, [r3, #12]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	785a      	ldrb	r2, [r3, #1]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	2000      	movs	r0, #0
 800fb86:	9000      	str	r0, [sp, #0]
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fb43 	bl	800f214 <USB_WritePacket>
  }

  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3728      	adds	r7, #40	; 0x28
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	1ff80000 	.word	0x1ff80000

0800fb9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fbae:	695b      	ldr	r3, [r3, #20]
 800fbb0:	b29b      	uxth	r3, r3
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3714      	adds	r7, #20
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr

0800fbbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fbbe:	b480      	push	{r7}
 800fbc0:	b089      	sub	sp, #36	; 0x24
 800fbc2:	af00      	add	r7, sp, #0
 800fbc4:	6078      	str	r0, [r7, #4]
 800fbc6:	460b      	mov	r3, r1
 800fbc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800fbce:	78fb      	ldrb	r3, [r7, #3]
 800fbd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	015a      	lsls	r2, r3, #5
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	4413      	add	r3, r2
 800fbde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	0c9b      	lsrs	r3, r3, #18
 800fbe6:	f003 0303 	and.w	r3, r3, #3
 800fbea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	0fdb      	lsrs	r3, r3, #31
 800fbfc:	f003 0301 	and.w	r3, r3, #1
 800fc00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f003 0320 	and.w	r3, r3, #32
 800fc0a:	2b20      	cmp	r3, #32
 800fc0c:	d104      	bne.n	800fc18 <USB_HC_Halt+0x5a>
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	e0c6      	b.n	800fda6 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d002      	beq.n	800fc24 <USB_HC_Halt+0x66>
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d162      	bne.n	800fcea <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	015a      	lsls	r2, r3, #5
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	69ba      	ldr	r2, [r7, #24]
 800fc34:	0151      	lsls	r1, r2, #5
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	440a      	add	r2, r1
 800fc3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	f003 0320 	and.w	r3, r3, #32
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f040 80a9 	bne.w	800fda4 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d132      	bne.n	800fcc4 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	015a      	lsls	r2, r3, #5
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	4413      	add	r3, r2
 800fc66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	69ba      	ldr	r2, [r7, #24]
 800fc6e:	0151      	lsls	r1, r2, #5
 800fc70:	69fa      	ldr	r2, [r7, #28]
 800fc72:	440a      	add	r2, r1
 800fc74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	015a      	lsls	r2, r3, #5
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	4413      	add	r3, r2
 800fc86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	0151      	lsls	r1, r2, #5
 800fc90:	69fa      	ldr	r2, [r7, #28]
 800fc92:	440a      	add	r2, r1
 800fc94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fc98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fc9c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	3301      	adds	r3, #1
 800fca2:	60fb      	str	r3, [r7, #12]
 800fca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fca8:	d81d      	bhi.n	800fce6 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	015a      	lsls	r2, r3, #5
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcc0:	d0ed      	beq.n	800fc9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fcc2:	e06f      	b.n	800fda4 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	69ba      	ldr	r2, [r7, #24]
 800fcd4:	0151      	lsls	r1, r2, #5
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	440a      	add	r2, r1
 800fcda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fcde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fce2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fce4:	e05e      	b.n	800fda4 <USB_HC_Halt+0x1e6>
            break;
 800fce6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fce8:	e05c      	b.n	800fda4 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	015a      	lsls	r2, r3, #5
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	69ba      	ldr	r2, [r7, #24]
 800fcfa:	0151      	lsls	r1, r2, #5
 800fcfc:	69fa      	ldr	r2, [r7, #28]
 800fcfe:	440a      	add	r2, r1
 800fd00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd08:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fd10:	691b      	ldr	r3, [r3, #16]
 800fd12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d132      	bne.n	800fd80 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	015a      	lsls	r2, r3, #5
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	4413      	add	r3, r2
 800fd22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	69ba      	ldr	r2, [r7, #24]
 800fd2a:	0151      	lsls	r1, r2, #5
 800fd2c:	69fa      	ldr	r2, [r7, #28]
 800fd2e:	440a      	add	r2, r1
 800fd30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd38:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	015a      	lsls	r2, r3, #5
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	4413      	add	r3, r2
 800fd42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	69ba      	ldr	r2, [r7, #24]
 800fd4a:	0151      	lsls	r1, r2, #5
 800fd4c:	69fa      	ldr	r2, [r7, #28]
 800fd4e:	440a      	add	r2, r1
 800fd50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fd58:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	60fb      	str	r3, [r7, #12]
 800fd60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fd64:	d81d      	bhi.n	800fda2 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	015a      	lsls	r2, r3, #5
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd7c:	d0ed      	beq.n	800fd5a <USB_HC_Halt+0x19c>
 800fd7e:	e011      	b.n	800fda4 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	015a      	lsls	r2, r3, #5
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	4413      	add	r3, r2
 800fd88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	69ba      	ldr	r2, [r7, #24]
 800fd90:	0151      	lsls	r1, r2, #5
 800fd92:	69fa      	ldr	r2, [r7, #28]
 800fd94:	440a      	add	r2, r1
 800fd96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fd9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	e000      	b.n	800fda4 <USB_HC_Halt+0x1e6>
          break;
 800fda2:	bf00      	nop
    }
  }

  return HAL_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3724      	adds	r7, #36	; 0x24
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
	...

0800fdb4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800fdc4:	78fb      	ldrb	r3, [r7, #3]
 800fdc6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	04da      	lsls	r2, r3, #19
 800fdd0:	4b15      	ldr	r3, [pc, #84]	; (800fe28 <USB_DoPing+0x74>)
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	0151      	lsls	r1, r2, #5
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	440a      	add	r2, r1
 800fddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800fde0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fde4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	015a      	lsls	r2, r3, #5
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	4413      	add	r3, r2
 800fdee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fdfc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fe04:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	015a      	lsls	r2, r3, #5
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe12:	461a      	mov	r2, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	371c      	adds	r7, #28
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr
 800fe26:	bf00      	nop
 800fe28:	1ff80000 	.word	0x1ff80000

0800fe2c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b088      	sub	sp, #32
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800fe34:	2300      	movs	r3, #0
 800fe36:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f7ff f92a 	bl	800f09a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fe46:	2110      	movs	r1, #16
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff f983 	bl	800f154 <USB_FlushTxFifo>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d001      	beq.n	800fe58 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800fe54:	2301      	movs	r3, #1
 800fe56:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff f9ad 	bl	800f1b8 <USB_FlushRxFifo>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800fe64:	2301      	movs	r3, #1
 800fe66:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	61bb      	str	r3, [r7, #24]
 800fe6c:	e01f      	b.n	800feae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	015a      	lsls	r2, r3, #5
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	4413      	add	r3, r2
 800fe76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe84:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fe94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800fe96:	69bb      	ldr	r3, [r7, #24]
 800fe98:	015a      	lsls	r2, r3, #5
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fea2:	461a      	mov	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800fea8:	69bb      	ldr	r3, [r7, #24]
 800feaa:	3301      	adds	r3, #1
 800feac:	61bb      	str	r3, [r7, #24]
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	2b0f      	cmp	r3, #15
 800feb2:	d9dc      	bls.n	800fe6e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800feb4:	2300      	movs	r3, #0
 800feb6:	61bb      	str	r3, [r7, #24]
 800feb8:	e033      	b.n	800ff22 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	4413      	add	r3, r2
 800fec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fed0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fed8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fee0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	015a      	lsls	r2, r3, #5
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	4413      	add	r3, r2
 800feea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800feee:	461a      	mov	r2, r3
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3301      	adds	r3, #1
 800fef8:	60fb      	str	r3, [r7, #12]
 800fefa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fefe:	d80c      	bhi.n	800ff1a <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	015a      	lsls	r2, r3, #5
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	4413      	add	r3, r2
 800ff08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff16:	d0ed      	beq.n	800fef4 <USB_StopHost+0xc8>
 800ff18:	e000      	b.n	800ff1c <USB_StopHost+0xf0>
        break;
 800ff1a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ff1c:	69bb      	ldr	r3, [r7, #24]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	61bb      	str	r3, [r7, #24]
 800ff22:	69bb      	ldr	r3, [r7, #24]
 800ff24:	2b0f      	cmp	r3, #15
 800ff26:	d9c8      	bls.n	800feba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f04f 33ff 	mov.w	r3, #4294967295
 800ff34:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7ff f89a 	bl	800f078 <USB_EnableGlobalInt>

  return ret;
 800ff44:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3720      	adds	r7, #32
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
	...

0800ff50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ff54:	4904      	ldr	r1, [pc, #16]	; (800ff68 <MX_FATFS_Init+0x18>)
 800ff56:	4805      	ldr	r0, [pc, #20]	; (800ff6c <MX_FATFS_Init+0x1c>)
 800ff58:	f004 fba4 	bl	80146a4 <FATFS_LinkDriver>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4b03      	ldr	r3, [pc, #12]	; (800ff70 <MX_FATFS_Init+0x20>)
 800ff62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ff64:	bf00      	nop
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	200094dc 	.word	0x200094dc
 800ff6c:	08029db8 	.word	0x08029db8
 800ff70:	200094d8 	.word	0x200094d8

0800ff74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ff7e:	f000 f87b 	bl	8010078 <BSP_SD_IsDetected>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d001      	beq.n	800ff8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ff88:	2302      	movs	r3, #2
 800ff8a:	e012      	b.n	800ffb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ff8c:	480b      	ldr	r0, [pc, #44]	; (800ffbc <BSP_SD_Init+0x48>)
 800ff8e:	f7fa ff43 	bl	800ae18 <HAL_SD_Init>
 800ff92:	4603      	mov	r3, r0
 800ff94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ff96:	79fb      	ldrb	r3, [r7, #7]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d109      	bne.n	800ffb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ff9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ffa0:	4806      	ldr	r0, [pc, #24]	; (800ffbc <BSP_SD_Init+0x48>)
 800ffa2:	f7fb fb93 	bl	800b6cc <HAL_SD_ConfigWideBusOperation>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d001      	beq.n	800ffb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ffb0:	79fb      	ldrb	r3, [r7, #7]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	20008ca8 	.word	0x20008ca8

0800ffc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	68ba      	ldr	r2, [r7, #8]
 800ffd4:	68f9      	ldr	r1, [r7, #12]
 800ffd6:	4806      	ldr	r0, [pc, #24]	; (800fff0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ffd8:	f7fa ffd6 	bl	800af88 <HAL_SD_ReadBlocks_DMA>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3718      	adds	r7, #24
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20008ca8 	.word	0x20008ca8

0800fff4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b086      	sub	sp, #24
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010000:	2300      	movs	r3, #0
 8010002:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	68f9      	ldr	r1, [r7, #12]
 801000a:	4806      	ldr	r0, [pc, #24]	; (8010024 <BSP_SD_WriteBlocks_DMA+0x30>)
 801000c:	f7fb f89e 	bl	800b14c <HAL_SD_WriteBlocks_DMA>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d001      	beq.n	801001a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010016:	2301      	movs	r3, #1
 8010018:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801001a:	7dfb      	ldrb	r3, [r7, #23]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3718      	adds	r7, #24
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	20008ca8 	.word	0x20008ca8

08010028 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801002c:	4805      	ldr	r0, [pc, #20]	; (8010044 <BSP_SD_GetCardState+0x1c>)
 801002e:	f7fb fbe7 	bl	800b800 <HAL_SD_GetCardState>
 8010032:	4603      	mov	r3, r0
 8010034:	2b04      	cmp	r3, #4
 8010036:	bf14      	ite	ne
 8010038:	2301      	movne	r3, #1
 801003a:	2300      	moveq	r3, #0
 801003c:	b2db      	uxtb	r3, r3
}
 801003e:	4618      	mov	r0, r3
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	20008ca8 	.word	0x20008ca8

08010048 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	4803      	ldr	r0, [pc, #12]	; (8010060 <BSP_SD_GetCardInfo+0x18>)
 8010054:	f7fb fb0e 	bl	800b674 <HAL_SD_GetCardInfo>
}
 8010058:	bf00      	nop
 801005a:	3708      	adds	r7, #8
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	20008ca8 	.word	0x20008ca8

08010064 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801006c:	f000 f9b2 	bl	80103d4 <BSP_SD_ReadCpltCallback>
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801007e:	2301      	movs	r3, #1
 8010080:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010082:	f000 f80b 	bl	801009c <BSP_PlatformIsDetected>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801008c:	2300      	movs	r3, #0
 801008e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	b2db      	uxtb	r3, r3
}
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80100a2:	2301      	movs	r3, #1
 80100a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80100a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80100aa:	4806      	ldr	r0, [pc, #24]	; (80100c4 <BSP_PlatformIsDetected+0x28>)
 80100ac:	f7f6 f80a 	bl	80060c4 <HAL_GPIO_ReadPin>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80100b6:	2300      	movs	r3, #0
 80100b8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80100ba:	79fb      	ldrb	r3, [r7, #7]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	40020800 	.word	0x40020800

080100c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80100d0:	f004 fb34 	bl	801473c <osKernelSysTick>
 80100d4:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80100d6:	e006      	b.n	80100e6 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80100d8:	f7ff ffa6 	bl	8010028 <BSP_SD_GetCardState>
 80100dc:	4603      	mov	r3, r0
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d101      	bne.n	80100e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	e009      	b.n	80100fa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80100e6:	f004 fb29 	bl	801473c <osKernelSysTick>
 80100ea:	4602      	mov	r2, r0
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d8f0      	bhi.n	80100d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80100f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
	...

08010104 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	af00      	add	r7, sp, #0
 801010a:	4603      	mov	r3, r0
 801010c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801010e:	4b0b      	ldr	r3, [pc, #44]	; (801013c <SD_CheckStatus+0x38>)
 8010110:	2201      	movs	r2, #1
 8010112:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010114:	f7ff ff88 	bl	8010028 <BSP_SD_GetCardState>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d107      	bne.n	801012e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801011e:	4b07      	ldr	r3, [pc, #28]	; (801013c <SD_CheckStatus+0x38>)
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	b2db      	uxtb	r3, r3
 8010124:	f023 0301 	bic.w	r3, r3, #1
 8010128:	b2da      	uxtb	r2, r3
 801012a:	4b04      	ldr	r3, [pc, #16]	; (801013c <SD_CheckStatus+0x38>)
 801012c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801012e:	4b03      	ldr	r3, [pc, #12]	; (801013c <SD_CheckStatus+0x38>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	b2db      	uxtb	r3, r3
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	20000009 	.word	0x20000009

08010140 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010140:	b590      	push	{r4, r7, lr}
 8010142:	b087      	sub	sp, #28
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801014a:	4b20      	ldr	r3, [pc, #128]	; (80101cc <SD_initialize+0x8c>)
 801014c:	2201      	movs	r2, #1
 801014e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8010150:	f004 fae8 	bl	8014724 <osKernelRunning>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d030      	beq.n	80101bc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801015a:	f7ff ff0b 	bl	800ff74 <BSP_SD_Init>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	d107      	bne.n	8010174 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8010164:	79fb      	ldrb	r3, [r7, #7]
 8010166:	4618      	mov	r0, r3
 8010168:	f7ff ffcc 	bl	8010104 <SD_CheckStatus>
 801016c:	4603      	mov	r3, r0
 801016e:	461a      	mov	r2, r3
 8010170:	4b16      	ldr	r3, [pc, #88]	; (80101cc <SD_initialize+0x8c>)
 8010172:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8010174:	4b15      	ldr	r3, [pc, #84]	; (80101cc <SD_initialize+0x8c>)
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b01      	cmp	r3, #1
 801017c:	d01e      	beq.n	80101bc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 801017e:	4b14      	ldr	r3, [pc, #80]	; (80101d0 <SD_initialize+0x90>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10e      	bne.n	80101a4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8010186:	4b13      	ldr	r3, [pc, #76]	; (80101d4 <SD_initialize+0x94>)
 8010188:	f107 0408 	add.w	r4, r7, #8
 801018c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801018e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8010192:	f107 0308 	add.w	r3, r7, #8
 8010196:	2100      	movs	r1, #0
 8010198:	4618      	mov	r0, r3
 801019a:	f004 fcb2 	bl	8014b02 <osMessageCreate>
 801019e:	4603      	mov	r3, r0
 80101a0:	4a0b      	ldr	r2, [pc, #44]	; (80101d0 <SD_initialize+0x90>)
 80101a2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <SD_initialize+0x90>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d107      	bne.n	80101bc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80101ac:	4b07      	ldr	r3, [pc, #28]	; (80101cc <SD_initialize+0x8c>)
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	b2db      	uxtb	r3, r3
 80101b2:	f043 0301 	orr.w	r3, r3, #1
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	4b04      	ldr	r3, [pc, #16]	; (80101cc <SD_initialize+0x8c>)
 80101ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80101bc:	4b03      	ldr	r3, [pc, #12]	; (80101cc <SD_initialize+0x8c>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	b2db      	uxtb	r3, r3
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	371c      	adds	r7, #28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd90      	pop	{r4, r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20000009 	.word	0x20000009
 80101d0:	200003b4 	.word	0x200003b4
 80101d4:	080267d8 	.word	0x080267d8

080101d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80101e2:	79fb      	ldrb	r3, [r7, #7]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff ff8d 	bl	8010104 <SD_CheckStatus>
 80101ea:	4603      	mov	r3, r0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3708      	adds	r7, #8
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08a      	sub	sp, #40	; 0x28
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60b9      	str	r1, [r7, #8]
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	4603      	mov	r3, r0
 8010202:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010204:	2301      	movs	r3, #1
 8010206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801020a:	f247 5030 	movw	r0, #30000	; 0x7530
 801020e:	f7ff ff5b 	bl	80100c8 <SD_CheckStatusWithTimeout>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	da02      	bge.n	801021e <SD_read+0x2a>
  {
    return res;
 8010218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801021c:	e032      	b.n	8010284 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801021e:	683a      	ldr	r2, [r7, #0]
 8010220:	6879      	ldr	r1, [r7, #4]
 8010222:	68b8      	ldr	r0, [r7, #8]
 8010224:	f7ff fecc 	bl	800ffc0 <BSP_SD_ReadBlocks_DMA>
 8010228:	4603      	mov	r3, r0
 801022a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 801022e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010232:	2b00      	cmp	r3, #0
 8010234:	d124      	bne.n	8010280 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010236:	4b15      	ldr	r3, [pc, #84]	; (801028c <SD_read+0x98>)
 8010238:	6819      	ldr	r1, [r3, #0]
 801023a:	f107 0314 	add.w	r3, r7, #20
 801023e:	f247 5230 	movw	r2, #30000	; 0x7530
 8010242:	4618      	mov	r0, r3
 8010244:	f004 fcc6 	bl	8014bd4 <osMessageGet>

    if (event.status == osEventMessage)
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2b10      	cmp	r3, #16
 801024c:	d118      	bne.n	8010280 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801024e:	69bb      	ldr	r3, [r7, #24]
 8010250:	2b01      	cmp	r3, #1
 8010252:	d115      	bne.n	8010280 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8010254:	f004 fa72 	bl	801473c <osKernelSysTick>
 8010258:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801025a:	e008      	b.n	801026e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801025c:	f7ff fee4 	bl	8010028 <BSP_SD_GetCardState>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d103      	bne.n	801026e <SD_read+0x7a>
              {
                res = RES_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801026c:	e008      	b.n	8010280 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801026e:	f004 fa65 	bl	801473c <osKernelSysTick>
 8010272:	4602      	mov	r2, r0
 8010274:	6a3b      	ldr	r3, [r7, #32]
 8010276:	1ad3      	subs	r3, r2, r3
 8010278:	f247 522f 	movw	r2, #29999	; 0x752f
 801027c:	4293      	cmp	r3, r2
 801027e:	d9ed      	bls.n	801025c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8010280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010284:	4618      	mov	r0, r3
 8010286:	3728      	adds	r7, #40	; 0x28
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	200003b4 	.word	0x200003b4

08010290 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	; 0x28
 8010294:	af00      	add	r7, sp, #0
 8010296:	60b9      	str	r1, [r7, #8]
 8010298:	607a      	str	r2, [r7, #4]
 801029a:	603b      	str	r3, [r7, #0]
 801029c:	4603      	mov	r3, r0
 801029e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80102a0:	2301      	movs	r3, #1
 80102a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80102a6:	f247 5030 	movw	r0, #30000	; 0x7530
 80102aa:	f7ff ff0d 	bl	80100c8 <SD_CheckStatusWithTimeout>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	da02      	bge.n	80102ba <SD_write+0x2a>
  {
    return res;
 80102b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b8:	e02e      	b.n	8010318 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	6879      	ldr	r1, [r7, #4]
 80102be:	68b8      	ldr	r0, [r7, #8]
 80102c0:	f7ff fe98 	bl	800fff4 <BSP_SD_WriteBlocks_DMA>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d124      	bne.n	8010314 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80102ca:	4b15      	ldr	r3, [pc, #84]	; (8010320 <SD_write+0x90>)
 80102cc:	6819      	ldr	r1, [r3, #0]
 80102ce:	f107 0314 	add.w	r3, r7, #20
 80102d2:	f247 5230 	movw	r2, #30000	; 0x7530
 80102d6:	4618      	mov	r0, r3
 80102d8:	f004 fc7c 	bl	8014bd4 <osMessageGet>

    if (event.status == osEventMessage)
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2b10      	cmp	r3, #16
 80102e0:	d118      	bne.n	8010314 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2b02      	cmp	r3, #2
 80102e6:	d115      	bne.n	8010314 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80102e8:	f004 fa28 	bl	801473c <osKernelSysTick>
 80102ec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80102ee:	e008      	b.n	8010302 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102f0:	f7ff fe9a 	bl	8010028 <BSP_SD_GetCardState>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d103      	bne.n	8010302 <SD_write+0x72>
          {
            res = RES_OK;
 80102fa:	2300      	movs	r3, #0
 80102fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010300:	e008      	b.n	8010314 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8010302:	f004 fa1b 	bl	801473c <osKernelSysTick>
 8010306:	4602      	mov	r2, r0
 8010308:	6a3b      	ldr	r3, [r7, #32]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010310:	4293      	cmp	r3, r2
 8010312:	d9ed      	bls.n	80102f0 <SD_write+0x60>
    }

  }
#endif

  return res;
 8010314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010318:	4618      	mov	r0, r3
 801031a:	3728      	adds	r7, #40	; 0x28
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	200003b4 	.word	0x200003b4

08010324 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08c      	sub	sp, #48	; 0x30
 8010328:	af00      	add	r7, sp, #0
 801032a:	4603      	mov	r3, r0
 801032c:	603a      	str	r2, [r7, #0]
 801032e:	71fb      	strb	r3, [r7, #7]
 8010330:	460b      	mov	r3, r1
 8010332:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801033a:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <SD_ioctl+0xac>)
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	b2db      	uxtb	r3, r3
 8010340:	f003 0301 	and.w	r3, r3, #1
 8010344:	2b00      	cmp	r3, #0
 8010346:	d001      	beq.n	801034c <SD_ioctl+0x28>
 8010348:	2303      	movs	r3, #3
 801034a:	e03c      	b.n	80103c6 <SD_ioctl+0xa2>

  switch (cmd)
 801034c:	79bb      	ldrb	r3, [r7, #6]
 801034e:	2b03      	cmp	r3, #3
 8010350:	d834      	bhi.n	80103bc <SD_ioctl+0x98>
 8010352:	a201      	add	r2, pc, #4	; (adr r2, 8010358 <SD_ioctl+0x34>)
 8010354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010358:	08010369 	.word	0x08010369
 801035c:	08010371 	.word	0x08010371
 8010360:	08010389 	.word	0x08010389
 8010364:	080103a3 	.word	0x080103a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010368:	2300      	movs	r3, #0
 801036a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801036e:	e028      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010370:	f107 030c 	add.w	r3, r7, #12
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff fe67 	bl	8010048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801037a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010380:	2300      	movs	r3, #0
 8010382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010386:	e01c      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010388:	f107 030c 	add.w	r3, r7, #12
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fe5b 	bl	8010048 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010394:	b29a      	uxth	r2, r3
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801039a:	2300      	movs	r3, #0
 801039c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103a0:	e00f      	b.n	80103c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7ff fe4e 	bl	8010048 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80103ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ae:	0a5a      	lsrs	r2, r3, #9
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80103b4:	2300      	movs	r3, #0
 80103b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103ba:	e002      	b.n	80103c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80103bc:	2304      	movs	r3, #4
 80103be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80103c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3730      	adds	r7, #48	; 0x30
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	20000009 	.word	0x20000009

080103d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80103d8:	4b04      	ldr	r3, [pc, #16]	; (80103ec <BSP_SD_ReadCpltCallback+0x18>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2200      	movs	r2, #0
 80103de:	2101      	movs	r1, #1
 80103e0:	4618      	mov	r0, r3
 80103e2:	f004 fbb7 	bl	8014b54 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80103e6:	bf00      	nop
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	200003b4 	.word	0x200003b4

080103f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	4603      	mov	r3, r0
 80103f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80103fa:	20c8      	movs	r0, #200	; 0xc8
 80103fc:	f000 fb6c 	bl	8010ad8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8010400:	f000 f9b4 	bl	801076c <ft5336_I2C_InitializeIfRequired>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 801040c:	b480      	push	{r7}
 801040e:	b083      	sub	sp, #12
 8010410:	af00      	add	r7, sp, #0
 8010412:	4603      	mov	r3, r0
 8010414:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8010416:	bf00      	nop
 8010418:	370c      	adds	r7, #12
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr

08010422 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b084      	sub	sp, #16
 8010426:	af00      	add	r7, sp, #0
 8010428:	4603      	mov	r3, r0
 801042a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8010430:	2300      	movs	r3, #0
 8010432:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8010434:	2300      	movs	r3, #0
 8010436:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8010438:	f000 f998 	bl	801076c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801043c:	2300      	movs	r3, #0
 801043e:	73fb      	strb	r3, [r7, #15]
 8010440:	e010      	b.n	8010464 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8010442:	88fb      	ldrh	r3, [r7, #6]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	21a8      	movs	r1, #168	; 0xa8
 8010448:	4618      	mov	r0, r3
 801044a:	f000 fb27 	bl	8010a9c <TS_IO_Read>
 801044e:	4603      	mov	r3, r0
 8010450:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8010452:	7b7b      	ldrb	r3, [r7, #13]
 8010454:	b2db      	uxtb	r3, r3
 8010456:	2b51      	cmp	r3, #81	; 0x51
 8010458:	d101      	bne.n	801045e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 801045a:	2301      	movs	r3, #1
 801045c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801045e:	7bfb      	ldrb	r3, [r7, #15]
 8010460:	3301      	adds	r3, #1
 8010462:	73fb      	strb	r3, [r7, #15]
 8010464:	7bfb      	ldrb	r3, [r7, #15]
 8010466:	2b02      	cmp	r3, #2
 8010468:	d802      	bhi.n	8010470 <ft5336_ReadID+0x4e>
 801046a:	7bbb      	ldrb	r3, [r7, #14]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d0e8      	beq.n	8010442 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8010470:	7b7b      	ldrb	r3, [r7, #13]
 8010472:	b2db      	uxtb	r3, r3
 8010474:	b29b      	uxth	r3, r3
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b082      	sub	sp, #8
 8010482:	af00      	add	r7, sp, #0
 8010484:	4603      	mov	r3, r0
 8010486:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8010488:	88fb      	ldrh	r3, [r7, #6]
 801048a:	4618      	mov	r0, r3
 801048c:	f000 f97e 	bl	801078c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8010490:	88fb      	ldrh	r3, [r7, #6]
 8010492:	4618      	mov	r0, r3
 8010494:	f000 f932 	bl	80106fc <ft5336_TS_DisableIT>
}
 8010498:	bf00      	nop
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80104aa:	2300      	movs	r3, #0
 80104ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80104ae:	88fb      	ldrh	r3, [r7, #6]
 80104b0:	b2db      	uxtb	r3, r3
 80104b2:	2102      	movs	r1, #2
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 faf1 	bl	8010a9c <TS_IO_Read>
 80104ba:	4603      	mov	r3, r0
 80104bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	f003 030f 	and.w	r3, r3, #15
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80104ca:	7bfb      	ldrb	r3, [r7, #15]
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b05      	cmp	r3, #5
 80104d0:	d901      	bls.n	80104d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80104d6:	7bfb      	ldrb	r3, [r7, #15]
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <ft5336_TS_DetectTouch+0x50>)
 80104dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80104de:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <ft5336_TS_DetectTouch+0x50>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	b2db      	uxtb	r3, r3
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	200003b8 	.word	0x200003b8

080104f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	4603      	mov	r3, r0
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 801050a:	2300      	movs	r3, #0
 801050c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 801050e:	2300      	movs	r3, #0
 8010510:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8010516:	4b6d      	ldr	r3, [pc, #436]	; (80106cc <ft5336_TS_GetXY+0x1d8>)
 8010518:	789a      	ldrb	r2, [r3, #2]
 801051a:	4b6c      	ldr	r3, [pc, #432]	; (80106cc <ft5336_TS_GetXY+0x1d8>)
 801051c:	785b      	ldrb	r3, [r3, #1]
 801051e:	429a      	cmp	r2, r3
 8010520:	f080 80cf 	bcs.w	80106c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8010524:	4b69      	ldr	r3, [pc, #420]	; (80106cc <ft5336_TS_GetXY+0x1d8>)
 8010526:	789b      	ldrb	r3, [r3, #2]
 8010528:	2b09      	cmp	r3, #9
 801052a:	d871      	bhi.n	8010610 <ft5336_TS_GetXY+0x11c>
 801052c:	a201      	add	r2, pc, #4	; (adr r2, 8010534 <ft5336_TS_GetXY+0x40>)
 801052e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010532:	bf00      	nop
 8010534:	0801055d 	.word	0x0801055d
 8010538:	0801056f 	.word	0x0801056f
 801053c:	08010581 	.word	0x08010581
 8010540:	08010593 	.word	0x08010593
 8010544:	080105a5 	.word	0x080105a5
 8010548:	080105b7 	.word	0x080105b7
 801054c:	080105c9 	.word	0x080105c9
 8010550:	080105db 	.word	0x080105db
 8010554:	080105ed 	.word	0x080105ed
 8010558:	080105ff 	.word	0x080105ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 801055c:	2304      	movs	r3, #4
 801055e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8010560:	2303      	movs	r3, #3
 8010562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8010564:	2306      	movs	r3, #6
 8010566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8010568:	2305      	movs	r3, #5
 801056a:	753b      	strb	r3, [r7, #20]
      break;
 801056c:	e051      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 801056e:	230a      	movs	r3, #10
 8010570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8010572:	2309      	movs	r3, #9
 8010574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8010576:	230c      	movs	r3, #12
 8010578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 801057a:	230b      	movs	r3, #11
 801057c:	753b      	strb	r3, [r7, #20]
      break;
 801057e:	e048      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8010580:	2310      	movs	r3, #16
 8010582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8010584:	230f      	movs	r3, #15
 8010586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8010588:	2312      	movs	r3, #18
 801058a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 801058c:	2311      	movs	r3, #17
 801058e:	753b      	strb	r3, [r7, #20]
      break;
 8010590:	e03f      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8010592:	2316      	movs	r3, #22
 8010594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8010596:	2315      	movs	r3, #21
 8010598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 801059a:	2318      	movs	r3, #24
 801059c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 801059e:	2317      	movs	r3, #23
 80105a0:	753b      	strb	r3, [r7, #20]
      break;
 80105a2:	e036      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80105a4:	231c      	movs	r3, #28
 80105a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80105a8:	231b      	movs	r3, #27
 80105aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80105ac:	231e      	movs	r3, #30
 80105ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80105b0:	231d      	movs	r3, #29
 80105b2:	753b      	strb	r3, [r7, #20]
      break;
 80105b4:	e02d      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80105b6:	2322      	movs	r3, #34	; 0x22
 80105b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80105ba:	2321      	movs	r3, #33	; 0x21
 80105bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80105be:	2324      	movs	r3, #36	; 0x24
 80105c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80105c2:	2323      	movs	r3, #35	; 0x23
 80105c4:	753b      	strb	r3, [r7, #20]
      break;
 80105c6:	e024      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80105c8:	2328      	movs	r3, #40	; 0x28
 80105ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80105cc:	2327      	movs	r3, #39	; 0x27
 80105ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80105d0:	232a      	movs	r3, #42	; 0x2a
 80105d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80105d4:	2329      	movs	r3, #41	; 0x29
 80105d6:	753b      	strb	r3, [r7, #20]
      break;
 80105d8:	e01b      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80105da:	232e      	movs	r3, #46	; 0x2e
 80105dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80105de:	232d      	movs	r3, #45	; 0x2d
 80105e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80105e2:	2330      	movs	r3, #48	; 0x30
 80105e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80105e6:	232f      	movs	r3, #47	; 0x2f
 80105e8:	753b      	strb	r3, [r7, #20]
      break;
 80105ea:	e012      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80105ec:	2334      	movs	r3, #52	; 0x34
 80105ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80105f0:	2333      	movs	r3, #51	; 0x33
 80105f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80105f4:	2336      	movs	r3, #54	; 0x36
 80105f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80105f8:	2335      	movs	r3, #53	; 0x35
 80105fa:	753b      	strb	r3, [r7, #20]
      break;
 80105fc:	e009      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80105fe:	233a      	movs	r3, #58	; 0x3a
 8010600:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8010602:	2339      	movs	r3, #57	; 0x39
 8010604:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8010606:	233c      	movs	r3, #60	; 0x3c
 8010608:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 801060a:	233b      	movs	r3, #59	; 0x3b
 801060c:	753b      	strb	r3, [r7, #20]
      break;
 801060e:	e000      	b.n	8010612 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8010610:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8010612:	89fb      	ldrh	r3, [r7, #14]
 8010614:	b2db      	uxtb	r3, r3
 8010616:	7dfa      	ldrb	r2, [r7, #23]
 8010618:	4611      	mov	r1, r2
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fa3e 	bl	8010a9c <TS_IO_Read>
 8010620:	4603      	mov	r3, r0
 8010622:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8010624:	7cfb      	ldrb	r3, [r7, #19]
 8010626:	b2db      	uxtb	r3, r3
 8010628:	b29a      	uxth	r2, r3
 801062a:	4b29      	ldr	r3, [pc, #164]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 801062c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 801062e:	89fb      	ldrh	r3, [r7, #14]
 8010630:	b2db      	uxtb	r3, r3
 8010632:	7dba      	ldrb	r2, [r7, #22]
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f000 fa30 	bl	8010a9c <TS_IO_Read>
 801063c:	4603      	mov	r3, r0
 801063e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8010640:	7cfb      	ldrb	r3, [r7, #19]
 8010642:	b2db      	uxtb	r3, r3
 8010644:	021b      	lsls	r3, r3, #8
 8010646:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801064a:	b21a      	sxth	r2, r3
 801064c:	4b20      	ldr	r3, [pc, #128]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	b21b      	sxth	r3, r3
 8010652:	4313      	orrs	r3, r2
 8010654:	b21b      	sxth	r3, r3
 8010656:	b29a      	uxth	r2, r3
 8010658:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 801065a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 801065c:	4b1c      	ldr	r3, [pc, #112]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 801065e:	881a      	ldrh	r2, [r3, #0]
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8010664:	89fb      	ldrh	r3, [r7, #14]
 8010666:	b2db      	uxtb	r3, r3
 8010668:	7d7a      	ldrb	r2, [r7, #21]
 801066a:	4611      	mov	r1, r2
 801066c:	4618      	mov	r0, r3
 801066e:	f000 fa15 	bl	8010a9c <TS_IO_Read>
 8010672:	4603      	mov	r3, r0
 8010674:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8010676:	7cfb      	ldrb	r3, [r7, #19]
 8010678:	b2db      	uxtb	r3, r3
 801067a:	b29a      	uxth	r2, r3
 801067c:	4b14      	ldr	r3, [pc, #80]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 801067e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8010680:	89fb      	ldrh	r3, [r7, #14]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	7d3a      	ldrb	r2, [r7, #20]
 8010686:	4611      	mov	r1, r2
 8010688:	4618      	mov	r0, r3
 801068a:	f000 fa07 	bl	8010a9c <TS_IO_Read>
 801068e:	4603      	mov	r3, r0
 8010690:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8010692:	7cfb      	ldrb	r3, [r7, #19]
 8010694:	b2db      	uxtb	r3, r3
 8010696:	021b      	lsls	r3, r3, #8
 8010698:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801069c:	b21a      	sxth	r2, r3
 801069e:	4b0c      	ldr	r3, [pc, #48]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 80106a0:	881b      	ldrh	r3, [r3, #0]
 80106a2:	b21b      	sxth	r3, r3
 80106a4:	4313      	orrs	r3, r2
 80106a6:	b21b      	sxth	r3, r3
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	4b09      	ldr	r3, [pc, #36]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 80106ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80106ae:	4b08      	ldr	r3, [pc, #32]	; (80106d0 <ft5336_TS_GetXY+0x1dc>)
 80106b0:	881a      	ldrh	r2, [r3, #0]
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80106b6:	4b05      	ldr	r3, [pc, #20]	; (80106cc <ft5336_TS_GetXY+0x1d8>)
 80106b8:	789b      	ldrb	r3, [r3, #2]
 80106ba:	3301      	adds	r3, #1
 80106bc:	b2da      	uxtb	r2, r3
 80106be:	4b03      	ldr	r3, [pc, #12]	; (80106cc <ft5336_TS_GetXY+0x1d8>)
 80106c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80106c2:	bf00      	nop
 80106c4:	3718      	adds	r7, #24
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	200003b8 	.word	0x200003b8
 80106d0:	200003bc 	.word	0x200003bc

080106d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80106e2:	2301      	movs	r3, #1
 80106e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80106e6:	88fb      	ldrh	r3, [r7, #6]
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	7bfa      	ldrb	r2, [r7, #15]
 80106ec:	21a4      	movs	r1, #164	; 0xa4
 80106ee:	4618      	mov	r0, r3
 80106f0:	f000 f9ba 	bl	8010a68 <TS_IO_Write>
}
 80106f4:	bf00      	nop
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8010706:	2300      	movs	r3, #0
 8010708:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 801070a:	2300      	movs	r3, #0
 801070c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 801070e:	88fb      	ldrh	r3, [r7, #6]
 8010710:	b2db      	uxtb	r3, r3
 8010712:	7bfa      	ldrb	r2, [r7, #15]
 8010714:	21a4      	movs	r1, #164	; 0xa4
 8010716:	4618      	mov	r0, r3
 8010718:	f000 f9a6 	bl	8010a68 <TS_IO_Write>
}
 801071c:	bf00      	nop
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	4603      	mov	r3, r0
 801072c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	4603      	mov	r3, r0
 8010744:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8010746:	bf00      	nop
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
	...

08010754 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8010754:	b480      	push	{r7}
 8010756:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8010758:	4b03      	ldr	r3, [pc, #12]	; (8010768 <ft5336_Get_I2C_InitializedStatus+0x14>)
 801075a:	781b      	ldrb	r3, [r3, #0]
}
 801075c:	4618      	mov	r0, r3
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop
 8010768:	200003b8 	.word	0x200003b8

0801076c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8010770:	f7ff fff0 	bl	8010754 <ft5336_Get_I2C_InitializedStatus>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d104      	bne.n	8010784 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 801077a:	f000 f96b 	bl	8010a54 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 801077e:	4b02      	ldr	r3, [pc, #8]	; (8010788 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8010780:	2201      	movs	r2, #1
 8010782:	701a      	strb	r2, [r3, #0]
  }
}
 8010784:	bf00      	nop
 8010786:	bd80      	pop	{r7, pc}
 8010788:	200003b8 	.word	0x200003b8

0801078c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 801078c:	b480      	push	{r7}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8010796:	2300      	movs	r3, #0
 8010798:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 801079a:	68fb      	ldr	r3, [r7, #12]
}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b08c      	sub	sp, #48	; 0x30
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	4a51      	ldr	r2, [pc, #324]	; (80108f8 <I2Cx_MspInit+0x150>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d14d      	bne.n	8010854 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80107b8:	4b50      	ldr	r3, [pc, #320]	; (80108fc <I2Cx_MspInit+0x154>)
 80107ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107bc:	4a4f      	ldr	r2, [pc, #316]	; (80108fc <I2Cx_MspInit+0x154>)
 80107be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c2:	6313      	str	r3, [r2, #48]	; 0x30
 80107c4:	4b4d      	ldr	r3, [pc, #308]	; (80108fc <I2Cx_MspInit+0x154>)
 80107c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107cc:	61bb      	str	r3, [r7, #24]
 80107ce:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80107d0:	2380      	movs	r3, #128	; 0x80
 80107d2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80107d4:	2312      	movs	r3, #18
 80107d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80107d8:	2300      	movs	r3, #0
 80107da:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80107dc:	2302      	movs	r3, #2
 80107de:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80107e0:	2304      	movs	r3, #4
 80107e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80107e4:	f107 031c 	add.w	r3, r7, #28
 80107e8:	4619      	mov	r1, r3
 80107ea:	4845      	ldr	r0, [pc, #276]	; (8010900 <I2Cx_MspInit+0x158>)
 80107ec:	f7f5 f9b2 	bl	8005b54 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80107f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80107f6:	f107 031c 	add.w	r3, r7, #28
 80107fa:	4619      	mov	r1, r3
 80107fc:	4840      	ldr	r0, [pc, #256]	; (8010900 <I2Cx_MspInit+0x158>)
 80107fe:	f7f5 f9a9 	bl	8005b54 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8010802:	4b3e      	ldr	r3, [pc, #248]	; (80108fc <I2Cx_MspInit+0x154>)
 8010804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010806:	4a3d      	ldr	r2, [pc, #244]	; (80108fc <I2Cx_MspInit+0x154>)
 8010808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801080c:	6413      	str	r3, [r2, #64]	; 0x40
 801080e:	4b3b      	ldr	r3, [pc, #236]	; (80108fc <I2Cx_MspInit+0x154>)
 8010810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010816:	617b      	str	r3, [r7, #20]
 8010818:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 801081a:	4b38      	ldr	r3, [pc, #224]	; (80108fc <I2Cx_MspInit+0x154>)
 801081c:	6a1b      	ldr	r3, [r3, #32]
 801081e:	4a37      	ldr	r2, [pc, #220]	; (80108fc <I2Cx_MspInit+0x154>)
 8010820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010824:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8010826:	4b35      	ldr	r3, [pc, #212]	; (80108fc <I2Cx_MspInit+0x154>)
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	4a34      	ldr	r2, [pc, #208]	; (80108fc <I2Cx_MspInit+0x154>)
 801082c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010830:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8010832:	2200      	movs	r2, #0
 8010834:	210f      	movs	r1, #15
 8010836:	2048      	movs	r0, #72	; 0x48
 8010838:	f7f2 fff4 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 801083c:	2048      	movs	r0, #72	; 0x48
 801083e:	f7f3 f80d 	bl	800385c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8010842:	2200      	movs	r2, #0
 8010844:	210f      	movs	r1, #15
 8010846:	2049      	movs	r0, #73	; 0x49
 8010848:	f7f2 ffec 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 801084c:	2049      	movs	r0, #73	; 0x49
 801084e:	f7f3 f805 	bl	800385c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8010852:	e04d      	b.n	80108f0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8010854:	4b29      	ldr	r3, [pc, #164]	; (80108fc <I2Cx_MspInit+0x154>)
 8010856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010858:	4a28      	ldr	r2, [pc, #160]	; (80108fc <I2Cx_MspInit+0x154>)
 801085a:	f043 0302 	orr.w	r3, r3, #2
 801085e:	6313      	str	r3, [r2, #48]	; 0x30
 8010860:	4b26      	ldr	r3, [pc, #152]	; (80108fc <I2Cx_MspInit+0x154>)
 8010862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010864:	f003 0302 	and.w	r3, r3, #2
 8010868:	613b      	str	r3, [r7, #16]
 801086a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 801086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010870:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8010872:	2312      	movs	r3, #18
 8010874:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8010876:	2300      	movs	r3, #0
 8010878:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801087a:	2302      	movs	r3, #2
 801087c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 801087e:	2304      	movs	r3, #4
 8010880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8010882:	f107 031c 	add.w	r3, r7, #28
 8010886:	4619      	mov	r1, r3
 8010888:	481e      	ldr	r0, [pc, #120]	; (8010904 <I2Cx_MspInit+0x15c>)
 801088a:	f7f5 f963 	bl	8005b54 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 801088e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8010894:	f107 031c 	add.w	r3, r7, #28
 8010898:	4619      	mov	r1, r3
 801089a:	481a      	ldr	r0, [pc, #104]	; (8010904 <I2Cx_MspInit+0x15c>)
 801089c:	f7f5 f95a 	bl	8005b54 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80108a0:	4b16      	ldr	r3, [pc, #88]	; (80108fc <I2Cx_MspInit+0x154>)
 80108a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108a4:	4a15      	ldr	r2, [pc, #84]	; (80108fc <I2Cx_MspInit+0x154>)
 80108a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108aa:	6413      	str	r3, [r2, #64]	; 0x40
 80108ac:	4b13      	ldr	r3, [pc, #76]	; (80108fc <I2Cx_MspInit+0x154>)
 80108ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80108b4:	60fb      	str	r3, [r7, #12]
 80108b6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80108b8:	4b10      	ldr	r3, [pc, #64]	; (80108fc <I2Cx_MspInit+0x154>)
 80108ba:	6a1b      	ldr	r3, [r3, #32]
 80108bc:	4a0f      	ldr	r2, [pc, #60]	; (80108fc <I2Cx_MspInit+0x154>)
 80108be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80108c2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80108c4:	4b0d      	ldr	r3, [pc, #52]	; (80108fc <I2Cx_MspInit+0x154>)
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	4a0c      	ldr	r2, [pc, #48]	; (80108fc <I2Cx_MspInit+0x154>)
 80108ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108ce:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80108d0:	2200      	movs	r2, #0
 80108d2:	210f      	movs	r1, #15
 80108d4:	201f      	movs	r0, #31
 80108d6:	f7f2 ffa5 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80108da:	201f      	movs	r0, #31
 80108dc:	f7f2 ffbe 	bl	800385c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80108e0:	2200      	movs	r2, #0
 80108e2:	210f      	movs	r1, #15
 80108e4:	2020      	movs	r0, #32
 80108e6:	f7f2 ff9d 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80108ea:	2020      	movs	r0, #32
 80108ec:	f7f2 ffb6 	bl	800385c <HAL_NVIC_EnableIRQ>
}
 80108f0:	bf00      	nop
 80108f2:	3730      	adds	r7, #48	; 0x30
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	200003c0 	.word	0x200003c0
 80108fc:	40023800 	.word	0x40023800
 8010900:	40021c00 	.word	0x40021c00
 8010904:	40020400 	.word	0x40020400

08010908 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7f7 fb2d 	bl	8007f70 <HAL_I2C_GetState>
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d125      	bne.n	8010968 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	4a14      	ldr	r2, [pc, #80]	; (8010970 <I2Cx_Init+0x68>)
 8010920:	4293      	cmp	r3, r2
 8010922:	d103      	bne.n	801092c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	4a13      	ldr	r2, [pc, #76]	; (8010974 <I2Cx_Init+0x6c>)
 8010928:	601a      	str	r2, [r3, #0]
 801092a:	e002      	b.n	8010932 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4a12      	ldr	r2, [pc, #72]	; (8010978 <I2Cx_Init+0x70>)
 8010930:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a11      	ldr	r2, [pc, #68]	; (801097c <I2Cx_Init+0x74>)
 8010936:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2200      	movs	r2, #0
 8010948:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2200      	movs	r2, #0
 801094e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2200      	movs	r2, #0
 8010954:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7ff ff23 	bl	80107a8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7f7 f816 	bl	8007994 <HAL_I2C_Init>
  }
}
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	200003c0 	.word	0x200003c0
 8010974:	40005c00 	.word	0x40005c00
 8010978:	40005400 	.word	0x40005400
 801097c:	40912732 	.word	0x40912732

08010980 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b08a      	sub	sp, #40	; 0x28
 8010984:	af04      	add	r7, sp, #16
 8010986:	60f8      	str	r0, [r7, #12]
 8010988:	4608      	mov	r0, r1
 801098a:	4611      	mov	r1, r2
 801098c:	461a      	mov	r2, r3
 801098e:	4603      	mov	r3, r0
 8010990:	72fb      	strb	r3, [r7, #11]
 8010992:	460b      	mov	r3, r1
 8010994:	813b      	strh	r3, [r7, #8]
 8010996:	4613      	mov	r3, r2
 8010998:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 801099e:	7afb      	ldrb	r3, [r7, #11]
 80109a0:	b299      	uxth	r1, r3
 80109a2:	88f8      	ldrh	r0, [r7, #6]
 80109a4:	893a      	ldrh	r2, [r7, #8]
 80109a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80109aa:	9302      	str	r3, [sp, #8]
 80109ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109ae:	9301      	str	r3, [sp, #4]
 80109b0:	6a3b      	ldr	r3, [r7, #32]
 80109b2:	9300      	str	r3, [sp, #0]
 80109b4:	4603      	mov	r3, r0
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7f7 f9c0 	bl	8007d3c <HAL_I2C_Mem_Read>
 80109bc:	4603      	mov	r3, r0
 80109be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80109c0:	7dfb      	ldrb	r3, [r7, #23]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d004      	beq.n	80109d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80109c6:	7afb      	ldrb	r3, [r7, #11]
 80109c8:	4619      	mov	r1, r3
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 f832 	bl	8010a34 <I2Cx_Error>
  }
  return status;    
 80109d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3718      	adds	r7, #24
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}

080109da <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80109da:	b580      	push	{r7, lr}
 80109dc:	b08a      	sub	sp, #40	; 0x28
 80109de:	af04      	add	r7, sp, #16
 80109e0:	60f8      	str	r0, [r7, #12]
 80109e2:	4608      	mov	r0, r1
 80109e4:	4611      	mov	r1, r2
 80109e6:	461a      	mov	r2, r3
 80109e8:	4603      	mov	r3, r0
 80109ea:	72fb      	strb	r3, [r7, #11]
 80109ec:	460b      	mov	r3, r1
 80109ee:	813b      	strh	r3, [r7, #8]
 80109f0:	4613      	mov	r3, r2
 80109f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80109f8:	7afb      	ldrb	r3, [r7, #11]
 80109fa:	b299      	uxth	r1, r3
 80109fc:	88f8      	ldrh	r0, [r7, #6]
 80109fe:	893a      	ldrh	r2, [r7, #8]
 8010a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010a04:	9302      	str	r3, [sp, #8]
 8010a06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a08:	9301      	str	r3, [sp, #4]
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	9300      	str	r3, [sp, #0]
 8010a0e:	4603      	mov	r3, r0
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f7f7 f87f 	bl	8007b14 <HAL_I2C_Mem_Write>
 8010a16:	4603      	mov	r3, r0
 8010a18:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8010a1a:	7dfb      	ldrb	r3, [r7, #23]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d004      	beq.n	8010a2a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8010a20:	7afb      	ldrb	r3, [r7, #11]
 8010a22:	4619      	mov	r1, r3
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f000 f805 	bl	8010a34 <I2Cx_Error>
  }
  return status;
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7f7 f837 	bl	8007ab4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7ff ff5e 	bl	8010908 <I2Cx_Init>
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8010a58:	4802      	ldr	r0, [pc, #8]	; (8010a64 <TS_IO_Init+0x10>)
 8010a5a:	f7ff ff55 	bl	8010908 <I2Cx_Init>
}
 8010a5e:	bf00      	nop
 8010a60:	bd80      	pop	{r7, pc}
 8010a62:	bf00      	nop
 8010a64:	200003c0 	.word	0x200003c0

08010a68 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af02      	add	r7, sp, #8
 8010a6e:	4603      	mov	r3, r0
 8010a70:	71fb      	strb	r3, [r7, #7]
 8010a72:	460b      	mov	r3, r1
 8010a74:	71bb      	strb	r3, [r7, #6]
 8010a76:	4613      	mov	r3, r2
 8010a78:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8010a7a:	79bb      	ldrb	r3, [r7, #6]
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	79f9      	ldrb	r1, [r7, #7]
 8010a80:	2301      	movs	r3, #1
 8010a82:	9301      	str	r3, [sp, #4]
 8010a84:	1d7b      	adds	r3, r7, #5
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	2301      	movs	r3, #1
 8010a8a:	4803      	ldr	r0, [pc, #12]	; (8010a98 <TS_IO_Write+0x30>)
 8010a8c:	f7ff ffa5 	bl	80109da <I2Cx_WriteMultiple>
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	200003c0 	.word	0x200003c0

08010a9c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b086      	sub	sp, #24
 8010aa0:	af02      	add	r7, sp, #8
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	460a      	mov	r2, r1
 8010aa6:	71fb      	strb	r3, [r7, #7]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8010ab0:	79bb      	ldrb	r3, [r7, #6]
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	79f9      	ldrb	r1, [r7, #7]
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	9301      	str	r3, [sp, #4]
 8010aba:	f107 030f 	add.w	r3, r7, #15
 8010abe:	9300      	str	r3, [sp, #0]
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	4804      	ldr	r0, [pc, #16]	; (8010ad4 <TS_IO_Read+0x38>)
 8010ac4:	f7ff ff5c 	bl	8010980 <I2Cx_ReadMultiple>

  return read_value;
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	200003c0 	.word	0x200003c0

08010ad8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f7f2 fb2f 	bl	8003144 <HAL_Delay>
}
 8010ae6:	bf00      	nop
 8010ae8:	3708      	adds	r7, #8
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
	...

08010af0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8010af0:	b580      	push	{r7, lr}
 8010af2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8010af4:	4b31      	ldr	r3, [pc, #196]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010af6:	2228      	movs	r2, #40	; 0x28
 8010af8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8010afa:	4b30      	ldr	r3, [pc, #192]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010afc:	2209      	movs	r2, #9
 8010afe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8010b00:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b02:	2235      	movs	r2, #53	; 0x35
 8010b04:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8010b06:	4b2d      	ldr	r3, [pc, #180]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b08:	220b      	movs	r2, #11
 8010b0a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8010b0c:	4b2b      	ldr	r3, [pc, #172]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b0e:	f240 121b 	movw	r2, #283	; 0x11b
 8010b12:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8010b14:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b16:	f240 2215 	movw	r2, #533	; 0x215
 8010b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8010b1c:	4b27      	ldr	r3, [pc, #156]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b1e:	f240 121d 	movw	r2, #285	; 0x11d
 8010b22:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8010b24:	4b25      	ldr	r3, [pc, #148]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b26:	f240 2235 	movw	r2, #565	; 0x235
 8010b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	4823      	ldr	r0, [pc, #140]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b30:	f000 fba2 	bl	8011278 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8010b34:	4b21      	ldr	r3, [pc, #132]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b36:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8010b3c:	4b1f      	ldr	r3, [pc, #124]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b3e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010b42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8010b44:	4b1d      	ldr	r3, [pc, #116]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b46:	2200      	movs	r2, #0
 8010b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8010b4c:	4b1b      	ldr	r3, [pc, #108]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b4e:	2200      	movs	r2, #0
 8010b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8010b54:	4b19      	ldr	r3, [pc, #100]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8010b5c:	4b17      	ldr	r3, [pc, #92]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8010b62:	4b16      	ldr	r3, [pc, #88]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8010b68:	4b14      	ldr	r3, [pc, #80]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8010b6e:	4b13      	ldr	r3, [pc, #76]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8010b74:	4b11      	ldr	r3, [pc, #68]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b76:	4a12      	ldr	r2, [pc, #72]	; (8010bc0 <BSP_LCD_Init+0xd0>)
 8010b78:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8010b7a:	4810      	ldr	r0, [pc, #64]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b7c:	f7f7 ff14 	bl	80089a8 <HAL_LTDC_GetState>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d103      	bne.n	8010b8e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8010b86:	2100      	movs	r1, #0
 8010b88:	480c      	ldr	r0, [pc, #48]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b8a:	f000 fa9b 	bl	80110c4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8010b8e:	480b      	ldr	r0, [pc, #44]	; (8010bbc <BSP_LCD_Init+0xcc>)
 8010b90:	f7f7 fd3a 	bl	8008608 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8010b94:	2201      	movs	r2, #1
 8010b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010b9a:	480a      	ldr	r0, [pc, #40]	; (8010bc4 <BSP_LCD_Init+0xd4>)
 8010b9c:	f7f5 faaa 	bl	80060f4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	2108      	movs	r1, #8
 8010ba4:	4808      	ldr	r0, [pc, #32]	; (8010bc8 <BSP_LCD_Init+0xd8>)
 8010ba6:	f7f5 faa5 	bl	80060f4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8010baa:	f000 fc85 	bl	80114b8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8010bae:	4807      	ldr	r0, [pc, #28]	; (8010bcc <BSP_LCD_Init+0xdc>)
 8010bb0:	f000 f8a6 	bl	8010d00 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	bd80      	pop	{r7, pc}
 8010bba:	bf00      	nop
 8010bbc:	20009944 	.word	0x20009944
 8010bc0:	40016800 	.word	0x40016800
 8010bc4:	40022000 	.word	0x40022000
 8010bc8:	40022800 	.word	0x40022800
 8010bcc:	2000000c 	.word	0x2000000c

08010bd0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8010bd4:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <BSP_LCD_GetXSize+0x20>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	4a06      	ldr	r2, [pc, #24]	; (8010bf4 <BSP_LCD_GetXSize+0x24>)
 8010bda:	2134      	movs	r1, #52	; 0x34
 8010bdc:	fb01 f303 	mul.w	r3, r1, r3
 8010be0:	4413      	add	r3, r2
 8010be2:	3360      	adds	r3, #96	; 0x60
 8010be4:	681b      	ldr	r3, [r3, #0]
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr
 8010bf0:	2000044c 	.word	0x2000044c
 8010bf4:	20009944 	.word	0x20009944

08010bf8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8010bfc:	4b06      	ldr	r3, [pc, #24]	; (8010c18 <BSP_LCD_GetYSize+0x20>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a06      	ldr	r2, [pc, #24]	; (8010c1c <BSP_LCD_GetYSize+0x24>)
 8010c02:	2134      	movs	r1, #52	; 0x34
 8010c04:	fb01 f303 	mul.w	r3, r1, r3
 8010c08:	4413      	add	r3, r2
 8010c0a:	3364      	adds	r3, #100	; 0x64
 8010c0c:	681b      	ldr	r3, [r3, #0]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr
 8010c18:	2000044c 	.word	0x2000044c
 8010c1c:	20009944 	.word	0x20009944

08010c20 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b090      	sub	sp, #64	; 0x40
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	6039      	str	r1, [r7, #0]
 8010c2a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8010c30:	f7ff ffce 	bl	8010bd0 <BSP_LCD_GetXSize>
 8010c34:	4603      	mov	r3, r0
 8010c36:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8010c3c:	f7ff ffdc 	bl	8010bf8 <BSP_LCD_GetYSize>
 8010c40:	4603      	mov	r3, r0
 8010c42:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8010c44:	2300      	movs	r3, #0
 8010c46:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8010c4c:	23ff      	movs	r3, #255	; 0xff
 8010c4e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8010c50:	2300      	movs	r3, #0
 8010c52:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8010c66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8010c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8010c6c:	2307      	movs	r3, #7
 8010c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8010c70:	f7ff ffae 	bl	8010bd0 <BSP_LCD_GetXSize>
 8010c74:	4603      	mov	r3, r0
 8010c76:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8010c78:	f7ff ffbe 	bl	8010bf8 <BSP_LCD_GetYSize>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8010c80:	88fa      	ldrh	r2, [r7, #6]
 8010c82:	f107 030c 	add.w	r3, r7, #12
 8010c86:	4619      	mov	r1, r3
 8010c88:	4812      	ldr	r0, [pc, #72]	; (8010cd4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8010c8a:	f7f7 fe4f 	bl	800892c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8010c8e:	88fa      	ldrh	r2, [r7, #6]
 8010c90:	4911      	ldr	r1, [pc, #68]	; (8010cd8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8010c92:	4613      	mov	r3, r2
 8010c94:	005b      	lsls	r3, r3, #1
 8010c96:	4413      	add	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	440b      	add	r3, r1
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8010ca2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8010ca4:	88fa      	ldrh	r2, [r7, #6]
 8010ca6:	490c      	ldr	r1, [pc, #48]	; (8010cd8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8010ca8:	4613      	mov	r3, r2
 8010caa:	005b      	lsls	r3, r3, #1
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	3308      	adds	r3, #8
 8010cb4:	4a09      	ldr	r2, [pc, #36]	; (8010cdc <BSP_LCD_LayerDefaultInit+0xbc>)
 8010cb6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8010cb8:	88fa      	ldrh	r2, [r7, #6]
 8010cba:	4907      	ldr	r1, [pc, #28]	; (8010cd8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	4413      	add	r3, r2
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	440b      	add	r3, r1
 8010cc6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8010cca:	601a      	str	r2, [r3, #0]
}
 8010ccc:	bf00      	nop
 8010cce:	3740      	adds	r7, #64	; 0x40
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	20009944 	.word	0x20009944
 8010cd8:	20000450 	.word	0x20000450
 8010cdc:	2000000c 	.word	0x2000000c

08010ce0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8010ce8:	4a04      	ldr	r2, [pc, #16]	; (8010cfc <BSP_LCD_SelectLayer+0x1c>)
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6013      	str	r3, [r2, #0]
} 
 8010cee:	bf00      	nop
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	2000044c 	.word	0x2000044c

08010d00 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8010d08:	4b08      	ldr	r3, [pc, #32]	; (8010d2c <BSP_LCD_SetFont+0x2c>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	4908      	ldr	r1, [pc, #32]	; (8010d30 <BSP_LCD_SetFont+0x30>)
 8010d0e:	4613      	mov	r3, r2
 8010d10:	005b      	lsls	r3, r3, #1
 8010d12:	4413      	add	r3, r2
 8010d14:	009b      	lsls	r3, r3, #2
 8010d16:	440b      	add	r3, r1
 8010d18:	3308      	adds	r3, #8
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	601a      	str	r2, [r3, #0]
}
 8010d1e:	bf00      	nop
 8010d20:	370c      	adds	r7, #12
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	2000044c 	.word	0x2000044c
 8010d30:	20000450 	.word	0x20000450

08010d34 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8010d38:	4b07      	ldr	r3, [pc, #28]	; (8010d58 <BSP_LCD_GetFont+0x24>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	4907      	ldr	r1, [pc, #28]	; (8010d5c <BSP_LCD_GetFont+0x28>)
 8010d3e:	4613      	mov	r3, r2
 8010d40:	005b      	lsls	r3, r3, #1
 8010d42:	4413      	add	r3, r2
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	440b      	add	r3, r1
 8010d48:	3308      	adds	r3, #8
 8010d4a:	681b      	ldr	r3, [r3, #0]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	2000044c 	.word	0x2000044c
 8010d5c:	20000450 	.word	0x20000450

08010d60 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8010d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d62:	b085      	sub	sp, #20
 8010d64:	af02      	add	r7, sp, #8
 8010d66:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8010d68:	4b0f      	ldr	r3, [pc, #60]	; (8010da8 <BSP_LCD_Clear+0x48>)
 8010d6a:	681c      	ldr	r4, [r3, #0]
 8010d6c:	4b0e      	ldr	r3, [pc, #56]	; (8010da8 <BSP_LCD_Clear+0x48>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a0e      	ldr	r2, [pc, #56]	; (8010dac <BSP_LCD_Clear+0x4c>)
 8010d72:	2134      	movs	r1, #52	; 0x34
 8010d74:	fb01 f303 	mul.w	r3, r1, r3
 8010d78:	4413      	add	r3, r2
 8010d7a:	335c      	adds	r3, #92	; 0x5c
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	461e      	mov	r6, r3
 8010d80:	f7ff ff26 	bl	8010bd0 <BSP_LCD_GetXSize>
 8010d84:	4605      	mov	r5, r0
 8010d86:	f7ff ff37 	bl	8010bf8 <BSP_LCD_GetYSize>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	9301      	str	r3, [sp, #4]
 8010d90:	2300      	movs	r3, #0
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	4613      	mov	r3, r2
 8010d96:	462a      	mov	r2, r5
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f000 fb40 	bl	8011420 <LL_FillBuffer>
}
 8010da0:	bf00      	nop
 8010da2:	370c      	adds	r7, #12
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da8:	2000044c 	.word	0x2000044c
 8010dac:	20009944 	.word	0x20009944

08010db0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8010db0:	b590      	push	{r4, r7, lr}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	80fb      	strh	r3, [r7, #6]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	80bb      	strh	r3, [r7, #4]
 8010dbe:	4613      	mov	r3, r2
 8010dc0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8010dc2:	4b1b      	ldr	r3, [pc, #108]	; (8010e30 <BSP_LCD_DisplayChar+0x80>)
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	491b      	ldr	r1, [pc, #108]	; (8010e34 <BSP_LCD_DisplayChar+0x84>)
 8010dc8:	4613      	mov	r3, r2
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	4413      	add	r3, r2
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	440b      	add	r3, r1
 8010dd2:	3308      	adds	r3, #8
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	6819      	ldr	r1, [r3, #0]
 8010dd8:	78fb      	ldrb	r3, [r7, #3]
 8010dda:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8010dde:	4b14      	ldr	r3, [pc, #80]	; (8010e30 <BSP_LCD_DisplayChar+0x80>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	4c14      	ldr	r4, [pc, #80]	; (8010e34 <BSP_LCD_DisplayChar+0x84>)
 8010de4:	4613      	mov	r3, r2
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	4413      	add	r3, r2
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	4423      	add	r3, r4
 8010dee:	3308      	adds	r3, #8
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8010df4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8010df8:	4b0d      	ldr	r3, [pc, #52]	; (8010e30 <BSP_LCD_DisplayChar+0x80>)
 8010dfa:	681a      	ldr	r2, [r3, #0]
 8010dfc:	4c0d      	ldr	r4, [pc, #52]	; (8010e34 <BSP_LCD_DisplayChar+0x84>)
 8010dfe:	4613      	mov	r3, r2
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	4413      	add	r3, r2
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	4423      	add	r3, r4
 8010e08:	3308      	adds	r3, #8
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	889b      	ldrh	r3, [r3, #4]
 8010e0e:	3307      	adds	r3, #7
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	da00      	bge.n	8010e16 <BSP_LCD_DisplayChar+0x66>
 8010e14:	3307      	adds	r3, #7
 8010e16:	10db      	asrs	r3, r3, #3
 8010e18:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8010e1c:	18ca      	adds	r2, r1, r3
 8010e1e:	88b9      	ldrh	r1, [r7, #4]
 8010e20:	88fb      	ldrh	r3, [r7, #6]
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 fa44 	bl	80112b0 <DrawChar>
}
 8010e28:	bf00      	nop
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	bd90      	pop	{r4, r7, pc}
 8010e30:	2000044c 	.word	0x2000044c
 8010e34:	20000450 	.word	0x20000450

08010e38 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8010e38:	b5b0      	push	{r4, r5, r7, lr}
 8010e3a:	b088      	sub	sp, #32
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60ba      	str	r2, [r7, #8]
 8010e40:	461a      	mov	r2, r3
 8010e42:	4603      	mov	r3, r0
 8010e44:	81fb      	strh	r3, [r7, #14]
 8010e46:	460b      	mov	r3, r1
 8010e48:	81bb      	strh	r3, [r7, #12]
 8010e4a:	4613      	mov	r3, r2
 8010e4c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	83fb      	strh	r3, [r7, #30]
 8010e52:	2300      	movs	r3, #0
 8010e54:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8010e56:	2300      	movs	r3, #0
 8010e58:	61bb      	str	r3, [r7, #24]
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8010e62:	e002      	b.n	8010e6a <BSP_LCD_DisplayStringAt+0x32>
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	3301      	adds	r3, #1
 8010e68:	61bb      	str	r3, [r7, #24]
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	1c5a      	adds	r2, r3, #1
 8010e6e:	617a      	str	r2, [r7, #20]
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d1f6      	bne.n	8010e64 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8010e76:	f7ff feab 	bl	8010bd0 <BSP_LCD_GetXSize>
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	4b50      	ldr	r3, [pc, #320]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	4850      	ldr	r0, [pc, #320]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4403      	add	r3, r0
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	889b      	ldrh	r3, [r3, #4]
 8010e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8010e96:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8010e98:	79fb      	ldrb	r3, [r7, #7]
 8010e9a:	2b03      	cmp	r3, #3
 8010e9c:	d01c      	beq.n	8010ed8 <BSP_LCD_DisplayStringAt+0xa0>
 8010e9e:	2b03      	cmp	r3, #3
 8010ea0:	dc33      	bgt.n	8010f0a <BSP_LCD_DisplayStringAt+0xd2>
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d002      	beq.n	8010eac <BSP_LCD_DisplayStringAt+0x74>
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d019      	beq.n	8010ede <BSP_LCD_DisplayStringAt+0xa6>
 8010eaa:	e02e      	b.n	8010f0a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8010eac:	693a      	ldr	r2, [r7, #16]
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	1ad1      	subs	r1, r2, r3
 8010eb2:	4b43      	ldr	r3, [pc, #268]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	4843      	ldr	r0, [pc, #268]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4403      	add	r3, r0
 8010ec2:	3308      	adds	r3, #8
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	889b      	ldrh	r3, [r3, #4]
 8010ec8:	fb03 f301 	mul.w	r3, r3, r1
 8010ecc:	085b      	lsrs	r3, r3, #1
 8010ece:	b29a      	uxth	r2, r3
 8010ed0:	89fb      	ldrh	r3, [r7, #14]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	83fb      	strh	r3, [r7, #30]
      break;
 8010ed6:	e01b      	b.n	8010f10 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8010ed8:	89fb      	ldrh	r3, [r7, #14]
 8010eda:	83fb      	strh	r3, [r7, #30]
      break;
 8010edc:	e018      	b.n	8010f10 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	1ad3      	subs	r3, r2, r3
 8010ee4:	b299      	uxth	r1, r3
 8010ee6:	4b36      	ldr	r3, [pc, #216]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	4836      	ldr	r0, [pc, #216]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010eec:	4613      	mov	r3, r2
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	4413      	add	r3, r2
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4403      	add	r3, r0
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	889b      	ldrh	r3, [r3, #4]
 8010efc:	fb11 f303 	smulbb	r3, r1, r3
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	89fb      	ldrh	r3, [r7, #14]
 8010f04:	1ad3      	subs	r3, r2, r3
 8010f06:	83fb      	strh	r3, [r7, #30]
      break;
 8010f08:	e002      	b.n	8010f10 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8010f0a:	89fb      	ldrh	r3, [r7, #14]
 8010f0c:	83fb      	strh	r3, [r7, #30]
      break;
 8010f0e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8010f10:	8bfb      	ldrh	r3, [r7, #30]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <BSP_LCD_DisplayStringAt+0xe6>
 8010f16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da1d      	bge.n	8010f5a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8010f22:	e01a      	b.n	8010f5a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	781a      	ldrb	r2, [r3, #0]
 8010f28:	89b9      	ldrh	r1, [r7, #12]
 8010f2a:	8bfb      	ldrh	r3, [r7, #30]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7ff ff3f 	bl	8010db0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8010f32:	4b23      	ldr	r3, [pc, #140]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	4923      	ldr	r1, [pc, #140]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	440b      	add	r3, r1
 8010f42:	3308      	adds	r3, #8
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	889a      	ldrh	r2, [r3, #4]
 8010f48:	8bfb      	ldrh	r3, [r7, #30]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	3301      	adds	r3, #1
 8010f52:	60bb      	str	r3, [r7, #8]
    i++;
 8010f54:	8bbb      	ldrh	r3, [r7, #28]
 8010f56:	3301      	adds	r3, #1
 8010f58:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	bf14      	ite	ne
 8010f62:	2301      	movne	r3, #1
 8010f64:	2300      	moveq	r3, #0
 8010f66:	b2dc      	uxtb	r4, r3
 8010f68:	f7ff fe32 	bl	8010bd0 <BSP_LCD_GetXSize>
 8010f6c:	8bb9      	ldrh	r1, [r7, #28]
 8010f6e:	4b14      	ldr	r3, [pc, #80]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	4d14      	ldr	r5, [pc, #80]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010f74:	4613      	mov	r3, r2
 8010f76:	005b      	lsls	r3, r3, #1
 8010f78:	4413      	add	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	442b      	add	r3, r5
 8010f7e:	3308      	adds	r3, #8
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	889b      	ldrh	r3, [r3, #4]
 8010f84:	fb03 f301 	mul.w	r3, r3, r1
 8010f88:	1ac3      	subs	r3, r0, r3
 8010f8a:	b299      	uxth	r1, r3
 8010f8c:	4b0c      	ldr	r3, [pc, #48]	; (8010fc0 <BSP_LCD_DisplayStringAt+0x188>)
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	480c      	ldr	r0, [pc, #48]	; (8010fc4 <BSP_LCD_DisplayStringAt+0x18c>)
 8010f92:	4613      	mov	r3, r2
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	4413      	add	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4403      	add	r3, r0
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	889b      	ldrh	r3, [r3, #4]
 8010fa2:	4299      	cmp	r1, r3
 8010fa4:	bf2c      	ite	cs
 8010fa6:	2301      	movcs	r3, #1
 8010fa8:	2300      	movcc	r3, #0
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	4023      	ands	r3, r4
 8010fae:	b2db      	uxtb	r3, r3
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1b7      	bne.n	8010f24 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8010fb4:	bf00      	nop
 8010fb6:	bf00      	nop
 8010fb8:	3720      	adds	r7, #32
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	2000044c 	.word	0x2000044c
 8010fc4:	20000450 	.word	0x20000450

08010fc8 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	6039      	str	r1, [r7, #0]
 8010fd2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8010fd4:	f7ff feae 	bl	8010d34 <BSP_LCD_GetFont>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	88db      	ldrh	r3, [r3, #6]
 8010fdc:	88fa      	ldrh	r2, [r7, #6]
 8010fde:	fb12 f303 	smulbb	r3, r2, r3
 8010fe2:	b299      	uxth	r1, r3
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	2000      	movs	r0, #0
 8010fea:	f7ff ff25 	bl	8010e38 <BSP_LCD_DisplayStringAt>
}
 8010fee:	bf00      	nop
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
	...

08010ff8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8010ff8:	b5b0      	push	{r4, r5, r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	4603      	mov	r3, r0
 8011000:	603a      	str	r2, [r7, #0]
 8011002:	80fb      	strh	r3, [r7, #6]
 8011004:	460b      	mov	r3, r1
 8011006:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8011008:	4b1d      	ldr	r3, [pc, #116]	; (8011080 <BSP_LCD_DrawPixel+0x88>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	4a1d      	ldr	r2, [pc, #116]	; (8011084 <BSP_LCD_DrawPixel+0x8c>)
 801100e:	2134      	movs	r1, #52	; 0x34
 8011010:	fb01 f303 	mul.w	r3, r1, r3
 8011014:	4413      	add	r3, r2
 8011016:	3348      	adds	r3, #72	; 0x48
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b02      	cmp	r3, #2
 801101c:	d116      	bne.n	801104c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 801101e:	4b18      	ldr	r3, [pc, #96]	; (8011080 <BSP_LCD_DrawPixel+0x88>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a18      	ldr	r2, [pc, #96]	; (8011084 <BSP_LCD_DrawPixel+0x8c>)
 8011024:	2134      	movs	r1, #52	; 0x34
 8011026:	fb01 f303 	mul.w	r3, r1, r3
 801102a:	4413      	add	r3, r2
 801102c:	335c      	adds	r3, #92	; 0x5c
 801102e:	681c      	ldr	r4, [r3, #0]
 8011030:	88bd      	ldrh	r5, [r7, #4]
 8011032:	f7ff fdcd 	bl	8010bd0 <BSP_LCD_GetXSize>
 8011036:	4603      	mov	r3, r0
 8011038:	fb03 f205 	mul.w	r2, r3, r5
 801103c:	88fb      	ldrh	r3, [r7, #6]
 801103e:	4413      	add	r3, r2
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	4423      	add	r3, r4
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	b292      	uxth	r2, r2
 8011048:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 801104a:	e015      	b.n	8011078 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 801104c:	4b0c      	ldr	r3, [pc, #48]	; (8011080 <BSP_LCD_DrawPixel+0x88>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	4a0c      	ldr	r2, [pc, #48]	; (8011084 <BSP_LCD_DrawPixel+0x8c>)
 8011052:	2134      	movs	r1, #52	; 0x34
 8011054:	fb01 f303 	mul.w	r3, r1, r3
 8011058:	4413      	add	r3, r2
 801105a:	335c      	adds	r3, #92	; 0x5c
 801105c:	681c      	ldr	r4, [r3, #0]
 801105e:	88bd      	ldrh	r5, [r7, #4]
 8011060:	f7ff fdb6 	bl	8010bd0 <BSP_LCD_GetXSize>
 8011064:	4603      	mov	r3, r0
 8011066:	fb03 f205 	mul.w	r2, r3, r5
 801106a:	88fb      	ldrh	r3, [r7, #6]
 801106c:	4413      	add	r3, r2
 801106e:	009b      	lsls	r3, r3, #2
 8011070:	4423      	add	r3, r4
 8011072:	461a      	mov	r2, r3
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	6013      	str	r3, [r2, #0]
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bdb0      	pop	{r4, r5, r7, pc}
 8011080:	2000044c 	.word	0x2000044c
 8011084:	20009944 	.word	0x20009944

08011088 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 801108c:	4b0a      	ldr	r3, [pc, #40]	; (80110b8 <BSP_LCD_DisplayOn+0x30>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	699a      	ldr	r2, [r3, #24]
 8011092:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <BSP_LCD_DisplayOn+0x30>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f042 0201 	orr.w	r2, r2, #1
 801109a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 801109c:	2201      	movs	r2, #1
 801109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80110a2:	4806      	ldr	r0, [pc, #24]	; (80110bc <BSP_LCD_DisplayOn+0x34>)
 80110a4:	f7f5 f826 	bl	80060f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80110a8:	2201      	movs	r2, #1
 80110aa:	2108      	movs	r1, #8
 80110ac:	4804      	ldr	r0, [pc, #16]	; (80110c0 <BSP_LCD_DisplayOn+0x38>)
 80110ae:	f7f5 f821 	bl	80060f4 <HAL_GPIO_WritePin>
}
 80110b2:	bf00      	nop
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20009944 	.word	0x20009944
 80110bc:	40022000 	.word	0x40022000
 80110c0:	40022800 	.word	0x40022800

080110c4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b090      	sub	sp, #64	; 0x40
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80110ce:	4b64      	ldr	r3, [pc, #400]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110d2:	4a63      	ldr	r2, [pc, #396]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80110d8:	6453      	str	r3, [r2, #68]	; 0x44
 80110da:	4b61      	ldr	r3, [pc, #388]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80110e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80110e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80110e6:	4b5e      	ldr	r3, [pc, #376]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ea:	4a5d      	ldr	r2, [pc, #372]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80110f0:	6313      	str	r3, [r2, #48]	; 0x30
 80110f2:	4b5b      	ldr	r3, [pc, #364]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 80110f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80110fa:	627b      	str	r3, [r7, #36]	; 0x24
 80110fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80110fe:	4b58      	ldr	r3, [pc, #352]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011102:	4a57      	ldr	r2, [pc, #348]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011104:	f043 0310 	orr.w	r3, r3, #16
 8011108:	6313      	str	r3, [r2, #48]	; 0x30
 801110a:	4b55      	ldr	r3, [pc, #340]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801110e:	f003 0310 	and.w	r3, r3, #16
 8011112:	623b      	str	r3, [r7, #32]
 8011114:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011116:	4b52      	ldr	r3, [pc, #328]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801111a:	4a51      	ldr	r2, [pc, #324]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801111c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011120:	6313      	str	r3, [r2, #48]	; 0x30
 8011122:	4b4f      	ldr	r3, [pc, #316]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801112a:	61fb      	str	r3, [r7, #28]
 801112c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801112e:	4b4c      	ldr	r3, [pc, #304]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011132:	4a4b      	ldr	r2, [pc, #300]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011138:	6313      	str	r3, [r2, #48]	; 0x30
 801113a:	4b49      	ldr	r3, [pc, #292]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011142:	61bb      	str	r3, [r7, #24]
 8011144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8011146:	4b46      	ldr	r3, [pc, #280]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801114a:	4a45      	ldr	r2, [pc, #276]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801114c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011150:	6313      	str	r3, [r2, #48]	; 0x30
 8011152:	4b43      	ldr	r3, [pc, #268]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801115a:	617b      	str	r3, [r7, #20]
 801115c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801115e:	4b40      	ldr	r3, [pc, #256]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011162:	4a3f      	ldr	r2, [pc, #252]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011168:	6313      	str	r3, [r2, #48]	; 0x30
 801116a:	4b3d      	ldr	r3, [pc, #244]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011172:	613b      	str	r3, [r7, #16]
 8011174:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8011176:	4b3a      	ldr	r3, [pc, #232]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117a:	4a39      	ldr	r2, [pc, #228]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011180:	6313      	str	r3, [r2, #48]	; 0x30
 8011182:	4b37      	ldr	r3, [pc, #220]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 801118e:	4b34      	ldr	r3, [pc, #208]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011192:	4a33      	ldr	r2, [pc, #204]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 8011194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011198:	6313      	str	r3, [r2, #48]	; 0x30
 801119a:	4b31      	ldr	r3, [pc, #196]	; (8011260 <BSP_LCD_MspInit+0x19c>)
 801119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801119e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80111a2:	60bb      	str	r3, [r7, #8]
 80111a4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80111a6:	2310      	movs	r3, #16
 80111a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80111aa:	2302      	movs	r3, #2
 80111ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80111ae:	2300      	movs	r3, #0
 80111b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80111b2:	2302      	movs	r3, #2
 80111b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80111b6:	230e      	movs	r3, #14
 80111b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80111ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111be:	4619      	mov	r1, r3
 80111c0:	4828      	ldr	r0, [pc, #160]	; (8011264 <BSP_LCD_MspInit+0x1a0>)
 80111c2:	f7f4 fcc7 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80111c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80111cc:	2302      	movs	r3, #2
 80111ce:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80111d0:	2309      	movs	r3, #9
 80111d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80111d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111d8:	4619      	mov	r1, r3
 80111da:	4823      	ldr	r0, [pc, #140]	; (8011268 <BSP_LCD_MspInit+0x1a4>)
 80111dc:	f7f4 fcba 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80111e0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80111e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80111e6:	2302      	movs	r3, #2
 80111e8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80111ea:	230e      	movs	r3, #14
 80111ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80111ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111f2:	4619      	mov	r1, r3
 80111f4:	481d      	ldr	r0, [pc, #116]	; (801126c <BSP_LCD_MspInit+0x1a8>)
 80111f6:	f7f4 fcad 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80111fa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80111fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011200:	2302      	movs	r3, #2
 8011202:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8011204:	230e      	movs	r3, #14
 8011206:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8011208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801120c:	4619      	mov	r1, r3
 801120e:	4818      	ldr	r0, [pc, #96]	; (8011270 <BSP_LCD_MspInit+0x1ac>)
 8011210:	f7f4 fca0 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8011214:	23f7      	movs	r3, #247	; 0xf7
 8011216:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011218:	2302      	movs	r3, #2
 801121a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 801121c:	230e      	movs	r3, #14
 801121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8011220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011224:	4619      	mov	r1, r3
 8011226:	4813      	ldr	r0, [pc, #76]	; (8011274 <BSP_LCD_MspInit+0x1b0>)
 8011228:	f7f4 fc94 	bl	8005b54 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 801122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011230:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8011232:	2301      	movs	r3, #1
 8011234:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8011236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801123a:	4619      	mov	r1, r3
 801123c:	480b      	ldr	r0, [pc, #44]	; (801126c <BSP_LCD_MspInit+0x1a8>)
 801123e:	f7f4 fc89 	bl	8005b54 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8011242:	2308      	movs	r3, #8
 8011244:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8011246:	2301      	movs	r3, #1
 8011248:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 801124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801124e:	4619      	mov	r1, r3
 8011250:	4808      	ldr	r0, [pc, #32]	; (8011274 <BSP_LCD_MspInit+0x1b0>)
 8011252:	f7f4 fc7f 	bl	8005b54 <HAL_GPIO_Init>
}
 8011256:	bf00      	nop
 8011258:	3740      	adds	r7, #64	; 0x40
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	40023800 	.word	0x40023800
 8011264:	40021000 	.word	0x40021000
 8011268:	40021800 	.word	0x40021800
 801126c:	40022000 	.word	0x40022000
 8011270:	40022400 	.word	0x40022400
 8011274:	40022800 	.word	0x40022800

08011278 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8011282:	4b0a      	ldr	r3, [pc, #40]	; (80112ac <BSP_LCD_ClockConfig+0x34>)
 8011284:	2208      	movs	r2, #8
 8011286:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8011288:	4b08      	ldr	r3, [pc, #32]	; (80112ac <BSP_LCD_ClockConfig+0x34>)
 801128a:	22c0      	movs	r2, #192	; 0xc0
 801128c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 801128e:	4b07      	ldr	r3, [pc, #28]	; (80112ac <BSP_LCD_ClockConfig+0x34>)
 8011290:	2205      	movs	r2, #5
 8011292:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8011294:	4b05      	ldr	r3, [pc, #20]	; (80112ac <BSP_LCD_ClockConfig+0x34>)
 8011296:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801129a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 801129c:	4803      	ldr	r0, [pc, #12]	; (80112ac <BSP_LCD_ClockConfig+0x34>)
 801129e:	f7f8 faf9 	bl	8009894 <HAL_RCCEx_PeriphCLKConfig>
}
 80112a2:	bf00      	nop
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	20000468 	.word	0x20000468

080112b0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b088      	sub	sp, #32
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	603a      	str	r2, [r7, #0]
 80112ba:	80fb      	strh	r3, [r7, #6]
 80112bc:	460b      	mov	r3, r1
 80112be:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80112c0:	2300      	movs	r3, #0
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	2300      	movs	r3, #0
 80112c6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80112c8:	4b53      	ldr	r3, [pc, #332]	; (8011418 <DrawChar+0x168>)
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	4953      	ldr	r1, [pc, #332]	; (801141c <DrawChar+0x16c>)
 80112ce:	4613      	mov	r3, r2
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	4413      	add	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	440b      	add	r3, r1
 80112d8:	3308      	adds	r3, #8
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	88db      	ldrh	r3, [r3, #6]
 80112de:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80112e0:	4b4d      	ldr	r3, [pc, #308]	; (8011418 <DrawChar+0x168>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	494d      	ldr	r1, [pc, #308]	; (801141c <DrawChar+0x16c>)
 80112e6:	4613      	mov	r3, r2
 80112e8:	005b      	lsls	r3, r3, #1
 80112ea:	4413      	add	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	440b      	add	r3, r1
 80112f0:	3308      	adds	r3, #8
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	889b      	ldrh	r3, [r3, #4]
 80112f6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80112f8:	8a3b      	ldrh	r3, [r7, #16]
 80112fa:	3307      	adds	r3, #7
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da00      	bge.n	8011302 <DrawChar+0x52>
 8011300:	3307      	adds	r3, #7
 8011302:	10db      	asrs	r3, r3, #3
 8011304:	b2db      	uxtb	r3, r3
 8011306:	00db      	lsls	r3, r3, #3
 8011308:	b2da      	uxtb	r2, r3
 801130a:	8a3b      	ldrh	r3, [r7, #16]
 801130c:	b2db      	uxtb	r3, r3
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8011312:	2300      	movs	r3, #0
 8011314:	61fb      	str	r3, [r7, #28]
 8011316:	e076      	b.n	8011406 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8011318:	8a3b      	ldrh	r3, [r7, #16]
 801131a:	3307      	adds	r3, #7
 801131c:	2b00      	cmp	r3, #0
 801131e:	da00      	bge.n	8011322 <DrawChar+0x72>
 8011320:	3307      	adds	r3, #7
 8011322:	10db      	asrs	r3, r3, #3
 8011324:	461a      	mov	r2, r3
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	fb03 f302 	mul.w	r3, r3, r2
 801132c:	683a      	ldr	r2, [r7, #0]
 801132e:	4413      	add	r3, r2
 8011330:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8011332:	8a3b      	ldrh	r3, [r7, #16]
 8011334:	3307      	adds	r3, #7
 8011336:	2b00      	cmp	r3, #0
 8011338:	da00      	bge.n	801133c <DrawChar+0x8c>
 801133a:	3307      	adds	r3, #7
 801133c:	10db      	asrs	r3, r3, #3
 801133e:	2b01      	cmp	r3, #1
 8011340:	d002      	beq.n	8011348 <DrawChar+0x98>
 8011342:	2b02      	cmp	r3, #2
 8011344:	d004      	beq.n	8011350 <DrawChar+0xa0>
 8011346:	e00c      	b.n	8011362 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	617b      	str	r3, [r7, #20]
      break;
 801134e:	e016      	b.n	801137e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	021b      	lsls	r3, r3, #8
 8011356:	68ba      	ldr	r2, [r7, #8]
 8011358:	3201      	adds	r2, #1
 801135a:	7812      	ldrb	r2, [r2, #0]
 801135c:	4313      	orrs	r3, r2
 801135e:	617b      	str	r3, [r7, #20]
      break;
 8011360:	e00d      	b.n	801137e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	041a      	lsls	r2, r3, #16
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	3301      	adds	r3, #1
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	021b      	lsls	r3, r3, #8
 8011370:	4313      	orrs	r3, r2
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	3202      	adds	r2, #2
 8011376:	7812      	ldrb	r2, [r2, #0]
 8011378:	4313      	orrs	r3, r2
 801137a:	617b      	str	r3, [r7, #20]
      break;
 801137c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 801137e:	2300      	movs	r3, #0
 8011380:	61bb      	str	r3, [r7, #24]
 8011382:	e036      	b.n	80113f2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8011384:	8a3a      	ldrh	r2, [r7, #16]
 8011386:	69bb      	ldr	r3, [r7, #24]
 8011388:	1ad2      	subs	r2, r2, r3
 801138a:	7bfb      	ldrb	r3, [r7, #15]
 801138c:	4413      	add	r3, r2
 801138e:	3b01      	subs	r3, #1
 8011390:	2201      	movs	r2, #1
 8011392:	fa02 f303 	lsl.w	r3, r2, r3
 8011396:	461a      	mov	r2, r3
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	4013      	ands	r3, r2
 801139c:	2b00      	cmp	r3, #0
 801139e:	d012      	beq.n	80113c6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	88fb      	ldrh	r3, [r7, #6]
 80113a6:	4413      	add	r3, r2
 80113a8:	b298      	uxth	r0, r3
 80113aa:	4b1b      	ldr	r3, [pc, #108]	; (8011418 <DrawChar+0x168>)
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	491b      	ldr	r1, [pc, #108]	; (801141c <DrawChar+0x16c>)
 80113b0:	4613      	mov	r3, r2
 80113b2:	005b      	lsls	r3, r3, #1
 80113b4:	4413      	add	r3, r2
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	440b      	add	r3, r1
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	88bb      	ldrh	r3, [r7, #4]
 80113be:	4619      	mov	r1, r3
 80113c0:	f7ff fe1a 	bl	8010ff8 <BSP_LCD_DrawPixel>
 80113c4:	e012      	b.n	80113ec <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	b29a      	uxth	r2, r3
 80113ca:	88fb      	ldrh	r3, [r7, #6]
 80113cc:	4413      	add	r3, r2
 80113ce:	b298      	uxth	r0, r3
 80113d0:	4b11      	ldr	r3, [pc, #68]	; (8011418 <DrawChar+0x168>)
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	4911      	ldr	r1, [pc, #68]	; (801141c <DrawChar+0x16c>)
 80113d6:	4613      	mov	r3, r2
 80113d8:	005b      	lsls	r3, r3, #1
 80113da:	4413      	add	r3, r2
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	440b      	add	r3, r1
 80113e0:	3304      	adds	r3, #4
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	88bb      	ldrh	r3, [r7, #4]
 80113e6:	4619      	mov	r1, r3
 80113e8:	f7ff fe06 	bl	8010ff8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80113ec:	69bb      	ldr	r3, [r7, #24]
 80113ee:	3301      	adds	r3, #1
 80113f0:	61bb      	str	r3, [r7, #24]
 80113f2:	8a3b      	ldrh	r3, [r7, #16]
 80113f4:	69ba      	ldr	r2, [r7, #24]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d3c4      	bcc.n	8011384 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80113fa:	88bb      	ldrh	r3, [r7, #4]
 80113fc:	3301      	adds	r3, #1
 80113fe:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8011400:	69fb      	ldr	r3, [r7, #28]
 8011402:	3301      	adds	r3, #1
 8011404:	61fb      	str	r3, [r7, #28]
 8011406:	8a7b      	ldrh	r3, [r7, #18]
 8011408:	69fa      	ldr	r2, [r7, #28]
 801140a:	429a      	cmp	r2, r3
 801140c:	d384      	bcc.n	8011318 <DrawChar+0x68>
  }
}
 801140e:	bf00      	nop
 8011410:	bf00      	nop
 8011412:	3720      	adds	r7, #32
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	2000044c 	.word	0x2000044c
 801141c:	20000450 	.word	0x20000450

08011420 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af02      	add	r7, sp, #8
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
 801142c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 801142e:	4b1e      	ldr	r3, [pc, #120]	; (80114a8 <LL_FillBuffer+0x88>)
 8011430:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8011434:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8011436:	4b1d      	ldr	r3, [pc, #116]	; (80114ac <LL_FillBuffer+0x8c>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	4a1d      	ldr	r2, [pc, #116]	; (80114b0 <LL_FillBuffer+0x90>)
 801143c:	2134      	movs	r1, #52	; 0x34
 801143e:	fb01 f303 	mul.w	r3, r1, r3
 8011442:	4413      	add	r3, r2
 8011444:	3348      	adds	r3, #72	; 0x48
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b02      	cmp	r3, #2
 801144a:	d103      	bne.n	8011454 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 801144c:	4b16      	ldr	r3, [pc, #88]	; (80114a8 <LL_FillBuffer+0x88>)
 801144e:	2202      	movs	r2, #2
 8011450:	609a      	str	r2, [r3, #8]
 8011452:	e002      	b.n	801145a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8011454:	4b14      	ldr	r3, [pc, #80]	; (80114a8 <LL_FillBuffer+0x88>)
 8011456:	2200      	movs	r2, #0
 8011458:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 801145a:	4a13      	ldr	r2, [pc, #76]	; (80114a8 <LL_FillBuffer+0x88>)
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8011460:	4b11      	ldr	r3, [pc, #68]	; (80114a8 <LL_FillBuffer+0x88>)
 8011462:	4a14      	ldr	r2, [pc, #80]	; (80114b4 <LL_FillBuffer+0x94>)
 8011464:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8011466:	4810      	ldr	r0, [pc, #64]	; (80114a8 <LL_FillBuffer+0x88>)
 8011468:	f7f2 fe54 	bl	8004114 <HAL_DMA2D_Init>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	d115      	bne.n	801149e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8011472:	68f9      	ldr	r1, [r7, #12]
 8011474:	480c      	ldr	r0, [pc, #48]	; (80114a8 <LL_FillBuffer+0x88>)
 8011476:	f7f3 f8bb 	bl	80045f0 <HAL_DMA2D_ConfigLayer>
 801147a:	4603      	mov	r3, r0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10e      	bne.n	801149e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8011480:	68ba      	ldr	r2, [r7, #8]
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	69f9      	ldr	r1, [r7, #28]
 801148a:	4807      	ldr	r0, [pc, #28]	; (80114a8 <LL_FillBuffer+0x88>)
 801148c:	f7f2 fe8c 	bl	80041a8 <HAL_DMA2D_Start>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	d103      	bne.n	801149e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8011496:	210a      	movs	r1, #10
 8011498:	4803      	ldr	r0, [pc, #12]	; (80114a8 <LL_FillBuffer+0x88>)
 801149a:	f7f2 feb0 	bl	80041fe <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 801149e:	bf00      	nop
 80114a0:	3710      	adds	r7, #16
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	2000040c 	.word	0x2000040c
 80114ac:	2000044c 	.word	0x2000044c
 80114b0:	20009944 	.word	0x20009944
 80114b4:	4002b000 	.word	0x4002b000

080114b8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80114b8:	b580      	push	{r7, lr}
 80114ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80114bc:	4b29      	ldr	r3, [pc, #164]	; (8011564 <BSP_SDRAM_Init+0xac>)
 80114be:	4a2a      	ldr	r2, [pc, #168]	; (8011568 <BSP_SDRAM_Init+0xb0>)
 80114c0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80114c2:	4b2a      	ldr	r3, [pc, #168]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114c4:	2202      	movs	r2, #2
 80114c6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80114c8:	4b28      	ldr	r3, [pc, #160]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114ca:	2207      	movs	r2, #7
 80114cc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80114ce:	4b27      	ldr	r3, [pc, #156]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114d0:	2204      	movs	r2, #4
 80114d2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80114d4:	4b25      	ldr	r3, [pc, #148]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114d6:	2207      	movs	r2, #7
 80114d8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80114da:	4b24      	ldr	r3, [pc, #144]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114dc:	2202      	movs	r2, #2
 80114de:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80114e0:	4b22      	ldr	r3, [pc, #136]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114e2:	2202      	movs	r2, #2
 80114e4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80114e6:	4b21      	ldr	r3, [pc, #132]	; (801156c <BSP_SDRAM_Init+0xb4>)
 80114e8:	2202      	movs	r2, #2
 80114ea:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80114ec:	4b1d      	ldr	r3, [pc, #116]	; (8011564 <BSP_SDRAM_Init+0xac>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80114f2:	4b1c      	ldr	r3, [pc, #112]	; (8011564 <BSP_SDRAM_Init+0xac>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80114f8:	4b1a      	ldr	r3, [pc, #104]	; (8011564 <BSP_SDRAM_Init+0xac>)
 80114fa:	2204      	movs	r2, #4
 80114fc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80114fe:	4b19      	ldr	r3, [pc, #100]	; (8011564 <BSP_SDRAM_Init+0xac>)
 8011500:	2210      	movs	r2, #16
 8011502:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8011504:	4b17      	ldr	r3, [pc, #92]	; (8011564 <BSP_SDRAM_Init+0xac>)
 8011506:	2240      	movs	r2, #64	; 0x40
 8011508:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 801150a:	4b16      	ldr	r3, [pc, #88]	; (8011564 <BSP_SDRAM_Init+0xac>)
 801150c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011510:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8011512:	4b14      	ldr	r3, [pc, #80]	; (8011564 <BSP_SDRAM_Init+0xac>)
 8011514:	2200      	movs	r2, #0
 8011516:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8011518:	4b12      	ldr	r3, [pc, #72]	; (8011564 <BSP_SDRAM_Init+0xac>)
 801151a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801151e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8011520:	4b10      	ldr	r3, [pc, #64]	; (8011564 <BSP_SDRAM_Init+0xac>)
 8011522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011526:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8011528:	4b0e      	ldr	r3, [pc, #56]	; (8011564 <BSP_SDRAM_Init+0xac>)
 801152a:	2200      	movs	r2, #0
 801152c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 801152e:	2100      	movs	r1, #0
 8011530:	480c      	ldr	r0, [pc, #48]	; (8011564 <BSP_SDRAM_Init+0xac>)
 8011532:	f000 f87f 	bl	8011634 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8011536:	490d      	ldr	r1, [pc, #52]	; (801156c <BSP_SDRAM_Init+0xb4>)
 8011538:	480a      	ldr	r0, [pc, #40]	; (8011564 <BSP_SDRAM_Init+0xac>)
 801153a:	f7fa fd0c 	bl	800bf56 <HAL_SDRAM_Init>
 801153e:	4603      	mov	r3, r0
 8011540:	2b00      	cmp	r3, #0
 8011542:	d003      	beq.n	801154c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8011544:	4b0a      	ldr	r3, [pc, #40]	; (8011570 <BSP_SDRAM_Init+0xb8>)
 8011546:	2201      	movs	r2, #1
 8011548:	701a      	strb	r2, [r3, #0]
 801154a:	e002      	b.n	8011552 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 801154c:	4b08      	ldr	r3, [pc, #32]	; (8011570 <BSP_SDRAM_Init+0xb8>)
 801154e:	2200      	movs	r2, #0
 8011550:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8011552:	f240 6003 	movw	r0, #1539	; 0x603
 8011556:	f000 f80d 	bl	8011574 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 801155a:	4b05      	ldr	r3, [pc, #20]	; (8011570 <BSP_SDRAM_Init+0xb8>)
 801155c:	781b      	ldrb	r3, [r3, #0]
}
 801155e:	4618      	mov	r0, r3
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	200099ec 	.word	0x200099ec
 8011568:	a0000140 	.word	0xa0000140
 801156c:	200004ec 	.word	0x200004ec
 8011570:	2000003c 	.word	0x2000003c

08011574 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8011580:	4b2a      	ldr	r3, [pc, #168]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011582:	2201      	movs	r2, #1
 8011584:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8011586:	4b29      	ldr	r3, [pc, #164]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011588:	2210      	movs	r2, #16
 801158a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801158c:	4b27      	ldr	r3, [pc, #156]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 801158e:	2201      	movs	r2, #1
 8011590:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8011592:	4b26      	ldr	r3, [pc, #152]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011594:	2200      	movs	r2, #0
 8011596:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8011598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801159c:	4923      	ldr	r1, [pc, #140]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 801159e:	4824      	ldr	r0, [pc, #144]	; (8011630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80115a0:	f7fa fd0d 	bl	800bfbe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80115a4:	2001      	movs	r0, #1
 80115a6:	f7f1 fdcd 	bl	8003144 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80115aa:	4b20      	ldr	r3, [pc, #128]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115ac:	2202      	movs	r2, #2
 80115ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80115b0:	4b1e      	ldr	r3, [pc, #120]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115b2:	2210      	movs	r2, #16
 80115b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80115b6:	4b1d      	ldr	r3, [pc, #116]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115b8:	2201      	movs	r2, #1
 80115ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80115bc:	4b1b      	ldr	r3, [pc, #108]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115be:	2200      	movs	r2, #0
 80115c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80115c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115c6:	4919      	ldr	r1, [pc, #100]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115c8:	4819      	ldr	r0, [pc, #100]	; (8011630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80115ca:	f7fa fcf8 	bl	800bfbe <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80115ce:	4b17      	ldr	r3, [pc, #92]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115d0:	2203      	movs	r2, #3
 80115d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80115d4:	4b15      	ldr	r3, [pc, #84]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115d6:	2210      	movs	r2, #16
 80115d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80115da:	4b14      	ldr	r3, [pc, #80]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115dc:	2208      	movs	r2, #8
 80115de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80115e0:	4b12      	ldr	r3, [pc, #72]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115e2:	2200      	movs	r2, #0
 80115e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80115e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115ea:	4910      	ldr	r1, [pc, #64]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115ec:	4810      	ldr	r0, [pc, #64]	; (8011630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80115ee:	f7fa fce6 	bl	800bfbe <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80115f2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80115f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80115f8:	4b0c      	ldr	r3, [pc, #48]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80115fa:	2204      	movs	r2, #4
 80115fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80115fe:	4b0b      	ldr	r3, [pc, #44]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011600:	2210      	movs	r2, #16
 8011602:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8011604:	4b09      	ldr	r3, [pc, #36]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011606:	2201      	movs	r2, #1
 8011608:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	4a07      	ldr	r2, [pc, #28]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 801160e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8011610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011614:	4905      	ldr	r1, [pc, #20]	; (801162c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8011616:	4806      	ldr	r0, [pc, #24]	; (8011630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011618:	f7fa fcd1 	bl	800bfbe <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 801161c:	6879      	ldr	r1, [r7, #4]
 801161e:	4804      	ldr	r0, [pc, #16]	; (8011630 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8011620:	f7fa fd02 	bl	800c028 <HAL_SDRAM_ProgramRefreshRate>
}
 8011624:	bf00      	nop
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	20000508 	.word	0x20000508
 8011630:	200099ec 	.word	0x200099ec

08011634 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8011634:	b580      	push	{r7, lr}
 8011636:	b090      	sub	sp, #64	; 0x40
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 801163e:	4b70      	ldr	r3, [pc, #448]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011642:	4a6f      	ldr	r2, [pc, #444]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011644:	f043 0301 	orr.w	r3, r3, #1
 8011648:	6393      	str	r3, [r2, #56]	; 0x38
 801164a:	4b6d      	ldr	r3, [pc, #436]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 801164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801164e:	f003 0301 	and.w	r3, r3, #1
 8011652:	62bb      	str	r3, [r7, #40]	; 0x28
 8011654:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8011656:	4b6a      	ldr	r3, [pc, #424]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165a:	4a69      	ldr	r2, [pc, #420]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 801165c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011660:	6313      	str	r3, [r2, #48]	; 0x30
 8011662:	4b67      	ldr	r3, [pc, #412]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801166a:	627b      	str	r3, [r7, #36]	; 0x24
 801166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801166e:	4b64      	ldr	r3, [pc, #400]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011672:	4a63      	ldr	r2, [pc, #396]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011674:	f043 0304 	orr.w	r3, r3, #4
 8011678:	6313      	str	r3, [r2, #48]	; 0x30
 801167a:	4b61      	ldr	r3, [pc, #388]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 801167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801167e:	f003 0304 	and.w	r3, r3, #4
 8011682:	623b      	str	r3, [r7, #32]
 8011684:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011686:	4b5e      	ldr	r3, [pc, #376]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801168a:	4a5d      	ldr	r2, [pc, #372]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 801168c:	f043 0308 	orr.w	r3, r3, #8
 8011690:	6313      	str	r3, [r2, #48]	; 0x30
 8011692:	4b5b      	ldr	r3, [pc, #364]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 8011694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011696:	f003 0308 	and.w	r3, r3, #8
 801169a:	61fb      	str	r3, [r7, #28]
 801169c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801169e:	4b58      	ldr	r3, [pc, #352]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116a2:	4a57      	ldr	r2, [pc, #348]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116a4:	f043 0310 	orr.w	r3, r3, #16
 80116a8:	6313      	str	r3, [r2, #48]	; 0x30
 80116aa:	4b55      	ldr	r3, [pc, #340]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	f003 0310 	and.w	r3, r3, #16
 80116b2:	61bb      	str	r3, [r7, #24]
 80116b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80116b6:	4b52      	ldr	r3, [pc, #328]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	4a51      	ldr	r2, [pc, #324]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116bc:	f043 0320 	orr.w	r3, r3, #32
 80116c0:	6313      	str	r3, [r2, #48]	; 0x30
 80116c2:	4b4f      	ldr	r3, [pc, #316]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116c6:	f003 0320 	and.w	r3, r3, #32
 80116ca:	617b      	str	r3, [r7, #20]
 80116cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80116ce:	4b4c      	ldr	r3, [pc, #304]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d2:	4a4b      	ldr	r2, [pc, #300]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d8:	6313      	str	r3, [r2, #48]	; 0x30
 80116da:	4b49      	ldr	r3, [pc, #292]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116e2:	613b      	str	r3, [r7, #16]
 80116e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116e6:	4b46      	ldr	r3, [pc, #280]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ea:	4a45      	ldr	r2, [pc, #276]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116f0:	6313      	str	r3, [r2, #48]	; 0x30
 80116f2:	4b43      	ldr	r3, [pc, #268]	; (8011800 <BSP_SDRAM_MspInit+0x1cc>)
 80116f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116fa:	60fb      	str	r3, [r7, #12]
 80116fc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80116fe:	2302      	movs	r3, #2
 8011700:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8011702:	2301      	movs	r3, #1
 8011704:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8011706:	2302      	movs	r3, #2
 8011708:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801170a:	230c      	movs	r3, #12
 801170c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 801170e:	2308      	movs	r3, #8
 8011710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8011712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011716:	4619      	mov	r1, r3
 8011718:	483a      	ldr	r0, [pc, #232]	; (8011804 <BSP_SDRAM_MspInit+0x1d0>)
 801171a:	f7f4 fa1b 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 801171e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8011722:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8011724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011728:	4619      	mov	r1, r3
 801172a:	4837      	ldr	r0, [pc, #220]	; (8011808 <BSP_SDRAM_MspInit+0x1d4>)
 801172c:	f7f4 fa12 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8011730:	f64f 7383 	movw	r3, #65411	; 0xff83
 8011734:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8011736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801173a:	4619      	mov	r1, r3
 801173c:	4833      	ldr	r0, [pc, #204]	; (801180c <BSP_SDRAM_MspInit+0x1d8>)
 801173e:	f7f4 fa09 	bl	8005b54 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8011742:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8011746:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8011748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801174c:	4619      	mov	r1, r3
 801174e:	4830      	ldr	r0, [pc, #192]	; (8011810 <BSP_SDRAM_MspInit+0x1dc>)
 8011750:	f7f4 fa00 	bl	8005b54 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8011754:	f248 1333 	movw	r3, #33075	; 0x8133
 8011758:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801175a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801175e:	4619      	mov	r1, r3
 8011760:	482c      	ldr	r0, [pc, #176]	; (8011814 <BSP_SDRAM_MspInit+0x1e0>)
 8011762:	f7f4 f9f7 	bl	8005b54 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8011766:	2328      	movs	r3, #40	; 0x28
 8011768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 801176a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801176e:	4619      	mov	r1, r3
 8011770:	4829      	ldr	r0, [pc, #164]	; (8011818 <BSP_SDRAM_MspInit+0x1e4>)
 8011772:	f7f4 f9ef 	bl	8005b54 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8011776:	4b29      	ldr	r3, [pc, #164]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 8011778:	2200      	movs	r2, #0
 801177a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 801177c:	4b27      	ldr	r3, [pc, #156]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 801177e:	2280      	movs	r2, #128	; 0x80
 8011780:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8011782:	4b26      	ldr	r3, [pc, #152]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 8011784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011788:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 801178a:	4b24      	ldr	r3, [pc, #144]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 801178c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011790:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8011792:	4b22      	ldr	r3, [pc, #136]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 8011794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011798:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 801179a:	4b20      	ldr	r3, [pc, #128]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 801179c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80117a0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80117a2:	4b1e      	ldr	r3, [pc, #120]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80117a8:	4b1c      	ldr	r3, [pc, #112]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80117ae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80117b0:	4b1a      	ldr	r3, [pc, #104]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80117b6:	4b19      	ldr	r3, [pc, #100]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117b8:	2203      	movs	r2, #3
 80117ba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80117bc:	4b17      	ldr	r3, [pc, #92]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117be:	2200      	movs	r2, #0
 80117c0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80117c2:	4b16      	ldr	r3, [pc, #88]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117c4:	2200      	movs	r2, #0
 80117c6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80117c8:	4b14      	ldr	r3, [pc, #80]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117ca:	4a15      	ldr	r2, [pc, #84]	; (8011820 <BSP_SDRAM_MspInit+0x1ec>)
 80117cc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	4a12      	ldr	r2, [pc, #72]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117d2:	631a      	str	r2, [r3, #48]	; 0x30
 80117d4:	4a11      	ldr	r2, [pc, #68]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80117da:	4810      	ldr	r0, [pc, #64]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117dc:	f7f2 fa5e 	bl	8003c9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80117e0:	480e      	ldr	r0, [pc, #56]	; (801181c <BSP_SDRAM_MspInit+0x1e8>)
 80117e2:	f7f2 f9ad 	bl	8003b40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80117e6:	2200      	movs	r2, #0
 80117e8:	210f      	movs	r1, #15
 80117ea:	2038      	movs	r0, #56	; 0x38
 80117ec:	f7f2 f81a 	bl	8003824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80117f0:	2038      	movs	r0, #56	; 0x38
 80117f2:	f7f2 f833 	bl	800385c <HAL_NVIC_EnableIRQ>
}
 80117f6:	bf00      	nop
 80117f8:	3740      	adds	r7, #64	; 0x40
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	40023800 	.word	0x40023800
 8011804:	40020800 	.word	0x40020800
 8011808:	40020c00 	.word	0x40020c00
 801180c:	40021000 	.word	0x40021000
 8011810:	40021400 	.word	0x40021400
 8011814:	40021800 	.word	0x40021800
 8011818:	40021c00 	.word	0x40021c00
 801181c:	20000518 	.word	0x20000518
 8011820:	40026410 	.word	0x40026410

08011824 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b084      	sub	sp, #16
 8011828:	af00      	add	r7, sp, #0
 801182a:	4603      	mov	r3, r0
 801182c:	460a      	mov	r2, r1
 801182e:	80fb      	strh	r3, [r7, #6]
 8011830:	4613      	mov	r3, r2
 8011832:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8011838:	4a14      	ldr	r2, [pc, #80]	; (801188c <BSP_TS_Init+0x68>)
 801183a:	88fb      	ldrh	r3, [r7, #6]
 801183c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 801183e:	4a14      	ldr	r2, [pc, #80]	; (8011890 <BSP_TS_Init+0x6c>)
 8011840:	88bb      	ldrh	r3, [r7, #4]
 8011842:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8011844:	4b13      	ldr	r3, [pc, #76]	; (8011894 <BSP_TS_Init+0x70>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	2070      	movs	r0, #112	; 0x70
 801184a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 801184c:	4b11      	ldr	r3, [pc, #68]	; (8011894 <BSP_TS_Init+0x70>)
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	2070      	movs	r0, #112	; 0x70
 8011852:	4798      	blx	r3
 8011854:	4603      	mov	r3, r0
 8011856:	2b51      	cmp	r3, #81	; 0x51
 8011858:	d111      	bne.n	801187e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 801185a:	4b0f      	ldr	r3, [pc, #60]	; (8011898 <BSP_TS_Init+0x74>)
 801185c:	4a0d      	ldr	r2, [pc, #52]	; (8011894 <BSP_TS_Init+0x70>)
 801185e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8011860:	4b0e      	ldr	r3, [pc, #56]	; (801189c <BSP_TS_Init+0x78>)
 8011862:	2270      	movs	r2, #112	; 0x70
 8011864:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8011866:	4b0e      	ldr	r3, [pc, #56]	; (80118a0 <BSP_TS_Init+0x7c>)
 8011868:	2208      	movs	r2, #8
 801186a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 801186c:	4b0a      	ldr	r3, [pc, #40]	; (8011898 <BSP_TS_Init+0x74>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	4a0a      	ldr	r2, [pc, #40]	; (801189c <BSP_TS_Init+0x78>)
 8011874:	7812      	ldrb	r2, [r2, #0]
 8011876:	b292      	uxth	r2, r2
 8011878:	4610      	mov	r0, r2
 801187a:	4798      	blx	r3
 801187c:	e001      	b.n	8011882 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 801187e:	2303      	movs	r3, #3
 8011880:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011882:	7bfb      	ldrb	r3, [r7, #15]
}
 8011884:	4618      	mov	r0, r3
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	2000057c 	.word	0x2000057c
 8011890:	2000057e 	.word	0x2000057e
 8011894:	20000014 	.word	0x20000014
 8011898:	20000578 	.word	0x20000578
 801189c:	20000581 	.word	0x20000581
 80118a0:	20000580 	.word	0x20000580

080118a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80118a4:	b5b0      	push	{r4, r5, r7, lr}
 80118a6:	b08e      	sub	sp, #56	; 0x38
 80118a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80118aa:	4ba0      	ldr	r3, [pc, #640]	; (8011b2c <MX_LWIP_Init+0x288>)
 80118ac:	22c0      	movs	r2, #192	; 0xc0
 80118ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80118b0:	4b9e      	ldr	r3, [pc, #632]	; (8011b2c <MX_LWIP_Init+0x288>)
 80118b2:	22a8      	movs	r2, #168	; 0xa8
 80118b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 142;
 80118b6:	4b9d      	ldr	r3, [pc, #628]	; (8011b2c <MX_LWIP_Init+0x288>)
 80118b8:	228e      	movs	r2, #142	; 0x8e
 80118ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 140;
 80118bc:	4b9b      	ldr	r3, [pc, #620]	; (8011b2c <MX_LWIP_Init+0x288>)
 80118be:	228c      	movs	r2, #140	; 0x8c
 80118c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80118c2:	4b9b      	ldr	r3, [pc, #620]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80118c4:	22ff      	movs	r2, #255	; 0xff
 80118c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80118c8:	4b99      	ldr	r3, [pc, #612]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80118ca:	22ff      	movs	r2, #255	; 0xff
 80118cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80118ce:	4b98      	ldr	r3, [pc, #608]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80118d0:	22ff      	movs	r2, #255	; 0xff
 80118d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80118d4:	4b96      	ldr	r3, [pc, #600]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80118da:	4b96      	ldr	r3, [pc, #600]	; (8011b34 <MX_LWIP_Init+0x290>)
 80118dc:	2200      	movs	r2, #0
 80118de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80118e0:	4b94      	ldr	r3, [pc, #592]	; (8011b34 <MX_LWIP_Init+0x290>)
 80118e2:	2200      	movs	r2, #0
 80118e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80118e6:	4b93      	ldr	r3, [pc, #588]	; (8011b34 <MX_LWIP_Init+0x290>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80118ec:	4b91      	ldr	r3, [pc, #580]	; (8011b34 <MX_LWIP_Init+0x290>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80118f2:	2100      	movs	r1, #0
 80118f4:	2000      	movs	r0, #0
 80118f6:	f008 fac9 	bl	8019e8c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80118fa:	4b8c      	ldr	r3, [pc, #560]	; (8011b2c <MX_LWIP_Init+0x288>)
 80118fc:	781b      	ldrb	r3, [r3, #0]
 80118fe:	061a      	lsls	r2, r3, #24
 8011900:	4b8a      	ldr	r3, [pc, #552]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011902:	785b      	ldrb	r3, [r3, #1]
 8011904:	041b      	lsls	r3, r3, #16
 8011906:	431a      	orrs	r2, r3
 8011908:	4b88      	ldr	r3, [pc, #544]	; (8011b2c <MX_LWIP_Init+0x288>)
 801190a:	789b      	ldrb	r3, [r3, #2]
 801190c:	021b      	lsls	r3, r3, #8
 801190e:	4313      	orrs	r3, r2
 8011910:	4a86      	ldr	r2, [pc, #536]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011912:	78d2      	ldrb	r2, [r2, #3]
 8011914:	4313      	orrs	r3, r2
 8011916:	061a      	lsls	r2, r3, #24
 8011918:	4b84      	ldr	r3, [pc, #528]	; (8011b2c <MX_LWIP_Init+0x288>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	0619      	lsls	r1, r3, #24
 801191e:	4b83      	ldr	r3, [pc, #524]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011920:	785b      	ldrb	r3, [r3, #1]
 8011922:	041b      	lsls	r3, r3, #16
 8011924:	4319      	orrs	r1, r3
 8011926:	4b81      	ldr	r3, [pc, #516]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011928:	789b      	ldrb	r3, [r3, #2]
 801192a:	021b      	lsls	r3, r3, #8
 801192c:	430b      	orrs	r3, r1
 801192e:	497f      	ldr	r1, [pc, #508]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011930:	78c9      	ldrb	r1, [r1, #3]
 8011932:	430b      	orrs	r3, r1
 8011934:	021b      	lsls	r3, r3, #8
 8011936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801193a:	431a      	orrs	r2, r3
 801193c:	4b7b      	ldr	r3, [pc, #492]	; (8011b2c <MX_LWIP_Init+0x288>)
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	0619      	lsls	r1, r3, #24
 8011942:	4b7a      	ldr	r3, [pc, #488]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011944:	785b      	ldrb	r3, [r3, #1]
 8011946:	041b      	lsls	r3, r3, #16
 8011948:	4319      	orrs	r1, r3
 801194a:	4b78      	ldr	r3, [pc, #480]	; (8011b2c <MX_LWIP_Init+0x288>)
 801194c:	789b      	ldrb	r3, [r3, #2]
 801194e:	021b      	lsls	r3, r3, #8
 8011950:	430b      	orrs	r3, r1
 8011952:	4976      	ldr	r1, [pc, #472]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011954:	78c9      	ldrb	r1, [r1, #3]
 8011956:	430b      	orrs	r3, r1
 8011958:	0a1b      	lsrs	r3, r3, #8
 801195a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801195e:	431a      	orrs	r2, r3
 8011960:	4b72      	ldr	r3, [pc, #456]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	0619      	lsls	r1, r3, #24
 8011966:	4b71      	ldr	r3, [pc, #452]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011968:	785b      	ldrb	r3, [r3, #1]
 801196a:	041b      	lsls	r3, r3, #16
 801196c:	4319      	orrs	r1, r3
 801196e:	4b6f      	ldr	r3, [pc, #444]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011970:	789b      	ldrb	r3, [r3, #2]
 8011972:	021b      	lsls	r3, r3, #8
 8011974:	430b      	orrs	r3, r1
 8011976:	496d      	ldr	r1, [pc, #436]	; (8011b2c <MX_LWIP_Init+0x288>)
 8011978:	78c9      	ldrb	r1, [r1, #3]
 801197a:	430b      	orrs	r3, r1
 801197c:	0e1b      	lsrs	r3, r3, #24
 801197e:	4313      	orrs	r3, r2
 8011980:	4a6d      	ldr	r2, [pc, #436]	; (8011b38 <MX_LWIP_Init+0x294>)
 8011982:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011984:	4b6a      	ldr	r3, [pc, #424]	; (8011b30 <MX_LWIP_Init+0x28c>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	061a      	lsls	r2, r3, #24
 801198a:	4b69      	ldr	r3, [pc, #420]	; (8011b30 <MX_LWIP_Init+0x28c>)
 801198c:	785b      	ldrb	r3, [r3, #1]
 801198e:	041b      	lsls	r3, r3, #16
 8011990:	431a      	orrs	r2, r3
 8011992:	4b67      	ldr	r3, [pc, #412]	; (8011b30 <MX_LWIP_Init+0x28c>)
 8011994:	789b      	ldrb	r3, [r3, #2]
 8011996:	021b      	lsls	r3, r3, #8
 8011998:	4313      	orrs	r3, r2
 801199a:	4a65      	ldr	r2, [pc, #404]	; (8011b30 <MX_LWIP_Init+0x28c>)
 801199c:	78d2      	ldrb	r2, [r2, #3]
 801199e:	4313      	orrs	r3, r2
 80119a0:	061a      	lsls	r2, r3, #24
 80119a2:	4b63      	ldr	r3, [pc, #396]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	0619      	lsls	r1, r3, #24
 80119a8:	4b61      	ldr	r3, [pc, #388]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119aa:	785b      	ldrb	r3, [r3, #1]
 80119ac:	041b      	lsls	r3, r3, #16
 80119ae:	4319      	orrs	r1, r3
 80119b0:	4b5f      	ldr	r3, [pc, #380]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119b2:	789b      	ldrb	r3, [r3, #2]
 80119b4:	021b      	lsls	r3, r3, #8
 80119b6:	430b      	orrs	r3, r1
 80119b8:	495d      	ldr	r1, [pc, #372]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119ba:	78c9      	ldrb	r1, [r1, #3]
 80119bc:	430b      	orrs	r3, r1
 80119be:	021b      	lsls	r3, r3, #8
 80119c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80119c4:	431a      	orrs	r2, r3
 80119c6:	4b5a      	ldr	r3, [pc, #360]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	0619      	lsls	r1, r3, #24
 80119cc:	4b58      	ldr	r3, [pc, #352]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119ce:	785b      	ldrb	r3, [r3, #1]
 80119d0:	041b      	lsls	r3, r3, #16
 80119d2:	4319      	orrs	r1, r3
 80119d4:	4b56      	ldr	r3, [pc, #344]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119d6:	789b      	ldrb	r3, [r3, #2]
 80119d8:	021b      	lsls	r3, r3, #8
 80119da:	430b      	orrs	r3, r1
 80119dc:	4954      	ldr	r1, [pc, #336]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119de:	78c9      	ldrb	r1, [r1, #3]
 80119e0:	430b      	orrs	r3, r1
 80119e2:	0a1b      	lsrs	r3, r3, #8
 80119e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80119e8:	431a      	orrs	r2, r3
 80119ea:	4b51      	ldr	r3, [pc, #324]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	0619      	lsls	r1, r3, #24
 80119f0:	4b4f      	ldr	r3, [pc, #316]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119f2:	785b      	ldrb	r3, [r3, #1]
 80119f4:	041b      	lsls	r3, r3, #16
 80119f6:	4319      	orrs	r1, r3
 80119f8:	4b4d      	ldr	r3, [pc, #308]	; (8011b30 <MX_LWIP_Init+0x28c>)
 80119fa:	789b      	ldrb	r3, [r3, #2]
 80119fc:	021b      	lsls	r3, r3, #8
 80119fe:	430b      	orrs	r3, r1
 8011a00:	494b      	ldr	r1, [pc, #300]	; (8011b30 <MX_LWIP_Init+0x28c>)
 8011a02:	78c9      	ldrb	r1, [r1, #3]
 8011a04:	430b      	orrs	r3, r1
 8011a06:	0e1b      	lsrs	r3, r3, #24
 8011a08:	4313      	orrs	r3, r2
 8011a0a:	4a4c      	ldr	r2, [pc, #304]	; (8011b3c <MX_LWIP_Init+0x298>)
 8011a0c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8011a0e:	4b49      	ldr	r3, [pc, #292]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	061a      	lsls	r2, r3, #24
 8011a14:	4b47      	ldr	r3, [pc, #284]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a16:	785b      	ldrb	r3, [r3, #1]
 8011a18:	041b      	lsls	r3, r3, #16
 8011a1a:	431a      	orrs	r2, r3
 8011a1c:	4b45      	ldr	r3, [pc, #276]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a1e:	789b      	ldrb	r3, [r3, #2]
 8011a20:	021b      	lsls	r3, r3, #8
 8011a22:	4313      	orrs	r3, r2
 8011a24:	4a43      	ldr	r2, [pc, #268]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a26:	78d2      	ldrb	r2, [r2, #3]
 8011a28:	4313      	orrs	r3, r2
 8011a2a:	061a      	lsls	r2, r3, #24
 8011a2c:	4b41      	ldr	r3, [pc, #260]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a2e:	781b      	ldrb	r3, [r3, #0]
 8011a30:	0619      	lsls	r1, r3, #24
 8011a32:	4b40      	ldr	r3, [pc, #256]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a34:	785b      	ldrb	r3, [r3, #1]
 8011a36:	041b      	lsls	r3, r3, #16
 8011a38:	4319      	orrs	r1, r3
 8011a3a:	4b3e      	ldr	r3, [pc, #248]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a3c:	789b      	ldrb	r3, [r3, #2]
 8011a3e:	021b      	lsls	r3, r3, #8
 8011a40:	430b      	orrs	r3, r1
 8011a42:	493c      	ldr	r1, [pc, #240]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a44:	78c9      	ldrb	r1, [r1, #3]
 8011a46:	430b      	orrs	r3, r1
 8011a48:	021b      	lsls	r3, r3, #8
 8011a4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011a4e:	431a      	orrs	r2, r3
 8011a50:	4b38      	ldr	r3, [pc, #224]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	0619      	lsls	r1, r3, #24
 8011a56:	4b37      	ldr	r3, [pc, #220]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a58:	785b      	ldrb	r3, [r3, #1]
 8011a5a:	041b      	lsls	r3, r3, #16
 8011a5c:	4319      	orrs	r1, r3
 8011a5e:	4b35      	ldr	r3, [pc, #212]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a60:	789b      	ldrb	r3, [r3, #2]
 8011a62:	021b      	lsls	r3, r3, #8
 8011a64:	430b      	orrs	r3, r1
 8011a66:	4933      	ldr	r1, [pc, #204]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a68:	78c9      	ldrb	r1, [r1, #3]
 8011a6a:	430b      	orrs	r3, r1
 8011a6c:	0a1b      	lsrs	r3, r3, #8
 8011a6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011a72:	431a      	orrs	r2, r3
 8011a74:	4b2f      	ldr	r3, [pc, #188]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	0619      	lsls	r1, r3, #24
 8011a7a:	4b2e      	ldr	r3, [pc, #184]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a7c:	785b      	ldrb	r3, [r3, #1]
 8011a7e:	041b      	lsls	r3, r3, #16
 8011a80:	4319      	orrs	r1, r3
 8011a82:	4b2c      	ldr	r3, [pc, #176]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a84:	789b      	ldrb	r3, [r3, #2]
 8011a86:	021b      	lsls	r3, r3, #8
 8011a88:	430b      	orrs	r3, r1
 8011a8a:	492a      	ldr	r1, [pc, #168]	; (8011b34 <MX_LWIP_Init+0x290>)
 8011a8c:	78c9      	ldrb	r1, [r1, #3]
 8011a8e:	430b      	orrs	r3, r1
 8011a90:	0e1b      	lsrs	r3, r3, #24
 8011a92:	4313      	orrs	r3, r2
 8011a94:	4a2a      	ldr	r2, [pc, #168]	; (8011b40 <MX_LWIP_Init+0x29c>)
 8011a96:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8011a98:	4b2a      	ldr	r3, [pc, #168]	; (8011b44 <MX_LWIP_Init+0x2a0>)
 8011a9a:	9302      	str	r3, [sp, #8]
 8011a9c:	4b2a      	ldr	r3, [pc, #168]	; (8011b48 <MX_LWIP_Init+0x2a4>)
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	9300      	str	r3, [sp, #0]
 8011aa4:	4b26      	ldr	r3, [pc, #152]	; (8011b40 <MX_LWIP_Init+0x29c>)
 8011aa6:	4a25      	ldr	r2, [pc, #148]	; (8011b3c <MX_LWIP_Init+0x298>)
 8011aa8:	4923      	ldr	r1, [pc, #140]	; (8011b38 <MX_LWIP_Init+0x294>)
 8011aaa:	4828      	ldr	r0, [pc, #160]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011aac:	f008 ff72 	bl	801a994 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011ab0:	4826      	ldr	r0, [pc, #152]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011ab2:	f009 f921 	bl	801acf8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8011ab6:	4b25      	ldr	r3, [pc, #148]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011ab8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011abc:	089b      	lsrs	r3, r3, #2
 8011abe:	f003 0301 	and.w	r3, r3, #1
 8011ac2:	b2db      	uxtb	r3, r3
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d003      	beq.n	8011ad0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8011ac8:	4820      	ldr	r0, [pc, #128]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011aca:	f009 f925 	bl	801ad18 <netif_set_up>
 8011ace:	e002      	b.n	8011ad6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8011ad0:	481e      	ldr	r0, [pc, #120]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011ad2:	f009 f98d 	bl	801adf0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8011ad6:	491e      	ldr	r1, [pc, #120]	; (8011b50 <MX_LWIP_Init+0x2ac>)
 8011ad8:	481c      	ldr	r0, [pc, #112]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011ada:	f009 fa1f 	bl	801af1c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8011ade:	2300      	movs	r3, #0
 8011ae0:	623b      	str	r3, [r7, #32]
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8011ae6:	f107 0320 	add.w	r3, r7, #32
 8011aea:	2101      	movs	r1, #1
 8011aec:	4618      	mov	r0, r3
 8011aee:	f002 ff31 	bl	8014954 <osSemaphoreCreate>
 8011af2:	4603      	mov	r3, r0
 8011af4:	4a17      	ldr	r2, [pc, #92]	; (8011b54 <MX_LWIP_Init+0x2b0>)
 8011af6:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8011af8:	4b17      	ldr	r3, [pc, #92]	; (8011b58 <MX_LWIP_Init+0x2b4>)
 8011afa:	4a14      	ldr	r2, [pc, #80]	; (8011b4c <MX_LWIP_Init+0x2a8>)
 8011afc:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8011afe:	4b15      	ldr	r3, [pc, #84]	; (8011b54 <MX_LWIP_Init+0x2b0>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4a15      	ldr	r2, [pc, #84]	; (8011b58 <MX_LWIP_Init+0x2b4>)
 8011b04:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8011b06:	4b15      	ldr	r3, [pc, #84]	; (8011b5c <MX_LWIP_Init+0x2b8>)
 8011b08:	1d3c      	adds	r4, r7, #4
 8011b0a:	461d      	mov	r5, r3
 8011b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011b14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8011b18:	1d3b      	adds	r3, r7, #4
 8011b1a:	490f      	ldr	r1, [pc, #60]	; (8011b58 <MX_LWIP_Init+0x2b4>)
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f002 fe1d 	bl	801475c <osThreadCreate>




/* USER CODE END 3 */
}
 8011b22:	bf00      	nop
 8011b24:	3728      	adds	r7, #40	; 0x28
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bdb0      	pop	{r4, r5, r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	20009a68 	.word	0x20009a68
 8011b30:	20009a64 	.word	0x20009a64
 8011b34:	20009a28 	.word	0x20009a28
 8011b38:	20009a60 	.word	0x20009a60
 8011b3c:	20009a6c 	.word	0x20009a6c
 8011b40:	20009a70 	.word	0x20009a70
 8011b44:	08019d9d 	.word	0x08019d9d
 8011b48:	08012179 	.word	0x08012179
 8011b4c:	20009a2c 	.word	0x20009a2c
 8011b50:	0801225d 	.word	0x0801225d
 8011b54:	20000584 	.word	0x20000584
 8011b58:	20009a20 	.word	0x20009a20
 8011b5c:	080267f0 	.word	0x080267f0

08011b60 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08e      	sub	sp, #56	; 0x38
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	601a      	str	r2, [r3, #0]
 8011b70:	605a      	str	r2, [r3, #4]
 8011b72:	609a      	str	r2, [r3, #8]
 8011b74:	60da      	str	r2, [r3, #12]
 8011b76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a44      	ldr	r2, [pc, #272]	; (8011c90 <HAL_ETH_MspInit+0x130>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	f040 8081 	bne.w	8011c86 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8011b84:	4b43      	ldr	r3, [pc, #268]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b88:	4a42      	ldr	r2, [pc, #264]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8011b90:	4b40      	ldr	r3, [pc, #256]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b98:	623b      	str	r3, [r7, #32]
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	4b3d      	ldr	r3, [pc, #244]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba0:	4a3c      	ldr	r2, [pc, #240]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011ba2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8011ba8:	4b3a      	ldr	r3, [pc, #232]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011bb0:	61fb      	str	r3, [r7, #28]
 8011bb2:	69fb      	ldr	r3, [r7, #28]
 8011bb4:	4b37      	ldr	r3, [pc, #220]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb8:	4a36      	ldr	r2, [pc, #216]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8011bc0:	4b34      	ldr	r3, [pc, #208]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011bc8:	61bb      	str	r3, [r7, #24]
 8011bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8011bcc:	4b31      	ldr	r3, [pc, #196]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bd0:	4a30      	ldr	r2, [pc, #192]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8011bd8:	4b2e      	ldr	r3, [pc, #184]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011be0:	617b      	str	r3, [r7, #20]
 8011be2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011be4:	4b2b      	ldr	r3, [pc, #172]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011be8:	4a2a      	ldr	r2, [pc, #168]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bea:	f043 0304 	orr.w	r3, r3, #4
 8011bee:	6313      	str	r3, [r2, #48]	; 0x30
 8011bf0:	4b28      	ldr	r3, [pc, #160]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bf4:	f003 0304 	and.w	r3, r3, #4
 8011bf8:	613b      	str	r3, [r7, #16]
 8011bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011bfc:	4b25      	ldr	r3, [pc, #148]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c00:	4a24      	ldr	r2, [pc, #144]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011c02:	f043 0301 	orr.w	r3, r3, #1
 8011c06:	6313      	str	r3, [r2, #48]	; 0x30
 8011c08:	4b22      	ldr	r3, [pc, #136]	; (8011c94 <HAL_ETH_MspInit+0x134>)
 8011c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c0c:	f003 0301 	and.w	r3, r3, #1
 8011c10:	60fb      	str	r3, [r7, #12]
 8011c12:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8011c14:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8011c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c1a:	2302      	movs	r3, #2
 8011c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c22:	2303      	movs	r3, #3
 8011c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011c26:	230b      	movs	r3, #11
 8011c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8011c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c2e:	4619      	mov	r1, r3
 8011c30:	4819      	ldr	r0, [pc, #100]	; (8011c98 <HAL_ETH_MspInit+0x138>)
 8011c32:	f7f3 ff8f 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8011c36:	2332      	movs	r3, #50	; 0x32
 8011c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c3a:	2302      	movs	r3, #2
 8011c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c42:	2303      	movs	r3, #3
 8011c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011c46:	230b      	movs	r3, #11
 8011c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4812      	ldr	r0, [pc, #72]	; (8011c9c <HAL_ETH_MspInit+0x13c>)
 8011c52:	f7f3 ff7f 	bl	8005b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8011c56:	2386      	movs	r3, #134	; 0x86
 8011c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c5a:	2302      	movs	r3, #2
 8011c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c62:	2303      	movs	r3, #3
 8011c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011c66:	230b      	movs	r3, #11
 8011c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c6e:	4619      	mov	r1, r3
 8011c70:	480b      	ldr	r0, [pc, #44]	; (8011ca0 <HAL_ETH_MspInit+0x140>)
 8011c72:	f7f3 ff6f 	bl	8005b54 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8011c76:	2200      	movs	r2, #0
 8011c78:	2105      	movs	r1, #5
 8011c7a:	203d      	movs	r0, #61	; 0x3d
 8011c7c:	f7f1 fdd2 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011c80:	203d      	movs	r0, #61	; 0x3d
 8011c82:	f7f1 fdeb 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011c86:	bf00      	nop
 8011c88:	3738      	adds	r7, #56	; 0x38
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	40028000 	.word	0x40028000
 8011c94:	40023800 	.word	0x40023800
 8011c98:	40021800 	.word	0x40021800
 8011c9c:	40020800 	.word	0x40020800
 8011ca0:	40020000 	.word	0x40020000

08011ca4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b082      	sub	sp, #8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8011cac:	4b04      	ldr	r3, [pc, #16]	; (8011cc0 <HAL_ETH_RxCpltCallback+0x1c>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f002 fedd 	bl	8014a70 <osSemaphoreRelease>
}
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20000588 	.word	0x20000588

08011cc4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8011cc4:	b5b0      	push	{r4, r5, r7, lr}
 8011cc6:	b090      	sub	sp, #64	; 0x40
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011cd0:	4b60      	ldr	r3, [pc, #384]	; (8011e54 <low_level_init+0x190>)
 8011cd2:	4a61      	ldr	r2, [pc, #388]	; (8011e58 <low_level_init+0x194>)
 8011cd4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011cd6:	4b5f      	ldr	r3, [pc, #380]	; (8011e54 <low_level_init+0x190>)
 8011cd8:	2201      	movs	r2, #1
 8011cda:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8011cdc:	4b5d      	ldr	r3, [pc, #372]	; (8011e54 <low_level_init+0x190>)
 8011cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011ce2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011ce4:	4b5b      	ldr	r3, [pc, #364]	; (8011e54 <low_level_init+0x190>)
 8011ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011cea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8011cec:	4b59      	ldr	r3, [pc, #356]	; (8011e54 <low_level_init+0x190>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8011cf8:	2380      	movs	r3, #128	; 0x80
 8011cfa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8011cfe:	23e1      	movs	r3, #225	; 0xe1
 8011d00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8011d04:	2300      	movs	r3, #0
 8011d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8011d10:	2300      	movs	r3, #0
 8011d12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8011d16:	4a4f      	ldr	r2, [pc, #316]	; (8011e54 <low_level_init+0x190>)
 8011d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d1c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8011d1e:	4b4d      	ldr	r3, [pc, #308]	; (8011e54 <low_level_init+0x190>)
 8011d20:	2201      	movs	r2, #1
 8011d22:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8011d24:	4b4b      	ldr	r3, [pc, #300]	; (8011e54 <low_level_init+0x190>)
 8011d26:	2200      	movs	r2, #0
 8011d28:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8011d2a:	4b4a      	ldr	r3, [pc, #296]	; (8011e54 <low_level_init+0x190>)
 8011d2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011d30:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011d32:	4848      	ldr	r0, [pc, #288]	; (8011e54 <low_level_init+0x190>)
 8011d34:	f7f2 fd8a 	bl	800484c <HAL_ETH_Init>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8011d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d108      	bne.n	8011d58 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011d4c:	f043 0304 	orr.w	r3, r3, #4
 8011d50:	b2da      	uxtb	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011d58:	2304      	movs	r3, #4
 8011d5a:	4a40      	ldr	r2, [pc, #256]	; (8011e5c <low_level_init+0x198>)
 8011d5c:	4940      	ldr	r1, [pc, #256]	; (8011e60 <low_level_init+0x19c>)
 8011d5e:	483d      	ldr	r0, [pc, #244]	; (8011e54 <low_level_init+0x190>)
 8011d60:	f7f2 ff0e 	bl	8004b80 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011d64:	2304      	movs	r3, #4
 8011d66:	4a3f      	ldr	r2, [pc, #252]	; (8011e64 <low_level_init+0x1a0>)
 8011d68:	493f      	ldr	r1, [pc, #252]	; (8011e68 <low_level_init+0x1a4>)
 8011d6a:	483a      	ldr	r0, [pc, #232]	; (8011e54 <low_level_init+0x190>)
 8011d6c:	f7f2 ff71 	bl	8004c52 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2206      	movs	r2, #6
 8011d74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011d78:	4b36      	ldr	r3, [pc, #216]	; (8011e54 <low_level_init+0x190>)
 8011d7a:	695b      	ldr	r3, [r3, #20]
 8011d7c:	781a      	ldrb	r2, [r3, #0]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011d84:	4b33      	ldr	r3, [pc, #204]	; (8011e54 <low_level_init+0x190>)
 8011d86:	695b      	ldr	r3, [r3, #20]
 8011d88:	785a      	ldrb	r2, [r3, #1]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011d90:	4b30      	ldr	r3, [pc, #192]	; (8011e54 <low_level_init+0x190>)
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	789a      	ldrb	r2, [r3, #2]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011d9c:	4b2d      	ldr	r3, [pc, #180]	; (8011e54 <low_level_init+0x190>)
 8011d9e:	695b      	ldr	r3, [r3, #20]
 8011da0:	78da      	ldrb	r2, [r3, #3]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011da8:	4b2a      	ldr	r3, [pc, #168]	; (8011e54 <low_level_init+0x190>)
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	791a      	ldrb	r2, [r3, #4]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011db4:	4b27      	ldr	r3, [pc, #156]	; (8011e54 <low_level_init+0x190>)
 8011db6:	695b      	ldr	r3, [r3, #20]
 8011db8:	795a      	ldrb	r2, [r3, #5]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8011dc6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011dce:	f043 030a 	orr.w	r3, r3, #10
 8011dd2:	b2da      	uxtb	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8011dda:	2300      	movs	r3, #0
 8011ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dde:	2300      	movs	r3, #0
 8011de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011de6:	2101      	movs	r1, #1
 8011de8:	4618      	mov	r0, r3
 8011dea:	f002 fdb3 	bl	8014954 <osSemaphoreCreate>
 8011dee:	4603      	mov	r3, r0
 8011df0:	4a1e      	ldr	r2, [pc, #120]	; (8011e6c <low_level_init+0x1a8>)
 8011df2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011df4:	4b1e      	ldr	r3, [pc, #120]	; (8011e70 <low_level_init+0x1ac>)
 8011df6:	f107 040c 	add.w	r4, r7, #12
 8011dfa:	461d      	mov	r5, r3
 8011dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011e08:	f107 030c 	add.w	r3, r7, #12
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f002 fca4 	bl	801475c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8011e14:	480f      	ldr	r0, [pc, #60]	; (8011e54 <low_level_init+0x190>)
 8011e16:	f7f3 fa44 	bl	80052a2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8011e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e1e:	461a      	mov	r2, r3
 8011e20:	211d      	movs	r1, #29
 8011e22:	480c      	ldr	r0, [pc, #48]	; (8011e54 <low_level_init+0x190>)
 8011e24:	f7f3 f96f 	bl	8005106 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	f043 030b 	orr.w	r3, r3, #11
 8011e2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8011e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e32:	461a      	mov	r2, r3
 8011e34:	211d      	movs	r1, #29
 8011e36:	4807      	ldr	r0, [pc, #28]	; (8011e54 <low_level_init+0x190>)
 8011e38:	f7f3 f9cd 	bl	80051d6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8011e3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e40:	461a      	mov	r2, r3
 8011e42:	211d      	movs	r1, #29
 8011e44:	4803      	ldr	r0, [pc, #12]	; (8011e54 <low_level_init+0x190>)
 8011e46:	f7f3 f95e 	bl	8005106 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011e4a:	bf00      	nop
 8011e4c:	3740      	adds	r7, #64	; 0x40
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bdb0      	pop	{r4, r5, r7, pc}
 8011e52:	bf00      	nop
 8011e54:	2000b344 	.word	0x2000b344
 8011e58:	40028000 	.word	0x40028000
 8011e5c:	2000b38c 	.word	0x2000b38c
 8011e60:	20009a74 	.word	0x20009a74
 8011e64:	20009af4 	.word	0x20009af4
 8011e68:	2000b2c4 	.word	0x2000b2c4
 8011e6c:	20000588 	.word	0x20000588
 8011e70:	08026814 	.word	0x08026814

08011e74 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b08a      	sub	sp, #40	; 0x28
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8011e7e:	4b4b      	ldr	r3, [pc, #300]	; (8011fac <low_level_output+0x138>)
 8011e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8011e92:	2300      	movs	r3, #0
 8011e94:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8011e96:	4b45      	ldr	r3, [pc, #276]	; (8011fac <low_level_output+0x138>)
 8011e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	623b      	str	r3, [r7, #32]
 8011ea4:	e05a      	b.n	8011f5c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	da03      	bge.n	8011eb6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8011eae:	23f8      	movs	r3, #248	; 0xf8
 8011eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8011eb4:	e05c      	b.n	8011f70 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	895b      	ldrh	r3, [r3, #10]
 8011eba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011ec0:	e02f      	b.n	8011f22 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011ec2:	69fa      	ldr	r2, [r7, #28]
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	18d0      	adds	r0, r2, r3
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	18d1      	adds	r1, r2, r3
 8011ed0:	693a      	ldr	r2, [r7, #16]
 8011ed2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8011ed6:	1a9b      	subs	r3, r3, r2
 8011ed8:	461a      	mov	r2, r3
 8011eda:	f013 fc5b 	bl	8025794 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	da03      	bge.n	8011ef4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8011eec:	23f8      	movs	r3, #248	; 0xf8
 8011eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8011ef2:	e03d      	b.n	8011f70 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011ef4:	69bb      	ldr	r3, [r7, #24]
 8011ef6:	689b      	ldr	r3, [r3, #8]
 8011ef8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8011efa:	693a      	ldr	r2, [r7, #16]
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	4413      	add	r3, r2
 8011f00:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8011f04:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8011f06:	68ba      	ldr	r2, [r7, #8]
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011f10:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8011f12:	697a      	ldr	r2, [r7, #20]
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	1ad3      	subs	r3, r2, r3
 8011f18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8011f1c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011f22:	68fa      	ldr	r2, [r7, #12]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	4413      	add	r3, r2
 8011f28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	d8c8      	bhi.n	8011ec2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	18d0      	adds	r0, r2, r3
 8011f36:	6a3b      	ldr	r3, [r7, #32]
 8011f38:	685a      	ldr	r2, [r3, #4]
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	68fa      	ldr	r2, [r7, #12]
 8011f40:	4619      	mov	r1, r3
 8011f42:	f013 fc27 	bl	8025794 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8011f46:	693a      	ldr	r2, [r7, #16]
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8011f4e:	697a      	ldr	r2, [r7, #20]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	4413      	add	r3, r2
 8011f54:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8011f56:	6a3b      	ldr	r3, [r7, #32]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	623b      	str	r3, [r7, #32]
 8011f5c:	6a3b      	ldr	r3, [r7, #32]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d1a1      	bne.n	8011ea6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011f62:	6979      	ldr	r1, [r7, #20]
 8011f64:	4811      	ldr	r0, [pc, #68]	; (8011fac <low_level_output+0x138>)
 8011f66:	f7f2 fee1 	bl	8004d2c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011f70:	4b0e      	ldr	r3, [pc, #56]	; (8011fac <low_level_output+0x138>)
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	f241 0314 	movw	r3, #4116	; 0x1014
 8011f78:	4413      	add	r3, r2
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f003 0320 	and.w	r3, r3, #32
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00d      	beq.n	8011fa0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8011f84:	4b09      	ldr	r3, [pc, #36]	; (8011fac <low_level_output+0x138>)
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	f241 0314 	movw	r3, #4116	; 0x1014
 8011f8c:	4413      	add	r3, r2
 8011f8e:	2220      	movs	r2, #32
 8011f90:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8011f92:	4b06      	ldr	r3, [pc, #24]	; (8011fac <low_level_output+0x138>)
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	f241 0304 	movw	r3, #4100	; 0x1004
 8011f9a:	4413      	add	r3, r2
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8011fa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3728      	adds	r7, #40	; 0x28
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	2000b344 	.word	0x2000b344

08011fb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b08c      	sub	sp, #48	; 0x30
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8011fd4:	484f      	ldr	r0, [pc, #316]	; (8012114 <low_level_input+0x164>)
 8011fd6:	f7f2 ff93 	bl	8004f00 <HAL_ETH_GetReceivedFrame_IT>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d001      	beq.n	8011fe4 <low_level_input+0x34>

    return NULL;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	e092      	b.n	801210a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8011fe4:	4b4b      	ldr	r3, [pc, #300]	; (8012114 <low_level_input+0x164>)
 8011fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fe8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8011fea:	4b4a      	ldr	r3, [pc, #296]	; (8012114 <low_level_input+0x164>)
 8011fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8011ff0:	89fb      	ldrh	r3, [r7, #14]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d007      	beq.n	8012006 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011ff6:	89fb      	ldrh	r3, [r7, #14]
 8011ff8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	2000      	movs	r0, #0
 8012000:	f009 f856 	bl	801b0b0 <pbuf_alloc>
 8012004:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8012006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012008:	2b00      	cmp	r3, #0
 801200a:	d04b      	beq.n	80120a4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801200c:	4b41      	ldr	r3, [pc, #260]	; (8012114 <low_level_input+0x164>)
 801200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012010:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8012016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012018:	62bb      	str	r3, [r7, #40]	; 0x28
 801201a:	e040      	b.n	801209e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 801201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801201e:	895b      	ldrh	r3, [r3, #10]
 8012020:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8012026:	e021      	b.n	801206c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8012028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	18d0      	adds	r0, r2, r3
 8012030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	18d1      	adds	r1, r2, r3
 8012036:	69fa      	ldr	r2, [r7, #28]
 8012038:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801203c:	1a9b      	subs	r3, r3, r2
 801203e:	461a      	mov	r2, r3
 8012040:	f013 fba8 	bl	8025794 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801204a:	6a3b      	ldr	r3, [r7, #32]
 801204c:	689b      	ldr	r3, [r3, #8]
 801204e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8012050:	69fa      	ldr	r2, [r7, #28]
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	4413      	add	r3, r2
 8012056:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 801205a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 801205c:	69ba      	ldr	r2, [r7, #24]
 801205e:	69fb      	ldr	r3, [r7, #28]
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8012066:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801206c:	697a      	ldr	r2, [r7, #20]
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	4413      	add	r3, r2
 8012072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8012076:	4293      	cmp	r3, r2
 8012078:	d8d6      	bhi.n	8012028 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207c:	685a      	ldr	r2, [r3, #4]
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	18d0      	adds	r0, r2, r3
 8012082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	4413      	add	r3, r2
 8012088:	697a      	ldr	r2, [r7, #20]
 801208a:	4619      	mov	r1, r3
 801208c:	f013 fb82 	bl	8025794 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8012090:	69fa      	ldr	r2, [r7, #28]
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	4413      	add	r3, r2
 8012096:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	62bb      	str	r3, [r7, #40]	; 0x28
 801209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d1bb      	bne.n	801201c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80120a4:	4b1b      	ldr	r3, [pc, #108]	; (8012114 <low_level_input+0x164>)
 80120a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120a8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80120aa:	2300      	movs	r3, #0
 80120ac:	613b      	str	r3, [r7, #16]
 80120ae:	e00b      	b.n	80120c8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80120b8:	6a3b      	ldr	r3, [r7, #32]
 80120ba:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80120bc:	6a3b      	ldr	r3, [r7, #32]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80120c2:	693b      	ldr	r3, [r7, #16]
 80120c4:	3301      	adds	r3, #1
 80120c6:	613b      	str	r3, [r7, #16]
 80120c8:	4b12      	ldr	r3, [pc, #72]	; (8012114 <low_level_input+0x164>)
 80120ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120cc:	693a      	ldr	r2, [r7, #16]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d3ee      	bcc.n	80120b0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80120d2:	4b10      	ldr	r3, [pc, #64]	; (8012114 <low_level_input+0x164>)
 80120d4:	2200      	movs	r2, #0
 80120d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80120d8:	4b0e      	ldr	r3, [pc, #56]	; (8012114 <low_level_input+0x164>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80120e0:	4413      	add	r3, r2
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00d      	beq.n	8012108 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80120ec:	4b09      	ldr	r3, [pc, #36]	; (8012114 <low_level_input+0x164>)
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80120f4:	4413      	add	r3, r2
 80120f6:	2280      	movs	r2, #128	; 0x80
 80120f8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80120fa:	4b06      	ldr	r3, [pc, #24]	; (8012114 <low_level_input+0x164>)
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	f241 0308 	movw	r3, #4104	; 0x1008
 8012102:	4413      	add	r3, r2
 8012104:	2200      	movs	r2, #0
 8012106:	601a      	str	r2, [r3, #0]
  }
  return p;
 8012108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801210a:	4618      	mov	r0, r3
 801210c:	3730      	adds	r7, #48	; 0x30
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	2000b344 	.word	0x2000b344

08012118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b084      	sub	sp, #16
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012124:	4b12      	ldr	r3, [pc, #72]	; (8012170 <ethernetif_input+0x58>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f04f 31ff 	mov.w	r1, #4294967295
 801212c:	4618      	mov	r0, r3
 801212e:	f002 fc51 	bl	80149d4 <osSemaphoreWait>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1f5      	bne.n	8012124 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8012138:	480e      	ldr	r0, [pc, #56]	; (8012174 <ethernetif_input+0x5c>)
 801213a:	f012 fe75 	bl	8024e28 <sys_mutex_lock>
        p = low_level_input( netif );
 801213e:	68f8      	ldr	r0, [r7, #12]
 8012140:	f7ff ff36 	bl	8011fb0 <low_level_input>
 8012144:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00a      	beq.n	8012162 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	68f9      	ldr	r1, [r7, #12]
 8012152:	68b8      	ldr	r0, [r7, #8]
 8012154:	4798      	blx	r3
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d002      	beq.n	8012162 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 801215c:	68b8      	ldr	r0, [r7, #8]
 801215e:	f009 fa8b 	bl	801b678 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8012162:	4804      	ldr	r0, [pc, #16]	; (8012174 <ethernetif_input+0x5c>)
 8012164:	f012 fe6f 	bl	8024e46 <sys_mutex_unlock>
      } while(p!=NULL);
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1e4      	bne.n	8012138 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 801216e:	e7d9      	b.n	8012124 <ethernetif_input+0xc>
 8012170:	20000588 	.word	0x20000588
 8012174:	2000cb9c 	.word	0x2000cb9c

08012178 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <ethernetif_init+0x1c>
 8012186:	4b0e      	ldr	r3, [pc, #56]	; (80121c0 <ethernetif_init+0x48>)
 8012188:	f44f 720b 	mov.w	r2, #556	; 0x22c
 801218c:	490d      	ldr	r1, [pc, #52]	; (80121c4 <ethernetif_init+0x4c>)
 801218e:	480e      	ldr	r0, [pc, #56]	; (80121c8 <ethernetif_init+0x50>)
 8012190:	f013 feae 	bl	8025ef0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2273      	movs	r2, #115	; 0x73
 8012198:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2274      	movs	r2, #116	; 0x74
 80121a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	4a09      	ldr	r2, [pc, #36]	; (80121cc <ethernetif_init+0x54>)
 80121a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	4a08      	ldr	r2, [pc, #32]	; (80121d0 <ethernetif_init+0x58>)
 80121ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7ff fd87 	bl	8011cc4 <low_level_init>

  return ERR_OK;
 80121b6:	2300      	movs	r3, #0
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}
 80121c0:	08026830 	.word	0x08026830
 80121c4:	0802684c 	.word	0x0802684c
 80121c8:	0802685c 	.word	0x0802685c
 80121cc:	08022e3d 	.word	0x08022e3d
 80121d0:	08011e75 	.word	0x08011e75

080121d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80121d8:	f7f0 ffa8 	bl	800312c <HAL_GetTick>
 80121dc:	4603      	mov	r3, r0
}
 80121de:	4618      	mov	r0, r3
 80121e0:	bd80      	pop	{r7, pc}
	...

080121e4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80121ec:	2300      	movs	r3, #0
 80121ee:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80121f4:	f107 0308 	add.w	r3, r7, #8
 80121f8:	461a      	mov	r2, r3
 80121fa:	2101      	movs	r1, #1
 80121fc:	4816      	ldr	r0, [pc, #88]	; (8012258 <ethernetif_set_link+0x74>)
 80121fe:	f7f2 ff82 	bl	8005106 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	f003 0304 	and.w	r3, r3, #4
 8012208:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012212:	f003 0304 	and.w	r3, r3, #4
 8012216:	2b00      	cmp	r3, #0
 8012218:	d108      	bne.n	801222c <ethernetif_set_link+0x48>
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d005      	beq.n	801222c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	4618      	mov	r0, r3
 8012226:	f008 fe15 	bl	801ae54 <netif_set_link_up>
 801222a:	e011      	b.n	8012250 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012234:	089b      	lsrs	r3, r3, #2
 8012236:	f003 0301 	and.w	r3, r3, #1
 801223a:	b2db      	uxtb	r3, r3
 801223c:	2b00      	cmp	r3, #0
 801223e:	d007      	beq.n	8012250 <ethernetif_set_link+0x6c>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d104      	bne.n	8012250 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4618      	mov	r0, r3
 801224c:	f008 fe36 	bl	801aebc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8012250:	20c8      	movs	r0, #200	; 0xc8
 8012252:	f002 facf 	bl	80147f4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8012256:	e7cd      	b.n	80121f4 <ethernetif_set_link+0x10>
 8012258:	2000b344 	.word	0x2000b344

0801225c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8012264:	2300      	movs	r3, #0
 8012266:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8012268:	2300      	movs	r3, #0
 801226a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012272:	089b      	lsrs	r3, r3, #2
 8012274:	f003 0301 	and.w	r3, r3, #1
 8012278:	b2db      	uxtb	r3, r3
 801227a:	2b00      	cmp	r3, #0
 801227c:	d05d      	beq.n	801233a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801227e:	4b34      	ldr	r3, [pc, #208]	; (8012350 <ethernetif_update_config+0xf4>)
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d03f      	beq.n	8012306 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8012286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801228a:	2100      	movs	r1, #0
 801228c:	4830      	ldr	r0, [pc, #192]	; (8012350 <ethernetif_update_config+0xf4>)
 801228e:	f7f2 ffa2 	bl	80051d6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8012292:	f7f0 ff4b 	bl	800312c <HAL_GetTick>
 8012296:	4603      	mov	r3, r0
 8012298:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801229a:	f107 0308 	add.w	r3, r7, #8
 801229e:	461a      	mov	r2, r3
 80122a0:	2101      	movs	r1, #1
 80122a2:	482b      	ldr	r0, [pc, #172]	; (8012350 <ethernetif_update_config+0xf4>)
 80122a4:	f7f2 ff2f 	bl	8005106 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80122a8:	f7f0 ff40 	bl	800312c <HAL_GetTick>
 80122ac:	4602      	mov	r2, r0
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	1ad3      	subs	r3, r2, r3
 80122b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80122b6:	d828      	bhi.n	801230a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	f003 0320 	and.w	r3, r3, #32
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d0eb      	beq.n	801229a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80122c2:	f107 0308 	add.w	r3, r7, #8
 80122c6:	461a      	mov	r2, r3
 80122c8:	2110      	movs	r1, #16
 80122ca:	4821      	ldr	r0, [pc, #132]	; (8012350 <ethernetif_update_config+0xf4>)
 80122cc:	f7f2 ff1b 	bl	8005106 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	f003 0304 	and.w	r3, r3, #4
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d004      	beq.n	80122e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80122da:	4b1d      	ldr	r3, [pc, #116]	; (8012350 <ethernetif_update_config+0xf4>)
 80122dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80122e0:	60da      	str	r2, [r3, #12]
 80122e2:	e002      	b.n	80122ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80122e4:	4b1a      	ldr	r3, [pc, #104]	; (8012350 <ethernetif_update_config+0xf4>)
 80122e6:	2200      	movs	r2, #0
 80122e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	f003 0302 	and.w	r3, r3, #2
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d003      	beq.n	80122fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80122f4:	4b16      	ldr	r3, [pc, #88]	; (8012350 <ethernetif_update_config+0xf4>)
 80122f6:	2200      	movs	r2, #0
 80122f8:	609a      	str	r2, [r3, #8]
 80122fa:	e016      	b.n	801232a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80122fc:	4b14      	ldr	r3, [pc, #80]	; (8012350 <ethernetif_update_config+0xf4>)
 80122fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8012302:	609a      	str	r2, [r3, #8]
 8012304:	e011      	b.n	801232a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8012306:	bf00      	nop
 8012308:	e000      	b.n	801230c <ethernetif_update_config+0xb0>
          goto error;
 801230a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801230c:	4b10      	ldr	r3, [pc, #64]	; (8012350 <ethernetif_update_config+0xf4>)
 801230e:	68db      	ldr	r3, [r3, #12]
 8012310:	08db      	lsrs	r3, r3, #3
 8012312:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8012314:	4b0e      	ldr	r3, [pc, #56]	; (8012350 <ethernetif_update_config+0xf4>)
 8012316:	689b      	ldr	r3, [r3, #8]
 8012318:	085b      	lsrs	r3, r3, #1
 801231a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801231c:	4313      	orrs	r3, r2
 801231e:	b29b      	uxth	r3, r3
 8012320:	461a      	mov	r2, r3
 8012322:	2100      	movs	r1, #0
 8012324:	480a      	ldr	r0, [pc, #40]	; (8012350 <ethernetif_update_config+0xf4>)
 8012326:	f7f2 ff56 	bl	80051d6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801232a:	2100      	movs	r1, #0
 801232c:	4808      	ldr	r0, [pc, #32]	; (8012350 <ethernetif_update_config+0xf4>)
 801232e:	f7f3 f817 	bl	8005360 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8012332:	4807      	ldr	r0, [pc, #28]	; (8012350 <ethernetif_update_config+0xf4>)
 8012334:	f7f2 ffb5 	bl	80052a2 <HAL_ETH_Start>
 8012338:	e002      	b.n	8012340 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 801233a:	4805      	ldr	r0, [pc, #20]	; (8012350 <ethernetif_update_config+0xf4>)
 801233c:	f7f2 ffe0 	bl	8005300 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 f807 	bl	8012354 <ethernetif_notify_conn_changed>
}
 8012346:	bf00      	nop
 8012348:	3710      	adds	r7, #16
 801234a:	46bd      	mov	sp, r7
 801234c:	bd80      	pop	{r7, pc}
 801234e:	bf00      	nop
 8012350:	2000b344 	.word	0x2000b344

08012354 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8012368:	b590      	push	{r4, r7, lr}
 801236a:	b089      	sub	sp, #36	; 0x24
 801236c:	af04      	add	r7, sp, #16
 801236e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8012370:	2301      	movs	r3, #1
 8012372:	2202      	movs	r2, #2
 8012374:	2102      	movs	r1, #2
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 fcb8 	bl	8012cec <USBH_FindInterface>
 801237c:	4603      	mov	r3, r0
 801237e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012380:	7bfb      	ldrb	r3, [r7, #15]
 8012382:	2bff      	cmp	r3, #255	; 0xff
 8012384:	d002      	beq.n	801238c <USBH_CDC_InterfaceInit+0x24>
 8012386:	7bfb      	ldrb	r3, [r7, #15]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d901      	bls.n	8012390 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 801238c:	2302      	movs	r3, #2
 801238e:	e13d      	b.n	801260c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012390:	7bfb      	ldrb	r3, [r7, #15]
 8012392:	4619      	mov	r1, r3
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fc8d 	bl	8012cb4 <USBH_SelectInterface>
 801239a:	4603      	mov	r3, r0
 801239c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 801239e:	7bbb      	ldrb	r3, [r7, #14]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80123a4:	2302      	movs	r3, #2
 80123a6:	e131      	b.n	801260c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80123ae:	2050      	movs	r0, #80	; 0x50
 80123b0:	f013 f9d2 	bl	8025758 <malloc>
 80123b4:	4603      	mov	r3, r0
 80123b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80123be:	69db      	ldr	r3, [r3, #28]
 80123c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d101      	bne.n	80123cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80123c8:	2302      	movs	r3, #2
 80123ca:	e11f      	b.n	801260c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80123cc:	2250      	movs	r2, #80	; 0x50
 80123ce:	2100      	movs	r1, #0
 80123d0:	68b8      	ldr	r0, [r7, #8]
 80123d2:	f013 f9ed 	bl	80257b0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80123d6:	7bfb      	ldrb	r3, [r7, #15]
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	211a      	movs	r1, #26
 80123dc:	fb01 f303 	mul.w	r3, r1, r3
 80123e0:	4413      	add	r3, r2
 80123e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	b25b      	sxtb	r3, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da15      	bge.n	801241a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80123ee:	7bfb      	ldrb	r3, [r7, #15]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	211a      	movs	r1, #26
 80123f4:	fb01 f303 	mul.w	r3, r1, r3
 80123f8:	4413      	add	r3, r2
 80123fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80123fe:	781a      	ldrb	r2, [r3, #0]
 8012400:	68bb      	ldr	r3, [r7, #8]
 8012402:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012404:	7bfb      	ldrb	r3, [r7, #15]
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	211a      	movs	r1, #26
 801240a:	fb01 f303 	mul.w	r3, r1, r3
 801240e:	4413      	add	r3, r2
 8012410:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8012414:	881a      	ldrh	r2, [r3, #0]
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 801241a:	68bb      	ldr	r3, [r7, #8]
 801241c:	785b      	ldrb	r3, [r3, #1]
 801241e:	4619      	mov	r1, r3
 8012420:	6878      	ldr	r0, [r7, #4]
 8012422:	f002 f890 	bl	8014546 <USBH_AllocPipe>
 8012426:	4603      	mov	r3, r0
 8012428:	461a      	mov	r2, r3
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	7819      	ldrb	r1, [r3, #0]
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	7858      	ldrb	r0, [r3, #1]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	8952      	ldrh	r2, [r2, #10]
 8012446:	9202      	str	r2, [sp, #8]
 8012448:	2203      	movs	r2, #3
 801244a:	9201      	str	r2, [sp, #4]
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	4623      	mov	r3, r4
 8012450:	4602      	mov	r2, r0
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f002 f848 	bl	80144e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	2200      	movs	r2, #0
 801245e:	4619      	mov	r1, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f012 ffaa 	bl	80253ba <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012466:	2300      	movs	r3, #0
 8012468:	2200      	movs	r2, #0
 801246a:	210a      	movs	r1, #10
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 fc3d 	bl	8012cec <USBH_FindInterface>
 8012472:	4603      	mov	r3, r0
 8012474:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012476:	7bfb      	ldrb	r3, [r7, #15]
 8012478:	2bff      	cmp	r3, #255	; 0xff
 801247a:	d002      	beq.n	8012482 <USBH_CDC_InterfaceInit+0x11a>
 801247c:	7bfb      	ldrb	r3, [r7, #15]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d901      	bls.n	8012486 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012482:	2302      	movs	r3, #2
 8012484:	e0c2      	b.n	801260c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8012486:	7bfb      	ldrb	r3, [r7, #15]
 8012488:	687a      	ldr	r2, [r7, #4]
 801248a:	211a      	movs	r1, #26
 801248c:	fb01 f303 	mul.w	r3, r1, r3
 8012490:	4413      	add	r3, r2
 8012492:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	b25b      	sxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	da16      	bge.n	80124cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801249e:	7bfb      	ldrb	r3, [r7, #15]
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	211a      	movs	r1, #26
 80124a4:	fb01 f303 	mul.w	r3, r1, r3
 80124a8:	4413      	add	r3, r2
 80124aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124ae:	781a      	ldrb	r2, [r3, #0]
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80124b4:	7bfb      	ldrb	r3, [r7, #15]
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	211a      	movs	r1, #26
 80124ba:	fb01 f303 	mul.w	r3, r1, r3
 80124be:	4413      	add	r3, r2
 80124c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80124c4:	881a      	ldrh	r2, [r3, #0]
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	835a      	strh	r2, [r3, #26]
 80124ca:	e015      	b.n	80124f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80124cc:	7bfb      	ldrb	r3, [r7, #15]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	211a      	movs	r1, #26
 80124d2:	fb01 f303 	mul.w	r3, r1, r3
 80124d6:	4413      	add	r3, r2
 80124d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80124dc:	781a      	ldrb	r2, [r3, #0]
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80124e2:	7bfb      	ldrb	r3, [r7, #15]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	211a      	movs	r1, #26
 80124e8:	fb01 f303 	mul.w	r3, r1, r3
 80124ec:	4413      	add	r3, r2
 80124ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80124f2:	881a      	ldrh	r2, [r3, #0]
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80124f8:	7bfb      	ldrb	r3, [r7, #15]
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	211a      	movs	r1, #26
 80124fe:	fb01 f303 	mul.w	r3, r1, r3
 8012502:	4413      	add	r3, r2
 8012504:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	b25b      	sxtb	r3, r3
 801250c:	2b00      	cmp	r3, #0
 801250e:	da16      	bge.n	801253e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012510:	7bfb      	ldrb	r3, [r7, #15]
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	211a      	movs	r1, #26
 8012516:	fb01 f303 	mul.w	r3, r1, r3
 801251a:	4413      	add	r3, r2
 801251c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8012520:	781a      	ldrb	r2, [r3, #0]
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012526:	7bfb      	ldrb	r3, [r7, #15]
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	211a      	movs	r1, #26
 801252c:	fb01 f303 	mul.w	r3, r1, r3
 8012530:	4413      	add	r3, r2
 8012532:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012536:	881a      	ldrh	r2, [r3, #0]
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	835a      	strh	r2, [r3, #26]
 801253c:	e015      	b.n	801256a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801253e:	7bfb      	ldrb	r3, [r7, #15]
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	211a      	movs	r1, #26
 8012544:	fb01 f303 	mul.w	r3, r1, r3
 8012548:	4413      	add	r3, r2
 801254a:	f203 3356 	addw	r3, r3, #854	; 0x356
 801254e:	781a      	ldrb	r2, [r3, #0]
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012554:	7bfb      	ldrb	r3, [r7, #15]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	211a      	movs	r1, #26
 801255a:	fb01 f303 	mul.w	r3, r1, r3
 801255e:	4413      	add	r3, r2
 8012560:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8012564:	881a      	ldrh	r2, [r3, #0]
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	7b9b      	ldrb	r3, [r3, #14]
 801256e:	4619      	mov	r1, r3
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f001 ffe8 	bl	8014546 <USBH_AllocPipe>
 8012576:	4603      	mov	r3, r0
 8012578:	461a      	mov	r2, r3
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	7bdb      	ldrb	r3, [r3, #15]
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f001 ffde 	bl	8014546 <USBH_AllocPipe>
 801258a:	4603      	mov	r3, r0
 801258c:	461a      	mov	r2, r3
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	7b59      	ldrb	r1, [r3, #13]
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	7b98      	ldrb	r0, [r3, #14]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80125a6:	68ba      	ldr	r2, [r7, #8]
 80125a8:	8b12      	ldrh	r2, [r2, #24]
 80125aa:	9202      	str	r2, [sp, #8]
 80125ac:	2202      	movs	r2, #2
 80125ae:	9201      	str	r2, [sp, #4]
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	4623      	mov	r3, r4
 80125b4:	4602      	mov	r2, r0
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f001 ff96 	bl	80144e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	7b19      	ldrb	r1, [r3, #12]
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	7bd8      	ldrb	r0, [r3, #15]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80125d0:	68ba      	ldr	r2, [r7, #8]
 80125d2:	8b52      	ldrh	r2, [r2, #26]
 80125d4:	9202      	str	r2, [sp, #8]
 80125d6:	2202      	movs	r2, #2
 80125d8:	9201      	str	r2, [sp, #4]
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	4623      	mov	r3, r4
 80125de:	4602      	mov	r2, r0
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f001 ff81 	bl	80144e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	2200      	movs	r2, #0
 80125ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80125ee:	68bb      	ldr	r3, [r7, #8]
 80125f0:	7b5b      	ldrb	r3, [r3, #13]
 80125f2:	2200      	movs	r2, #0
 80125f4:	4619      	mov	r1, r3
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f012 fedf 	bl	80253ba <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	7b1b      	ldrb	r3, [r3, #12]
 8012600:	2200      	movs	r2, #0
 8012602:	4619      	mov	r1, r3
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f012 fed8 	bl	80253ba <USBH_LL_SetToggle>

  return USBH_OK;
 801260a:	2300      	movs	r3, #0
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	bd90      	pop	{r4, r7, pc}

08012614 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8012622:	69db      	ldr	r3, [r3, #28]
 8012624:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00e      	beq.n	801264c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	4619      	mov	r1, r3
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f001 ff76 	bl	8014526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	4619      	mov	r1, r3
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f001 ffa1 	bl	8014588 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2200      	movs	r2, #0
 801264a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	7b1b      	ldrb	r3, [r3, #12]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00e      	beq.n	8012672 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	7b1b      	ldrb	r3, [r3, #12]
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f001 ff63 	bl	8014526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	7b1b      	ldrb	r3, [r3, #12]
 8012664:	4619      	mov	r1, r3
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f001 ff8e 	bl	8014588 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2200      	movs	r2, #0
 8012670:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	7b5b      	ldrb	r3, [r3, #13]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00e      	beq.n	8012698 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	7b5b      	ldrb	r3, [r3, #13]
 801267e:	4619      	mov	r1, r3
 8012680:	6878      	ldr	r0, [r7, #4]
 8012682:	f001 ff50 	bl	8014526 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	7b5b      	ldrb	r3, [r3, #13]
 801268a:	4619      	mov	r1, r3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f001 ff7b 	bl	8014588 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	2200      	movs	r2, #0
 8012696:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d00b      	beq.n	80126bc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126aa:	69db      	ldr	r3, [r3, #28]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f013 f85b 	bl	8025768 <free>
    phost->pActiveClass->pData = 0U;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126b8:	2200      	movs	r2, #0
 80126ba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80126d4:	69db      	ldr	r3, [r3, #28]
 80126d6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3340      	adds	r3, #64	; 0x40
 80126dc:	4619      	mov	r1, r3
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 f8b1 	bl	8012846 <GetLineCoding>
 80126e4:	4603      	mov	r3, r0
 80126e6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80126e8:	7afb      	ldrb	r3, [r7, #11]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d105      	bne.n	80126fa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80126f4:	2102      	movs	r1, #2
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80126fa:	7afb      	ldrb	r3, [r7, #11]
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 801270c:	2301      	movs	r3, #1
 801270e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012710:	2300      	movs	r3, #0
 8012712:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801271a:	69db      	ldr	r3, [r3, #28]
 801271c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8012724:	2b04      	cmp	r3, #4
 8012726:	d877      	bhi.n	8012818 <USBH_CDC_Process+0x114>
 8012728:	a201      	add	r2, pc, #4	; (adr r2, 8012730 <USBH_CDC_Process+0x2c>)
 801272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272e:	bf00      	nop
 8012730:	08012745 	.word	0x08012745
 8012734:	0801274b 	.word	0x0801274b
 8012738:	0801277b 	.word	0x0801277b
 801273c:	080127ef 	.word	0x080127ef
 8012740:	080127fd 	.word	0x080127fd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012744:	2300      	movs	r3, #0
 8012746:	73fb      	strb	r3, [r7, #15]
      break;
 8012748:	e06d      	b.n	8012826 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801274e:	4619      	mov	r1, r3
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f897 	bl	8012884 <SetLineCoding>
 8012756:	4603      	mov	r3, r0
 8012758:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801275a:	7bbb      	ldrb	r3, [r7, #14]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d104      	bne.n	801276a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	2202      	movs	r2, #2
 8012764:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012768:	e058      	b.n	801281c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801276a:	7bbb      	ldrb	r3, [r7, #14]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d055      	beq.n	801281c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	2204      	movs	r2, #4
 8012774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8012778:	e050      	b.n	801281c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	3340      	adds	r3, #64	; 0x40
 801277e:	4619      	mov	r1, r3
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 f860 	bl	8012846 <GetLineCoding>
 8012786:	4603      	mov	r3, r0
 8012788:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801278a:	7bbb      	ldrb	r3, [r7, #14]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d126      	bne.n	80127de <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127a2:	791b      	ldrb	r3, [r3, #4]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d13b      	bne.n	8012820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127b2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d133      	bne.n	8012820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80127b8:	68bb      	ldr	r3, [r7, #8]
 80127ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127c2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d12b      	bne.n	8012820 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127d0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d124      	bne.n	8012820 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f000 f982 	bl	8012ae0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80127dc:	e020      	b.n	8012820 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80127de:	7bbb      	ldrb	r3, [r7, #14]
 80127e0:	2b01      	cmp	r3, #1
 80127e2:	d01d      	beq.n	8012820 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	2204      	movs	r2, #4
 80127e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80127ec:	e018      	b.n	8012820 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 f867 	bl	80128c2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 f8f6 	bl	80129e6 <CDC_ProcessReception>
      break;
 80127fa:	e014      	b.n	8012826 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80127fc:	2100      	movs	r1, #0
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f001 f951 	bl	8013aa6 <USBH_ClrFeature>
 8012804:	4603      	mov	r3, r0
 8012806:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012808:	7bbb      	ldrb	r3, [r7, #14]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d10a      	bne.n	8012824 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	2200      	movs	r2, #0
 8012812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8012816:	e005      	b.n	8012824 <USBH_CDC_Process+0x120>

    default:
      break;
 8012818:	bf00      	nop
 801281a:	e004      	b.n	8012826 <USBH_CDC_Process+0x122>
      break;
 801281c:	bf00      	nop
 801281e:	e002      	b.n	8012826 <USBH_CDC_Process+0x122>
      break;
 8012820:	bf00      	nop
 8012822:	e000      	b.n	8012826 <USBH_CDC_Process+0x122>
      break;
 8012824:	bf00      	nop

  }

  return status;
 8012826:	7bfb      	ldrb	r3, [r7, #15]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3710      	adds	r7, #16
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012830:	b480      	push	{r7}
 8012832:	b083      	sub	sp, #12
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	370c      	adds	r7, #12
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr

08012846 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b082      	sub	sp, #8
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	22a1      	movs	r2, #161	; 0xa1
 8012854:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2221      	movs	r2, #33	; 0x21
 801285a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2207      	movs	r2, #7
 801286c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2207      	movs	r2, #7
 8012872:	4619      	mov	r1, r3
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f001 faf6 	bl	8013e66 <USBH_CtlReq>
 801287a:	4603      	mov	r3, r0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3708      	adds	r7, #8
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b082      	sub	sp, #8
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2221      	movs	r2, #33	; 0x21
 8012892:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2220      	movs	r2, #32
 8012898:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2200      	movs	r2, #0
 801289e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2207      	movs	r2, #7
 80128aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2207      	movs	r2, #7
 80128b0:	4619      	mov	r1, r3
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f001 fad7 	bl	8013e66 <USBH_CtlReq>
 80128b8:	4603      	mov	r3, r0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b086      	sub	sp, #24
 80128c6:	af02      	add	r7, sp, #8
 80128c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80128d0:	69db      	ldr	r3, [r3, #28]
 80128d2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80128d4:	2300      	movs	r3, #0
 80128d6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80128de:	2b01      	cmp	r3, #1
 80128e0:	d002      	beq.n	80128e8 <CDC_ProcessTransmission+0x26>
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d023      	beq.n	801292e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80128e6:	e07a      	b.n	80129de <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128ec:	68fa      	ldr	r2, [r7, #12]
 80128ee:	8b12      	ldrh	r2, [r2, #24]
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d90b      	bls.n	801290c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	69d9      	ldr	r1, [r3, #28]
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	8b1a      	ldrh	r2, [r3, #24]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	7b5b      	ldrb	r3, [r3, #13]
 8012900:	2001      	movs	r0, #1
 8012902:	9000      	str	r0, [sp, #0]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f001 fdac 	bl	8014462 <USBH_BulkSendData>
 801290a:	e00b      	b.n	8012924 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8012914:	b29a      	uxth	r2, r3
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	7b5b      	ldrb	r3, [r3, #13]
 801291a:	2001      	movs	r0, #1
 801291c:	9000      	str	r0, [sp, #0]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f001 fd9f 	bl	8014462 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2202      	movs	r2, #2
 8012928:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801292c:	e057      	b.n	80129de <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	7b5b      	ldrb	r3, [r3, #13]
 8012932:	4619      	mov	r1, r3
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f012 fd1f 	bl	8025378 <USBH_LL_GetURBState>
 801293a:	4603      	mov	r3, r0
 801293c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801293e:	7afb      	ldrb	r3, [r7, #11]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d136      	bne.n	80129b2 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	8b12      	ldrh	r2, [r2, #24]
 801294c:	4293      	cmp	r3, r2
 801294e:	d90e      	bls.n	801296e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012954:	68fa      	ldr	r2, [r7, #12]
 8012956:	8b12      	ldrh	r2, [r2, #24]
 8012958:	1a9a      	subs	r2, r3, r2
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	69db      	ldr	r3, [r3, #28]
 8012962:	68fa      	ldr	r2, [r7, #12]
 8012964:	8b12      	ldrh	r2, [r2, #24]
 8012966:	441a      	add	r2, r3
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	61da      	str	r2, [r3, #28]
 801296c:	e002      	b.n	8012974 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	2200      	movs	r2, #0
 8012972:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012978:	2b00      	cmp	r3, #0
 801297a:	d004      	beq.n	8012986 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2201      	movs	r2, #1
 8012980:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8012984:	e006      	b.n	8012994 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2200      	movs	r2, #0
 801298a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 f892 	bl	8012ab8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2204      	movs	r2, #4
 8012998:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80129a8:	2200      	movs	r2, #0
 80129aa:	4619      	mov	r1, r3
 80129ac:	f002 f8d2 	bl	8014b54 <osMessagePut>
      break;
 80129b0:	e014      	b.n	80129dc <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80129b2:	7afb      	ldrb	r3, [r7, #11]
 80129b4:	2b02      	cmp	r3, #2
 80129b6:	d111      	bne.n	80129dc <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2204      	movs	r2, #4
 80129c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80129d4:	2200      	movs	r2, #0
 80129d6:	4619      	mov	r1, r3
 80129d8:	f002 f8bc 	bl	8014b54 <osMessagePut>
      break;
 80129dc:	bf00      	nop
  }
}
 80129de:	bf00      	nop
 80129e0:	3710      	adds	r7, #16
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}

080129e6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80129e6:	b580      	push	{r7, lr}
 80129e8:	b086      	sub	sp, #24
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80129f4:	69db      	ldr	r3, [r3, #28]
 80129f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80129f8:	2300      	movs	r3, #0
 80129fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8012a02:	2b03      	cmp	r3, #3
 8012a04:	d002      	beq.n	8012a0c <CDC_ProcessReception+0x26>
 8012a06:	2b04      	cmp	r3, #4
 8012a08:	d00e      	beq.n	8012a28 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8012a0a:	e051      	b.n	8012ab0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	6a19      	ldr	r1, [r3, #32]
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	8b5a      	ldrh	r2, [r3, #26]
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	7b1b      	ldrb	r3, [r3, #12]
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f001 fd47 	bl	80144ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	2204      	movs	r2, #4
 8012a22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8012a26:	e043      	b.n	8012ab0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	7b1b      	ldrb	r3, [r3, #12]
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f012 fca2 	bl	8025378 <USBH_LL_GetURBState>
 8012a34:	4603      	mov	r3, r0
 8012a36:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012a38:	7cfb      	ldrb	r3, [r7, #19]
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d137      	bne.n	8012aae <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	7b1b      	ldrb	r3, [r3, #12]
 8012a42:	4619      	mov	r1, r3
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f012 fc05 	bl	8025254 <USBH_LL_GetLastXferSize>
 8012a4a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a50:	68fa      	ldr	r2, [r7, #12]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d016      	beq.n	8012a84 <CDC_ProcessReception+0x9e>
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	8b5b      	ldrh	r3, [r3, #26]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d910      	bls.n	8012a84 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	1ad2      	subs	r2, r2, r3
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8012a6e:	697b      	ldr	r3, [r7, #20]
 8012a70:	6a1a      	ldr	r2, [r3, #32]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	441a      	add	r2, r3
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	2203      	movs	r2, #3
 8012a7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8012a82:	e006      	b.n	8012a92 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 f81d 	bl	8012acc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2204      	movs	r2, #4
 8012a96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	f002 f853 	bl	8014b54 <osMessagePut>
      break;
 8012aae:	bf00      	nop
  }
}
 8012ab0:	bf00      	nop
 8012ab2:	3718      	adds	r7, #24
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}

08012ab8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr

08012acc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012acc:	b480      	push	{r7}
 8012ace:	b083      	sub	sp, #12
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ad4:	bf00      	nop
 8012ad6:	370c      	adds	r7, #12
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ade:	4770      	bx	lr

08012ae0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012ae8:	bf00      	nop
 8012aea:	370c      	adds	r7, #12
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr

08012af4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8012af4:	b5b0      	push	{r4, r5, r7, lr}
 8012af6:	b090      	sub	sp, #64	; 0x40
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	60f8      	str	r0, [r7, #12]
 8012afc:	60b9      	str	r1, [r7, #8]
 8012afe:	4613      	mov	r3, r2
 8012b00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d101      	bne.n	8012b0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012b08:	2302      	movs	r3, #2
 8012b0a:	e04d      	b.n	8012ba8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	79fa      	ldrb	r2, [r7, #7]
 8012b10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8012b24:	68f8      	ldr	r0, [r7, #12]
 8012b26:	f000 f847 	bl	8012bb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2200      	movs	r2, #0
 8012b46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	68ba      	ldr	r2, [r7, #8]
 8012b54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012b58:	4b15      	ldr	r3, [pc, #84]	; (8012bb0 <USBH_Init+0xbc>)
 8012b5a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8012b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8012b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b68:	2100      	movs	r1, #0
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f001 ffc9 	bl	8014b02 <osMessageCreate>
 8012b70:	4602      	mov	r2, r0
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012b78:	4b0e      	ldr	r3, [pc, #56]	; (8012bb4 <USBH_Init+0xc0>)
 8012b7a:	f107 0414 	add.w	r4, r7, #20
 8012b7e:	461d      	mov	r5, r3
 8012b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012b84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8012b8c:	f107 0314 	add.w	r3, r7, #20
 8012b90:	68f9      	ldr	r1, [r7, #12]
 8012b92:	4618      	mov	r0, r3
 8012b94:	f001 fde2 	bl	801475c <osThreadCreate>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f012 faa3 	bl	80250ec <USBH_LL_Init>

  return USBH_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3740      	adds	r7, #64	; 0x40
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bdb0      	pop	{r4, r5, r7, pc}
 8012bb0:	08026894 	.word	0x08026894
 8012bb4:	080268a4 	.word	0x080268a4

08012bb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	60fb      	str	r3, [r7, #12]
 8012bc8:	e009      	b.n	8012bde <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	33e0      	adds	r3, #224	; 0xe0
 8012bd0:	009b      	lsls	r3, r3, #2
 8012bd2:	4413      	add	r3, r2
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	3301      	adds	r3, #1
 8012bdc:	60fb      	str	r3, [r7, #12]
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2b0e      	cmp	r3, #14
 8012be2:	d9f2      	bls.n	8012bca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012be4:	2300      	movs	r3, #0
 8012be6:	60fb      	str	r3, [r7, #12]
 8012be8:	e009      	b.n	8012bfe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	4413      	add	r3, r2
 8012bf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	60fb      	str	r3, [r7, #12]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c04:	d3f1      	bcc.n	8012bea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	2201      	movs	r2, #1
 8012c16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2201      	movs	r2, #1
 8012c24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2240      	movs	r2, #64	; 0x40
 8012c2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2200      	movs	r2, #0
 8012c46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b085      	sub	sp, #20
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d016      	beq.n	8012ca2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d10e      	bne.n	8012c9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8012c84:	1c59      	adds	r1, r3, #1
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8012c8c:	687a      	ldr	r2, [r7, #4]
 8012c8e:	33de      	adds	r3, #222	; 0xde
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012c96:	2300      	movs	r3, #0
 8012c98:	73fb      	strb	r3, [r7, #15]
 8012c9a:	e004      	b.n	8012ca6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012c9c:	2302      	movs	r3, #2
 8012c9e:	73fb      	strb	r3, [r7, #15]
 8012ca0:	e001      	b.n	8012ca6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8012ca2:	2302      	movs	r3, #2
 8012ca4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3714      	adds	r7, #20
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8012cca:	78fa      	ldrb	r2, [r7, #3]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d204      	bcs.n	8012cda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	78fa      	ldrb	r2, [r7, #3]
 8012cd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8012cd8:	e001      	b.n	8012cde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8012cda:	2302      	movs	r3, #2
 8012cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	4608      	mov	r0, r1
 8012cf6:	4611      	mov	r1, r2
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	70fb      	strb	r3, [r7, #3]
 8012cfe:	460b      	mov	r3, r1
 8012d00:	70bb      	strb	r3, [r7, #2]
 8012d02:	4613      	mov	r3, r2
 8012d04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8012d06:	2300      	movs	r3, #0
 8012d08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8012d14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012d16:	e025      	b.n	8012d64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
 8012d1a:	221a      	movs	r2, #26
 8012d1c:	fb02 f303 	mul.w	r3, r2, r3
 8012d20:	3308      	adds	r3, #8
 8012d22:	68fa      	ldr	r2, [r7, #12]
 8012d24:	4413      	add	r3, r2
 8012d26:	3302      	adds	r3, #2
 8012d28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	795b      	ldrb	r3, [r3, #5]
 8012d2e:	78fa      	ldrb	r2, [r7, #3]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d002      	beq.n	8012d3a <USBH_FindInterface+0x4e>
 8012d34:	78fb      	ldrb	r3, [r7, #3]
 8012d36:	2bff      	cmp	r3, #255	; 0xff
 8012d38:	d111      	bne.n	8012d5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012d3e:	78ba      	ldrb	r2, [r7, #2]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d002      	beq.n	8012d4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d44:	78bb      	ldrb	r3, [r7, #2]
 8012d46:	2bff      	cmp	r3, #255	; 0xff
 8012d48:	d109      	bne.n	8012d5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012d4e:	787a      	ldrb	r2, [r7, #1]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d002      	beq.n	8012d5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012d54:	787b      	ldrb	r3, [r7, #1]
 8012d56:	2bff      	cmp	r3, #255	; 0xff
 8012d58:	d101      	bne.n	8012d5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012d5a:	7dfb      	ldrb	r3, [r7, #23]
 8012d5c:	e006      	b.n	8012d6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012d5e:	7dfb      	ldrb	r3, [r7, #23]
 8012d60:	3301      	adds	r3, #1
 8012d62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012d64:	7dfb      	ldrb	r3, [r7, #23]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	d9d6      	bls.n	8012d18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012d6a:	23ff      	movs	r3, #255	; 0xff
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	371c      	adds	r7, #28
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f012 f9ef 	bl	8025164 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8012d86:	2101      	movs	r1, #1
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f012 fb08 	bl	802539e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3708      	adds	r7, #8
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd80      	pop	{r7, pc}

08012d98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b088      	sub	sp, #32
 8012d9c:	af04      	add	r7, sp, #16
 8012d9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8012da0:	2302      	movs	r3, #2
 8012da2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012da4:	2300      	movs	r3, #0
 8012da6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d102      	bne.n	8012dba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2203      	movs	r2, #3
 8012db8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	b2db      	uxtb	r3, r3
 8012dc0:	2b0b      	cmp	r3, #11
 8012dc2:	f200 823c 	bhi.w	801323e <USBH_Process+0x4a6>
 8012dc6:	a201      	add	r2, pc, #4	; (adr r2, 8012dcc <USBH_Process+0x34>)
 8012dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dcc:	08012dfd 	.word	0x08012dfd
 8012dd0:	08012e4b 	.word	0x08012e4b
 8012dd4:	08012ecf 	.word	0x08012ecf
 8012dd8:	080131bd 	.word	0x080131bd
 8012ddc:	0801323f 	.word	0x0801323f
 8012de0:	08012f8f 	.word	0x08012f8f
 8012de4:	08013147 	.word	0x08013147
 8012de8:	08012fe1 	.word	0x08012fe1
 8012dec:	0801301d 	.word	0x0801301d
 8012df0:	08013057 	.word	0x08013057
 8012df4:	0801309f 	.word	0x0801309f
 8012df8:	080131a5 	.word	0x080131a5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	f000 821c 	beq.w	8013242 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2201      	movs	r2, #1
 8012e0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8012e10:	20c8      	movs	r0, #200	; 0xc8
 8012e12:	f012 fb02 	bl	802541a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f012 fa01 	bl	802521e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2200      	movs	r2, #0
 8012e28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012e40:	2200      	movs	r2, #0
 8012e42:	4619      	mov	r1, r3
 8012e44:	f001 fe86 	bl	8014b54 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012e48:	e1fb      	b.n	8013242 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d107      	bne.n	8012e64 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2202      	movs	r2, #2
 8012e60:	701a      	strb	r2, [r3, #0]
 8012e62:	e025      	b.n	8012eb0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012e6e:	d914      	bls.n	8012e9a <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e76:	3301      	adds	r3, #1
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d903      	bls.n	8012e92 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	220d      	movs	r2, #13
 8012e8e:	701a      	strb	r2, [r3, #0]
 8012e90:	e00e      	b.n	8012eb0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2200      	movs	r2, #0
 8012e96:	701a      	strb	r2, [r3, #0]
 8012e98:	e00a      	b.n	8012eb0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8012ea0:	f103 020a 	add.w	r2, r3, #10
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8012eaa:	200a      	movs	r0, #10
 8012eac:	f012 fab5 	bl	802541a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	f001 fe44 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8012ecc:	e1c0      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d005      	beq.n	8012ee4 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012ede:	2104      	movs	r1, #4
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012ee4:	2064      	movs	r0, #100	; 0x64
 8012ee6:	f012 fa98 	bl	802541a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f012 f970 	bl	80251d0 <USBH_LL_GetSpeed>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	2205      	movs	r2, #5
 8012efe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012f00:	2100      	movs	r1, #0
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f001 fb1f 	bl	8014546 <USBH_AllocPipe>
 8012f08:	4603      	mov	r3, r0
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012f10:	2180      	movs	r1, #128	; 0x80
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f001 fb17 	bl	8014546 <USBH_AllocPipe>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	7919      	ldrb	r1, [r3, #4]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012f34:	b292      	uxth	r2, r2
 8012f36:	9202      	str	r2, [sp, #8]
 8012f38:	2200      	movs	r2, #0
 8012f3a:	9201      	str	r2, [sp, #4]
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2280      	movs	r2, #128	; 0x80
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f001 fad0 	bl	80144e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	7959      	ldrb	r1, [r3, #5]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012f5c:	b292      	uxth	r2, r2
 8012f5e:	9202      	str	r2, [sp, #8]
 8012f60:	2200      	movs	r2, #0
 8012f62:	9201      	str	r2, [sp, #4]
 8012f64:	9300      	str	r3, [sp, #0]
 8012f66:	4603      	mov	r3, r0
 8012f68:	2200      	movs	r2, #0
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f001 fabc 	bl	80144e8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2201      	movs	r2, #1
 8012f74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012f84:	2200      	movs	r2, #0
 8012f86:	4619      	mov	r1, r3
 8012f88:	f001 fde4 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8012f8c:	e160      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012f8e:	6878      	ldr	r0, [r7, #4]
 8012f90:	f000 f964 	bl	801325c <USBH_HandleEnum>
 8012f94:	4603      	mov	r3, r0
 8012f96:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012f98:	7bbb      	ldrb	r3, [r7, #14]
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f040 8152 	bne.w	8013246 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d103      	bne.n	8012fbc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2208      	movs	r2, #8
 8012fb8:	701a      	strb	r2, [r3, #0]
 8012fba:	e002      	b.n	8012fc2 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2207      	movs	r2, #7
 8012fc0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2205      	movs	r2, #5
 8012fc6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	4619      	mov	r1, r3
 8012fda:	f001 fdbb 	bl	8014b54 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8012fde:	e132      	b.n	8013246 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	f000 812f 	beq.w	801324a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8012ff2:	2101      	movs	r1, #1
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2208      	movs	r2, #8
 8012ffc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2205      	movs	r2, #5
 8013002:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013012:	2200      	movs	r2, #0
 8013014:	4619      	mov	r1, r3
 8013016:	f001 fd9d 	bl	8014b54 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 801301a:	e116      	b.n	801324a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8013022:	b29b      	uxth	r3, r3
 8013024:	4619      	mov	r1, r3
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f000 fcf6 	bl	8013a18 <USBH_SetCfg>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d102      	bne.n	8013038 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2209      	movs	r2, #9
 8013036:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2201      	movs	r2, #1
 801303c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801304c:	2200      	movs	r2, #0
 801304e:	4619      	mov	r1, r3
 8013050:	f001 fd80 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013054:	e0fc      	b.n	8013250 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 801305c:	f003 0320 	and.w	r3, r3, #32
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00a      	beq.n	801307a <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8013064:	2101      	movs	r1, #1
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fcf9 	bl	8013a5e <USBH_SetFeature>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d106      	bne.n	8013080 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	220a      	movs	r2, #10
 8013076:	701a      	strb	r2, [r3, #0]
 8013078:	e002      	b.n	8013080 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	220a      	movs	r2, #10
 801307e:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2201      	movs	r2, #1
 8013084:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013094:	2200      	movs	r2, #0
 8013096:	4619      	mov	r1, r3
 8013098:	f001 fd5c 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801309c:	e0d8      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d03f      	beq.n	8013128 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80130b0:	2300      	movs	r3, #0
 80130b2:	73fb      	strb	r3, [r7, #15]
 80130b4:	e016      	b.n	80130e4 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80130b6:	7bfa      	ldrb	r2, [r7, #15]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	32de      	adds	r2, #222	; 0xde
 80130bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130c0:	791a      	ldrb	r2, [r3, #4]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80130c8:	429a      	cmp	r2, r3
 80130ca:	d108      	bne.n	80130de <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80130cc:	7bfa      	ldrb	r2, [r7, #15]
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	32de      	adds	r2, #222	; 0xde
 80130d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80130dc:	e005      	b.n	80130ea <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80130de:	7bfb      	ldrb	r3, [r7, #15]
 80130e0:	3301      	adds	r3, #1
 80130e2:	73fb      	strb	r3, [r7, #15]
 80130e4:	7bfb      	ldrb	r3, [r7, #15]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d0e5      	beq.n	80130b6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d016      	beq.n	8013122 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	4798      	blx	r3
 8013100:	4603      	mov	r3, r0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d109      	bne.n	801311a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2206      	movs	r2, #6
 801310a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8013112:	2103      	movs	r1, #3
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	4798      	blx	r3
 8013118:	e006      	b.n	8013128 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	220d      	movs	r2, #13
 801311e:	701a      	strb	r2, [r3, #0]
 8013120:	e002      	b.n	8013128 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	220d      	movs	r2, #13
 8013126:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2205      	movs	r2, #5
 801312c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801313c:	2200      	movs	r2, #0
 801313e:	4619      	mov	r1, r3
 8013140:	f001 fd08 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8013144:	e084      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d017      	beq.n	8013180 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013156:	691b      	ldr	r3, [r3, #16]
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	4798      	blx	r3
 801315c:	4603      	mov	r3, r0
 801315e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013160:	7bbb      	ldrb	r3, [r7, #14]
 8013162:	b2db      	uxtb	r3, r3
 8013164:	2b00      	cmp	r3, #0
 8013166:	d103      	bne.n	8013170 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	220b      	movs	r2, #11
 801316c:	701a      	strb	r2, [r3, #0]
 801316e:	e00a      	b.n	8013186 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8013170:	7bbb      	ldrb	r3, [r7, #14]
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b02      	cmp	r3, #2
 8013176:	d106      	bne.n	8013186 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	220d      	movs	r2, #13
 801317c:	701a      	strb	r2, [r3, #0]
 801317e:	e002      	b.n	8013186 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	220d      	movs	r2, #13
 8013184:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2205      	movs	r2, #5
 801318a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801319a:	2200      	movs	r2, #0
 801319c:	4619      	mov	r1, r3
 801319e:	f001 fcd9 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80131a2:	e055      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d04f      	beq.n	801324e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	4798      	blx	r3
      }
      break;
 80131ba:	e048      	b.n	801324e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2200      	movs	r2, #0
 80131c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f7ff fcf7 	bl	8012bb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d009      	beq.n	80131e8 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d005      	beq.n	80131fe <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80131f8:	2105      	movs	r1, #5
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b01      	cmp	r3, #1
 8013208:	d107      	bne.n	801321a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2200      	movs	r2, #0
 801320e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f7ff fdb0 	bl	8012d78 <USBH_Start>
 8013218:	e002      	b.n	8013220 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f011 ffa2 	bl	8025164 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2201      	movs	r2, #1
 8013224:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013234:	2200      	movs	r2, #0
 8013236:	4619      	mov	r1, r3
 8013238:	f001 fc8c 	bl	8014b54 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 801323c:	e008      	b.n	8013250 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 801323e:	bf00      	nop
 8013240:	e006      	b.n	8013250 <USBH_Process+0x4b8>
      break;
 8013242:	bf00      	nop
 8013244:	e004      	b.n	8013250 <USBH_Process+0x4b8>
      break;
 8013246:	bf00      	nop
 8013248:	e002      	b.n	8013250 <USBH_Process+0x4b8>
    break;
 801324a:	bf00      	nop
 801324c:	e000      	b.n	8013250 <USBH_Process+0x4b8>
      break;
 801324e:	bf00      	nop
  }
  return USBH_OK;
 8013250:	2300      	movs	r3, #0
}
 8013252:	4618      	mov	r0, r3
 8013254:	3710      	adds	r7, #16
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop

0801325c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af04      	add	r7, sp, #16
 8013262:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8013264:	2301      	movs	r3, #1
 8013266:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013268:	2301      	movs	r3, #1
 801326a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	785b      	ldrb	r3, [r3, #1]
 8013270:	2b07      	cmp	r3, #7
 8013272:	f200 8208 	bhi.w	8013686 <USBH_HandleEnum+0x42a>
 8013276:	a201      	add	r2, pc, #4	; (adr r2, 801327c <USBH_HandleEnum+0x20>)
 8013278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801327c:	0801329d 	.word	0x0801329d
 8013280:	0801335b 	.word	0x0801335b
 8013284:	080133c5 	.word	0x080133c5
 8013288:	08013453 	.word	0x08013453
 801328c:	080134bd 	.word	0x080134bd
 8013290:	0801352d 	.word	0x0801352d
 8013294:	080135c9 	.word	0x080135c9
 8013298:	08013647 	.word	0x08013647
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801329c:	2108      	movs	r1, #8
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 faea 	bl	8013878 <USBH_Get_DevDesc>
 80132a4:	4603      	mov	r3, r0
 80132a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80132a8:	7bbb      	ldrb	r3, [r7, #14]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d130      	bne.n	8013310 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2201      	movs	r2, #1
 80132bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7919      	ldrb	r1, [r3, #4]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80132ce:	687a      	ldr	r2, [r7, #4]
 80132d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80132d2:	b292      	uxth	r2, r2
 80132d4:	9202      	str	r2, [sp, #8]
 80132d6:	2200      	movs	r2, #0
 80132d8:	9201      	str	r2, [sp, #4]
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	4603      	mov	r3, r0
 80132de:	2280      	movs	r2, #128	; 0x80
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f001 f901 	bl	80144e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7959      	ldrb	r1, [r3, #5]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80132fa:	b292      	uxth	r2, r2
 80132fc:	9202      	str	r2, [sp, #8]
 80132fe:	2200      	movs	r2, #0
 8013300:	9201      	str	r2, [sp, #4]
 8013302:	9300      	str	r3, [sp, #0]
 8013304:	4603      	mov	r3, r0
 8013306:	2200      	movs	r2, #0
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f001 f8ed 	bl	80144e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801330e:	e1bc      	b.n	801368a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013310:	7bbb      	ldrb	r3, [r7, #14]
 8013312:	2b03      	cmp	r3, #3
 8013314:	f040 81b9 	bne.w	801368a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801331e:	3301      	adds	r3, #1
 8013320:	b2da      	uxtb	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801332e:	2b03      	cmp	r3, #3
 8013330:	d903      	bls.n	801333a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	220d      	movs	r2, #13
 8013336:	701a      	strb	r2, [r3, #0]
      break;
 8013338:	e1a7      	b.n	801368a <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	795b      	ldrb	r3, [r3, #5]
 801333e:	4619      	mov	r1, r3
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f001 f921 	bl	8014588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	791b      	ldrb	r3, [r3, #4]
 801334a:	4619      	mov	r1, r3
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f001 f91b 	bl	8014588 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2200      	movs	r2, #0
 8013356:	701a      	strb	r2, [r3, #0]
      break;
 8013358:	e197      	b.n	801368a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801335a:	2112      	movs	r1, #18
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fa8b 	bl	8013878 <USBH_Get_DevDesc>
 8013362:	4603      	mov	r3, r0
 8013364:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013366:	7bbb      	ldrb	r3, [r7, #14]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d103      	bne.n	8013374 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2202      	movs	r2, #2
 8013370:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013372:	e18c      	b.n	801368e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013374:	7bbb      	ldrb	r3, [r7, #14]
 8013376:	2b03      	cmp	r3, #3
 8013378:	f040 8189 	bne.w	801368e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013382:	3301      	adds	r3, #1
 8013384:	b2da      	uxtb	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8013392:	2b03      	cmp	r3, #3
 8013394:	d903      	bls.n	801339e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	220d      	movs	r2, #13
 801339a:	701a      	strb	r2, [r3, #0]
      break;
 801339c:	e177      	b.n	801368e <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	795b      	ldrb	r3, [r3, #5]
 80133a2:	4619      	mov	r1, r3
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f001 f8ef 	bl	8014588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	791b      	ldrb	r3, [r3, #4]
 80133ae:	4619      	mov	r1, r3
 80133b0:	6878      	ldr	r0, [r7, #4]
 80133b2:	f001 f8e9 	bl	8014588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2200      	movs	r2, #0
 80133c0:	701a      	strb	r2, [r3, #0]
      break;
 80133c2:	e164      	b.n	801368e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80133c4:	2101      	movs	r1, #1
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f000 fb02 	bl	80139d0 <USBH_SetAddress>
 80133cc:	4603      	mov	r3, r0
 80133ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80133d0:	7bbb      	ldrb	r3, [r7, #14]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d132      	bne.n	801343c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80133d6:	2002      	movs	r0, #2
 80133d8:	f012 f81f 	bl	802541a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2201      	movs	r2, #1
 80133e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2203      	movs	r2, #3
 80133e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	7919      	ldrb	r1, [r3, #4]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80133fe:	b292      	uxth	r2, r2
 8013400:	9202      	str	r2, [sp, #8]
 8013402:	2200      	movs	r2, #0
 8013404:	9201      	str	r2, [sp, #4]
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	4603      	mov	r3, r0
 801340a:	2280      	movs	r2, #128	; 0x80
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f001 f86b 	bl	80144e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	7959      	ldrb	r1, [r3, #5]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013426:	b292      	uxth	r2, r2
 8013428:	9202      	str	r2, [sp, #8]
 801342a:	2200      	movs	r2, #0
 801342c:	9201      	str	r2, [sp, #4]
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	4603      	mov	r3, r0
 8013432:	2200      	movs	r2, #0
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f001 f857 	bl	80144e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801343a:	e12a      	b.n	8013692 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801343c:	7bbb      	ldrb	r3, [r7, #14]
 801343e:	2b03      	cmp	r3, #3
 8013440:	f040 8127 	bne.w	8013692 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	220d      	movs	r2, #13
 8013448:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	2200      	movs	r2, #0
 801344e:	705a      	strb	r2, [r3, #1]
      break;
 8013450:	e11f      	b.n	8013692 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013452:	2109      	movs	r1, #9
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fa37 	bl	80138c8 <USBH_Get_CfgDesc>
 801345a:	4603      	mov	r3, r0
 801345c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801345e:	7bbb      	ldrb	r3, [r7, #14]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d103      	bne.n	801346c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2204      	movs	r2, #4
 8013468:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801346a:	e114      	b.n	8013696 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801346c:	7bbb      	ldrb	r3, [r7, #14]
 801346e:	2b03      	cmp	r3, #3
 8013470:	f040 8111 	bne.w	8013696 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801347a:	3301      	adds	r3, #1
 801347c:	b2da      	uxtb	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801348a:	2b03      	cmp	r3, #3
 801348c:	d903      	bls.n	8013496 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	220d      	movs	r2, #13
 8013492:	701a      	strb	r2, [r3, #0]
      break;
 8013494:	e0ff      	b.n	8013696 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	795b      	ldrb	r3, [r3, #5]
 801349a:	4619      	mov	r1, r3
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f001 f873 	bl	8014588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	791b      	ldrb	r3, [r3, #4]
 80134a6:	4619      	mov	r1, r3
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f001 f86d 	bl	8014588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	2200      	movs	r2, #0
 80134b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	701a      	strb	r2, [r3, #0]
      break;
 80134ba:	e0ec      	b.n	8013696 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80134c2:	4619      	mov	r1, r3
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f000 f9ff 	bl	80138c8 <USBH_Get_CfgDesc>
 80134ca:	4603      	mov	r3, r0
 80134cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80134ce:	7bbb      	ldrb	r3, [r7, #14]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d103      	bne.n	80134dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2205      	movs	r2, #5
 80134d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80134da:	e0de      	b.n	801369a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80134dc:	7bbb      	ldrb	r3, [r7, #14]
 80134de:	2b03      	cmp	r3, #3
 80134e0:	f040 80db 	bne.w	801369a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80134ea:	3301      	adds	r3, #1
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80134fa:	2b03      	cmp	r3, #3
 80134fc:	d903      	bls.n	8013506 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	220d      	movs	r2, #13
 8013502:	701a      	strb	r2, [r3, #0]
      break;
 8013504:	e0c9      	b.n	801369a <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	795b      	ldrb	r3, [r3, #5]
 801350a:	4619      	mov	r1, r3
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f001 f83b 	bl	8014588 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	791b      	ldrb	r3, [r3, #4]
 8013516:	4619      	mov	r1, r3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f001 f835 	bl	8014588 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2200      	movs	r2, #0
 8013522:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	701a      	strb	r2, [r3, #0]
      break;
 801352a:	e0b6      	b.n	801369a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8013532:	2b00      	cmp	r3, #0
 8013534:	d036      	beq.n	80135a4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013542:	23ff      	movs	r3, #255	; 0xff
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 f9e3 	bl	8013910 <USBH_Get_StringDesc>
 801354a:	4603      	mov	r3, r0
 801354c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801354e:	7bbb      	ldrb	r3, [r7, #14]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d111      	bne.n	8013578 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2206      	movs	r2, #6
 8013558:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2205      	movs	r2, #5
 801355e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801356e:	2200      	movs	r2, #0
 8013570:	4619      	mov	r1, r3
 8013572:	f001 faef 	bl	8014b54 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8013576:	e092      	b.n	801369e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013578:	7bbb      	ldrb	r3, [r7, #14]
 801357a:	2b03      	cmp	r3, #3
 801357c:	f040 808f 	bne.w	801369e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2206      	movs	r2, #6
 8013584:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2205      	movs	r2, #5
 801358a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801359a:	2200      	movs	r2, #0
 801359c:	4619      	mov	r1, r3
 801359e:	f001 fad9 	bl	8014b54 <osMessagePut>
      break;
 80135a2:	e07c      	b.n	801369e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2206      	movs	r2, #6
 80135a8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2205      	movs	r2, #5
 80135ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80135be:	2200      	movs	r2, #0
 80135c0:	4619      	mov	r1, r3
 80135c2:	f001 fac7 	bl	8014b54 <osMessagePut>
      break;
 80135c6:	e06a      	b.n	801369e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d027      	beq.n	8013622 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80135de:	23ff      	movs	r3, #255	; 0xff
 80135e0:	6878      	ldr	r0, [r7, #4]
 80135e2:	f000 f995 	bl	8013910 <USBH_Get_StringDesc>
 80135e6:	4603      	mov	r3, r0
 80135e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80135ea:	7bbb      	ldrb	r3, [r7, #14]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d103      	bne.n	80135f8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2207      	movs	r2, #7
 80135f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80135f6:	e054      	b.n	80136a2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80135f8:	7bbb      	ldrb	r3, [r7, #14]
 80135fa:	2b03      	cmp	r3, #3
 80135fc:	d151      	bne.n	80136a2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2207      	movs	r2, #7
 8013602:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2205      	movs	r2, #5
 8013608:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013618:	2200      	movs	r2, #0
 801361a:	4619      	mov	r1, r3
 801361c:	f001 fa9a 	bl	8014b54 <osMessagePut>
      break;
 8013620:	e03f      	b.n	80136a2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2207      	movs	r2, #7
 8013626:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2205      	movs	r2, #5
 801362c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801363c:	2200      	movs	r2, #0
 801363e:	4619      	mov	r1, r3
 8013640:	f001 fa88 	bl	8014b54 <osMessagePut>
      break;
 8013644:	e02d      	b.n	80136a2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 801364c:	2b00      	cmp	r3, #0
 801364e:	d017      	beq.n	8013680 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801365c:	23ff      	movs	r3, #255	; 0xff
 801365e:	6878      	ldr	r0, [r7, #4]
 8013660:	f000 f956 	bl	8013910 <USBH_Get_StringDesc>
 8013664:	4603      	mov	r3, r0
 8013666:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013668:	7bbb      	ldrb	r3, [r7, #14]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d102      	bne.n	8013674 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801366e:	2300      	movs	r3, #0
 8013670:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013672:	e018      	b.n	80136a6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013674:	7bbb      	ldrb	r3, [r7, #14]
 8013676:	2b03      	cmp	r3, #3
 8013678:	d115      	bne.n	80136a6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	73fb      	strb	r3, [r7, #15]
      break;
 801367e:	e012      	b.n	80136a6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	73fb      	strb	r3, [r7, #15]
      break;
 8013684:	e00f      	b.n	80136a6 <USBH_HandleEnum+0x44a>

    default:
      break;
 8013686:	bf00      	nop
 8013688:	e00e      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 801368a:	bf00      	nop
 801368c:	e00c      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 801368e:	bf00      	nop
 8013690:	e00a      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 8013692:	bf00      	nop
 8013694:	e008      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 8013696:	bf00      	nop
 8013698:	e006      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 801369a:	bf00      	nop
 801369c:	e004      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 801369e:	bf00      	nop
 80136a0:	e002      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 80136a2:	bf00      	nop
 80136a4:	e000      	b.n	80136a8 <USBH_HandleEnum+0x44c>
      break;
 80136a6:	bf00      	nop
  }
  return Status;
 80136a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop

080136b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80136b4:	b480      	push	{r7}
 80136b6:	b083      	sub	sp, #12
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	683a      	ldr	r2, [r7, #0]
 80136c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80136c6:	bf00      	nop
 80136c8:	370c      	adds	r7, #12
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr

080136d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b082      	sub	sp, #8
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80136e0:	1c5a      	adds	r2, r3, #1
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f000 f804 	bl	80136f6 <USBH_HandleSof>
}
 80136ee:	bf00      	nop
 80136f0:	3708      	adds	r7, #8
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b082      	sub	sp, #8
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b0b      	cmp	r3, #11
 8013706:	d10a      	bne.n	801371e <USBH_HandleSof+0x28>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801370e:	2b00      	cmp	r3, #0
 8013710:	d005      	beq.n	801371e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	4798      	blx	r3
  }
}
 801371e:	bf00      	nop
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b082      	sub	sp, #8
 801372a:	af00      	add	r7, sp, #0
 801372c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2201      	movs	r2, #1
 801373a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801374a:	2200      	movs	r2, #0
 801374c:	4619      	mov	r1, r3
 801374e:	f001 fa01 	bl	8014b54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8013752:	bf00      	nop
}
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801375a:	b480      	push	{r7}
 801375c:	b083      	sub	sp, #12
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 801376a:	bf00      	nop
}
 801376c:	370c      	adds	r7, #12
 801376e:	46bd      	mov	sp, r7
 8013770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013774:	4770      	bx	lr

08013776 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013776:	b580      	push	{r7, lr}
 8013778:	b082      	sub	sp, #8
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2200      	movs	r2, #0
 8013792:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2201      	movs	r2, #1
 801379a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80137aa:	2200      	movs	r2, #0
 80137ac:	4619      	mov	r1, r3
 80137ae:	f001 f9d1 	bl	8014b54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b082      	sub	sp, #8
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2201      	movs	r2, #1
 80137c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2200      	movs	r2, #0
 80137d8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f011 fcdc 	bl	802519a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	791b      	ldrb	r3, [r3, #4]
 80137e6:	4619      	mov	r1, r3
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f000 fecd 	bl	8014588 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	795b      	ldrb	r3, [r3, #5]
 80137f2:	4619      	mov	r1, r3
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fec7 	bl	8014588 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2201      	movs	r2, #1
 80137fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801380e:	2200      	movs	r2, #0
 8013810:	4619      	mov	r1, r3
 8013812:	f001 f99f 	bl	8014b54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8013816:	2300      	movs	r3, #0
}
 8013818:	4618      	mov	r0, r3
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b086      	sub	sp, #24
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801382e:	f107 030c 	add.w	r3, r7, #12
 8013832:	f04f 32ff 	mov.w	r2, #4294967295
 8013836:	4618      	mov	r0, r3
 8013838:	f001 f9cc 	bl	8014bd4 <osMessageGet>
    if (event.status == osEventMessage)
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2b10      	cmp	r3, #16
 8013840:	d1f2      	bne.n	8013828 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff faa8 	bl	8012d98 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8013848:	e7ee      	b.n	8013828 <USBH_Process_OS+0x8>

0801384a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b082      	sub	sp, #8
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2201      	movs	r2, #1
 8013856:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013866:	2200      	movs	r2, #0
 8013868:	4619      	mov	r1, r3
 801386a:	f001 f973 	bl	8014b54 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 801386e:	2300      	movs	r3, #0
}
 8013870:	4618      	mov	r0, r3
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b086      	sub	sp, #24
 801387c:	af02      	add	r7, sp, #8
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 801388a:	78fb      	ldrb	r3, [r7, #3]
 801388c:	b29b      	uxth	r3, r3
 801388e:	9300      	str	r3, [sp, #0]
 8013890:	4613      	mov	r3, r2
 8013892:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013896:	2100      	movs	r1, #0
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f000 f864 	bl	8013966 <USBH_GetDescriptor>
 801389e:	4603      	mov	r3, r0
 80138a0:	73fb      	strb	r3, [r7, #15]
 80138a2:	7bfb      	ldrb	r3, [r7, #15]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d10a      	bne.n	80138be <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f203 3026 	addw	r0, r3, #806	; 0x326
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80138b4:	78fa      	ldrb	r2, [r7, #3]
 80138b6:	b292      	uxth	r2, r2
 80138b8:	4619      	mov	r1, r3
 80138ba:	f000 f918 	bl	8013aee <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80138be:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3710      	adds	r7, #16
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}

080138c8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b086      	sub	sp, #24
 80138cc:	af02      	add	r7, sp, #8
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	460b      	mov	r3, r1
 80138d2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	331c      	adds	r3, #28
 80138d8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80138da:	887b      	ldrh	r3, [r7, #2]
 80138dc:	9300      	str	r3, [sp, #0]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138e4:	2100      	movs	r1, #0
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f000 f83d 	bl	8013966 <USBH_GetDescriptor>
 80138ec:	4603      	mov	r3, r0
 80138ee:	72fb      	strb	r3, [r7, #11]
 80138f0:	7afb      	ldrb	r3, [r7, #11]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d107      	bne.n	8013906 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80138fc:	887a      	ldrh	r2, [r7, #2]
 80138fe:	68f9      	ldr	r1, [r7, #12]
 8013900:	4618      	mov	r0, r3
 8013902:	f000 f964 	bl	8013bce <USBH_ParseCfgDesc>
  }

  return status;
 8013906:	7afb      	ldrb	r3, [r7, #11]
}
 8013908:	4618      	mov	r0, r3
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}

08013910 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b088      	sub	sp, #32
 8013914:	af02      	add	r7, sp, #8
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	607a      	str	r2, [r7, #4]
 801391a:	461a      	mov	r2, r3
 801391c:	460b      	mov	r3, r1
 801391e:	72fb      	strb	r3, [r7, #11]
 8013920:	4613      	mov	r3, r2
 8013922:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8013924:	7afb      	ldrb	r3, [r7, #11]
 8013926:	b29b      	uxth	r3, r3
 8013928:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801392c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8013934:	893b      	ldrh	r3, [r7, #8]
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	460b      	mov	r3, r1
 801393a:	2100      	movs	r1, #0
 801393c:	68f8      	ldr	r0, [r7, #12]
 801393e:	f000 f812 	bl	8013966 <USBH_GetDescriptor>
 8013942:	4603      	mov	r3, r0
 8013944:	75fb      	strb	r3, [r7, #23]
 8013946:	7dfb      	ldrb	r3, [r7, #23]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d107      	bne.n	801395c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8013952:	893a      	ldrh	r2, [r7, #8]
 8013954:	6879      	ldr	r1, [r7, #4]
 8013956:	4618      	mov	r0, r3
 8013958:	f000 fa37 	bl	8013dca <USBH_ParseStringDesc>
  }

  return status;
 801395c:	7dfb      	ldrb	r3, [r7, #23]
}
 801395e:	4618      	mov	r0, r3
 8013960:	3718      	adds	r7, #24
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}

08013966 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8013966:	b580      	push	{r7, lr}
 8013968:	b084      	sub	sp, #16
 801396a:	af00      	add	r7, sp, #0
 801396c:	60f8      	str	r0, [r7, #12]
 801396e:	607b      	str	r3, [r7, #4]
 8013970:	460b      	mov	r3, r1
 8013972:	72fb      	strb	r3, [r7, #11]
 8013974:	4613      	mov	r3, r2
 8013976:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	789b      	ldrb	r3, [r3, #2]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d11c      	bne.n	80139ba <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013980:	7afb      	ldrb	r3, [r7, #11]
 8013982:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013986:	b2da      	uxtb	r2, r3
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	2206      	movs	r2, #6
 8013990:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	893a      	ldrh	r2, [r7, #8]
 8013996:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013998:	893b      	ldrh	r3, [r7, #8]
 801399a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801399e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80139a2:	d104      	bne.n	80139ae <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f240 4209 	movw	r2, #1033	; 0x409
 80139aa:	829a      	strh	r2, [r3, #20]
 80139ac:	e002      	b.n	80139b4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2200      	movs	r2, #0
 80139b2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	8b3a      	ldrh	r2, [r7, #24]
 80139b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80139ba:	8b3b      	ldrh	r3, [r7, #24]
 80139bc:	461a      	mov	r2, r3
 80139be:	6879      	ldr	r1, [r7, #4]
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f000 fa50 	bl	8013e66 <USBH_CtlReq>
 80139c6:	4603      	mov	r3, r0
}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3710      	adds	r7, #16
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	460b      	mov	r3, r1
 80139da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	789b      	ldrb	r3, [r3, #2]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d10f      	bne.n	8013a04 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2205      	movs	r2, #5
 80139ee:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80139f0:	78fb      	ldrb	r3, [r7, #3]
 80139f2:	b29a      	uxth	r2, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	2200      	movs	r2, #0
 8013a02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8013a04:	2200      	movs	r2, #0
 8013a06:	2100      	movs	r1, #0
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 fa2c 	bl	8013e66 <USBH_CtlReq>
 8013a0e:	4603      	mov	r3, r0
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}

08013a18 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	460b      	mov	r3, r1
 8013a22:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	789b      	ldrb	r3, [r3, #2]
 8013a28:	2b01      	cmp	r3, #1
 8013a2a:	d10e      	bne.n	8013a4a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2209      	movs	r2, #9
 8013a36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	887a      	ldrh	r2, [r7, #2]
 8013a3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	2200      	movs	r2, #0
 8013a42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2200      	movs	r2, #0
 8013a48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f000 fa09 	bl	8013e66 <USBH_CtlReq>
 8013a54:	4603      	mov	r3, r0
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3708      	adds	r7, #8
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
 8013a66:	460b      	mov	r3, r1
 8013a68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	789b      	ldrb	r3, [r3, #2]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d10f      	bne.n	8013a92 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2203      	movs	r2, #3
 8013a7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013a7e:	78fb      	ldrb	r3, [r7, #3]
 8013a80:	b29a      	uxth	r2, r3
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	2200      	movs	r2, #0
 8013a90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8013a92:	2200      	movs	r2, #0
 8013a94:	2100      	movs	r1, #0
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f000 f9e5 	bl	8013e66 <USBH_CtlReq>
 8013a9c:	4603      	mov	r3, r0
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3708      	adds	r7, #8
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013aa6:	b580      	push	{r7, lr}
 8013aa8:	b082      	sub	sp, #8
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
 8013aae:	460b      	mov	r3, r1
 8013ab0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	789b      	ldrb	r3, [r3, #2]
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d10f      	bne.n	8013ada <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2202      	movs	r2, #2
 8013abe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013acc:	78fb      	ldrb	r3, [r7, #3]
 8013ace:	b29a      	uxth	r2, r3
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8013ada:	2200      	movs	r2, #0
 8013adc:	2100      	movs	r1, #0
 8013ade:	6878      	ldr	r0, [r7, #4]
 8013ae0:	f000 f9c1 	bl	8013e66 <USBH_CtlReq>
 8013ae4:	4603      	mov	r3, r0
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3708      	adds	r7, #8
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}

08013aee <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8013aee:	b480      	push	{r7}
 8013af0:	b085      	sub	sp, #20
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	60f8      	str	r0, [r7, #12]
 8013af6:	60b9      	str	r1, [r7, #8]
 8013af8:	4613      	mov	r3, r2
 8013afa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	781a      	ldrb	r2, [r3, #0]
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	785a      	ldrb	r2, [r3, #1]
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	3302      	adds	r3, #2
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	b29a      	uxth	r2, r3
 8013b14:	68bb      	ldr	r3, [r7, #8]
 8013b16:	3303      	adds	r3, #3
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	021b      	lsls	r3, r3, #8
 8013b1e:	b29b      	uxth	r3, r3
 8013b20:	4313      	orrs	r3, r2
 8013b22:	b29a      	uxth	r2, r3
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	791a      	ldrb	r2, [r3, #4]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	795a      	ldrb	r2, [r3, #5]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	799a      	ldrb	r2, [r3, #6]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	79da      	ldrb	r2, [r3, #7]
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8013b48:	88fb      	ldrh	r3, [r7, #6]
 8013b4a:	2b08      	cmp	r3, #8
 8013b4c:	d939      	bls.n	8013bc2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	3308      	adds	r3, #8
 8013b52:	781b      	ldrb	r3, [r3, #0]
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	3309      	adds	r3, #9
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	021b      	lsls	r3, r3, #8
 8013b60:	b29b      	uxth	r3, r3
 8013b62:	4313      	orrs	r3, r2
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	330a      	adds	r3, #10
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	330b      	adds	r3, #11
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	021b      	lsls	r3, r3, #8
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	4313      	orrs	r3, r2
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	330c      	adds	r3, #12
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	330d      	adds	r3, #13
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	021b      	lsls	r3, r3, #8
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	4313      	orrs	r3, r2
 8013b9c:	b29a      	uxth	r2, r3
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	7b9a      	ldrb	r2, [r3, #14]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	7bda      	ldrb	r2, [r3, #15]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	7c1a      	ldrb	r2, [r3, #16]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	7c5a      	ldrb	r2, [r3, #17]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	745a      	strb	r2, [r3, #17]
  }
}
 8013bc2:	bf00      	nop
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr

08013bce <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8013bce:	b580      	push	{r7, lr}
 8013bd0:	b08a      	sub	sp, #40	; 0x28
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	60f8      	str	r0, [r7, #12]
 8013bd6:	60b9      	str	r1, [r7, #8]
 8013bd8:	4613      	mov	r3, r2
 8013bda:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8013be0:	2300      	movs	r3, #0
 8013be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8013be6:	2300      	movs	r3, #0
 8013be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	781a      	ldrb	r2, [r3, #0]
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	785a      	ldrb	r2, [r3, #1]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	3302      	adds	r3, #2
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	3303      	adds	r3, #3
 8013c0c:	781b      	ldrb	r3, [r3, #0]
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	021b      	lsls	r3, r3, #8
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	4313      	orrs	r3, r2
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	791a      	ldrb	r2, [r3, #4]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	795a      	ldrb	r2, [r3, #5]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	799a      	ldrb	r2, [r3, #6]
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	79da      	ldrb	r2, [r3, #7]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	7a1a      	ldrb	r2, [r3, #8]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8013c44:	88fb      	ldrh	r3, [r7, #6]
 8013c46:	2b09      	cmp	r3, #9
 8013c48:	d95f      	bls.n	8013d0a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8013c4a:	2309      	movs	r3, #9
 8013c4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013c52:	e051      	b.n	8013cf8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013c54:	f107 0316 	add.w	r3, r7, #22
 8013c58:	4619      	mov	r1, r3
 8013c5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c5c:	f000 f8e8 	bl	8013e30 <USBH_GetNextDesc>
 8013c60:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	785b      	ldrb	r3, [r3, #1]
 8013c66:	2b04      	cmp	r3, #4
 8013c68:	d146      	bne.n	8013cf8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8013c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013c6e:	221a      	movs	r2, #26
 8013c70:	fb02 f303 	mul.w	r3, r2, r3
 8013c74:	3308      	adds	r3, #8
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	4413      	add	r3, r2
 8013c7a:	3302      	adds	r3, #2
 8013c7c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c80:	69f8      	ldr	r0, [r7, #28]
 8013c82:	f000 f846 	bl	8013d12 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013c86:	2300      	movs	r3, #0
 8013c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013c90:	e022      	b.n	8013cd8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013c92:	f107 0316 	add.w	r3, r7, #22
 8013c96:	4619      	mov	r1, r3
 8013c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c9a:	f000 f8c9 	bl	8013e30 <USBH_GetNextDesc>
 8013c9e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8013ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca2:	785b      	ldrb	r3, [r3, #1]
 8013ca4:	2b05      	cmp	r3, #5
 8013ca6:	d117      	bne.n	8013cd8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8013ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013cb0:	3201      	adds	r2, #1
 8013cb2:	00d2      	lsls	r2, r2, #3
 8013cb4:	211a      	movs	r1, #26
 8013cb6:	fb01 f303 	mul.w	r3, r1, r3
 8013cba:	4413      	add	r3, r2
 8013cbc:	3308      	adds	r3, #8
 8013cbe:	68fa      	ldr	r2, [r7, #12]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8013cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cc8:	69b8      	ldr	r0, [r7, #24]
 8013cca:	f000 f851 	bl	8013d70 <USBH_ParseEPDesc>
            ep_ix++;
 8013cce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	791b      	ldrb	r3, [r3, #4]
 8013cdc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d204      	bcs.n	8013cee <USBH_ParseCfgDesc+0x120>
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	885a      	ldrh	r2, [r3, #2]
 8013ce8:	8afb      	ldrh	r3, [r7, #22]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d8d1      	bhi.n	8013c92 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8013cee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cf2:	3301      	adds	r3, #1
 8013cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8013cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d804      	bhi.n	8013d0a <USBH_ParseCfgDesc+0x13c>
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	885a      	ldrh	r2, [r3, #2]
 8013d04:	8afb      	ldrh	r3, [r7, #22]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d8a4      	bhi.n	8013c54 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8013d0a:	bf00      	nop
 8013d0c:	3728      	adds	r7, #40	; 0x28
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}

08013d12 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8013d12:	b480      	push	{r7}
 8013d14:	b083      	sub	sp, #12
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
 8013d1a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	781a      	ldrb	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	785a      	ldrb	r2, [r3, #1]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	789a      	ldrb	r2, [r3, #2]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	78da      	ldrb	r2, [r3, #3]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	791a      	ldrb	r2, [r3, #4]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	795a      	ldrb	r2, [r3, #5]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	799a      	ldrb	r2, [r3, #6]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	79da      	ldrb	r2, [r3, #7]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	7a1a      	ldrb	r2, [r3, #8]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	721a      	strb	r2, [r3, #8]
}
 8013d64:	bf00      	nop
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6e:	4770      	bx	lr

08013d70 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8013d70:	b480      	push	{r7}
 8013d72:	b083      	sub	sp, #12
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	781a      	ldrb	r2, [r3, #0]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	785a      	ldrb	r2, [r3, #1]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	789a      	ldrb	r2, [r3, #2]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	78da      	ldrb	r2, [r3, #3]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	3304      	adds	r3, #4
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	3305      	adds	r3, #5
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	021b      	lsls	r3, r3, #8
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	4313      	orrs	r3, r2
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	799a      	ldrb	r2, [r3, #6]
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	719a      	strb	r2, [r3, #6]
}
 8013dbe:	bf00      	nop
 8013dc0:	370c      	adds	r7, #12
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr

08013dca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8013dca:	b480      	push	{r7}
 8013dcc:	b087      	sub	sp, #28
 8013dce:	af00      	add	r7, sp, #0
 8013dd0:	60f8      	str	r0, [r7, #12]
 8013dd2:	60b9      	str	r1, [r7, #8]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	3301      	adds	r3, #1
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	2b03      	cmp	r3, #3
 8013de0:	d120      	bne.n	8013e24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	1e9a      	subs	r2, r3, #2
 8013de8:	88fb      	ldrh	r3, [r7, #6]
 8013dea:	4293      	cmp	r3, r2
 8013dec:	bf28      	it	cs
 8013dee:	4613      	movcs	r3, r2
 8013df0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	3302      	adds	r3, #2
 8013df6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	82fb      	strh	r3, [r7, #22]
 8013dfc:	e00b      	b.n	8013e16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013dfe:	8afb      	ldrh	r3, [r7, #22]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	4413      	add	r3, r2
 8013e04:	781a      	ldrb	r2, [r3, #0]
 8013e06:	68bb      	ldr	r3, [r7, #8]
 8013e08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013e0a:	68bb      	ldr	r3, [r7, #8]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013e10:	8afb      	ldrh	r3, [r7, #22]
 8013e12:	3302      	adds	r3, #2
 8013e14:	82fb      	strh	r3, [r7, #22]
 8013e16:	8afa      	ldrh	r2, [r7, #22]
 8013e18:	8abb      	ldrh	r3, [r7, #20]
 8013e1a:	429a      	cmp	r2, r3
 8013e1c:	d3ef      	bcc.n	8013dfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	2200      	movs	r2, #0
 8013e22:	701a      	strb	r2, [r3, #0]
  }
}
 8013e24:	bf00      	nop
 8013e26:	371c      	adds	r7, #28
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b085      	sub	sp, #20
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	881a      	ldrh	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	4413      	add	r3, r2
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	781b      	ldrb	r3, [r3, #0]
 8013e50:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	4413      	add	r3, r2
 8013e56:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013e58:	68fb      	ldr	r3, [r7, #12]
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3714      	adds	r7, #20
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013e66:	b580      	push	{r7, lr}
 8013e68:	b086      	sub	sp, #24
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	60f8      	str	r0, [r7, #12]
 8013e6e:	60b9      	str	r1, [r7, #8]
 8013e70:	4613      	mov	r3, r2
 8013e72:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013e74:	2301      	movs	r3, #1
 8013e76:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	789b      	ldrb	r3, [r3, #2]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d002      	beq.n	8013e86 <USBH_CtlReq+0x20>
 8013e80:	2b02      	cmp	r3, #2
 8013e82:	d01d      	beq.n	8013ec0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8013e84:	e043      	b.n	8013f0e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	68ba      	ldr	r2, [r7, #8]
 8013e8a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	88fa      	ldrh	r2, [r7, #6]
 8013e90:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2201      	movs	r2, #1
 8013e96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	2202      	movs	r2, #2
 8013e9c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2203      	movs	r2, #3
 8013ea6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	4619      	mov	r1, r3
 8013eba:	f000 fe4b 	bl	8014b54 <osMessagePut>
      break;
 8013ebe:	e026      	b.n	8013f0e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f000 f829 	bl	8013f18 <USBH_HandleControl>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013eca:	7dfb      	ldrb	r3, [r7, #23]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d002      	beq.n	8013ed6 <USBH_CtlReq+0x70>
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	2b03      	cmp	r3, #3
 8013ed4:	d106      	bne.n	8013ee4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	761a      	strb	r2, [r3, #24]
 8013ee2:	e005      	b.n	8013ef0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8013ee4:	7dfb      	ldrb	r3, [r7, #23]
 8013ee6:	2b02      	cmp	r3, #2
 8013ee8:	d102      	bne.n	8013ef0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2201      	movs	r2, #1
 8013eee:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2203      	movs	r2, #3
 8013ef4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013f04:	2200      	movs	r2, #0
 8013f06:	4619      	mov	r1, r3
 8013f08:	f000 fe24 	bl	8014b54 <osMessagePut>
      break;
 8013f0c:	bf00      	nop
  }
  return status;
 8013f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3718      	adds	r7, #24
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}

08013f18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b086      	sub	sp, #24
 8013f1c:	af02      	add	r7, sp, #8
 8013f1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013f20:	2301      	movs	r3, #1
 8013f22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013f24:	2300      	movs	r3, #0
 8013f26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	7e1b      	ldrb	r3, [r3, #24]
 8013f2c:	3b01      	subs	r3, #1
 8013f2e:	2b0a      	cmp	r3, #10
 8013f30:	f200 8229 	bhi.w	8014386 <USBH_HandleControl+0x46e>
 8013f34:	a201      	add	r2, pc, #4	; (adr r2, 8013f3c <USBH_HandleControl+0x24>)
 8013f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f3a:	bf00      	nop
 8013f3c:	08013f69 	.word	0x08013f69
 8013f40:	08013f83 	.word	0x08013f83
 8013f44:	08014025 	.word	0x08014025
 8013f48:	0801404b 	.word	0x0801404b
 8013f4c:	080140d7 	.word	0x080140d7
 8013f50:	08014101 	.word	0x08014101
 8013f54:	080141c3 	.word	0x080141c3
 8013f58:	080141e5 	.word	0x080141e5
 8013f5c:	08014277 	.word	0x08014277
 8013f60:	0801429d 	.word	0x0801429d
 8013f64:	0801432f 	.word	0x0801432f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f103 0110 	add.w	r1, r3, #16
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	795b      	ldrb	r3, [r3, #5]
 8013f72:	461a      	mov	r2, r3
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f000 fa17 	bl	80143a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2202      	movs	r2, #2
 8013f7e:	761a      	strb	r2, [r3, #24]
      break;
 8013f80:	e20c      	b.n	801439c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	795b      	ldrb	r3, [r3, #5]
 8013f86:	4619      	mov	r1, r3
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f011 f9f5 	bl	8025378 <USBH_LL_GetURBState>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013f92:	7bbb      	ldrb	r3, [r7, #14]
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d12c      	bne.n	8013ff2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	7c1b      	ldrb	r3, [r3, #16]
 8013f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013fa0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	8adb      	ldrh	r3, [r3, #22]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d00a      	beq.n	8013fc0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013faa:	7b7b      	ldrb	r3, [r7, #13]
 8013fac:	2b80      	cmp	r3, #128	; 0x80
 8013fae:	d103      	bne.n	8013fb8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2203      	movs	r2, #3
 8013fb4:	761a      	strb	r2, [r3, #24]
 8013fb6:	e00d      	b.n	8013fd4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2205      	movs	r2, #5
 8013fbc:	761a      	strb	r2, [r3, #24]
 8013fbe:	e009      	b.n	8013fd4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013fc0:	7b7b      	ldrb	r3, [r7, #13]
 8013fc2:	2b80      	cmp	r3, #128	; 0x80
 8013fc4:	d103      	bne.n	8013fce <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2209      	movs	r2, #9
 8013fca:	761a      	strb	r2, [r3, #24]
 8013fcc:	e002      	b.n	8013fd4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2207      	movs	r2, #7
 8013fd2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2203      	movs	r2, #3
 8013fd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8013fe8:	2200      	movs	r2, #0
 8013fea:	4619      	mov	r1, r3
 8013fec:	f000 fdb2 	bl	8014b54 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8013ff0:	e1cb      	b.n	801438a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013ff2:	7bbb      	ldrb	r3, [r7, #14]
 8013ff4:	2b04      	cmp	r3, #4
 8013ff6:	d003      	beq.n	8014000 <USBH_HandleControl+0xe8>
 8013ff8:	7bbb      	ldrb	r3, [r7, #14]
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	f040 81c5 	bne.w	801438a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	220b      	movs	r2, #11
 8014004:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2203      	movs	r2, #3
 801400a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801401a:	2200      	movs	r2, #0
 801401c:	4619      	mov	r1, r3
 801401e:	f000 fd99 	bl	8014b54 <osMessagePut>
      break;
 8014022:	e1b2      	b.n	801438a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801402a:	b29a      	uxth	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	6899      	ldr	r1, [r3, #8]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	899a      	ldrh	r2, [r3, #12]
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	791b      	ldrb	r3, [r3, #4]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f000 f9f2 	bl	8014426 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2204      	movs	r2, #4
 8014046:	761a      	strb	r2, [r3, #24]
      break;
 8014048:	e1a8      	b.n	801439c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	791b      	ldrb	r3, [r3, #4]
 801404e:	4619      	mov	r1, r3
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f011 f991 	bl	8025378 <USBH_LL_GetURBState>
 8014056:	4603      	mov	r3, r0
 8014058:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801405a:	7bbb      	ldrb	r3, [r7, #14]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d110      	bne.n	8014082 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2209      	movs	r2, #9
 8014064:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2203      	movs	r2, #3
 801406a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801407a:	2200      	movs	r2, #0
 801407c:	4619      	mov	r1, r3
 801407e:	f000 fd69 	bl	8014b54 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8014082:	7bbb      	ldrb	r3, [r7, #14]
 8014084:	2b05      	cmp	r3, #5
 8014086:	d110      	bne.n	80140aa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8014088:	2303      	movs	r3, #3
 801408a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2203      	movs	r2, #3
 8014090:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140a0:	2200      	movs	r2, #0
 80140a2:	4619      	mov	r1, r3
 80140a4:	f000 fd56 	bl	8014b54 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80140a8:	e171      	b.n	801438e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80140aa:	7bbb      	ldrb	r3, [r7, #14]
 80140ac:	2b04      	cmp	r3, #4
 80140ae:	f040 816e 	bne.w	801438e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	220b      	movs	r2, #11
 80140b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2203      	movs	r2, #3
 80140bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80140cc:	2200      	movs	r2, #0
 80140ce:	4619      	mov	r1, r3
 80140d0:	f000 fd40 	bl	8014b54 <osMessagePut>
      break;
 80140d4:	e15b      	b.n	801438e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6899      	ldr	r1, [r3, #8]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	899a      	ldrh	r2, [r3, #12]
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	795b      	ldrb	r3, [r3, #5]
 80140e2:	2001      	movs	r0, #1
 80140e4:	9000      	str	r0, [sp, #0]
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 f978 	bl	80143dc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2206      	movs	r2, #6
 80140fc:	761a      	strb	r2, [r3, #24]
      break;
 80140fe:	e14d      	b.n	801439c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	795b      	ldrb	r3, [r3, #5]
 8014104:	4619      	mov	r1, r3
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f011 f936 	bl	8025378 <USBH_LL_GetURBState>
 801410c:	4603      	mov	r3, r0
 801410e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014110:	7bbb      	ldrb	r3, [r7, #14]
 8014112:	2b01      	cmp	r3, #1
 8014114:	d111      	bne.n	801413a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2207      	movs	r2, #7
 801411a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2203      	movs	r2, #3
 8014120:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014130:	2200      	movs	r2, #0
 8014132:	4619      	mov	r1, r3
 8014134:	f000 fd0e 	bl	8014b54 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014138:	e12b      	b.n	8014392 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801413a:	7bbb      	ldrb	r3, [r7, #14]
 801413c:	2b05      	cmp	r3, #5
 801413e:	d113      	bne.n	8014168 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	220c      	movs	r2, #12
 8014144:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014146:	2303      	movs	r3, #3
 8014148:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2203      	movs	r2, #3
 801414e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801415e:	2200      	movs	r2, #0
 8014160:	4619      	mov	r1, r3
 8014162:	f000 fcf7 	bl	8014b54 <osMessagePut>
      break;
 8014166:	e114      	b.n	8014392 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8014168:	7bbb      	ldrb	r3, [r7, #14]
 801416a:	2b02      	cmp	r3, #2
 801416c:	d111      	bne.n	8014192 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	2205      	movs	r2, #5
 8014172:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2203      	movs	r2, #3
 8014178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014188:	2200      	movs	r2, #0
 801418a:	4619      	mov	r1, r3
 801418c:	f000 fce2 	bl	8014b54 <osMessagePut>
      break;
 8014190:	e0ff      	b.n	8014392 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8014192:	7bbb      	ldrb	r3, [r7, #14]
 8014194:	2b04      	cmp	r3, #4
 8014196:	f040 80fc 	bne.w	8014392 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	220b      	movs	r2, #11
 801419e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80141a0:	2302      	movs	r3, #2
 80141a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2203      	movs	r2, #3
 80141a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80141b8:	2200      	movs	r2, #0
 80141ba:	4619      	mov	r1, r3
 80141bc:	f000 fcca 	bl	8014b54 <osMessagePut>
      break;
 80141c0:	e0e7      	b.n	8014392 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	791b      	ldrb	r3, [r3, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	2100      	movs	r1, #0
 80141ca:	6878      	ldr	r0, [r7, #4]
 80141cc:	f000 f92b 	bl	8014426 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2208      	movs	r2, #8
 80141e0:	761a      	strb	r2, [r3, #24]

      break;
 80141e2:	e0db      	b.n	801439c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	791b      	ldrb	r3, [r3, #4]
 80141e8:	4619      	mov	r1, r3
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f011 f8c4 	bl	8025378 <USBH_LL_GetURBState>
 80141f0:	4603      	mov	r3, r0
 80141f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80141f4:	7bbb      	ldrb	r3, [r7, #14]
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d113      	bne.n	8014222 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	220d      	movs	r2, #13
 80141fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8014200:	2300      	movs	r3, #0
 8014202:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2203      	movs	r2, #3
 8014208:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014218:	2200      	movs	r2, #0
 801421a:	4619      	mov	r1, r3
 801421c:	f000 fc9a 	bl	8014b54 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8014220:	e0b9      	b.n	8014396 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8014222:	7bbb      	ldrb	r3, [r7, #14]
 8014224:	2b04      	cmp	r3, #4
 8014226:	d111      	bne.n	801424c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	220b      	movs	r2, #11
 801422c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2203      	movs	r2, #3
 8014232:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014242:	2200      	movs	r2, #0
 8014244:	4619      	mov	r1, r3
 8014246:	f000 fc85 	bl	8014b54 <osMessagePut>
      break;
 801424a:	e0a4      	b.n	8014396 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 801424c:	7bbb      	ldrb	r3, [r7, #14]
 801424e:	2b05      	cmp	r3, #5
 8014250:	f040 80a1 	bne.w	8014396 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8014254:	2303      	movs	r3, #3
 8014256:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2203      	movs	r2, #3
 801425c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801426c:	2200      	movs	r2, #0
 801426e:	4619      	mov	r1, r3
 8014270:	f000 fc70 	bl	8014b54 <osMessagePut>
      break;
 8014274:	e08f      	b.n	8014396 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	795b      	ldrb	r3, [r3, #5]
 801427a:	2201      	movs	r2, #1
 801427c:	9200      	str	r2, [sp, #0]
 801427e:	2200      	movs	r2, #0
 8014280:	2100      	movs	r1, #0
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f8aa 	bl	80143dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801428e:	b29a      	uxth	r2, r3
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	220a      	movs	r2, #10
 8014298:	761a      	strb	r2, [r3, #24]
      break;
 801429a:	e07f      	b.n	801439c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	795b      	ldrb	r3, [r3, #5]
 80142a0:	4619      	mov	r1, r3
 80142a2:	6878      	ldr	r0, [r7, #4]
 80142a4:	f011 f868 	bl	8025378 <USBH_LL_GetURBState>
 80142a8:	4603      	mov	r3, r0
 80142aa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80142ac:	7bbb      	ldrb	r3, [r7, #14]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d113      	bne.n	80142da <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80142b2:	2300      	movs	r3, #0
 80142b4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	220d      	movs	r2, #13
 80142ba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	2203      	movs	r2, #3
 80142c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142d0:	2200      	movs	r2, #0
 80142d2:	4619      	mov	r1, r3
 80142d4:	f000 fc3e 	bl	8014b54 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80142d8:	e05f      	b.n	801439a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80142da:	7bbb      	ldrb	r3, [r7, #14]
 80142dc:	2b02      	cmp	r3, #2
 80142de:	d111      	bne.n	8014304 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2209      	movs	r2, #9
 80142e4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2203      	movs	r2, #3
 80142ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80142fa:	2200      	movs	r2, #0
 80142fc:	4619      	mov	r1, r3
 80142fe:	f000 fc29 	bl	8014b54 <osMessagePut>
      break;
 8014302:	e04a      	b.n	801439a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8014304:	7bbb      	ldrb	r3, [r7, #14]
 8014306:	2b04      	cmp	r3, #4
 8014308:	d147      	bne.n	801439a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	220b      	movs	r2, #11
 801430e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2203      	movs	r2, #3
 8014314:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8014324:	2200      	movs	r2, #0
 8014326:	4619      	mov	r1, r3
 8014328:	f000 fc14 	bl	8014b54 <osMessagePut>
      break;
 801432c:	e035      	b.n	801439a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	7e5b      	ldrb	r3, [r3, #25]
 8014332:	3301      	adds	r3, #1
 8014334:	b2da      	uxtb	r2, r3
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	765a      	strb	r2, [r3, #25]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	7e5b      	ldrb	r3, [r3, #25]
 801433e:	2b02      	cmp	r3, #2
 8014340:	d806      	bhi.n	8014350 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2201      	movs	r2, #1
 8014346:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2201      	movs	r2, #1
 801434c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801434e:	e025      	b.n	801439c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8014356:	2106      	movs	r1, #6
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2200      	movs	r2, #0
 8014360:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	795b      	ldrb	r3, [r3, #5]
 8014366:	4619      	mov	r1, r3
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 f90d 	bl	8014588 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	791b      	ldrb	r3, [r3, #4]
 8014372:	4619      	mov	r1, r3
 8014374:	6878      	ldr	r0, [r7, #4]
 8014376:	f000 f907 	bl	8014588 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8014380:	2302      	movs	r3, #2
 8014382:	73fb      	strb	r3, [r7, #15]
      break;
 8014384:	e00a      	b.n	801439c <USBH_HandleControl+0x484>

    default:
      break;
 8014386:	bf00      	nop
 8014388:	e008      	b.n	801439c <USBH_HandleControl+0x484>
      break;
 801438a:	bf00      	nop
 801438c:	e006      	b.n	801439c <USBH_HandleControl+0x484>
      break;
 801438e:	bf00      	nop
 8014390:	e004      	b.n	801439c <USBH_HandleControl+0x484>
      break;
 8014392:	bf00      	nop
 8014394:	e002      	b.n	801439c <USBH_HandleControl+0x484>
      break;
 8014396:	bf00      	nop
 8014398:	e000      	b.n	801439c <USBH_HandleControl+0x484>
      break;
 801439a:	bf00      	nop
  }

  return status;
 801439c:	7bfb      	ldrb	r3, [r7, #15]
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3710      	adds	r7, #16
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop

080143a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b088      	sub	sp, #32
 80143ac:	af04      	add	r7, sp, #16
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	60b9      	str	r1, [r7, #8]
 80143b2:	4613      	mov	r3, r2
 80143b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80143b6:	79f9      	ldrb	r1, [r7, #7]
 80143b8:	2300      	movs	r3, #0
 80143ba:	9303      	str	r3, [sp, #12]
 80143bc:	2308      	movs	r3, #8
 80143be:	9302      	str	r3, [sp, #8]
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	2300      	movs	r3, #0
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	2300      	movs	r3, #0
 80143ca:	2200      	movs	r2, #0
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f010 ffa2 	bl	8025316 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80143d2:	2300      	movs	r3, #0
}
 80143d4:	4618      	mov	r0, r3
 80143d6:	3710      	adds	r7, #16
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b088      	sub	sp, #32
 80143e0:	af04      	add	r7, sp, #16
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	60b9      	str	r1, [r7, #8]
 80143e6:	4611      	mov	r1, r2
 80143e8:	461a      	mov	r2, r3
 80143ea:	460b      	mov	r3, r1
 80143ec:	80fb      	strh	r3, [r7, #6]
 80143ee:	4613      	mov	r3, r2
 80143f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d001      	beq.n	8014400 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80143fc:	2300      	movs	r3, #0
 80143fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014400:	7979      	ldrb	r1, [r7, #5]
 8014402:	7e3b      	ldrb	r3, [r7, #24]
 8014404:	9303      	str	r3, [sp, #12]
 8014406:	88fb      	ldrh	r3, [r7, #6]
 8014408:	9302      	str	r3, [sp, #8]
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	9301      	str	r3, [sp, #4]
 801440e:	2301      	movs	r3, #1
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	2300      	movs	r3, #0
 8014414:	2200      	movs	r2, #0
 8014416:	68f8      	ldr	r0, [r7, #12]
 8014418:	f010 ff7d 	bl	8025316 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801441c:	2300      	movs	r3, #0
}
 801441e:	4618      	mov	r0, r3
 8014420:	3710      	adds	r7, #16
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}

08014426 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014426:	b580      	push	{r7, lr}
 8014428:	b088      	sub	sp, #32
 801442a:	af04      	add	r7, sp, #16
 801442c:	60f8      	str	r0, [r7, #12]
 801442e:	60b9      	str	r1, [r7, #8]
 8014430:	4611      	mov	r1, r2
 8014432:	461a      	mov	r2, r3
 8014434:	460b      	mov	r3, r1
 8014436:	80fb      	strh	r3, [r7, #6]
 8014438:	4613      	mov	r3, r2
 801443a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801443c:	7979      	ldrb	r1, [r7, #5]
 801443e:	2300      	movs	r3, #0
 8014440:	9303      	str	r3, [sp, #12]
 8014442:	88fb      	ldrh	r3, [r7, #6]
 8014444:	9302      	str	r3, [sp, #8]
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	9301      	str	r3, [sp, #4]
 801444a:	2301      	movs	r3, #1
 801444c:	9300      	str	r3, [sp, #0]
 801444e:	2300      	movs	r3, #0
 8014450:	2201      	movs	r2, #1
 8014452:	68f8      	ldr	r0, [r7, #12]
 8014454:	f010 ff5f 	bl	8025316 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8014458:	2300      	movs	r3, #0

}
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8014462:	b580      	push	{r7, lr}
 8014464:	b088      	sub	sp, #32
 8014466:	af04      	add	r7, sp, #16
 8014468:	60f8      	str	r0, [r7, #12]
 801446a:	60b9      	str	r1, [r7, #8]
 801446c:	4611      	mov	r1, r2
 801446e:	461a      	mov	r2, r3
 8014470:	460b      	mov	r3, r1
 8014472:	80fb      	strh	r3, [r7, #6]
 8014474:	4613      	mov	r3, r2
 8014476:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801447e:	2b00      	cmp	r3, #0
 8014480:	d001      	beq.n	8014486 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8014482:	2300      	movs	r3, #0
 8014484:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8014486:	7979      	ldrb	r1, [r7, #5]
 8014488:	7e3b      	ldrb	r3, [r7, #24]
 801448a:	9303      	str	r3, [sp, #12]
 801448c:	88fb      	ldrh	r3, [r7, #6]
 801448e:	9302      	str	r3, [sp, #8]
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	2301      	movs	r3, #1
 8014496:	9300      	str	r3, [sp, #0]
 8014498:	2302      	movs	r3, #2
 801449a:	2200      	movs	r2, #0
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	f010 ff3a 	bl	8025316 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80144a2:	2300      	movs	r3, #0
}
 80144a4:	4618      	mov	r0, r3
 80144a6:	3710      	adds	r7, #16
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}

080144ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b088      	sub	sp, #32
 80144b0:	af04      	add	r7, sp, #16
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	4611      	mov	r1, r2
 80144b8:	461a      	mov	r2, r3
 80144ba:	460b      	mov	r3, r1
 80144bc:	80fb      	strh	r3, [r7, #6]
 80144be:	4613      	mov	r3, r2
 80144c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80144c2:	7979      	ldrb	r1, [r7, #5]
 80144c4:	2300      	movs	r3, #0
 80144c6:	9303      	str	r3, [sp, #12]
 80144c8:	88fb      	ldrh	r3, [r7, #6]
 80144ca:	9302      	str	r3, [sp, #8]
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	9301      	str	r3, [sp, #4]
 80144d0:	2301      	movs	r3, #1
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	2302      	movs	r3, #2
 80144d6:	2201      	movs	r2, #1
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f010 ff1c 	bl	8025316 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80144de:	2300      	movs	r3, #0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3710      	adds	r7, #16
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}

080144e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b086      	sub	sp, #24
 80144ec:	af04      	add	r7, sp, #16
 80144ee:	6078      	str	r0, [r7, #4]
 80144f0:	4608      	mov	r0, r1
 80144f2:	4611      	mov	r1, r2
 80144f4:	461a      	mov	r2, r3
 80144f6:	4603      	mov	r3, r0
 80144f8:	70fb      	strb	r3, [r7, #3]
 80144fa:	460b      	mov	r3, r1
 80144fc:	70bb      	strb	r3, [r7, #2]
 80144fe:	4613      	mov	r3, r2
 8014500:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014502:	7878      	ldrb	r0, [r7, #1]
 8014504:	78ba      	ldrb	r2, [r7, #2]
 8014506:	78f9      	ldrb	r1, [r7, #3]
 8014508:	8b3b      	ldrh	r3, [r7, #24]
 801450a:	9302      	str	r3, [sp, #8]
 801450c:	7d3b      	ldrb	r3, [r7, #20]
 801450e:	9301      	str	r3, [sp, #4]
 8014510:	7c3b      	ldrb	r3, [r7, #16]
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	4603      	mov	r3, r0
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f010 feaf 	bl	802527a <USBH_LL_OpenPipe>

  return USBH_OK;
 801451c:	2300      	movs	r3, #0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	b082      	sub	sp, #8
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
 801452e:	460b      	mov	r3, r1
 8014530:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8014532:	78fb      	ldrb	r3, [r7, #3]
 8014534:	4619      	mov	r1, r3
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f010 fece 	bl	80252d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 801453c:	2300      	movs	r3, #0
}
 801453e:	4618      	mov	r0, r3
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014546:	b580      	push	{r7, lr}
 8014548:	b084      	sub	sp, #16
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
 801454e:	460b      	mov	r3, r1
 8014550:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 f836 	bl	80145c4 <USBH_GetFreePipe>
 8014558:	4603      	mov	r3, r0
 801455a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801455c:	89fb      	ldrh	r3, [r7, #14]
 801455e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014562:	4293      	cmp	r3, r2
 8014564:	d00a      	beq.n	801457c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8014566:	78fa      	ldrb	r2, [r7, #3]
 8014568:	89fb      	ldrh	r3, [r7, #14]
 801456a:	f003 030f 	and.w	r3, r3, #15
 801456e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014572:	6879      	ldr	r1, [r7, #4]
 8014574:	33e0      	adds	r3, #224	; 0xe0
 8014576:	009b      	lsls	r3, r3, #2
 8014578:	440b      	add	r3, r1
 801457a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801457c:	89fb      	ldrh	r3, [r7, #14]
 801457e:	b2db      	uxtb	r3, r3
}
 8014580:	4618      	mov	r0, r3
 8014582:	3710      	adds	r7, #16
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014588:	b480      	push	{r7}
 801458a:	b083      	sub	sp, #12
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	460b      	mov	r3, r1
 8014592:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8014594:	78fb      	ldrb	r3, [r7, #3]
 8014596:	2b0a      	cmp	r3, #10
 8014598:	d80d      	bhi.n	80145b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801459a:	78fb      	ldrb	r3, [r7, #3]
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	33e0      	adds	r3, #224	; 0xe0
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	4413      	add	r3, r2
 80145a4:	685a      	ldr	r2, [r3, #4]
 80145a6:	78fb      	ldrb	r3, [r7, #3]
 80145a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80145ac:	6879      	ldr	r1, [r7, #4]
 80145ae:	33e0      	adds	r3, #224	; 0xe0
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	440b      	add	r3, r1
 80145b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	370c      	adds	r7, #12
 80145bc:	46bd      	mov	sp, r7
 80145be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c2:	4770      	bx	lr

080145c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80145c4:	b480      	push	{r7}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80145cc:	2300      	movs	r3, #0
 80145ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80145d0:	2300      	movs	r3, #0
 80145d2:	73fb      	strb	r3, [r7, #15]
 80145d4:	e00f      	b.n	80145f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	33e0      	adds	r3, #224	; 0xe0
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	4413      	add	r3, r2
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d102      	bne.n	80145f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80145ea:	7bfb      	ldrb	r3, [r7, #15]
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	e007      	b.n	8014600 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80145f0:	7bfb      	ldrb	r3, [r7, #15]
 80145f2:	3301      	adds	r3, #1
 80145f4:	73fb      	strb	r3, [r7, #15]
 80145f6:	7bfb      	ldrb	r3, [r7, #15]
 80145f8:	2b0a      	cmp	r3, #10
 80145fa:	d9ec      	bls.n	80145d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80145fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8014600:	4618      	mov	r0, r3
 8014602:	3714      	adds	r7, #20
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr

0801460c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801460c:	b480      	push	{r7}
 801460e:	b087      	sub	sp, #28
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	4613      	mov	r3, r2
 8014618:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801461a:	2301      	movs	r3, #1
 801461c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801461e:	2300      	movs	r3, #0
 8014620:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014622:	4b1f      	ldr	r3, [pc, #124]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 8014624:	7a5b      	ldrb	r3, [r3, #9]
 8014626:	b2db      	uxtb	r3, r3
 8014628:	2b00      	cmp	r3, #0
 801462a:	d131      	bne.n	8014690 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801462c:	4b1c      	ldr	r3, [pc, #112]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 801462e:	7a5b      	ldrb	r3, [r3, #9]
 8014630:	b2db      	uxtb	r3, r3
 8014632:	461a      	mov	r2, r3
 8014634:	4b1a      	ldr	r3, [pc, #104]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 8014636:	2100      	movs	r1, #0
 8014638:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801463a:	4b19      	ldr	r3, [pc, #100]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 801463c:	7a5b      	ldrb	r3, [r3, #9]
 801463e:	b2db      	uxtb	r3, r3
 8014640:	4a17      	ldr	r2, [pc, #92]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	4413      	add	r3, r2
 8014646:	68fa      	ldr	r2, [r7, #12]
 8014648:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801464a:	4b15      	ldr	r3, [pc, #84]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 801464c:	7a5b      	ldrb	r3, [r3, #9]
 801464e:	b2db      	uxtb	r3, r3
 8014650:	461a      	mov	r2, r3
 8014652:	4b13      	ldr	r3, [pc, #76]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 8014654:	4413      	add	r3, r2
 8014656:	79fa      	ldrb	r2, [r7, #7]
 8014658:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801465a:	4b11      	ldr	r3, [pc, #68]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 801465c:	7a5b      	ldrb	r3, [r3, #9]
 801465e:	b2db      	uxtb	r3, r3
 8014660:	1c5a      	adds	r2, r3, #1
 8014662:	b2d1      	uxtb	r1, r2
 8014664:	4a0e      	ldr	r2, [pc, #56]	; (80146a0 <FATFS_LinkDriverEx+0x94>)
 8014666:	7251      	strb	r1, [r2, #9]
 8014668:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801466a:	7dbb      	ldrb	r3, [r7, #22]
 801466c:	3330      	adds	r3, #48	; 0x30
 801466e:	b2da      	uxtb	r2, r3
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	3301      	adds	r3, #1
 8014678:	223a      	movs	r2, #58	; 0x3a
 801467a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	3302      	adds	r3, #2
 8014680:	222f      	movs	r2, #47	; 0x2f
 8014682:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	3303      	adds	r3, #3
 8014688:	2200      	movs	r2, #0
 801468a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801468c:	2300      	movs	r3, #0
 801468e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014690:	7dfb      	ldrb	r3, [r7, #23]
}
 8014692:	4618      	mov	r0, r3
 8014694:	371c      	adds	r7, #28
 8014696:	46bd      	mov	sp, r7
 8014698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469c:	4770      	bx	lr
 801469e:	bf00      	nop
 80146a0:	2000058c 	.word	0x2000058c

080146a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b082      	sub	sp, #8
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80146ae:	2200      	movs	r2, #0
 80146b0:	6839      	ldr	r1, [r7, #0]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7ff ffaa 	bl	801460c <FATFS_LinkDriverEx>
 80146b8:	4603      	mov	r3, r0
}
 80146ba:	4618      	mov	r0, r3
 80146bc:	3708      	adds	r7, #8
 80146be:	46bd      	mov	sp, r7
 80146c0:	bd80      	pop	{r7, pc}

080146c2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80146c2:	b480      	push	{r7}
 80146c4:	b085      	sub	sp, #20
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	4603      	mov	r3, r0
 80146ca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80146cc:	2300      	movs	r3, #0
 80146ce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80146d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80146d4:	2b84      	cmp	r3, #132	; 0x84
 80146d6:	d005      	beq.n	80146e4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80146d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	4413      	add	r3, r2
 80146e0:	3303      	adds	r3, #3
 80146e2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80146e4:	68fb      	ldr	r3, [r7, #12]
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3714      	adds	r7, #20
 80146ea:	46bd      	mov	sp, r7
 80146ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f0:	4770      	bx	lr

080146f2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80146f2:	b480      	push	{r7}
 80146f4:	b083      	sub	sp, #12
 80146f6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146f8:	f3ef 8305 	mrs	r3, IPSR
 80146fc:	607b      	str	r3, [r7, #4]
  return(result);
 80146fe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014700:	2b00      	cmp	r3, #0
 8014702:	bf14      	ite	ne
 8014704:	2301      	movne	r3, #1
 8014706:	2300      	moveq	r3, #0
 8014708:	b2db      	uxtb	r3, r3
}
 801470a:	4618      	mov	r0, r3
 801470c:	370c      	adds	r7, #12
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr

08014716 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014716:	b580      	push	{r7, lr}
 8014718:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801471a:	f001 fe21 	bl	8016360 <vTaskStartScheduler>
  
  return osOK;
 801471e:	2300      	movs	r3, #0
}
 8014720:	4618      	mov	r0, r3
 8014722:	bd80      	pop	{r7, pc}

08014724 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014728:	f002 fa8a 	bl	8016c40 <xTaskGetSchedulerState>
 801472c:	4603      	mov	r3, r0
 801472e:	2b01      	cmp	r3, #1
 8014730:	d101      	bne.n	8014736 <osKernelRunning+0x12>
    return 0;
 8014732:	2300      	movs	r3, #0
 8014734:	e000      	b.n	8014738 <osKernelRunning+0x14>
  else
    return 1;
 8014736:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014738:	4618      	mov	r0, r3
 801473a:	bd80      	pop	{r7, pc}

0801473c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014740:	f7ff ffd7 	bl	80146f2 <inHandlerMode>
 8014744:	4603      	mov	r3, r0
 8014746:	2b00      	cmp	r3, #0
 8014748:	d003      	beq.n	8014752 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801474a:	f001 ff33 	bl	80165b4 <xTaskGetTickCountFromISR>
 801474e:	4603      	mov	r3, r0
 8014750:	e002      	b.n	8014758 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014752:	f001 ff1f 	bl	8016594 <xTaskGetTickCount>
 8014756:	4603      	mov	r3, r0
  }
}
 8014758:	4618      	mov	r0, r3
 801475a:	bd80      	pop	{r7, pc}

0801475c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801475e:	b089      	sub	sp, #36	; 0x24
 8014760:	af04      	add	r7, sp, #16
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	695b      	ldr	r3, [r3, #20]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d020      	beq.n	80147b0 <osThreadCreate+0x54>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	699b      	ldr	r3, [r3, #24]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d01c      	beq.n	80147b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	685c      	ldr	r4, [r3, #4]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	681d      	ldr	r5, [r3, #0]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	691e      	ldr	r6, [r3, #16]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014788:	4618      	mov	r0, r3
 801478a:	f7ff ff9a 	bl	80146c2 <makeFreeRtosPriority>
 801478e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	695b      	ldr	r3, [r3, #20]
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014798:	9202      	str	r2, [sp, #8]
 801479a:	9301      	str	r3, [sp, #4]
 801479c:	9100      	str	r1, [sp, #0]
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	4632      	mov	r2, r6
 80147a2:	4629      	mov	r1, r5
 80147a4:	4620      	mov	r0, r4
 80147a6:	f001 fbe7 	bl	8015f78 <xTaskCreateStatic>
 80147aa:	4603      	mov	r3, r0
 80147ac:	60fb      	str	r3, [r7, #12]
 80147ae:	e01c      	b.n	80147ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	685c      	ldr	r4, [r3, #4]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80147bc:	b29e      	uxth	r6, r3
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7ff ff7c 	bl	80146c2 <makeFreeRtosPriority>
 80147ca:	4602      	mov	r2, r0
 80147cc:	f107 030c 	add.w	r3, r7, #12
 80147d0:	9301      	str	r3, [sp, #4]
 80147d2:	9200      	str	r2, [sp, #0]
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	4632      	mov	r2, r6
 80147d8:	4629      	mov	r1, r5
 80147da:	4620      	mov	r0, r4
 80147dc:	f001 fc2f 	bl	801603e <xTaskCreate>
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d001      	beq.n	80147ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80147e6:	2300      	movs	r3, #0
 80147e8:	e000      	b.n	80147ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80147ea:	68fb      	ldr	r3, [r7, #12]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3714      	adds	r7, #20
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d001      	beq.n	801480a <osDelay+0x16>
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	e000      	b.n	801480c <osDelay+0x18>
 801480a:	2301      	movs	r3, #1
 801480c:	4618      	mov	r0, r3
 801480e:	f001 fd71 	bl	80162f4 <vTaskDelay>
  
  return osOK;
 8014812:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014814:	4618      	mov	r0, r3
 8014816:	3710      	adds	r7, #16
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}

0801481c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d007      	beq.n	801483c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	4619      	mov	r1, r3
 8014832:	2001      	movs	r0, #1
 8014834:	f000 fc9f 	bl	8015176 <xQueueCreateMutexStatic>
 8014838:	4603      	mov	r3, r0
 801483a:	e003      	b.n	8014844 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801483c:	2001      	movs	r0, #1
 801483e:	f000 fc82 	bl	8015146 <xQueueCreateMutex>
 8014842:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8014844:	4618      	mov	r0, r3
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}

0801484c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
 8014854:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014856:	2300      	movs	r3, #0
 8014858:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d101      	bne.n	8014864 <osMutexWait+0x18>
    return osErrorParameter;
 8014860:	2380      	movs	r3, #128	; 0x80
 8014862:	e03a      	b.n	80148da <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8014864:	2300      	movs	r3, #0
 8014866:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8014868:	683b      	ldr	r3, [r7, #0]
 801486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801486e:	d103      	bne.n	8014878 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8014870:	f04f 33ff 	mov.w	r3, #4294967295
 8014874:	60fb      	str	r3, [r7, #12]
 8014876:	e009      	b.n	801488c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8014878:	683b      	ldr	r3, [r7, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d006      	beq.n	801488c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d101      	bne.n	801488c <osMutexWait+0x40>
      ticks = 1;
 8014888:	2301      	movs	r3, #1
 801488a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801488c:	f7ff ff31 	bl	80146f2 <inHandlerMode>
 8014890:	4603      	mov	r3, r0
 8014892:	2b00      	cmp	r3, #0
 8014894:	d017      	beq.n	80148c6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014896:	f107 0308 	add.w	r3, r7, #8
 801489a:	461a      	mov	r2, r3
 801489c:	2100      	movs	r1, #0
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f001 f92c 	bl	8015afc <xQueueReceiveFromISR>
 80148a4:	4603      	mov	r3, r0
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d001      	beq.n	80148ae <osMutexWait+0x62>
      return osErrorOS;
 80148aa:	23ff      	movs	r3, #255	; 0xff
 80148ac:	e015      	b.n	80148da <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d011      	beq.n	80148d8 <osMutexWait+0x8c>
 80148b4:	4b0b      	ldr	r3, [pc, #44]	; (80148e4 <osMutexWait+0x98>)
 80148b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ba:	601a      	str	r2, [r3, #0]
 80148bc:	f3bf 8f4f 	dsb	sy
 80148c0:	f3bf 8f6f 	isb	sy
 80148c4:	e008      	b.n	80148d8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80148c6:	68f9      	ldr	r1, [r7, #12]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f001 f803 	bl	80158d4 <xQueueSemaphoreTake>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d001      	beq.n	80148d8 <osMutexWait+0x8c>
    return osErrorOS;
 80148d4:	23ff      	movs	r3, #255	; 0xff
 80148d6:	e000      	b.n	80148da <osMutexWait+0x8e>
  }
  
  return osOK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	e000ed04 	.word	0xe000ed04

080148e8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80148f0:	2300      	movs	r3, #0
 80148f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80148f4:	2300      	movs	r3, #0
 80148f6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80148f8:	f7ff fefb 	bl	80146f2 <inHandlerMode>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d016      	beq.n	8014930 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014902:	f107 0308 	add.w	r3, r7, #8
 8014906:	4619      	mov	r1, r3
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f000 fe67 	bl	80155dc <xQueueGiveFromISR>
 801490e:	4603      	mov	r3, r0
 8014910:	2b01      	cmp	r3, #1
 8014912:	d001      	beq.n	8014918 <osMutexRelease+0x30>
      return osErrorOS;
 8014914:	23ff      	movs	r3, #255	; 0xff
 8014916:	e017      	b.n	8014948 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d013      	beq.n	8014946 <osMutexRelease+0x5e>
 801491e:	4b0c      	ldr	r3, [pc, #48]	; (8014950 <osMutexRelease+0x68>)
 8014920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014924:	601a      	str	r2, [r3, #0]
 8014926:	f3bf 8f4f 	dsb	sy
 801492a:	f3bf 8f6f 	isb	sy
 801492e:	e00a      	b.n	8014946 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8014930:	2300      	movs	r3, #0
 8014932:	2200      	movs	r2, #0
 8014934:	2100      	movs	r1, #0
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f000 fcaa 	bl	8015290 <xQueueGenericSend>
 801493c:	4603      	mov	r3, r0
 801493e:	2b01      	cmp	r3, #1
 8014940:	d001      	beq.n	8014946 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8014942:	23ff      	movs	r3, #255	; 0xff
 8014944:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8014946:	68fb      	ldr	r3, [r7, #12]
}
 8014948:	4618      	mov	r0, r3
 801494a:	3710      	adds	r7, #16
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	e000ed04 	.word	0xe000ed04

08014954 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8014954:	b580      	push	{r7, lr}
 8014956:	b086      	sub	sp, #24
 8014958:	af02      	add	r7, sp, #8
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d016      	beq.n	8014994 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	2b01      	cmp	r3, #1
 801496a:	d10a      	bne.n	8014982 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	2203      	movs	r2, #3
 8014972:	9200      	str	r2, [sp, #0]
 8014974:	2200      	movs	r2, #0
 8014976:	2100      	movs	r1, #0
 8014978:	2001      	movs	r0, #1
 801497a:	f000 fae7 	bl	8014f4c <xQueueGenericCreateStatic>
 801497e:	4603      	mov	r3, r0
 8014980:	e023      	b.n	80149ca <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8014982:	6838      	ldr	r0, [r7, #0]
 8014984:	6839      	ldr	r1, [r7, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	461a      	mov	r2, r3
 801498c:	f000 fc0e 	bl	80151ac <xQueueCreateCountingSemaphoreStatic>
 8014990:	4603      	mov	r3, r0
 8014992:	e01a      	b.n	80149ca <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8014994:	683b      	ldr	r3, [r7, #0]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d110      	bne.n	80149bc <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 801499a:	2203      	movs	r2, #3
 801499c:	2100      	movs	r1, #0
 801499e:	2001      	movs	r0, #1
 80149a0:	f000 fb56 	bl	8015050 <xQueueGenericCreate>
 80149a4:	60f8      	str	r0, [r7, #12]
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d005      	beq.n	80149b8 <osSemaphoreCreate+0x64>
 80149ac:	2300      	movs	r3, #0
 80149ae:	2200      	movs	r2, #0
 80149b0:	2100      	movs	r1, #0
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f000 fc6c 	bl	8015290 <xQueueGenericSend>
      return sema;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	e006      	b.n	80149ca <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	4611      	mov	r1, r2
 80149c2:	4618      	mov	r0, r3
 80149c4:	f000 fc2d 	bl	8015222 <xQueueCreateCountingSemaphore>
 80149c8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80149ca:	4618      	mov	r0, r3
 80149cc:	3710      	adds	r7, #16
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
	...

080149d4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b084      	sub	sp, #16
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80149de:	2300      	movs	r3, #0
 80149e0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d101      	bne.n	80149ec <osSemaphoreWait+0x18>
    return osErrorParameter;
 80149e8:	2380      	movs	r3, #128	; 0x80
 80149ea:	e03a      	b.n	8014a62 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80149ec:	2300      	movs	r3, #0
 80149ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149f6:	d103      	bne.n	8014a00 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80149f8:	f04f 33ff 	mov.w	r3, #4294967295
 80149fc:	60fb      	str	r3, [r7, #12]
 80149fe:	e009      	b.n	8014a14 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d006      	beq.n	8014a14 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d101      	bne.n	8014a14 <osSemaphoreWait+0x40>
      ticks = 1;
 8014a10:	2301      	movs	r3, #1
 8014a12:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8014a14:	f7ff fe6d 	bl	80146f2 <inHandlerMode>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d017      	beq.n	8014a4e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014a1e:	f107 0308 	add.w	r3, r7, #8
 8014a22:	461a      	mov	r2, r3
 8014a24:	2100      	movs	r1, #0
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f001 f868 	bl	8015afc <xQueueReceiveFromISR>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d001      	beq.n	8014a36 <osSemaphoreWait+0x62>
      return osErrorOS;
 8014a32:	23ff      	movs	r3, #255	; 0xff
 8014a34:	e015      	b.n	8014a62 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d011      	beq.n	8014a60 <osSemaphoreWait+0x8c>
 8014a3c:	4b0b      	ldr	r3, [pc, #44]	; (8014a6c <osSemaphoreWait+0x98>)
 8014a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a42:	601a      	str	r2, [r3, #0]
 8014a44:	f3bf 8f4f 	dsb	sy
 8014a48:	f3bf 8f6f 	isb	sy
 8014a4c:	e008      	b.n	8014a60 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8014a4e:	68f9      	ldr	r1, [r7, #12]
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f000 ff3f 	bl	80158d4 <xQueueSemaphoreTake>
 8014a56:	4603      	mov	r3, r0
 8014a58:	2b01      	cmp	r3, #1
 8014a5a:	d001      	beq.n	8014a60 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8014a5c:	23ff      	movs	r3, #255	; 0xff
 8014a5e:	e000      	b.n	8014a62 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3710      	adds	r7, #16
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	e000ed04 	.word	0xe000ed04

08014a70 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8014a80:	f7ff fe37 	bl	80146f2 <inHandlerMode>
 8014a84:	4603      	mov	r3, r0
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d016      	beq.n	8014ab8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8014a8a:	f107 0308 	add.w	r3, r7, #8
 8014a8e:	4619      	mov	r1, r3
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 fda3 	bl	80155dc <xQueueGiveFromISR>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d001      	beq.n	8014aa0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8014a9c:	23ff      	movs	r3, #255	; 0xff
 8014a9e:	e017      	b.n	8014ad0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d013      	beq.n	8014ace <osSemaphoreRelease+0x5e>
 8014aa6:	4b0c      	ldr	r3, [pc, #48]	; (8014ad8 <osSemaphoreRelease+0x68>)
 8014aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	f3bf 8f6f 	isb	sy
 8014ab6:	e00a      	b.n	8014ace <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8014ab8:	2300      	movs	r3, #0
 8014aba:	2200      	movs	r2, #0
 8014abc:	2100      	movs	r1, #0
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f000 fbe6 	bl	8015290 <xQueueGenericSend>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b01      	cmp	r3, #1
 8014ac8:	d001      	beq.n	8014ace <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8014aca:	23ff      	movs	r3, #255	; 0xff
 8014acc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8014ace:	68fb      	ldr	r3, [r7, #12]
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3710      	adds	r7, #16
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	e000ed04 	.word	0xe000ed04

08014adc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b082      	sub	sp, #8
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014ae4:	f7ff fe05 	bl	80146f2 <inHandlerMode>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d001      	beq.n	8014af2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8014aee:	2382      	movs	r3, #130	; 0x82
 8014af0:	e003      	b.n	8014afa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	f001 f8c8 	bl	8015c88 <vQueueDelete>

  return osOK; 
 8014af8:	2300      	movs	r3, #0
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3708      	adds	r7, #8
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014b02:	b590      	push	{r4, r7, lr}
 8014b04:	b085      	sub	sp, #20
 8014b06:	af02      	add	r7, sp, #8
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	689b      	ldr	r3, [r3, #8]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d011      	beq.n	8014b38 <osMessageCreate+0x36>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	68db      	ldr	r3, [r3, #12]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00d      	beq.n	8014b38 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6818      	ldr	r0, [r3, #0]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	6859      	ldr	r1, [r3, #4]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	689a      	ldr	r2, [r3, #8]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	2400      	movs	r4, #0
 8014b2e:	9400      	str	r4, [sp, #0]
 8014b30:	f000 fa0c 	bl	8014f4c <xQueueGenericCreateStatic>
 8014b34:	4603      	mov	r3, r0
 8014b36:	e008      	b.n	8014b4a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6818      	ldr	r0, [r3, #0]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	2200      	movs	r2, #0
 8014b42:	4619      	mov	r1, r3
 8014b44:	f000 fa84 	bl	8015050 <xQueueGenericCreate>
 8014b48:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	370c      	adds	r7, #12
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd90      	pop	{r4, r7, pc}
	...

08014b54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b086      	sub	sp, #24
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014b60:	2300      	movs	r3, #0
 8014b62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014b68:	697b      	ldr	r3, [r7, #20]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d101      	bne.n	8014b72 <osMessagePut+0x1e>
    ticks = 1;
 8014b6e:	2301      	movs	r3, #1
 8014b70:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014b72:	f7ff fdbe 	bl	80146f2 <inHandlerMode>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d018      	beq.n	8014bae <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014b7c:	f107 0210 	add.w	r2, r7, #16
 8014b80:	f107 0108 	add.w	r1, r7, #8
 8014b84:	2300      	movs	r3, #0
 8014b86:	68f8      	ldr	r0, [r7, #12]
 8014b88:	f000 fc88 	bl	801549c <xQueueGenericSendFromISR>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d001      	beq.n	8014b96 <osMessagePut+0x42>
      return osErrorOS;
 8014b92:	23ff      	movs	r3, #255	; 0xff
 8014b94:	e018      	b.n	8014bc8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d014      	beq.n	8014bc6 <osMessagePut+0x72>
 8014b9c:	4b0c      	ldr	r3, [pc, #48]	; (8014bd0 <osMessagePut+0x7c>)
 8014b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ba2:	601a      	str	r2, [r3, #0]
 8014ba4:	f3bf 8f4f 	dsb	sy
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	e00b      	b.n	8014bc6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014bae:	f107 0108 	add.w	r1, r7, #8
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	697a      	ldr	r2, [r7, #20]
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f000 fb6a 	bl	8015290 <xQueueGenericSend>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b01      	cmp	r3, #1
 8014bc0:	d001      	beq.n	8014bc6 <osMessagePut+0x72>
      return osErrorOS;
 8014bc2:	23ff      	movs	r3, #255	; 0xff
 8014bc4:	e000      	b.n	8014bc8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014bc6:	2300      	movs	r3, #0
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3718      	adds	r7, #24
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	e000ed04 	.word	0xe000ed04

08014bd4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014bd4:	b590      	push	{r4, r7, lr}
 8014bd6:	b08b      	sub	sp, #44	; 0x2c
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014be4:	2300      	movs	r3, #0
 8014be6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10a      	bne.n	8014c04 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014bee:	2380      	movs	r3, #128	; 0x80
 8014bf0:	617b      	str	r3, [r7, #20]
    return event;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	461c      	mov	r4, r3
 8014bf6:	f107 0314 	add.w	r3, r7, #20
 8014bfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014c02:	e054      	b.n	8014cae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014c04:	2300      	movs	r3, #0
 8014c06:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c12:	d103      	bne.n	8014c1c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	627b      	str	r3, [r7, #36]	; 0x24
 8014c1a:	e009      	b.n	8014c30 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d006      	beq.n	8014c30 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8014c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d101      	bne.n	8014c30 <osMessageGet+0x5c>
      ticks = 1;
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014c30:	f7ff fd5f 	bl	80146f2 <inHandlerMode>
 8014c34:	4603      	mov	r3, r0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d01c      	beq.n	8014c74 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014c3a:	f107 0220 	add.w	r2, r7, #32
 8014c3e:	f107 0314 	add.w	r3, r7, #20
 8014c42:	3304      	adds	r3, #4
 8014c44:	4619      	mov	r1, r3
 8014c46:	68b8      	ldr	r0, [r7, #8]
 8014c48:	f000 ff58 	bl	8015afc <xQueueReceiveFromISR>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b01      	cmp	r3, #1
 8014c50:	d102      	bne.n	8014c58 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014c52:	2310      	movs	r3, #16
 8014c54:	617b      	str	r3, [r7, #20]
 8014c56:	e001      	b.n	8014c5c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014c5c:	6a3b      	ldr	r3, [r7, #32]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d01d      	beq.n	8014c9e <osMessageGet+0xca>
 8014c62:	4b15      	ldr	r3, [pc, #84]	; (8014cb8 <osMessageGet+0xe4>)
 8014c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c68:	601a      	str	r2, [r3, #0]
 8014c6a:	f3bf 8f4f 	dsb	sy
 8014c6e:	f3bf 8f6f 	isb	sy
 8014c72:	e014      	b.n	8014c9e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014c74:	f107 0314 	add.w	r3, r7, #20
 8014c78:	3304      	adds	r3, #4
 8014c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	68b8      	ldr	r0, [r7, #8]
 8014c80:	f000 fd42 	bl	8015708 <xQueueReceive>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d102      	bne.n	8014c90 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014c8a:	2310      	movs	r3, #16
 8014c8c:	617b      	str	r3, [r7, #20]
 8014c8e:	e006      	b.n	8014c9e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d101      	bne.n	8014c9a <osMessageGet+0xc6>
 8014c96:	2300      	movs	r3, #0
 8014c98:	e000      	b.n	8014c9c <osMessageGet+0xc8>
 8014c9a:	2340      	movs	r3, #64	; 0x40
 8014c9c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	461c      	mov	r4, r3
 8014ca2:	f107 0314 	add.w	r3, r7, #20
 8014ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	372c      	adds	r7, #44	; 0x2c
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd90      	pop	{r4, r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	e000ed04 	.word	0xe000ed04

08014cbc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014cc4:	f7ff fd15 	bl	80146f2 <inHandlerMode>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d004      	beq.n	8014cd8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f000 ffba 	bl	8015c48 <uxQueueMessagesWaitingFromISR>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	e003      	b.n	8014ce0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f000 ff95 	bl	8015c08 <uxQueueMessagesWaiting>
 8014cde:	4603      	mov	r3, r0
  }
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}

08014ce8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b082      	sub	sp, #8
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014cf0:	f7ff fcff 	bl	80146f2 <inHandlerMode>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d001      	beq.n	8014cfe <osMessageDelete+0x16>
    return osErrorISR;
 8014cfa:	2382      	movs	r3, #130	; 0x82
 8014cfc:	e003      	b.n	8014d06 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f000 ffc2 	bl	8015c88 <vQueueDelete>

  return osOK; 
 8014d04:	2300      	movs	r3, #0
}
 8014d06:	4618      	mov	r0, r3
 8014d08:	3708      	adds	r7, #8
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}

08014d0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014d0e:	b480      	push	{r7}
 8014d10:	b083      	sub	sp, #12
 8014d12:	af00      	add	r7, sp, #0
 8014d14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f103 0208 	add.w	r2, r3, #8
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f04f 32ff 	mov.w	r2, #4294967295
 8014d26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f103 0208 	add.w	r2, r3, #8
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f103 0208 	add.w	r2, r3, #8
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014d42:	bf00      	nop
 8014d44:	370c      	adds	r7, #12
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr

08014d4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014d4e:	b480      	push	{r7}
 8014d50:	b083      	sub	sp, #12
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014d5c:	bf00      	nop
 8014d5e:	370c      	adds	r7, #12
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr

08014d68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d68:	b480      	push	{r7}
 8014d6a:	b085      	sub	sp, #20
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	68fa      	ldr	r2, [r7, #12]
 8014d7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	689a      	ldr	r2, [r3, #8]
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	689b      	ldr	r3, [r3, #8]
 8014d8a:	683a      	ldr	r2, [r7, #0]
 8014d8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	687a      	ldr	r2, [r7, #4]
 8014d98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	1c5a      	adds	r2, r3, #1
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	601a      	str	r2, [r3, #0]
}
 8014da4:	bf00      	nop
 8014da6:	3714      	adds	r7, #20
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014db0:	b480      	push	{r7}
 8014db2:	b085      	sub	sp, #20
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014dba:	683b      	ldr	r3, [r7, #0]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dc6:	d103      	bne.n	8014dd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	691b      	ldr	r3, [r3, #16]
 8014dcc:	60fb      	str	r3, [r7, #12]
 8014dce:	e00c      	b.n	8014dea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3308      	adds	r3, #8
 8014dd4:	60fb      	str	r3, [r7, #12]
 8014dd6:	e002      	b.n	8014dde <vListInsert+0x2e>
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	60fb      	str	r3, [r7, #12]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	68ba      	ldr	r2, [r7, #8]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d2f6      	bcs.n	8014dd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	685a      	ldr	r2, [r3, #4]
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	683a      	ldr	r2, [r7, #0]
 8014df8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	68fa      	ldr	r2, [r7, #12]
 8014dfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	1c5a      	adds	r2, r3, #1
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	601a      	str	r2, [r3, #0]
}
 8014e16:	bf00      	nop
 8014e18:	3714      	adds	r7, #20
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e20:	4770      	bx	lr

08014e22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014e22:	b480      	push	{r7}
 8014e24:	b085      	sub	sp, #20
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	691b      	ldr	r3, [r3, #16]
 8014e2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	685b      	ldr	r3, [r3, #4]
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	6892      	ldr	r2, [r2, #8]
 8014e38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	689b      	ldr	r3, [r3, #8]
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	6852      	ldr	r2, [r2, #4]
 8014e42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	687a      	ldr	r2, [r7, #4]
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d103      	bne.n	8014e56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	689a      	ldr	r2, [r3, #8]
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	1e5a      	subs	r2, r3, #1
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	681b      	ldr	r3, [r3, #0]
}
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	3714      	adds	r7, #20
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e74:	4770      	bx	lr
	...

08014e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b084      	sub	sp, #16
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d10c      	bne.n	8014ea6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e90:	b672      	cpsid	i
 8014e92:	f383 8811 	msr	BASEPRI, r3
 8014e96:	f3bf 8f6f 	isb	sy
 8014e9a:	f3bf 8f4f 	dsb	sy
 8014e9e:	b662      	cpsie	i
 8014ea0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014ea2:	bf00      	nop
 8014ea4:	e7fe      	b.n	8014ea4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014ea6:	f002 fa19 	bl	80172dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014eb2:	68f9      	ldr	r1, [r7, #12]
 8014eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014eb6:	fb01 f303 	mul.w	r3, r1, r3
 8014eba:	441a      	add	r2, r3
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	681a      	ldr	r2, [r3, #0]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ed6:	3b01      	subs	r3, #1
 8014ed8:	68f9      	ldr	r1, [r7, #12]
 8014eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014edc:	fb01 f303 	mul.w	r3, r1, r3
 8014ee0:	441a      	add	r2, r3
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	22ff      	movs	r2, #255	; 0xff
 8014eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	22ff      	movs	r2, #255	; 0xff
 8014ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d114      	bne.n	8014f26 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	691b      	ldr	r3, [r3, #16]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d01a      	beq.n	8014f3a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	3310      	adds	r3, #16
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f001 fccf 	bl	80168ac <xTaskRemoveFromEventList>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d012      	beq.n	8014f3a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014f14:	4b0c      	ldr	r3, [pc, #48]	; (8014f48 <xQueueGenericReset+0xd0>)
 8014f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f1a:	601a      	str	r2, [r3, #0]
 8014f1c:	f3bf 8f4f 	dsb	sy
 8014f20:	f3bf 8f6f 	isb	sy
 8014f24:	e009      	b.n	8014f3a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	3310      	adds	r3, #16
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7ff feef 	bl	8014d0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	3324      	adds	r3, #36	; 0x24
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7ff feea 	bl	8014d0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014f3a:	f002 fa03 	bl	8017344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014f3e:	2301      	movs	r3, #1
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3710      	adds	r7, #16
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	e000ed04 	.word	0xe000ed04

08014f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08e      	sub	sp, #56	; 0x38
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	607a      	str	r2, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d10c      	bne.n	8014f7a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8014f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f64:	b672      	cpsid	i
 8014f66:	f383 8811 	msr	BASEPRI, r3
 8014f6a:	f3bf 8f6f 	isb	sy
 8014f6e:	f3bf 8f4f 	dsb	sy
 8014f72:	b662      	cpsie	i
 8014f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014f76:	bf00      	nop
 8014f78:	e7fe      	b.n	8014f78 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014f7a:	683b      	ldr	r3, [r7, #0]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d10c      	bne.n	8014f9a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8014f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f84:	b672      	cpsid	i
 8014f86:	f383 8811 	msr	BASEPRI, r3
 8014f8a:	f3bf 8f6f 	isb	sy
 8014f8e:	f3bf 8f4f 	dsb	sy
 8014f92:	b662      	cpsie	i
 8014f94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014f96:	bf00      	nop
 8014f98:	e7fe      	b.n	8014f98 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d002      	beq.n	8014fa6 <xQueueGenericCreateStatic+0x5a>
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d001      	beq.n	8014faa <xQueueGenericCreateStatic+0x5e>
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	e000      	b.n	8014fac <xQueueGenericCreateStatic+0x60>
 8014faa:	2300      	movs	r3, #0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d10c      	bne.n	8014fca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8014fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb4:	b672      	cpsid	i
 8014fb6:	f383 8811 	msr	BASEPRI, r3
 8014fba:	f3bf 8f6f 	isb	sy
 8014fbe:	f3bf 8f4f 	dsb	sy
 8014fc2:	b662      	cpsie	i
 8014fc4:	623b      	str	r3, [r7, #32]
}
 8014fc6:	bf00      	nop
 8014fc8:	e7fe      	b.n	8014fc8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d102      	bne.n	8014fd6 <xQueueGenericCreateStatic+0x8a>
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d101      	bne.n	8014fda <xQueueGenericCreateStatic+0x8e>
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	e000      	b.n	8014fdc <xQueueGenericCreateStatic+0x90>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d10c      	bne.n	8014ffa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8014fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe4:	b672      	cpsid	i
 8014fe6:	f383 8811 	msr	BASEPRI, r3
 8014fea:	f3bf 8f6f 	isb	sy
 8014fee:	f3bf 8f4f 	dsb	sy
 8014ff2:	b662      	cpsie	i
 8014ff4:	61fb      	str	r3, [r7, #28]
}
 8014ff6:	bf00      	nop
 8014ff8:	e7fe      	b.n	8014ff8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014ffa:	2348      	movs	r3, #72	; 0x48
 8014ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	2b48      	cmp	r3, #72	; 0x48
 8015002:	d00c      	beq.n	801501e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8015004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015008:	b672      	cpsid	i
 801500a:	f383 8811 	msr	BASEPRI, r3
 801500e:	f3bf 8f6f 	isb	sy
 8015012:	f3bf 8f4f 	dsb	sy
 8015016:	b662      	cpsie	i
 8015018:	61bb      	str	r3, [r7, #24]
}
 801501a:	bf00      	nop
 801501c:	e7fe      	b.n	801501c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801501e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015020:	683b      	ldr	r3, [r7, #0]
 8015022:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00d      	beq.n	8015046 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502c:	2201      	movs	r2, #1
 801502e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015032:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015038:	9300      	str	r3, [sp, #0]
 801503a:	4613      	mov	r3, r2
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	68b9      	ldr	r1, [r7, #8]
 8015040:	68f8      	ldr	r0, [r7, #12]
 8015042:	f000 f847 	bl	80150d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015048:	4618      	mov	r0, r3
 801504a:	3730      	adds	r7, #48	; 0x30
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}

08015050 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015050:	b580      	push	{r7, lr}
 8015052:	b08a      	sub	sp, #40	; 0x28
 8015054:	af02      	add	r7, sp, #8
 8015056:	60f8      	str	r0, [r7, #12]
 8015058:	60b9      	str	r1, [r7, #8]
 801505a:	4613      	mov	r3, r2
 801505c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d10c      	bne.n	801507e <xQueueGenericCreate+0x2e>
	__asm volatile
 8015064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015068:	b672      	cpsid	i
 801506a:	f383 8811 	msr	BASEPRI, r3
 801506e:	f3bf 8f6f 	isb	sy
 8015072:	f3bf 8f4f 	dsb	sy
 8015076:	b662      	cpsie	i
 8015078:	613b      	str	r3, [r7, #16]
}
 801507a:	bf00      	nop
 801507c:	e7fe      	b.n	801507c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d102      	bne.n	801508a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015084:	2300      	movs	r3, #0
 8015086:	61fb      	str	r3, [r7, #28]
 8015088:	e004      	b.n	8015094 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	fb02 f303 	mul.w	r3, r2, r3
 8015092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	3348      	adds	r3, #72	; 0x48
 8015098:	4618      	mov	r0, r3
 801509a:	f002 fa4b 	bl	8017534 <pvPortMalloc>
 801509e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80150a0:	69bb      	ldr	r3, [r7, #24]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d011      	beq.n	80150ca <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	3348      	adds	r3, #72	; 0x48
 80150ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	2200      	movs	r2, #0
 80150b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80150b8:	79fa      	ldrb	r2, [r7, #7]
 80150ba:	69bb      	ldr	r3, [r7, #24]
 80150bc:	9300      	str	r3, [sp, #0]
 80150be:	4613      	mov	r3, r2
 80150c0:	697a      	ldr	r2, [r7, #20]
 80150c2:	68b9      	ldr	r1, [r7, #8]
 80150c4:	68f8      	ldr	r0, [r7, #12]
 80150c6:	f000 f805 	bl	80150d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80150ca:	69bb      	ldr	r3, [r7, #24]
	}
 80150cc:	4618      	mov	r0, r3
 80150ce:	3720      	adds	r7, #32
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}

080150d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b084      	sub	sp, #16
 80150d8:	af00      	add	r7, sp, #0
 80150da:	60f8      	str	r0, [r7, #12]
 80150dc:	60b9      	str	r1, [r7, #8]
 80150de:	607a      	str	r2, [r7, #4]
 80150e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d103      	bne.n	80150f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	69ba      	ldr	r2, [r7, #24]
 80150ec:	601a      	str	r2, [r3, #0]
 80150ee:	e002      	b.n	80150f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	68fa      	ldr	r2, [r7, #12]
 80150fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	68ba      	ldr	r2, [r7, #8]
 8015100:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015102:	2101      	movs	r1, #1
 8015104:	69b8      	ldr	r0, [r7, #24]
 8015106:	f7ff feb7 	bl	8014e78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801510a:	bf00      	nop
 801510c:	3710      	adds	r7, #16
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}

08015112 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015112:	b580      	push	{r7, lr}
 8015114:	b082      	sub	sp, #8
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d00e      	beq.n	801513e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2200      	movs	r2, #0
 8015124:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2200      	movs	r2, #0
 8015130:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015132:	2300      	movs	r3, #0
 8015134:	2200      	movs	r2, #0
 8015136:	2100      	movs	r1, #0
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f000 f8a9 	bl	8015290 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801513e:	bf00      	nop
 8015140:	3708      	adds	r7, #8
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}

08015146 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015146:	b580      	push	{r7, lr}
 8015148:	b086      	sub	sp, #24
 801514a:	af00      	add	r7, sp, #0
 801514c:	4603      	mov	r3, r0
 801514e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015150:	2301      	movs	r3, #1
 8015152:	617b      	str	r3, [r7, #20]
 8015154:	2300      	movs	r3, #0
 8015156:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015158:	79fb      	ldrb	r3, [r7, #7]
 801515a:	461a      	mov	r2, r3
 801515c:	6939      	ldr	r1, [r7, #16]
 801515e:	6978      	ldr	r0, [r7, #20]
 8015160:	f7ff ff76 	bl	8015050 <xQueueGenericCreate>
 8015164:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015166:	68f8      	ldr	r0, [r7, #12]
 8015168:	f7ff ffd3 	bl	8015112 <prvInitialiseMutex>

		return xNewQueue;
 801516c:	68fb      	ldr	r3, [r7, #12]
	}
 801516e:	4618      	mov	r0, r3
 8015170:	3718      	adds	r7, #24
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015176:	b580      	push	{r7, lr}
 8015178:	b088      	sub	sp, #32
 801517a:	af02      	add	r7, sp, #8
 801517c:	4603      	mov	r3, r0
 801517e:	6039      	str	r1, [r7, #0]
 8015180:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015182:	2301      	movs	r3, #1
 8015184:	617b      	str	r3, [r7, #20]
 8015186:	2300      	movs	r3, #0
 8015188:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801518a:	79fb      	ldrb	r3, [r7, #7]
 801518c:	9300      	str	r3, [sp, #0]
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	2200      	movs	r2, #0
 8015192:	6939      	ldr	r1, [r7, #16]
 8015194:	6978      	ldr	r0, [r7, #20]
 8015196:	f7ff fed9 	bl	8014f4c <xQueueGenericCreateStatic>
 801519a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801519c:	68f8      	ldr	r0, [r7, #12]
 801519e:	f7ff ffb8 	bl	8015112 <prvInitialiseMutex>

		return xNewQueue;
 80151a2:	68fb      	ldr	r3, [r7, #12]
	}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b08a      	sub	sp, #40	; 0x28
 80151b0:	af02      	add	r7, sp, #8
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d10c      	bne.n	80151d8 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80151be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151c2:	b672      	cpsid	i
 80151c4:	f383 8811 	msr	BASEPRI, r3
 80151c8:	f3bf 8f6f 	isb	sy
 80151cc:	f3bf 8f4f 	dsb	sy
 80151d0:	b662      	cpsie	i
 80151d2:	61bb      	str	r3, [r7, #24]
}
 80151d4:	bf00      	nop
 80151d6:	e7fe      	b.n	80151d6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	429a      	cmp	r2, r3
 80151de:	d90c      	bls.n	80151fa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80151e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151e4:	b672      	cpsid	i
 80151e6:	f383 8811 	msr	BASEPRI, r3
 80151ea:	f3bf 8f6f 	isb	sy
 80151ee:	f3bf 8f4f 	dsb	sy
 80151f2:	b662      	cpsie	i
 80151f4:	617b      	str	r3, [r7, #20]
}
 80151f6:	bf00      	nop
 80151f8:	e7fe      	b.n	80151f8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80151fa:	2302      	movs	r3, #2
 80151fc:	9300      	str	r3, [sp, #0]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2200      	movs	r2, #0
 8015202:	2100      	movs	r1, #0
 8015204:	68f8      	ldr	r0, [r7, #12]
 8015206:	f7ff fea1 	bl	8014f4c <xQueueGenericCreateStatic>
 801520a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d002      	beq.n	8015218 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	68ba      	ldr	r2, [r7, #8]
 8015216:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015218:	69fb      	ldr	r3, [r7, #28]
	}
 801521a:	4618      	mov	r0, r3
 801521c:	3720      	adds	r7, #32
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}

08015222 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015222:	b580      	push	{r7, lr}
 8015224:	b086      	sub	sp, #24
 8015226:	af00      	add	r7, sp, #0
 8015228:	6078      	str	r0, [r7, #4]
 801522a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d10c      	bne.n	801524c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8015232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015236:	b672      	cpsid	i
 8015238:	f383 8811 	msr	BASEPRI, r3
 801523c:	f3bf 8f6f 	isb	sy
 8015240:	f3bf 8f4f 	dsb	sy
 8015244:	b662      	cpsie	i
 8015246:	613b      	str	r3, [r7, #16]
}
 8015248:	bf00      	nop
 801524a:	e7fe      	b.n	801524a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801524c:	683a      	ldr	r2, [r7, #0]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	429a      	cmp	r2, r3
 8015252:	d90c      	bls.n	801526e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8015254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015258:	b672      	cpsid	i
 801525a:	f383 8811 	msr	BASEPRI, r3
 801525e:	f3bf 8f6f 	isb	sy
 8015262:	f3bf 8f4f 	dsb	sy
 8015266:	b662      	cpsie	i
 8015268:	60fb      	str	r3, [r7, #12]
}
 801526a:	bf00      	nop
 801526c:	e7fe      	b.n	801526c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801526e:	2202      	movs	r2, #2
 8015270:	2100      	movs	r1, #0
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ff feec 	bl	8015050 <xQueueGenericCreate>
 8015278:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d002      	beq.n	8015286 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	683a      	ldr	r2, [r7, #0]
 8015284:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015286:	697b      	ldr	r3, [r7, #20]
	}
 8015288:	4618      	mov	r0, r3
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b08e      	sub	sp, #56	; 0x38
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	607a      	str	r2, [r7, #4]
 801529c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801529e:	2300      	movs	r3, #0
 80152a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80152a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10c      	bne.n	80152c6 <xQueueGenericSend+0x36>
	__asm volatile
 80152ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b0:	b672      	cpsid	i
 80152b2:	f383 8811 	msr	BASEPRI, r3
 80152b6:	f3bf 8f6f 	isb	sy
 80152ba:	f3bf 8f4f 	dsb	sy
 80152be:	b662      	cpsie	i
 80152c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80152c2:	bf00      	nop
 80152c4:	e7fe      	b.n	80152c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152c6:	68bb      	ldr	r3, [r7, #8]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d103      	bne.n	80152d4 <xQueueGenericSend+0x44>
 80152cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d101      	bne.n	80152d8 <xQueueGenericSend+0x48>
 80152d4:	2301      	movs	r3, #1
 80152d6:	e000      	b.n	80152da <xQueueGenericSend+0x4a>
 80152d8:	2300      	movs	r3, #0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d10c      	bne.n	80152f8 <xQueueGenericSend+0x68>
	__asm volatile
 80152de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e2:	b672      	cpsid	i
 80152e4:	f383 8811 	msr	BASEPRI, r3
 80152e8:	f3bf 8f6f 	isb	sy
 80152ec:	f3bf 8f4f 	dsb	sy
 80152f0:	b662      	cpsie	i
 80152f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80152f4:	bf00      	nop
 80152f6:	e7fe      	b.n	80152f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d103      	bne.n	8015306 <xQueueGenericSend+0x76>
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015302:	2b01      	cmp	r3, #1
 8015304:	d101      	bne.n	801530a <xQueueGenericSend+0x7a>
 8015306:	2301      	movs	r3, #1
 8015308:	e000      	b.n	801530c <xQueueGenericSend+0x7c>
 801530a:	2300      	movs	r3, #0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10c      	bne.n	801532a <xQueueGenericSend+0x9a>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015314:	b672      	cpsid	i
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	b662      	cpsie	i
 8015324:	623b      	str	r3, [r7, #32]
}
 8015326:	bf00      	nop
 8015328:	e7fe      	b.n	8015328 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801532a:	f001 fc89 	bl	8016c40 <xTaskGetSchedulerState>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d102      	bne.n	801533a <xQueueGenericSend+0xaa>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d101      	bne.n	801533e <xQueueGenericSend+0xae>
 801533a:	2301      	movs	r3, #1
 801533c:	e000      	b.n	8015340 <xQueueGenericSend+0xb0>
 801533e:	2300      	movs	r3, #0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d10c      	bne.n	801535e <xQueueGenericSend+0xce>
	__asm volatile
 8015344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015348:	b672      	cpsid	i
 801534a:	f383 8811 	msr	BASEPRI, r3
 801534e:	f3bf 8f6f 	isb	sy
 8015352:	f3bf 8f4f 	dsb	sy
 8015356:	b662      	cpsie	i
 8015358:	61fb      	str	r3, [r7, #28]
}
 801535a:	bf00      	nop
 801535c:	e7fe      	b.n	801535c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801535e:	f001 ffbd 	bl	80172dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801536a:	429a      	cmp	r2, r3
 801536c:	d302      	bcc.n	8015374 <xQueueGenericSend+0xe4>
 801536e:	683b      	ldr	r3, [r7, #0]
 8015370:	2b02      	cmp	r3, #2
 8015372:	d129      	bne.n	80153c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015374:	683a      	ldr	r2, [r7, #0]
 8015376:	68b9      	ldr	r1, [r7, #8]
 8015378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801537a:	f000 fcc2 	bl	8015d02 <prvCopyDataToQueue>
 801537e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015384:	2b00      	cmp	r3, #0
 8015386:	d010      	beq.n	80153aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538a:	3324      	adds	r3, #36	; 0x24
 801538c:	4618      	mov	r0, r3
 801538e:	f001 fa8d 	bl	80168ac <xTaskRemoveFromEventList>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d013      	beq.n	80153c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015398:	4b3f      	ldr	r3, [pc, #252]	; (8015498 <xQueueGenericSend+0x208>)
 801539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801539e:	601a      	str	r2, [r3, #0]
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	f3bf 8f6f 	isb	sy
 80153a8:	e00a      	b.n	80153c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80153aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d007      	beq.n	80153c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80153b0:	4b39      	ldr	r3, [pc, #228]	; (8015498 <xQueueGenericSend+0x208>)
 80153b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153b6:	601a      	str	r2, [r3, #0]
 80153b8:	f3bf 8f4f 	dsb	sy
 80153bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80153c0:	f001 ffc0 	bl	8017344 <vPortExitCritical>
				return pdPASS;
 80153c4:	2301      	movs	r3, #1
 80153c6:	e063      	b.n	8015490 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d103      	bne.n	80153d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80153ce:	f001 ffb9 	bl	8017344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	e05c      	b.n	8015490 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80153d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d106      	bne.n	80153ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80153dc:	f107 0314 	add.w	r3, r7, #20
 80153e0:	4618      	mov	r0, r3
 80153e2:	f001 fac7 	bl	8016974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80153e6:	2301      	movs	r3, #1
 80153e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80153ea:	f001 ffab 	bl	8017344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80153ee:	f001 f825 	bl	801643c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80153f2:	f001 ff73 	bl	80172dc <vPortEnterCritical>
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80153fc:	b25b      	sxtb	r3, r3
 80153fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015402:	d103      	bne.n	801540c <xQueueGenericSend+0x17c>
 8015404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015406:	2200      	movs	r2, #0
 8015408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015412:	b25b      	sxtb	r3, r3
 8015414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015418:	d103      	bne.n	8015422 <xQueueGenericSend+0x192>
 801541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541c:	2200      	movs	r2, #0
 801541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015422:	f001 ff8f 	bl	8017344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015426:	1d3a      	adds	r2, r7, #4
 8015428:	f107 0314 	add.w	r3, r7, #20
 801542c:	4611      	mov	r1, r2
 801542e:	4618      	mov	r0, r3
 8015430:	f001 fab6 	bl	80169a0 <xTaskCheckForTimeOut>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d124      	bne.n	8015484 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801543a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801543c:	f000 fd59 	bl	8015ef2 <prvIsQueueFull>
 8015440:	4603      	mov	r3, r0
 8015442:	2b00      	cmp	r3, #0
 8015444:	d018      	beq.n	8015478 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015448:	3310      	adds	r3, #16
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	4611      	mov	r1, r2
 801544e:	4618      	mov	r0, r3
 8015450:	f001 fa06 	bl	8016860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015456:	f000 fce4 	bl	8015e22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801545a:	f000 fffd 	bl	8016458 <xTaskResumeAll>
 801545e:	4603      	mov	r3, r0
 8015460:	2b00      	cmp	r3, #0
 8015462:	f47f af7c 	bne.w	801535e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8015466:	4b0c      	ldr	r3, [pc, #48]	; (8015498 <xQueueGenericSend+0x208>)
 8015468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	f3bf 8f4f 	dsb	sy
 8015472:	f3bf 8f6f 	isb	sy
 8015476:	e772      	b.n	801535e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801547a:	f000 fcd2 	bl	8015e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801547e:	f000 ffeb 	bl	8016458 <xTaskResumeAll>
 8015482:	e76c      	b.n	801535e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015486:	f000 fccc 	bl	8015e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801548a:	f000 ffe5 	bl	8016458 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801548e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015490:	4618      	mov	r0, r3
 8015492:	3738      	adds	r7, #56	; 0x38
 8015494:	46bd      	mov	sp, r7
 8015496:	bd80      	pop	{r7, pc}
 8015498:	e000ed04 	.word	0xe000ed04

0801549c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b08e      	sub	sp, #56	; 0x38
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	60b9      	str	r1, [r7, #8]
 80154a6:	607a      	str	r2, [r7, #4]
 80154a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80154ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d10c      	bne.n	80154ce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80154b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b8:	b672      	cpsid	i
 80154ba:	f383 8811 	msr	BASEPRI, r3
 80154be:	f3bf 8f6f 	isb	sy
 80154c2:	f3bf 8f4f 	dsb	sy
 80154c6:	b662      	cpsie	i
 80154c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80154ca:	bf00      	nop
 80154cc:	e7fe      	b.n	80154cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d103      	bne.n	80154dc <xQueueGenericSendFromISR+0x40>
 80154d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d101      	bne.n	80154e0 <xQueueGenericSendFromISR+0x44>
 80154dc:	2301      	movs	r3, #1
 80154de:	e000      	b.n	80154e2 <xQueueGenericSendFromISR+0x46>
 80154e0:	2300      	movs	r3, #0
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d10c      	bne.n	8015500 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80154e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ea:	b672      	cpsid	i
 80154ec:	f383 8811 	msr	BASEPRI, r3
 80154f0:	f3bf 8f6f 	isb	sy
 80154f4:	f3bf 8f4f 	dsb	sy
 80154f8:	b662      	cpsie	i
 80154fa:	623b      	str	r3, [r7, #32]
}
 80154fc:	bf00      	nop
 80154fe:	e7fe      	b.n	80154fe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2b02      	cmp	r3, #2
 8015504:	d103      	bne.n	801550e <xQueueGenericSendFromISR+0x72>
 8015506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801550a:	2b01      	cmp	r3, #1
 801550c:	d101      	bne.n	8015512 <xQueueGenericSendFromISR+0x76>
 801550e:	2301      	movs	r3, #1
 8015510:	e000      	b.n	8015514 <xQueueGenericSendFromISR+0x78>
 8015512:	2300      	movs	r3, #0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d10c      	bne.n	8015532 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8015518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801551c:	b672      	cpsid	i
 801551e:	f383 8811 	msr	BASEPRI, r3
 8015522:	f3bf 8f6f 	isb	sy
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	b662      	cpsie	i
 801552c:	61fb      	str	r3, [r7, #28]
}
 801552e:	bf00      	nop
 8015530:	e7fe      	b.n	8015530 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015532:	f001 ffbb 	bl	80174ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015536:	f3ef 8211 	mrs	r2, BASEPRI
 801553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801553e:	b672      	cpsid	i
 8015540:	f383 8811 	msr	BASEPRI, r3
 8015544:	f3bf 8f6f 	isb	sy
 8015548:	f3bf 8f4f 	dsb	sy
 801554c:	b662      	cpsie	i
 801554e:	61ba      	str	r2, [r7, #24]
 8015550:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015552:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015554:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801555e:	429a      	cmp	r2, r3
 8015560:	d302      	bcc.n	8015568 <xQueueGenericSendFromISR+0xcc>
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	2b02      	cmp	r3, #2
 8015566:	d12c      	bne.n	80155c2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801556e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	68b9      	ldr	r1, [r7, #8]
 8015576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015578:	f000 fbc3 	bl	8015d02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801557c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015584:	d112      	bne.n	80155ac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558a:	2b00      	cmp	r3, #0
 801558c:	d016      	beq.n	80155bc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015590:	3324      	adds	r3, #36	; 0x24
 8015592:	4618      	mov	r0, r3
 8015594:	f001 f98a 	bl	80168ac <xTaskRemoveFromEventList>
 8015598:	4603      	mov	r3, r0
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00e      	beq.n	80155bc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d00b      	beq.n	80155bc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2201      	movs	r2, #1
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	e007      	b.n	80155bc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80155ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80155b0:	3301      	adds	r3, #1
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	b25a      	sxtb	r2, r3
 80155b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80155bc:	2301      	movs	r3, #1
 80155be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80155c0:	e001      	b.n	80155c6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80155c2:	2300      	movs	r3, #0
 80155c4:	637b      	str	r3, [r7, #52]	; 0x34
 80155c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80155ca:	693b      	ldr	r3, [r7, #16]
 80155cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80155d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80155d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3738      	adds	r7, #56	; 0x38
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b08e      	sub	sp, #56	; 0x38
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80155ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d10c      	bne.n	801560a <xQueueGiveFromISR+0x2e>
	__asm volatile
 80155f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155f4:	b672      	cpsid	i
 80155f6:	f383 8811 	msr	BASEPRI, r3
 80155fa:	f3bf 8f6f 	isb	sy
 80155fe:	f3bf 8f4f 	dsb	sy
 8015602:	b662      	cpsie	i
 8015604:	623b      	str	r3, [r7, #32]
}
 8015606:	bf00      	nop
 8015608:	e7fe      	b.n	8015608 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801560a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00c      	beq.n	801562c <xQueueGiveFromISR+0x50>
	__asm volatile
 8015612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015616:	b672      	cpsid	i
 8015618:	f383 8811 	msr	BASEPRI, r3
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	b662      	cpsie	i
 8015626:	61fb      	str	r3, [r7, #28]
}
 8015628:	bf00      	nop
 801562a:	e7fe      	b.n	801562a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d103      	bne.n	801563c <xQueueGiveFromISR+0x60>
 8015634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d101      	bne.n	8015640 <xQueueGiveFromISR+0x64>
 801563c:	2301      	movs	r3, #1
 801563e:	e000      	b.n	8015642 <xQueueGiveFromISR+0x66>
 8015640:	2300      	movs	r3, #0
 8015642:	2b00      	cmp	r3, #0
 8015644:	d10c      	bne.n	8015660 <xQueueGiveFromISR+0x84>
	__asm volatile
 8015646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801564a:	b672      	cpsid	i
 801564c:	f383 8811 	msr	BASEPRI, r3
 8015650:	f3bf 8f6f 	isb	sy
 8015654:	f3bf 8f4f 	dsb	sy
 8015658:	b662      	cpsie	i
 801565a:	61bb      	str	r3, [r7, #24]
}
 801565c:	bf00      	nop
 801565e:	e7fe      	b.n	801565e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015660:	f001 ff24 	bl	80174ac <vPortValidateInterruptPriority>
	__asm volatile
 8015664:	f3ef 8211 	mrs	r2, BASEPRI
 8015668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801566c:	b672      	cpsid	i
 801566e:	f383 8811 	msr	BASEPRI, r3
 8015672:	f3bf 8f6f 	isb	sy
 8015676:	f3bf 8f4f 	dsb	sy
 801567a:	b662      	cpsie	i
 801567c:	617a      	str	r2, [r7, #20]
 801567e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015680:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015682:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015688:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801568e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015690:	429a      	cmp	r2, r3
 8015692:	d22b      	bcs.n	80156ec <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801569a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a0:	1c5a      	adds	r2, r3, #1
 80156a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80156a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80156aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ae:	d112      	bne.n	80156d6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d016      	beq.n	80156e6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80156b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ba:	3324      	adds	r3, #36	; 0x24
 80156bc:	4618      	mov	r0, r3
 80156be:	f001 f8f5 	bl	80168ac <xTaskRemoveFromEventList>
 80156c2:	4603      	mov	r3, r0
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d00e      	beq.n	80156e6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00b      	beq.n	80156e6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	2201      	movs	r2, #1
 80156d2:	601a      	str	r2, [r3, #0]
 80156d4:	e007      	b.n	80156e6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80156d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156da:	3301      	adds	r3, #1
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	b25a      	sxtb	r2, r3
 80156e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80156e6:	2301      	movs	r3, #1
 80156e8:	637b      	str	r3, [r7, #52]	; 0x34
 80156ea:	e001      	b.n	80156f0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80156ec:	2300      	movs	r3, #0
 80156ee:	637b      	str	r3, [r7, #52]	; 0x34
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f383 8811 	msr	BASEPRI, r3
}
 80156fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80156fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3738      	adds	r7, #56	; 0x38
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
	...

08015708 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08c      	sub	sp, #48	; 0x30
 801570c:	af00      	add	r7, sp, #0
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015714:	2300      	movs	r3, #0
 8015716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571e:	2b00      	cmp	r3, #0
 8015720:	d10c      	bne.n	801573c <xQueueReceive+0x34>
	__asm volatile
 8015722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015726:	b672      	cpsid	i
 8015728:	f383 8811 	msr	BASEPRI, r3
 801572c:	f3bf 8f6f 	isb	sy
 8015730:	f3bf 8f4f 	dsb	sy
 8015734:	b662      	cpsie	i
 8015736:	623b      	str	r3, [r7, #32]
}
 8015738:	bf00      	nop
 801573a:	e7fe      	b.n	801573a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d103      	bne.n	801574a <xQueueReceive+0x42>
 8015742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015746:	2b00      	cmp	r3, #0
 8015748:	d101      	bne.n	801574e <xQueueReceive+0x46>
 801574a:	2301      	movs	r3, #1
 801574c:	e000      	b.n	8015750 <xQueueReceive+0x48>
 801574e:	2300      	movs	r3, #0
 8015750:	2b00      	cmp	r3, #0
 8015752:	d10c      	bne.n	801576e <xQueueReceive+0x66>
	__asm volatile
 8015754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015758:	b672      	cpsid	i
 801575a:	f383 8811 	msr	BASEPRI, r3
 801575e:	f3bf 8f6f 	isb	sy
 8015762:	f3bf 8f4f 	dsb	sy
 8015766:	b662      	cpsie	i
 8015768:	61fb      	str	r3, [r7, #28]
}
 801576a:	bf00      	nop
 801576c:	e7fe      	b.n	801576c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801576e:	f001 fa67 	bl	8016c40 <xTaskGetSchedulerState>
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d102      	bne.n	801577e <xQueueReceive+0x76>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d101      	bne.n	8015782 <xQueueReceive+0x7a>
 801577e:	2301      	movs	r3, #1
 8015780:	e000      	b.n	8015784 <xQueueReceive+0x7c>
 8015782:	2300      	movs	r3, #0
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10c      	bne.n	80157a2 <xQueueReceive+0x9a>
	__asm volatile
 8015788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801578c:	b672      	cpsid	i
 801578e:	f383 8811 	msr	BASEPRI, r3
 8015792:	f3bf 8f6f 	isb	sy
 8015796:	f3bf 8f4f 	dsb	sy
 801579a:	b662      	cpsie	i
 801579c:	61bb      	str	r3, [r7, #24]
}
 801579e:	bf00      	nop
 80157a0:	e7fe      	b.n	80157a0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80157a2:	f001 fd9b 	bl	80172dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80157ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d01f      	beq.n	80157f2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80157b2:	68b9      	ldr	r1, [r7, #8]
 80157b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157b6:	f000 fb0e 	bl	8015dd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80157ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157bc:	1e5a      	subs	r2, r3, #1
 80157be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80157c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00f      	beq.n	80157ea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80157ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157cc:	3310      	adds	r3, #16
 80157ce:	4618      	mov	r0, r3
 80157d0:	f001 f86c 	bl	80168ac <xTaskRemoveFromEventList>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d007      	beq.n	80157ea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80157da:	4b3d      	ldr	r3, [pc, #244]	; (80158d0 <xQueueReceive+0x1c8>)
 80157dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80157e0:	601a      	str	r2, [r3, #0]
 80157e2:	f3bf 8f4f 	dsb	sy
 80157e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80157ea:	f001 fdab 	bl	8017344 <vPortExitCritical>
				return pdPASS;
 80157ee:	2301      	movs	r3, #1
 80157f0:	e069      	b.n	80158c6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d103      	bne.n	8015800 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157f8:	f001 fda4 	bl	8017344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80157fc:	2300      	movs	r3, #0
 80157fe:	e062      	b.n	80158c6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015802:	2b00      	cmp	r3, #0
 8015804:	d106      	bne.n	8015814 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015806:	f107 0310 	add.w	r3, r7, #16
 801580a:	4618      	mov	r0, r3
 801580c:	f001 f8b2 	bl	8016974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015810:	2301      	movs	r3, #1
 8015812:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015814:	f001 fd96 	bl	8017344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015818:	f000 fe10 	bl	801643c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801581c:	f001 fd5e 	bl	80172dc <vPortEnterCritical>
 8015820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015826:	b25b      	sxtb	r3, r3
 8015828:	f1b3 3fff 	cmp.w	r3, #4294967295
 801582c:	d103      	bne.n	8015836 <xQueueReceive+0x12e>
 801582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015830:	2200      	movs	r2, #0
 8015832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801583c:	b25b      	sxtb	r3, r3
 801583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015842:	d103      	bne.n	801584c <xQueueReceive+0x144>
 8015844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015846:	2200      	movs	r2, #0
 8015848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801584c:	f001 fd7a 	bl	8017344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015850:	1d3a      	adds	r2, r7, #4
 8015852:	f107 0310 	add.w	r3, r7, #16
 8015856:	4611      	mov	r1, r2
 8015858:	4618      	mov	r0, r3
 801585a:	f001 f8a1 	bl	80169a0 <xTaskCheckForTimeOut>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d123      	bne.n	80158ac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015866:	f000 fb2e 	bl	8015ec6 <prvIsQueueEmpty>
 801586a:	4603      	mov	r3, r0
 801586c:	2b00      	cmp	r3, #0
 801586e:	d017      	beq.n	80158a0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	3324      	adds	r3, #36	; 0x24
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	4611      	mov	r1, r2
 8015878:	4618      	mov	r0, r3
 801587a:	f000 fff1 	bl	8016860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801587e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015880:	f000 facf 	bl	8015e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015884:	f000 fde8 	bl	8016458 <xTaskResumeAll>
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d189      	bne.n	80157a2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801588e:	4b10      	ldr	r3, [pc, #64]	; (80158d0 <xQueueReceive+0x1c8>)
 8015890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015894:	601a      	str	r2, [r3, #0]
 8015896:	f3bf 8f4f 	dsb	sy
 801589a:	f3bf 8f6f 	isb	sy
 801589e:	e780      	b.n	80157a2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80158a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158a2:	f000 fabe 	bl	8015e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80158a6:	f000 fdd7 	bl	8016458 <xTaskResumeAll>
 80158aa:	e77a      	b.n	80157a2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80158ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158ae:	f000 fab8 	bl	8015e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158b2:	f000 fdd1 	bl	8016458 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80158b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158b8:	f000 fb05 	bl	8015ec6 <prvIsQueueEmpty>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f43f af6f 	beq.w	80157a2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80158c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80158c6:	4618      	mov	r0, r3
 80158c8:	3730      	adds	r7, #48	; 0x30
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	bf00      	nop
 80158d0:	e000ed04 	.word	0xe000ed04

080158d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b08e      	sub	sp, #56	; 0x38
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80158de:	2300      	movs	r3, #0
 80158e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80158e6:	2300      	movs	r3, #0
 80158e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d10c      	bne.n	801590a <xQueueSemaphoreTake+0x36>
	__asm volatile
 80158f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f4:	b672      	cpsid	i
 80158f6:	f383 8811 	msr	BASEPRI, r3
 80158fa:	f3bf 8f6f 	isb	sy
 80158fe:	f3bf 8f4f 	dsb	sy
 8015902:	b662      	cpsie	i
 8015904:	623b      	str	r3, [r7, #32]
}
 8015906:	bf00      	nop
 8015908:	e7fe      	b.n	8015908 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801590e:	2b00      	cmp	r3, #0
 8015910:	d00c      	beq.n	801592c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8015912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015916:	b672      	cpsid	i
 8015918:	f383 8811 	msr	BASEPRI, r3
 801591c:	f3bf 8f6f 	isb	sy
 8015920:	f3bf 8f4f 	dsb	sy
 8015924:	b662      	cpsie	i
 8015926:	61fb      	str	r3, [r7, #28]
}
 8015928:	bf00      	nop
 801592a:	e7fe      	b.n	801592a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801592c:	f001 f988 	bl	8016c40 <xTaskGetSchedulerState>
 8015930:	4603      	mov	r3, r0
 8015932:	2b00      	cmp	r3, #0
 8015934:	d102      	bne.n	801593c <xQueueSemaphoreTake+0x68>
 8015936:	683b      	ldr	r3, [r7, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d101      	bne.n	8015940 <xQueueSemaphoreTake+0x6c>
 801593c:	2301      	movs	r3, #1
 801593e:	e000      	b.n	8015942 <xQueueSemaphoreTake+0x6e>
 8015940:	2300      	movs	r3, #0
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10c      	bne.n	8015960 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8015946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594a:	b672      	cpsid	i
 801594c:	f383 8811 	msr	BASEPRI, r3
 8015950:	f3bf 8f6f 	isb	sy
 8015954:	f3bf 8f4f 	dsb	sy
 8015958:	b662      	cpsie	i
 801595a:	61bb      	str	r3, [r7, #24]
}
 801595c:	bf00      	nop
 801595e:	e7fe      	b.n	801595e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015960:	f001 fcbc 	bl	80172dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015968:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	2b00      	cmp	r3, #0
 801596e:	d024      	beq.n	80159ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015972:	1e5a      	subs	r2, r3, #1
 8015974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015976:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d104      	bne.n	801598a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015980:	f001 fb24 	bl	8016fcc <pvTaskIncrementMutexHeldCount>
 8015984:	4602      	mov	r2, r0
 8015986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015988:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598c:	691b      	ldr	r3, [r3, #16]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d00f      	beq.n	80159b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	3310      	adds	r3, #16
 8015996:	4618      	mov	r0, r3
 8015998:	f000 ff88 	bl	80168ac <xTaskRemoveFromEventList>
 801599c:	4603      	mov	r3, r0
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d007      	beq.n	80159b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80159a2:	4b55      	ldr	r3, [pc, #340]	; (8015af8 <xQueueSemaphoreTake+0x224>)
 80159a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159a8:	601a      	str	r2, [r3, #0]
 80159aa:	f3bf 8f4f 	dsb	sy
 80159ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80159b2:	f001 fcc7 	bl	8017344 <vPortExitCritical>
				return pdPASS;
 80159b6:	2301      	movs	r3, #1
 80159b8:	e099      	b.n	8015aee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d113      	bne.n	80159e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80159c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d00c      	beq.n	80159e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80159c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ca:	b672      	cpsid	i
 80159cc:	f383 8811 	msr	BASEPRI, r3
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	f3bf 8f4f 	dsb	sy
 80159d8:	b662      	cpsie	i
 80159da:	617b      	str	r3, [r7, #20]
}
 80159dc:	bf00      	nop
 80159de:	e7fe      	b.n	80159de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80159e0:	f001 fcb0 	bl	8017344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80159e4:	2300      	movs	r3, #0
 80159e6:	e082      	b.n	8015aee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80159e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d106      	bne.n	80159fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80159ee:	f107 030c 	add.w	r3, r7, #12
 80159f2:	4618      	mov	r0, r3
 80159f4:	f000 ffbe 	bl	8016974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80159f8:	2301      	movs	r3, #1
 80159fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80159fc:	f001 fca2 	bl	8017344 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015a00:	f000 fd1c 	bl	801643c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015a04:	f001 fc6a 	bl	80172dc <vPortEnterCritical>
 8015a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015a0e:	b25b      	sxtb	r3, r3
 8015a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a14:	d103      	bne.n	8015a1e <xQueueSemaphoreTake+0x14a>
 8015a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a18:	2200      	movs	r2, #0
 8015a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015a24:	b25b      	sxtb	r3, r3
 8015a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a2a:	d103      	bne.n	8015a34 <xQueueSemaphoreTake+0x160>
 8015a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015a34:	f001 fc86 	bl	8017344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015a38:	463a      	mov	r2, r7
 8015a3a:	f107 030c 	add.w	r3, r7, #12
 8015a3e:	4611      	mov	r1, r2
 8015a40:	4618      	mov	r0, r3
 8015a42:	f000 ffad 	bl	80169a0 <xTaskCheckForTimeOut>
 8015a46:	4603      	mov	r3, r0
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d132      	bne.n	8015ab2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a4e:	f000 fa3a 	bl	8015ec6 <prvIsQueueEmpty>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d026      	beq.n	8015aa6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d109      	bne.n	8015a74 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8015a60:	f001 fc3c 	bl	80172dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a66:	689b      	ldr	r3, [r3, #8]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f001 f907 	bl	8016c7c <xTaskPriorityInherit>
 8015a6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8015a70:	f001 fc68 	bl	8017344 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a76:	3324      	adds	r3, #36	; 0x24
 8015a78:	683a      	ldr	r2, [r7, #0]
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f000 feef 	bl	8016860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a84:	f000 f9cd 	bl	8015e22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a88:	f000 fce6 	bl	8016458 <xTaskResumeAll>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	f47f af66 	bne.w	8015960 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8015a94:	4b18      	ldr	r3, [pc, #96]	; (8015af8 <xQueueSemaphoreTake+0x224>)
 8015a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a9a:	601a      	str	r2, [r3, #0]
 8015a9c:	f3bf 8f4f 	dsb	sy
 8015aa0:	f3bf 8f6f 	isb	sy
 8015aa4:	e75c      	b.n	8015960 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015aa8:	f000 f9bb 	bl	8015e22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015aac:	f000 fcd4 	bl	8016458 <xTaskResumeAll>
 8015ab0:	e756      	b.n	8015960 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ab4:	f000 f9b5 	bl	8015e22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ab8:	f000 fcce 	bl	8016458 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015abe:	f000 fa02 	bl	8015ec6 <prvIsQueueEmpty>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	f43f af4b 	beq.w	8015960 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00d      	beq.n	8015aec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8015ad0:	f001 fc04 	bl	80172dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015ad4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ad6:	f000 f8fc 	bl	8015cd2 <prvGetDisinheritPriorityAfterTimeout>
 8015ada:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ade:	689b      	ldr	r3, [r3, #8]
 8015ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f001 f9d4 	bl	8016e90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015ae8:	f001 fc2c 	bl	8017344 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015aec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3738      	adds	r7, #56	; 0x38
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	e000ed04 	.word	0xe000ed04

08015afc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b08e      	sub	sp, #56	; 0x38
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d10c      	bne.n	8015b2c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8015b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b16:	b672      	cpsid	i
 8015b18:	f383 8811 	msr	BASEPRI, r3
 8015b1c:	f3bf 8f6f 	isb	sy
 8015b20:	f3bf 8f4f 	dsb	sy
 8015b24:	b662      	cpsie	i
 8015b26:	623b      	str	r3, [r7, #32]
}
 8015b28:	bf00      	nop
 8015b2a:	e7fe      	b.n	8015b2a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b2c:	68bb      	ldr	r3, [r7, #8]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d103      	bne.n	8015b3a <xQueueReceiveFromISR+0x3e>
 8015b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d101      	bne.n	8015b3e <xQueueReceiveFromISR+0x42>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	e000      	b.n	8015b40 <xQueueReceiveFromISR+0x44>
 8015b3e:	2300      	movs	r3, #0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10c      	bne.n	8015b5e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8015b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b48:	b672      	cpsid	i
 8015b4a:	f383 8811 	msr	BASEPRI, r3
 8015b4e:	f3bf 8f6f 	isb	sy
 8015b52:	f3bf 8f4f 	dsb	sy
 8015b56:	b662      	cpsie	i
 8015b58:	61fb      	str	r3, [r7, #28]
}
 8015b5a:	bf00      	nop
 8015b5c:	e7fe      	b.n	8015b5c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015b5e:	f001 fca5 	bl	80174ac <vPortValidateInterruptPriority>
	__asm volatile
 8015b62:	f3ef 8211 	mrs	r2, BASEPRI
 8015b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b6a:	b672      	cpsid	i
 8015b6c:	f383 8811 	msr	BASEPRI, r3
 8015b70:	f3bf 8f6f 	isb	sy
 8015b74:	f3bf 8f4f 	dsb	sy
 8015b78:	b662      	cpsie	i
 8015b7a:	61ba      	str	r2, [r7, #24]
 8015b7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015b7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d02f      	beq.n	8015bee <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015b98:	68b9      	ldr	r1, [r7, #8]
 8015b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b9c:	f000 f91b 	bl	8015dd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba2:	1e5a      	subs	r2, r3, #1
 8015ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015ba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bb0:	d112      	bne.n	8015bd8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb4:	691b      	ldr	r3, [r3, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d016      	beq.n	8015be8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bbc:	3310      	adds	r3, #16
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f000 fe74 	bl	80168ac <xTaskRemoveFromEventList>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d00e      	beq.n	8015be8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d00b      	beq.n	8015be8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	601a      	str	r2, [r3, #0]
 8015bd6:	e007      	b.n	8015be8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bdc:	3301      	adds	r3, #1
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	b25a      	sxtb	r2, r3
 8015be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8015be8:	2301      	movs	r3, #1
 8015bea:	637b      	str	r3, [r7, #52]	; 0x34
 8015bec:	e001      	b.n	8015bf2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8015bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	f383 8811 	msr	BASEPRI, r3
}
 8015bfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3738      	adds	r7, #56	; 0x38
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d10c      	bne.n	8015c30 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8015c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c1a:	b672      	cpsid	i
 8015c1c:	f383 8811 	msr	BASEPRI, r3
 8015c20:	f3bf 8f6f 	isb	sy
 8015c24:	f3bf 8f4f 	dsb	sy
 8015c28:	b662      	cpsie	i
 8015c2a:	60bb      	str	r3, [r7, #8]
}
 8015c2c:	bf00      	nop
 8015c2e:	e7fe      	b.n	8015c2e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015c30:	f001 fb54 	bl	80172dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c38:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015c3a:	f001 fb83 	bl	8017344 <vPortExitCritical>

	return uxReturn;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015c40:	4618      	mov	r0, r3
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015c48:	b480      	push	{r7}
 8015c4a:	b087      	sub	sp, #28
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d10c      	bne.n	8015c74 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8015c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5e:	b672      	cpsid	i
 8015c60:	f383 8811 	msr	BASEPRI, r3
 8015c64:	f3bf 8f6f 	isb	sy
 8015c68:	f3bf 8f4f 	dsb	sy
 8015c6c:	b662      	cpsie	i
 8015c6e:	60fb      	str	r3, [r7, #12]
}
 8015c70:	bf00      	nop
 8015c72:	e7fe      	b.n	8015c72 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c78:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015c7a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	371c      	adds	r7, #28
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr

08015c88 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d10c      	bne.n	8015cb4 <vQueueDelete+0x2c>
	__asm volatile
 8015c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c9e:	b672      	cpsid	i
 8015ca0:	f383 8811 	msr	BASEPRI, r3
 8015ca4:	f3bf 8f6f 	isb	sy
 8015ca8:	f3bf 8f4f 	dsb	sy
 8015cac:	b662      	cpsie	i
 8015cae:	60bb      	str	r3, [r7, #8]
}
 8015cb0:	bf00      	nop
 8015cb2:	e7fe      	b.n	8015cb2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f000 f935 	bl	8015f24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d102      	bne.n	8015cca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8015cc4:	68f8      	ldr	r0, [r7, #12]
 8015cc6:	f001 fd05 	bl	80176d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8015cca:	bf00      	nop
 8015ccc:	3710      	adds	r7, #16
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	bd80      	pop	{r7, pc}

08015cd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015cd2:	b480      	push	{r7}
 8015cd4:	b085      	sub	sp, #20
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d006      	beq.n	8015cf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	f1c3 0307 	rsb	r3, r3, #7
 8015cec:	60fb      	str	r3, [r7, #12]
 8015cee:	e001      	b.n	8015cf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3714      	adds	r7, #20
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d00:	4770      	bx	lr

08015d02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b086      	sub	sp, #24
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	60f8      	str	r0, [r7, #12]
 8015d0a:	60b9      	str	r1, [r7, #8]
 8015d0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d0e:	2300      	movs	r3, #0
 8015d10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10d      	bne.n	8015d3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d14d      	bne.n	8015dc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	689b      	ldr	r3, [r3, #8]
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f001 f825 	bl	8016d7c <xTaskPriorityDisinherit>
 8015d32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2200      	movs	r2, #0
 8015d38:	609a      	str	r2, [r3, #8]
 8015d3a:	e043      	b.n	8015dc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d119      	bne.n	8015d76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	6858      	ldr	r0, [r3, #4]
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	68b9      	ldr	r1, [r7, #8]
 8015d4e:	f00f fd21 	bl	8025794 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685a      	ldr	r2, [r3, #4]
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d5a:	441a      	add	r2, r3
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	685a      	ldr	r2, [r3, #4]
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	689b      	ldr	r3, [r3, #8]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d32b      	bcc.n	8015dc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	681a      	ldr	r2, [r3, #0]
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	605a      	str	r2, [r3, #4]
 8015d74:	e026      	b.n	8015dc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	68d8      	ldr	r0, [r3, #12]
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d7e:	461a      	mov	r2, r3
 8015d80:	68b9      	ldr	r1, [r7, #8]
 8015d82:	f00f fd07 	bl	8025794 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	68da      	ldr	r2, [r3, #12]
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d8e:	425b      	negs	r3, r3
 8015d90:	441a      	add	r2, r3
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	68da      	ldr	r2, [r3, #12]
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	429a      	cmp	r2, r3
 8015da0:	d207      	bcs.n	8015db2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	689a      	ldr	r2, [r3, #8]
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015daa:	425b      	negs	r3, r3
 8015dac:	441a      	add	r2, r3
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2b02      	cmp	r3, #2
 8015db6:	d105      	bne.n	8015dc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d002      	beq.n	8015dc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	3b01      	subs	r3, #1
 8015dc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	1c5a      	adds	r2, r3, #1
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015dcc:	697b      	ldr	r3, [r7, #20]
}
 8015dce:	4618      	mov	r0, r3
 8015dd0:	3718      	adds	r7, #24
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	bd80      	pop	{r7, pc}

08015dd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015dd6:	b580      	push	{r7, lr}
 8015dd8:	b082      	sub	sp, #8
 8015dda:	af00      	add	r7, sp, #0
 8015ddc:	6078      	str	r0, [r7, #4]
 8015dde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d018      	beq.n	8015e1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	68da      	ldr	r2, [r3, #12]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015df0:	441a      	add	r2, r3
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	68da      	ldr	r2, [r3, #12]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	689b      	ldr	r3, [r3, #8]
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d303      	bcc.n	8015e0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	681a      	ldr	r2, [r3, #0]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	68d9      	ldr	r1, [r3, #12]
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e12:	461a      	mov	r2, r3
 8015e14:	6838      	ldr	r0, [r7, #0]
 8015e16:	f00f fcbd 	bl	8025794 <memcpy>
	}
}
 8015e1a:	bf00      	nop
 8015e1c:	3708      	adds	r7, #8
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b084      	sub	sp, #16
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015e2a:	f001 fa57 	bl	80172dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e36:	e011      	b.n	8015e5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d012      	beq.n	8015e66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	3324      	adds	r3, #36	; 0x24
 8015e44:	4618      	mov	r0, r3
 8015e46:	f000 fd31 	bl	80168ac <xTaskRemoveFromEventList>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d001      	beq.n	8015e54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015e50:	f000 fe0c 	bl	8016a6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015e54:	7bfb      	ldrb	r3, [r7, #15]
 8015e56:	3b01      	subs	r3, #1
 8015e58:	b2db      	uxtb	r3, r3
 8015e5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	dce9      	bgt.n	8015e38 <prvUnlockQueue+0x16>
 8015e64:	e000      	b.n	8015e68 <prvUnlockQueue+0x46>
					break;
 8015e66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	22ff      	movs	r2, #255	; 0xff
 8015e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015e70:	f001 fa68 	bl	8017344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015e74:	f001 fa32 	bl	80172dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015e7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015e80:	e011      	b.n	8015ea6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	691b      	ldr	r3, [r3, #16]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d012      	beq.n	8015eb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	3310      	adds	r3, #16
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f000 fd0c 	bl	80168ac <xTaskRemoveFromEventList>
 8015e94:	4603      	mov	r3, r0
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d001      	beq.n	8015e9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015e9a:	f000 fde7 	bl	8016a6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015e9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	b2db      	uxtb	r3, r3
 8015ea4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	dce9      	bgt.n	8015e82 <prvUnlockQueue+0x60>
 8015eae:	e000      	b.n	8015eb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015eb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	22ff      	movs	r2, #255	; 0xff
 8015eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015eba:	f001 fa43 	bl	8017344 <vPortExitCritical>
}
 8015ebe:	bf00      	nop
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b084      	sub	sp, #16
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015ece:	f001 fa05 	bl	80172dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d102      	bne.n	8015ee0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015eda:	2301      	movs	r3, #1
 8015edc:	60fb      	str	r3, [r7, #12]
 8015ede:	e001      	b.n	8015ee4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015ee4:	f001 fa2e 	bl	8017344 <vPortExitCritical>

	return xReturn;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3710      	adds	r7, #16
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015ef2:	b580      	push	{r7, lr}
 8015ef4:	b084      	sub	sp, #16
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015efa:	f001 f9ef 	bl	80172dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d102      	bne.n	8015f10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	60fb      	str	r3, [r7, #12]
 8015f0e:	e001      	b.n	8015f14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015f10:	2300      	movs	r3, #0
 8015f12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f14:	f001 fa16 	bl	8017344 <vPortExitCritical>

	return xReturn;
 8015f18:	68fb      	ldr	r3, [r7, #12]
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3710      	adds	r7, #16
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
	...

08015f24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015f24:	b480      	push	{r7}
 8015f26:	b085      	sub	sp, #20
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	60fb      	str	r3, [r7, #12]
 8015f30:	e016      	b.n	8015f60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015f32:	4a10      	ldr	r2, [pc, #64]	; (8015f74 <vQueueUnregisterQueue+0x50>)
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	00db      	lsls	r3, r3, #3
 8015f38:	4413      	add	r3, r2
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d10b      	bne.n	8015f5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015f42:	4a0c      	ldr	r2, [pc, #48]	; (8015f74 <vQueueUnregisterQueue+0x50>)
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	2100      	movs	r1, #0
 8015f48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015f4c:	4a09      	ldr	r2, [pc, #36]	; (8015f74 <vQueueUnregisterQueue+0x50>)
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	4413      	add	r3, r2
 8015f54:	2200      	movs	r2, #0
 8015f56:	605a      	str	r2, [r3, #4]
				break;
 8015f58:	e006      	b.n	8015f68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	60fb      	str	r3, [r7, #12]
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	2b07      	cmp	r3, #7
 8015f64:	d9e5      	bls.n	8015f32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8015f66:	bf00      	nop
 8015f68:	bf00      	nop
 8015f6a:	3714      	adds	r7, #20
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr
 8015f74:	2000cb5c 	.word	0x2000cb5c

08015f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b08e      	sub	sp, #56	; 0x38
 8015f7c:	af04      	add	r7, sp, #16
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
 8015f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10c      	bne.n	8015fa6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8015f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f90:	b672      	cpsid	i
 8015f92:	f383 8811 	msr	BASEPRI, r3
 8015f96:	f3bf 8f6f 	isb	sy
 8015f9a:	f3bf 8f4f 	dsb	sy
 8015f9e:	b662      	cpsie	i
 8015fa0:	623b      	str	r3, [r7, #32]
}
 8015fa2:	bf00      	nop
 8015fa4:	e7fe      	b.n	8015fa4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d10c      	bne.n	8015fc6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8015fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fb0:	b672      	cpsid	i
 8015fb2:	f383 8811 	msr	BASEPRI, r3
 8015fb6:	f3bf 8f6f 	isb	sy
 8015fba:	f3bf 8f4f 	dsb	sy
 8015fbe:	b662      	cpsie	i
 8015fc0:	61fb      	str	r3, [r7, #28]
}
 8015fc2:	bf00      	nop
 8015fc4:	e7fe      	b.n	8015fc4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015fc6:	23b8      	movs	r3, #184	; 0xb8
 8015fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	2bb8      	cmp	r3, #184	; 0xb8
 8015fce:	d00c      	beq.n	8015fea <xTaskCreateStatic+0x72>
	__asm volatile
 8015fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd4:	b672      	cpsid	i
 8015fd6:	f383 8811 	msr	BASEPRI, r3
 8015fda:	f3bf 8f6f 	isb	sy
 8015fde:	f3bf 8f4f 	dsb	sy
 8015fe2:	b662      	cpsie	i
 8015fe4:	61bb      	str	r3, [r7, #24]
}
 8015fe6:	bf00      	nop
 8015fe8:	e7fe      	b.n	8015fe8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d01e      	beq.n	8016030 <xTaskCreateStatic+0xb8>
 8015ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d01b      	beq.n	8016030 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016004:	2202      	movs	r2, #2
 8016006:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801600a:	2300      	movs	r3, #0
 801600c:	9303      	str	r3, [sp, #12]
 801600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016010:	9302      	str	r3, [sp, #8]
 8016012:	f107 0314 	add.w	r3, r7, #20
 8016016:	9301      	str	r3, [sp, #4]
 8016018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601a:	9300      	str	r3, [sp, #0]
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	687a      	ldr	r2, [r7, #4]
 8016020:	68b9      	ldr	r1, [r7, #8]
 8016022:	68f8      	ldr	r0, [r7, #12]
 8016024:	f000 f850 	bl	80160c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801602a:	f000 f8f9 	bl	8016220 <prvAddNewTaskToReadyList>
 801602e:	e001      	b.n	8016034 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8016030:	2300      	movs	r3, #0
 8016032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016034:	697b      	ldr	r3, [r7, #20]
	}
 8016036:	4618      	mov	r0, r3
 8016038:	3728      	adds	r7, #40	; 0x28
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801603e:	b580      	push	{r7, lr}
 8016040:	b08c      	sub	sp, #48	; 0x30
 8016042:	af04      	add	r7, sp, #16
 8016044:	60f8      	str	r0, [r7, #12]
 8016046:	60b9      	str	r1, [r7, #8]
 8016048:	603b      	str	r3, [r7, #0]
 801604a:	4613      	mov	r3, r2
 801604c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801604e:	88fb      	ldrh	r3, [r7, #6]
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	4618      	mov	r0, r3
 8016054:	f001 fa6e 	bl	8017534 <pvPortMalloc>
 8016058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00e      	beq.n	801607e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016060:	20b8      	movs	r0, #184	; 0xb8
 8016062:	f001 fa67 	bl	8017534 <pvPortMalloc>
 8016066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016068:	69fb      	ldr	r3, [r7, #28]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d003      	beq.n	8016076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	697a      	ldr	r2, [r7, #20]
 8016072:	631a      	str	r2, [r3, #48]	; 0x30
 8016074:	e005      	b.n	8016082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016076:	6978      	ldr	r0, [r7, #20]
 8016078:	f001 fb2c 	bl	80176d4 <vPortFree>
 801607c:	e001      	b.n	8016082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801607e:	2300      	movs	r3, #0
 8016080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d017      	beq.n	80160b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	2200      	movs	r2, #0
 801608c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016090:	88fa      	ldrh	r2, [r7, #6]
 8016092:	2300      	movs	r3, #0
 8016094:	9303      	str	r3, [sp, #12]
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	9302      	str	r3, [sp, #8]
 801609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	68b9      	ldr	r1, [r7, #8]
 80160a6:	68f8      	ldr	r0, [r7, #12]
 80160a8:	f000 f80e 	bl	80160c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160ac:	69f8      	ldr	r0, [r7, #28]
 80160ae:	f000 f8b7 	bl	8016220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80160b2:	2301      	movs	r3, #1
 80160b4:	61bb      	str	r3, [r7, #24]
 80160b6:	e002      	b.n	80160be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80160b8:	f04f 33ff 	mov.w	r3, #4294967295
 80160bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80160be:	69bb      	ldr	r3, [r7, #24]
	}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3720      	adds	r7, #32
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b088      	sub	sp, #32
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	607a      	str	r2, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80160d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	461a      	mov	r2, r3
 80160e0:	21a5      	movs	r1, #165	; 0xa5
 80160e2:	f00f fb65 	bl	80257b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80160ea:	6879      	ldr	r1, [r7, #4]
 80160ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80160f0:	440b      	add	r3, r1
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	4413      	add	r3, r2
 80160f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80160f8:	69bb      	ldr	r3, [r7, #24]
 80160fa:	f023 0307 	bic.w	r3, r3, #7
 80160fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	f003 0307 	and.w	r3, r3, #7
 8016106:	2b00      	cmp	r3, #0
 8016108:	d00c      	beq.n	8016124 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610e:	b672      	cpsid	i
 8016110:	f383 8811 	msr	BASEPRI, r3
 8016114:	f3bf 8f6f 	isb	sy
 8016118:	f3bf 8f4f 	dsb	sy
 801611c:	b662      	cpsie	i
 801611e:	617b      	str	r3, [r7, #20]
}
 8016120:	bf00      	nop
 8016122:	e7fe      	b.n	8016122 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d01f      	beq.n	801616a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801612a:	2300      	movs	r3, #0
 801612c:	61fb      	str	r3, [r7, #28]
 801612e:	e012      	b.n	8016156 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016130:	68ba      	ldr	r2, [r7, #8]
 8016132:	69fb      	ldr	r3, [r7, #28]
 8016134:	4413      	add	r3, r2
 8016136:	7819      	ldrb	r1, [r3, #0]
 8016138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	4413      	add	r3, r2
 801613e:	3334      	adds	r3, #52	; 0x34
 8016140:	460a      	mov	r2, r1
 8016142:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	4413      	add	r3, r2
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d006      	beq.n	801615e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	3301      	adds	r3, #1
 8016154:	61fb      	str	r3, [r7, #28]
 8016156:	69fb      	ldr	r3, [r7, #28]
 8016158:	2b0f      	cmp	r3, #15
 801615a:	d9e9      	bls.n	8016130 <prvInitialiseNewTask+0x68>
 801615c:	e000      	b.n	8016160 <prvInitialiseNewTask+0x98>
			{
				break;
 801615e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016162:	2200      	movs	r2, #0
 8016164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016168:	e003      	b.n	8016172 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616c:	2200      	movs	r2, #0
 801616e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016174:	2b06      	cmp	r3, #6
 8016176:	d901      	bls.n	801617c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016178:	2306      	movs	r3, #6
 801617a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016180:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016186:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8016188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618a:	2200      	movs	r2, #0
 801618c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016190:	3304      	adds	r3, #4
 8016192:	4618      	mov	r0, r3
 8016194:	f7fe fddb 	bl	8014d4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619a:	3318      	adds	r3, #24
 801619c:	4618      	mov	r0, r3
 801619e:	f7fe fdd6 	bl	8014d4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80161a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161aa:	f1c3 0207 	rsb	r2, r3, #7
 80161ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	2200      	movs	r2, #0
 80161bc:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80161be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c0:	2200      	movs	r2, #0
 80161c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80161c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c8:	2200      	movs	r2, #0
 80161ca:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	3350      	adds	r3, #80	; 0x50
 80161d2:	2260      	movs	r2, #96	; 0x60
 80161d4:	2100      	movs	r1, #0
 80161d6:	4618      	mov	r0, r3
 80161d8:	f00f faea 	bl	80257b0 <memset>
 80161dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161de:	4a0d      	ldr	r2, [pc, #52]	; (8016214 <prvInitialiseNewTask+0x14c>)
 80161e0:	655a      	str	r2, [r3, #84]	; 0x54
 80161e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e4:	4a0c      	ldr	r2, [pc, #48]	; (8016218 <prvInitialiseNewTask+0x150>)
 80161e6:	659a      	str	r2, [r3, #88]	; 0x58
 80161e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ea:	4a0c      	ldr	r2, [pc, #48]	; (801621c <prvInitialiseNewTask+0x154>)
 80161ec:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80161ee:	683a      	ldr	r2, [r7, #0]
 80161f0:	68f9      	ldr	r1, [r7, #12]
 80161f2:	69b8      	ldr	r0, [r7, #24]
 80161f4:	f000 ff64 	bl	80170c0 <pxPortInitialiseStack>
 80161f8:	4602      	mov	r2, r0
 80161fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80161fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016200:	2b00      	cmp	r3, #0
 8016202:	d002      	beq.n	801620a <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801620a:	bf00      	nop
 801620c:	3720      	adds	r7, #32
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	0802ba10 	.word	0x0802ba10
 8016218:	0802ba30 	.word	0x0802ba30
 801621c:	0802b9f0 	.word	0x0802b9f0

08016220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016228:	f001 f858 	bl	80172dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801622c:	4b2a      	ldr	r3, [pc, #168]	; (80162d8 <prvAddNewTaskToReadyList+0xb8>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	3301      	adds	r3, #1
 8016232:	4a29      	ldr	r2, [pc, #164]	; (80162d8 <prvAddNewTaskToReadyList+0xb8>)
 8016234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016236:	4b29      	ldr	r3, [pc, #164]	; (80162dc <prvAddNewTaskToReadyList+0xbc>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d109      	bne.n	8016252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801623e:	4a27      	ldr	r2, [pc, #156]	; (80162dc <prvAddNewTaskToReadyList+0xbc>)
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016244:	4b24      	ldr	r3, [pc, #144]	; (80162d8 <prvAddNewTaskToReadyList+0xb8>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	2b01      	cmp	r3, #1
 801624a:	d110      	bne.n	801626e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801624c:	f000 fc34 	bl	8016ab8 <prvInitialiseTaskLists>
 8016250:	e00d      	b.n	801626e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016252:	4b23      	ldr	r3, [pc, #140]	; (80162e0 <prvAddNewTaskToReadyList+0xc0>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d109      	bne.n	801626e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801625a:	4b20      	ldr	r3, [pc, #128]	; (80162dc <prvAddNewTaskToReadyList+0xbc>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016264:	429a      	cmp	r2, r3
 8016266:	d802      	bhi.n	801626e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016268:	4a1c      	ldr	r2, [pc, #112]	; (80162dc <prvAddNewTaskToReadyList+0xbc>)
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801626e:	4b1d      	ldr	r3, [pc, #116]	; (80162e4 <prvAddNewTaskToReadyList+0xc4>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	3301      	adds	r3, #1
 8016274:	4a1b      	ldr	r2, [pc, #108]	; (80162e4 <prvAddNewTaskToReadyList+0xc4>)
 8016276:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801627c:	2201      	movs	r2, #1
 801627e:	409a      	lsls	r2, r3
 8016280:	4b19      	ldr	r3, [pc, #100]	; (80162e8 <prvAddNewTaskToReadyList+0xc8>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	4313      	orrs	r3, r2
 8016286:	4a18      	ldr	r2, [pc, #96]	; (80162e8 <prvAddNewTaskToReadyList+0xc8>)
 8016288:	6013      	str	r3, [r2, #0]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801628e:	4613      	mov	r3, r2
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	4413      	add	r3, r2
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4a15      	ldr	r2, [pc, #84]	; (80162ec <prvAddNewTaskToReadyList+0xcc>)
 8016298:	441a      	add	r2, r3
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	3304      	adds	r3, #4
 801629e:	4619      	mov	r1, r3
 80162a0:	4610      	mov	r0, r2
 80162a2:	f7fe fd61 	bl	8014d68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80162a6:	f001 f84d 	bl	8017344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80162aa:	4b0d      	ldr	r3, [pc, #52]	; (80162e0 <prvAddNewTaskToReadyList+0xc0>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d00e      	beq.n	80162d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80162b2:	4b0a      	ldr	r3, [pc, #40]	; (80162dc <prvAddNewTaskToReadyList+0xbc>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162bc:	429a      	cmp	r2, r3
 80162be:	d207      	bcs.n	80162d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80162c0:	4b0b      	ldr	r3, [pc, #44]	; (80162f0 <prvAddNewTaskToReadyList+0xd0>)
 80162c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162c6:	601a      	str	r2, [r3, #0]
 80162c8:	f3bf 8f4f 	dsb	sy
 80162cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162d0:	bf00      	nop
 80162d2:	3708      	adds	r7, #8
 80162d4:	46bd      	mov	sp, r7
 80162d6:	bd80      	pop	{r7, pc}
 80162d8:	20000698 	.word	0x20000698
 80162dc:	20000598 	.word	0x20000598
 80162e0:	200006a4 	.word	0x200006a4
 80162e4:	200006b4 	.word	0x200006b4
 80162e8:	200006a0 	.word	0x200006a0
 80162ec:	2000059c 	.word	0x2000059c
 80162f0:	e000ed04 	.word	0xe000ed04

080162f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b084      	sub	sp, #16
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80162fc:	2300      	movs	r3, #0
 80162fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d019      	beq.n	801633a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016306:	4b14      	ldr	r3, [pc, #80]	; (8016358 <vTaskDelay+0x64>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d00c      	beq.n	8016328 <vTaskDelay+0x34>
	__asm volatile
 801630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016312:	b672      	cpsid	i
 8016314:	f383 8811 	msr	BASEPRI, r3
 8016318:	f3bf 8f6f 	isb	sy
 801631c:	f3bf 8f4f 	dsb	sy
 8016320:	b662      	cpsie	i
 8016322:	60bb      	str	r3, [r7, #8]
}
 8016324:	bf00      	nop
 8016326:	e7fe      	b.n	8016326 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8016328:	f000 f888 	bl	801643c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801632c:	2100      	movs	r1, #0
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 fe60 	bl	8016ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016334:	f000 f890 	bl	8016458 <xTaskResumeAll>
 8016338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d107      	bne.n	8016350 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8016340:	4b06      	ldr	r3, [pc, #24]	; (801635c <vTaskDelay+0x68>)
 8016342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016346:	601a      	str	r2, [r3, #0]
 8016348:	f3bf 8f4f 	dsb	sy
 801634c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016350:	bf00      	nop
 8016352:	3710      	adds	r7, #16
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	200006c0 	.word	0x200006c0
 801635c:	e000ed04 	.word	0xe000ed04

08016360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b08a      	sub	sp, #40	; 0x28
 8016364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016366:	2300      	movs	r3, #0
 8016368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801636a:	2300      	movs	r3, #0
 801636c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801636e:	463a      	mov	r2, r7
 8016370:	1d39      	adds	r1, r7, #4
 8016372:	f107 0308 	add.w	r3, r7, #8
 8016376:	4618      	mov	r0, r3
 8016378:	f7ea f930 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	68ba      	ldr	r2, [r7, #8]
 8016382:	9202      	str	r2, [sp, #8]
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	2300      	movs	r3, #0
 8016388:	9300      	str	r3, [sp, #0]
 801638a:	2300      	movs	r3, #0
 801638c:	460a      	mov	r2, r1
 801638e:	4923      	ldr	r1, [pc, #140]	; (801641c <vTaskStartScheduler+0xbc>)
 8016390:	4823      	ldr	r0, [pc, #140]	; (8016420 <vTaskStartScheduler+0xc0>)
 8016392:	f7ff fdf1 	bl	8015f78 <xTaskCreateStatic>
 8016396:	4603      	mov	r3, r0
 8016398:	4a22      	ldr	r2, [pc, #136]	; (8016424 <vTaskStartScheduler+0xc4>)
 801639a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801639c:	4b21      	ldr	r3, [pc, #132]	; (8016424 <vTaskStartScheduler+0xc4>)
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d002      	beq.n	80163aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80163a4:	2301      	movs	r3, #1
 80163a6:	617b      	str	r3, [r7, #20]
 80163a8:	e001      	b.n	80163ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80163aa:	2300      	movs	r3, #0
 80163ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80163ae:	697b      	ldr	r3, [r7, #20]
 80163b0:	2b01      	cmp	r3, #1
 80163b2:	d11d      	bne.n	80163f0 <vTaskStartScheduler+0x90>
	__asm volatile
 80163b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163b8:	b672      	cpsid	i
 80163ba:	f383 8811 	msr	BASEPRI, r3
 80163be:	f3bf 8f6f 	isb	sy
 80163c2:	f3bf 8f4f 	dsb	sy
 80163c6:	b662      	cpsie	i
 80163c8:	613b      	str	r3, [r7, #16]
}
 80163ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80163cc:	4b16      	ldr	r3, [pc, #88]	; (8016428 <vTaskStartScheduler+0xc8>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	3350      	adds	r3, #80	; 0x50
 80163d2:	4a16      	ldr	r2, [pc, #88]	; (801642c <vTaskStartScheduler+0xcc>)
 80163d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80163d6:	4b16      	ldr	r3, [pc, #88]	; (8016430 <vTaskStartScheduler+0xd0>)
 80163d8:	f04f 32ff 	mov.w	r2, #4294967295
 80163dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80163de:	4b15      	ldr	r3, [pc, #84]	; (8016434 <vTaskStartScheduler+0xd4>)
 80163e0:	2201      	movs	r2, #1
 80163e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80163e4:	4b14      	ldr	r3, [pc, #80]	; (8016438 <vTaskStartScheduler+0xd8>)
 80163e6:	2200      	movs	r2, #0
 80163e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80163ea:	f000 fef9 	bl	80171e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80163ee:	e010      	b.n	8016412 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163f6:	d10c      	bne.n	8016412 <vTaskStartScheduler+0xb2>
	__asm volatile
 80163f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fc:	b672      	cpsid	i
 80163fe:	f383 8811 	msr	BASEPRI, r3
 8016402:	f3bf 8f6f 	isb	sy
 8016406:	f3bf 8f4f 	dsb	sy
 801640a:	b662      	cpsie	i
 801640c:	60fb      	str	r3, [r7, #12]
}
 801640e:	bf00      	nop
 8016410:	e7fe      	b.n	8016410 <vTaskStartScheduler+0xb0>
}
 8016412:	bf00      	nop
 8016414:	3718      	adds	r7, #24
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	080268c0 	.word	0x080268c0
 8016420:	08016a85 	.word	0x08016a85
 8016424:	200006bc 	.word	0x200006bc
 8016428:	20000598 	.word	0x20000598
 801642c:	20000070 	.word	0x20000070
 8016430:	200006b8 	.word	0x200006b8
 8016434:	200006a4 	.word	0x200006a4
 8016438:	2000069c 	.word	0x2000069c

0801643c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801643c:	b480      	push	{r7}
 801643e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016440:	4b04      	ldr	r3, [pc, #16]	; (8016454 <vTaskSuspendAll+0x18>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	3301      	adds	r3, #1
 8016446:	4a03      	ldr	r2, [pc, #12]	; (8016454 <vTaskSuspendAll+0x18>)
 8016448:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801644a:	bf00      	nop
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	200006c0 	.word	0x200006c0

08016458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801645e:	2300      	movs	r3, #0
 8016460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016462:	2300      	movs	r3, #0
 8016464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016466:	4b42      	ldr	r3, [pc, #264]	; (8016570 <xTaskResumeAll+0x118>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d10c      	bne.n	8016488 <xTaskResumeAll+0x30>
	__asm volatile
 801646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016472:	b672      	cpsid	i
 8016474:	f383 8811 	msr	BASEPRI, r3
 8016478:	f3bf 8f6f 	isb	sy
 801647c:	f3bf 8f4f 	dsb	sy
 8016480:	b662      	cpsie	i
 8016482:	603b      	str	r3, [r7, #0]
}
 8016484:	bf00      	nop
 8016486:	e7fe      	b.n	8016486 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016488:	f000 ff28 	bl	80172dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801648c:	4b38      	ldr	r3, [pc, #224]	; (8016570 <xTaskResumeAll+0x118>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	3b01      	subs	r3, #1
 8016492:	4a37      	ldr	r2, [pc, #220]	; (8016570 <xTaskResumeAll+0x118>)
 8016494:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016496:	4b36      	ldr	r3, [pc, #216]	; (8016570 <xTaskResumeAll+0x118>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d161      	bne.n	8016562 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801649e:	4b35      	ldr	r3, [pc, #212]	; (8016574 <xTaskResumeAll+0x11c>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d05d      	beq.n	8016562 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164a6:	e02e      	b.n	8016506 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164a8:	4b33      	ldr	r3, [pc, #204]	; (8016578 <xTaskResumeAll+0x120>)
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	3318      	adds	r3, #24
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7fe fcb4 	bl	8014e22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	3304      	adds	r3, #4
 80164be:	4618      	mov	r0, r3
 80164c0:	f7fe fcaf 	bl	8014e22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164c8:	2201      	movs	r2, #1
 80164ca:	409a      	lsls	r2, r3
 80164cc:	4b2b      	ldr	r3, [pc, #172]	; (801657c <xTaskResumeAll+0x124>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	4313      	orrs	r3, r2
 80164d2:	4a2a      	ldr	r2, [pc, #168]	; (801657c <xTaskResumeAll+0x124>)
 80164d4:	6013      	str	r3, [r2, #0]
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164da:	4613      	mov	r3, r2
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	4413      	add	r3, r2
 80164e0:	009b      	lsls	r3, r3, #2
 80164e2:	4a27      	ldr	r2, [pc, #156]	; (8016580 <xTaskResumeAll+0x128>)
 80164e4:	441a      	add	r2, r3
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	3304      	adds	r3, #4
 80164ea:	4619      	mov	r1, r3
 80164ec:	4610      	mov	r0, r2
 80164ee:	f7fe fc3b 	bl	8014d68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164f6:	4b23      	ldr	r3, [pc, #140]	; (8016584 <xTaskResumeAll+0x12c>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164fc:	429a      	cmp	r2, r3
 80164fe:	d302      	bcc.n	8016506 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016500:	4b21      	ldr	r3, [pc, #132]	; (8016588 <xTaskResumeAll+0x130>)
 8016502:	2201      	movs	r2, #1
 8016504:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016506:	4b1c      	ldr	r3, [pc, #112]	; (8016578 <xTaskResumeAll+0x120>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d1cc      	bne.n	80164a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d001      	beq.n	8016518 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016514:	f000 fb74 	bl	8016c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016518:	4b1c      	ldr	r3, [pc, #112]	; (801658c <xTaskResumeAll+0x134>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d010      	beq.n	8016546 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016524:	f000 f858 	bl	80165d8 <xTaskIncrementTick>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d002      	beq.n	8016534 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801652e:	4b16      	ldr	r3, [pc, #88]	; (8016588 <xTaskResumeAll+0x130>)
 8016530:	2201      	movs	r2, #1
 8016532:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	3b01      	subs	r3, #1
 8016538:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d1f1      	bne.n	8016524 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8016540:	4b12      	ldr	r3, [pc, #72]	; (801658c <xTaskResumeAll+0x134>)
 8016542:	2200      	movs	r2, #0
 8016544:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016546:	4b10      	ldr	r3, [pc, #64]	; (8016588 <xTaskResumeAll+0x130>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d009      	beq.n	8016562 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801654e:	2301      	movs	r3, #1
 8016550:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016552:	4b0f      	ldr	r3, [pc, #60]	; (8016590 <xTaskResumeAll+0x138>)
 8016554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016558:	601a      	str	r2, [r3, #0]
 801655a:	f3bf 8f4f 	dsb	sy
 801655e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016562:	f000 feef 	bl	8017344 <vPortExitCritical>

	return xAlreadyYielded;
 8016566:	68bb      	ldr	r3, [r7, #8]
}
 8016568:	4618      	mov	r0, r3
 801656a:	3710      	adds	r7, #16
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	200006c0 	.word	0x200006c0
 8016574:	20000698 	.word	0x20000698
 8016578:	20000658 	.word	0x20000658
 801657c:	200006a0 	.word	0x200006a0
 8016580:	2000059c 	.word	0x2000059c
 8016584:	20000598 	.word	0x20000598
 8016588:	200006ac 	.word	0x200006ac
 801658c:	200006a8 	.word	0x200006a8
 8016590:	e000ed04 	.word	0xe000ed04

08016594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016594:	b480      	push	{r7}
 8016596:	b083      	sub	sp, #12
 8016598:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801659a:	4b05      	ldr	r3, [pc, #20]	; (80165b0 <xTaskGetTickCount+0x1c>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80165a0:	687b      	ldr	r3, [r7, #4]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	370c      	adds	r7, #12
 80165a6:	46bd      	mov	sp, r7
 80165a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ac:	4770      	bx	lr
 80165ae:	bf00      	nop
 80165b0:	2000069c 	.word	0x2000069c

080165b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b082      	sub	sp, #8
 80165b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80165ba:	f000 ff77 	bl	80174ac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80165be:	2300      	movs	r3, #0
 80165c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80165c2:	4b04      	ldr	r3, [pc, #16]	; (80165d4 <xTaskGetTickCountFromISR+0x20>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165c8:	683b      	ldr	r3, [r7, #0]
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3708      	adds	r7, #8
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	bf00      	nop
 80165d4:	2000069c 	.word	0x2000069c

080165d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b086      	sub	sp, #24
 80165dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80165de:	2300      	movs	r3, #0
 80165e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165e2:	4b4f      	ldr	r3, [pc, #316]	; (8016720 <xTaskIncrementTick+0x148>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	f040 808a 	bne.w	8016700 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80165ec:	4b4d      	ldr	r3, [pc, #308]	; (8016724 <xTaskIncrementTick+0x14c>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	3301      	adds	r3, #1
 80165f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80165f4:	4a4b      	ldr	r2, [pc, #300]	; (8016724 <xTaskIncrementTick+0x14c>)
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d122      	bne.n	8016646 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8016600:	4b49      	ldr	r3, [pc, #292]	; (8016728 <xTaskIncrementTick+0x150>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00c      	beq.n	8016624 <xTaskIncrementTick+0x4c>
	__asm volatile
 801660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660e:	b672      	cpsid	i
 8016610:	f383 8811 	msr	BASEPRI, r3
 8016614:	f3bf 8f6f 	isb	sy
 8016618:	f3bf 8f4f 	dsb	sy
 801661c:	b662      	cpsie	i
 801661e:	603b      	str	r3, [r7, #0]
}
 8016620:	bf00      	nop
 8016622:	e7fe      	b.n	8016622 <xTaskIncrementTick+0x4a>
 8016624:	4b40      	ldr	r3, [pc, #256]	; (8016728 <xTaskIncrementTick+0x150>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	60fb      	str	r3, [r7, #12]
 801662a:	4b40      	ldr	r3, [pc, #256]	; (801672c <xTaskIncrementTick+0x154>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	4a3e      	ldr	r2, [pc, #248]	; (8016728 <xTaskIncrementTick+0x150>)
 8016630:	6013      	str	r3, [r2, #0]
 8016632:	4a3e      	ldr	r2, [pc, #248]	; (801672c <xTaskIncrementTick+0x154>)
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	6013      	str	r3, [r2, #0]
 8016638:	4b3d      	ldr	r3, [pc, #244]	; (8016730 <xTaskIncrementTick+0x158>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	3301      	adds	r3, #1
 801663e:	4a3c      	ldr	r2, [pc, #240]	; (8016730 <xTaskIncrementTick+0x158>)
 8016640:	6013      	str	r3, [r2, #0]
 8016642:	f000 fadd 	bl	8016c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016646:	4b3b      	ldr	r3, [pc, #236]	; (8016734 <xTaskIncrementTick+0x15c>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	693a      	ldr	r2, [r7, #16]
 801664c:	429a      	cmp	r2, r3
 801664e:	d348      	bcc.n	80166e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016650:	4b35      	ldr	r3, [pc, #212]	; (8016728 <xTaskIncrementTick+0x150>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d104      	bne.n	8016664 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801665a:	4b36      	ldr	r3, [pc, #216]	; (8016734 <xTaskIncrementTick+0x15c>)
 801665c:	f04f 32ff 	mov.w	r2, #4294967295
 8016660:	601a      	str	r2, [r3, #0]
					break;
 8016662:	e03e      	b.n	80166e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016664:	4b30      	ldr	r3, [pc, #192]	; (8016728 <xTaskIncrementTick+0x150>)
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	68db      	ldr	r3, [r3, #12]
 801666a:	68db      	ldr	r3, [r3, #12]
 801666c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801666e:	68bb      	ldr	r3, [r7, #8]
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016674:	693a      	ldr	r2, [r7, #16]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	429a      	cmp	r2, r3
 801667a:	d203      	bcs.n	8016684 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801667c:	4a2d      	ldr	r2, [pc, #180]	; (8016734 <xTaskIncrementTick+0x15c>)
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016682:	e02e      	b.n	80166e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	3304      	adds	r3, #4
 8016688:	4618      	mov	r0, r3
 801668a:	f7fe fbca 	bl	8014e22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801668e:	68bb      	ldr	r3, [r7, #8]
 8016690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016692:	2b00      	cmp	r3, #0
 8016694:	d004      	beq.n	80166a0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	3318      	adds	r3, #24
 801669a:	4618      	mov	r0, r3
 801669c:	f7fe fbc1 	bl	8014e22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166a4:	2201      	movs	r2, #1
 80166a6:	409a      	lsls	r2, r3
 80166a8:	4b23      	ldr	r3, [pc, #140]	; (8016738 <xTaskIncrementTick+0x160>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	4313      	orrs	r3, r2
 80166ae:	4a22      	ldr	r2, [pc, #136]	; (8016738 <xTaskIncrementTick+0x160>)
 80166b0:	6013      	str	r3, [r2, #0]
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166b6:	4613      	mov	r3, r2
 80166b8:	009b      	lsls	r3, r3, #2
 80166ba:	4413      	add	r3, r2
 80166bc:	009b      	lsls	r3, r3, #2
 80166be:	4a1f      	ldr	r2, [pc, #124]	; (801673c <xTaskIncrementTick+0x164>)
 80166c0:	441a      	add	r2, r3
 80166c2:	68bb      	ldr	r3, [r7, #8]
 80166c4:	3304      	adds	r3, #4
 80166c6:	4619      	mov	r1, r3
 80166c8:	4610      	mov	r0, r2
 80166ca:	f7fe fb4d 	bl	8014d68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166d2:	4b1b      	ldr	r3, [pc, #108]	; (8016740 <xTaskIncrementTick+0x168>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166d8:	429a      	cmp	r2, r3
 80166da:	d3b9      	bcc.n	8016650 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80166dc:	2301      	movs	r3, #1
 80166de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166e0:	e7b6      	b.n	8016650 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80166e2:	4b17      	ldr	r3, [pc, #92]	; (8016740 <xTaskIncrementTick+0x168>)
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166e8:	4914      	ldr	r1, [pc, #80]	; (801673c <xTaskIncrementTick+0x164>)
 80166ea:	4613      	mov	r3, r2
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	4413      	add	r3, r2
 80166f0:	009b      	lsls	r3, r3, #2
 80166f2:	440b      	add	r3, r1
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d907      	bls.n	801670a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80166fa:	2301      	movs	r3, #1
 80166fc:	617b      	str	r3, [r7, #20]
 80166fe:	e004      	b.n	801670a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016700:	4b10      	ldr	r3, [pc, #64]	; (8016744 <xTaskIncrementTick+0x16c>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	3301      	adds	r3, #1
 8016706:	4a0f      	ldr	r2, [pc, #60]	; (8016744 <xTaskIncrementTick+0x16c>)
 8016708:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801670a:	4b0f      	ldr	r3, [pc, #60]	; (8016748 <xTaskIncrementTick+0x170>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d001      	beq.n	8016716 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016712:	2301      	movs	r3, #1
 8016714:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016716:	697b      	ldr	r3, [r7, #20]
}
 8016718:	4618      	mov	r0, r3
 801671a:	3718      	adds	r7, #24
 801671c:	46bd      	mov	sp, r7
 801671e:	bd80      	pop	{r7, pc}
 8016720:	200006c0 	.word	0x200006c0
 8016724:	2000069c 	.word	0x2000069c
 8016728:	20000650 	.word	0x20000650
 801672c:	20000654 	.word	0x20000654
 8016730:	200006b0 	.word	0x200006b0
 8016734:	200006b8 	.word	0x200006b8
 8016738:	200006a0 	.word	0x200006a0
 801673c:	2000059c 	.word	0x2000059c
 8016740:	20000598 	.word	0x20000598
 8016744:	200006a8 	.word	0x200006a8
 8016748:	200006ac 	.word	0x200006ac

0801674c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b088      	sub	sp, #32
 8016750:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016752:	4b3d      	ldr	r3, [pc, #244]	; (8016848 <vTaskSwitchContext+0xfc>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d003      	beq.n	8016762 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801675a:	4b3c      	ldr	r3, [pc, #240]	; (801684c <vTaskSwitchContext+0x100>)
 801675c:	2201      	movs	r2, #1
 801675e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016760:	e06d      	b.n	801683e <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8016762:	4b3a      	ldr	r3, [pc, #232]	; (801684c <vTaskSwitchContext+0x100>)
 8016764:	2200      	movs	r2, #0
 8016766:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016768:	4b39      	ldr	r3, [pc, #228]	; (8016850 <vTaskSwitchContext+0x104>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801676e:	61fb      	str	r3, [r7, #28]
 8016770:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8016774:	61bb      	str	r3, [r7, #24]
 8016776:	69fb      	ldr	r3, [r7, #28]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	69ba      	ldr	r2, [r7, #24]
 801677c:	429a      	cmp	r2, r3
 801677e:	d111      	bne.n	80167a4 <vTaskSwitchContext+0x58>
 8016780:	69fb      	ldr	r3, [r7, #28]
 8016782:	3304      	adds	r3, #4
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	69ba      	ldr	r2, [r7, #24]
 8016788:	429a      	cmp	r2, r3
 801678a:	d10b      	bne.n	80167a4 <vTaskSwitchContext+0x58>
 801678c:	69fb      	ldr	r3, [r7, #28]
 801678e:	3308      	adds	r3, #8
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	69ba      	ldr	r2, [r7, #24]
 8016794:	429a      	cmp	r2, r3
 8016796:	d105      	bne.n	80167a4 <vTaskSwitchContext+0x58>
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	330c      	adds	r3, #12
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	69ba      	ldr	r2, [r7, #24]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d008      	beq.n	80167b6 <vTaskSwitchContext+0x6a>
 80167a4:	4b2a      	ldr	r3, [pc, #168]	; (8016850 <vTaskSwitchContext+0x104>)
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	4b29      	ldr	r3, [pc, #164]	; (8016850 <vTaskSwitchContext+0x104>)
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	3334      	adds	r3, #52	; 0x34
 80167ae:	4619      	mov	r1, r3
 80167b0:	4610      	mov	r0, r2
 80167b2:	f7e9 ff00 	bl	80005b6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167b6:	4b27      	ldr	r3, [pc, #156]	; (8016854 <vTaskSwitchContext+0x108>)
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	fab3 f383 	clz	r3, r3
 80167c2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80167c4:	7afb      	ldrb	r3, [r7, #11]
 80167c6:	f1c3 031f 	rsb	r3, r3, #31
 80167ca:	617b      	str	r3, [r7, #20]
 80167cc:	4922      	ldr	r1, [pc, #136]	; (8016858 <vTaskSwitchContext+0x10c>)
 80167ce:	697a      	ldr	r2, [r7, #20]
 80167d0:	4613      	mov	r3, r2
 80167d2:	009b      	lsls	r3, r3, #2
 80167d4:	4413      	add	r3, r2
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	440b      	add	r3, r1
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d10c      	bne.n	80167fa <vTaskSwitchContext+0xae>
	__asm volatile
 80167e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e4:	b672      	cpsid	i
 80167e6:	f383 8811 	msr	BASEPRI, r3
 80167ea:	f3bf 8f6f 	isb	sy
 80167ee:	f3bf 8f4f 	dsb	sy
 80167f2:	b662      	cpsie	i
 80167f4:	607b      	str	r3, [r7, #4]
}
 80167f6:	bf00      	nop
 80167f8:	e7fe      	b.n	80167f8 <vTaskSwitchContext+0xac>
 80167fa:	697a      	ldr	r2, [r7, #20]
 80167fc:	4613      	mov	r3, r2
 80167fe:	009b      	lsls	r3, r3, #2
 8016800:	4413      	add	r3, r2
 8016802:	009b      	lsls	r3, r3, #2
 8016804:	4a14      	ldr	r2, [pc, #80]	; (8016858 <vTaskSwitchContext+0x10c>)
 8016806:	4413      	add	r3, r2
 8016808:	613b      	str	r3, [r7, #16]
 801680a:	693b      	ldr	r3, [r7, #16]
 801680c:	685b      	ldr	r3, [r3, #4]
 801680e:	685a      	ldr	r2, [r3, #4]
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	605a      	str	r2, [r3, #4]
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	685a      	ldr	r2, [r3, #4]
 8016818:	693b      	ldr	r3, [r7, #16]
 801681a:	3308      	adds	r3, #8
 801681c:	429a      	cmp	r2, r3
 801681e:	d104      	bne.n	801682a <vTaskSwitchContext+0xde>
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	685b      	ldr	r3, [r3, #4]
 8016824:	685a      	ldr	r2, [r3, #4]
 8016826:	693b      	ldr	r3, [r7, #16]
 8016828:	605a      	str	r2, [r3, #4]
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	68db      	ldr	r3, [r3, #12]
 8016830:	4a07      	ldr	r2, [pc, #28]	; (8016850 <vTaskSwitchContext+0x104>)
 8016832:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016834:	4b06      	ldr	r3, [pc, #24]	; (8016850 <vTaskSwitchContext+0x104>)
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	3350      	adds	r3, #80	; 0x50
 801683a:	4a08      	ldr	r2, [pc, #32]	; (801685c <vTaskSwitchContext+0x110>)
 801683c:	6013      	str	r3, [r2, #0]
}
 801683e:	bf00      	nop
 8016840:	3720      	adds	r7, #32
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	200006c0 	.word	0x200006c0
 801684c:	200006ac 	.word	0x200006ac
 8016850:	20000598 	.word	0x20000598
 8016854:	200006a0 	.word	0x200006a0
 8016858:	2000059c 	.word	0x2000059c
 801685c:	20000070 	.word	0x20000070

08016860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d10c      	bne.n	801688a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8016870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016874:	b672      	cpsid	i
 8016876:	f383 8811 	msr	BASEPRI, r3
 801687a:	f3bf 8f6f 	isb	sy
 801687e:	f3bf 8f4f 	dsb	sy
 8016882:	b662      	cpsie	i
 8016884:	60fb      	str	r3, [r7, #12]
}
 8016886:	bf00      	nop
 8016888:	e7fe      	b.n	8016888 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801688a:	4b07      	ldr	r3, [pc, #28]	; (80168a8 <vTaskPlaceOnEventList+0x48>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	3318      	adds	r3, #24
 8016890:	4619      	mov	r1, r3
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f7fe fa8c 	bl	8014db0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016898:	2101      	movs	r1, #1
 801689a:	6838      	ldr	r0, [r7, #0]
 801689c:	f000 fbaa 	bl	8016ff4 <prvAddCurrentTaskToDelayedList>
}
 80168a0:	bf00      	nop
 80168a2:	3710      	adds	r7, #16
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	20000598 	.word	0x20000598

080168ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b086      	sub	sp, #24
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d10c      	bne.n	80168dc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80168c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c6:	b672      	cpsid	i
 80168c8:	f383 8811 	msr	BASEPRI, r3
 80168cc:	f3bf 8f6f 	isb	sy
 80168d0:	f3bf 8f4f 	dsb	sy
 80168d4:	b662      	cpsie	i
 80168d6:	60fb      	str	r3, [r7, #12]
}
 80168d8:	bf00      	nop
 80168da:	e7fe      	b.n	80168da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80168dc:	693b      	ldr	r3, [r7, #16]
 80168de:	3318      	adds	r3, #24
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7fe fa9e 	bl	8014e22 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168e6:	4b1d      	ldr	r3, [pc, #116]	; (801695c <xTaskRemoveFromEventList+0xb0>)
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d11c      	bne.n	8016928 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	3304      	adds	r3, #4
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7fe fa95 	bl	8014e22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80168f8:	693b      	ldr	r3, [r7, #16]
 80168fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168fc:	2201      	movs	r2, #1
 80168fe:	409a      	lsls	r2, r3
 8016900:	4b17      	ldr	r3, [pc, #92]	; (8016960 <xTaskRemoveFromEventList+0xb4>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4313      	orrs	r3, r2
 8016906:	4a16      	ldr	r2, [pc, #88]	; (8016960 <xTaskRemoveFromEventList+0xb4>)
 8016908:	6013      	str	r3, [r2, #0]
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801690e:	4613      	mov	r3, r2
 8016910:	009b      	lsls	r3, r3, #2
 8016912:	4413      	add	r3, r2
 8016914:	009b      	lsls	r3, r3, #2
 8016916:	4a13      	ldr	r2, [pc, #76]	; (8016964 <xTaskRemoveFromEventList+0xb8>)
 8016918:	441a      	add	r2, r3
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	3304      	adds	r3, #4
 801691e:	4619      	mov	r1, r3
 8016920:	4610      	mov	r0, r2
 8016922:	f7fe fa21 	bl	8014d68 <vListInsertEnd>
 8016926:	e005      	b.n	8016934 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	3318      	adds	r3, #24
 801692c:	4619      	mov	r1, r3
 801692e:	480e      	ldr	r0, [pc, #56]	; (8016968 <xTaskRemoveFromEventList+0xbc>)
 8016930:	f7fe fa1a 	bl	8014d68 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016938:	4b0c      	ldr	r3, [pc, #48]	; (801696c <xTaskRemoveFromEventList+0xc0>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801693e:	429a      	cmp	r2, r3
 8016940:	d905      	bls.n	801694e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016942:	2301      	movs	r3, #1
 8016944:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016946:	4b0a      	ldr	r3, [pc, #40]	; (8016970 <xTaskRemoveFromEventList+0xc4>)
 8016948:	2201      	movs	r2, #1
 801694a:	601a      	str	r2, [r3, #0]
 801694c:	e001      	b.n	8016952 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801694e:	2300      	movs	r3, #0
 8016950:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016952:	697b      	ldr	r3, [r7, #20]
}
 8016954:	4618      	mov	r0, r3
 8016956:	3718      	adds	r7, #24
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}
 801695c:	200006c0 	.word	0x200006c0
 8016960:	200006a0 	.word	0x200006a0
 8016964:	2000059c 	.word	0x2000059c
 8016968:	20000658 	.word	0x20000658
 801696c:	20000598 	.word	0x20000598
 8016970:	200006ac 	.word	0x200006ac

08016974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016974:	b480      	push	{r7}
 8016976:	b083      	sub	sp, #12
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801697c:	4b06      	ldr	r3, [pc, #24]	; (8016998 <vTaskInternalSetTimeOutState+0x24>)
 801697e:	681a      	ldr	r2, [r3, #0]
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016984:	4b05      	ldr	r3, [pc, #20]	; (801699c <vTaskInternalSetTimeOutState+0x28>)
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	605a      	str	r2, [r3, #4]
}
 801698c:	bf00      	nop
 801698e:	370c      	adds	r7, #12
 8016990:	46bd      	mov	sp, r7
 8016992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016996:	4770      	bx	lr
 8016998:	200006b0 	.word	0x200006b0
 801699c:	2000069c 	.word	0x2000069c

080169a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b088      	sub	sp, #32
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10c      	bne.n	80169ca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80169b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169b4:	b672      	cpsid	i
 80169b6:	f383 8811 	msr	BASEPRI, r3
 80169ba:	f3bf 8f6f 	isb	sy
 80169be:	f3bf 8f4f 	dsb	sy
 80169c2:	b662      	cpsie	i
 80169c4:	613b      	str	r3, [r7, #16]
}
 80169c6:	bf00      	nop
 80169c8:	e7fe      	b.n	80169c8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10c      	bne.n	80169ea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80169d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169d4:	b672      	cpsid	i
 80169d6:	f383 8811 	msr	BASEPRI, r3
 80169da:	f3bf 8f6f 	isb	sy
 80169de:	f3bf 8f4f 	dsb	sy
 80169e2:	b662      	cpsie	i
 80169e4:	60fb      	str	r3, [r7, #12]
}
 80169e6:	bf00      	nop
 80169e8:	e7fe      	b.n	80169e8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80169ea:	f000 fc77 	bl	80172dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80169ee:	4b1d      	ldr	r3, [pc, #116]	; (8016a64 <xTaskCheckForTimeOut+0xc4>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	69ba      	ldr	r2, [r7, #24]
 80169fa:	1ad3      	subs	r3, r2, r3
 80169fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a06:	d102      	bne.n	8016a0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016a08:	2300      	movs	r3, #0
 8016a0a:	61fb      	str	r3, [r7, #28]
 8016a0c:	e023      	b.n	8016a56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681a      	ldr	r2, [r3, #0]
 8016a12:	4b15      	ldr	r3, [pc, #84]	; (8016a68 <xTaskCheckForTimeOut+0xc8>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d007      	beq.n	8016a2a <xTaskCheckForTimeOut+0x8a>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	685b      	ldr	r3, [r3, #4]
 8016a1e:	69ba      	ldr	r2, [r7, #24]
 8016a20:	429a      	cmp	r2, r3
 8016a22:	d302      	bcc.n	8016a2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a24:	2301      	movs	r3, #1
 8016a26:	61fb      	str	r3, [r7, #28]
 8016a28:	e015      	b.n	8016a56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	697a      	ldr	r2, [r7, #20]
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d20b      	bcs.n	8016a4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	681a      	ldr	r2, [r3, #0]
 8016a38:	697b      	ldr	r3, [r7, #20]
 8016a3a:	1ad2      	subs	r2, r2, r3
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f7ff ff97 	bl	8016974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016a46:	2300      	movs	r3, #0
 8016a48:	61fb      	str	r3, [r7, #28]
 8016a4a:	e004      	b.n	8016a56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	2200      	movs	r2, #0
 8016a50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016a52:	2301      	movs	r3, #1
 8016a54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016a56:	f000 fc75 	bl	8017344 <vPortExitCritical>

	return xReturn;
 8016a5a:	69fb      	ldr	r3, [r7, #28]
}
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3720      	adds	r7, #32
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}
 8016a64:	2000069c 	.word	0x2000069c
 8016a68:	200006b0 	.word	0x200006b0

08016a6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a6c:	b480      	push	{r7}
 8016a6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a70:	4b03      	ldr	r3, [pc, #12]	; (8016a80 <vTaskMissedYield+0x14>)
 8016a72:	2201      	movs	r2, #1
 8016a74:	601a      	str	r2, [r3, #0]
}
 8016a76:	bf00      	nop
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7e:	4770      	bx	lr
 8016a80:	200006ac 	.word	0x200006ac

08016a84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b082      	sub	sp, #8
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016a8c:	f000 f854 	bl	8016b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016a90:	4b07      	ldr	r3, [pc, #28]	; (8016ab0 <prvIdleTask+0x2c>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b01      	cmp	r3, #1
 8016a96:	d907      	bls.n	8016aa8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016a98:	4b06      	ldr	r3, [pc, #24]	; (8016ab4 <prvIdleTask+0x30>)
 8016a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a9e:	601a      	str	r2, [r3, #0]
 8016aa0:	f3bf 8f4f 	dsb	sy
 8016aa4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016aa8:	f7e9 fd7e 	bl	80005a8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016aac:	e7ee      	b.n	8016a8c <prvIdleTask+0x8>
 8016aae:	bf00      	nop
 8016ab0:	2000059c 	.word	0x2000059c
 8016ab4:	e000ed04 	.word	0xe000ed04

08016ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016abe:	2300      	movs	r3, #0
 8016ac0:	607b      	str	r3, [r7, #4]
 8016ac2:	e00c      	b.n	8016ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016ac4:	687a      	ldr	r2, [r7, #4]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	009b      	lsls	r3, r3, #2
 8016aca:	4413      	add	r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	4a12      	ldr	r2, [pc, #72]	; (8016b18 <prvInitialiseTaskLists+0x60>)
 8016ad0:	4413      	add	r3, r2
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7fe f91b 	bl	8014d0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	3301      	adds	r3, #1
 8016adc:	607b      	str	r3, [r7, #4]
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b06      	cmp	r3, #6
 8016ae2:	d9ef      	bls.n	8016ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016ae4:	480d      	ldr	r0, [pc, #52]	; (8016b1c <prvInitialiseTaskLists+0x64>)
 8016ae6:	f7fe f912 	bl	8014d0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016aea:	480d      	ldr	r0, [pc, #52]	; (8016b20 <prvInitialiseTaskLists+0x68>)
 8016aec:	f7fe f90f 	bl	8014d0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016af0:	480c      	ldr	r0, [pc, #48]	; (8016b24 <prvInitialiseTaskLists+0x6c>)
 8016af2:	f7fe f90c 	bl	8014d0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016af6:	480c      	ldr	r0, [pc, #48]	; (8016b28 <prvInitialiseTaskLists+0x70>)
 8016af8:	f7fe f909 	bl	8014d0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016afc:	480b      	ldr	r0, [pc, #44]	; (8016b2c <prvInitialiseTaskLists+0x74>)
 8016afe:	f7fe f906 	bl	8014d0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016b02:	4b0b      	ldr	r3, [pc, #44]	; (8016b30 <prvInitialiseTaskLists+0x78>)
 8016b04:	4a05      	ldr	r2, [pc, #20]	; (8016b1c <prvInitialiseTaskLists+0x64>)
 8016b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016b08:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <prvInitialiseTaskLists+0x7c>)
 8016b0a:	4a05      	ldr	r2, [pc, #20]	; (8016b20 <prvInitialiseTaskLists+0x68>)
 8016b0c:	601a      	str	r2, [r3, #0]
}
 8016b0e:	bf00      	nop
 8016b10:	3708      	adds	r7, #8
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop
 8016b18:	2000059c 	.word	0x2000059c
 8016b1c:	20000628 	.word	0x20000628
 8016b20:	2000063c 	.word	0x2000063c
 8016b24:	20000658 	.word	0x20000658
 8016b28:	2000066c 	.word	0x2000066c
 8016b2c:	20000684 	.word	0x20000684
 8016b30:	20000650 	.word	0x20000650
 8016b34:	20000654 	.word	0x20000654

08016b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b3e:	e019      	b.n	8016b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016b40:	f000 fbcc 	bl	80172dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b44:	4b10      	ldr	r3, [pc, #64]	; (8016b88 <prvCheckTasksWaitingTermination+0x50>)
 8016b46:	68db      	ldr	r3, [r3, #12]
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	3304      	adds	r3, #4
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7fe f966 	bl	8014e22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016b56:	4b0d      	ldr	r3, [pc, #52]	; (8016b8c <prvCheckTasksWaitingTermination+0x54>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	3b01      	subs	r3, #1
 8016b5c:	4a0b      	ldr	r2, [pc, #44]	; (8016b8c <prvCheckTasksWaitingTermination+0x54>)
 8016b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016b60:	4b0b      	ldr	r3, [pc, #44]	; (8016b90 <prvCheckTasksWaitingTermination+0x58>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	3b01      	subs	r3, #1
 8016b66:	4a0a      	ldr	r2, [pc, #40]	; (8016b90 <prvCheckTasksWaitingTermination+0x58>)
 8016b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016b6a:	f000 fbeb 	bl	8017344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f000 f810 	bl	8016b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b74:	4b06      	ldr	r3, [pc, #24]	; (8016b90 <prvCheckTasksWaitingTermination+0x58>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d1e1      	bne.n	8016b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016b7c:	bf00      	nop
 8016b7e:	bf00      	nop
 8016b80:	3708      	adds	r7, #8
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}
 8016b86:	bf00      	nop
 8016b88:	2000066c 	.word	0x2000066c
 8016b8c:	20000698 	.word	0x20000698
 8016b90:	20000680 	.word	0x20000680

08016b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b084      	sub	sp, #16
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	3350      	adds	r3, #80	; 0x50
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f00f fa0b 	bl	8025fbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d108      	bne.n	8016bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f000 fd8d 	bl	80176d4 <vPortFree>
				vPortFree( pxTCB );
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f000 fd8a 	bl	80176d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016bc0:	e01a      	b.n	8016bf8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	d103      	bne.n	8016bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f000 fd81 	bl	80176d4 <vPortFree>
	}
 8016bd2:	e011      	b.n	8016bf8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8016bda:	2b02      	cmp	r3, #2
 8016bdc:	d00c      	beq.n	8016bf8 <prvDeleteTCB+0x64>
	__asm volatile
 8016bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be2:	b672      	cpsid	i
 8016be4:	f383 8811 	msr	BASEPRI, r3
 8016be8:	f3bf 8f6f 	isb	sy
 8016bec:	f3bf 8f4f 	dsb	sy
 8016bf0:	b662      	cpsie	i
 8016bf2:	60fb      	str	r3, [r7, #12]
}
 8016bf4:	bf00      	nop
 8016bf6:	e7fe      	b.n	8016bf6 <prvDeleteTCB+0x62>
	}
 8016bf8:	bf00      	nop
 8016bfa:	3710      	adds	r7, #16
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016c06:	4b0c      	ldr	r3, [pc, #48]	; (8016c38 <prvResetNextTaskUnblockTime+0x38>)
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d104      	bne.n	8016c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016c10:	4b0a      	ldr	r3, [pc, #40]	; (8016c3c <prvResetNextTaskUnblockTime+0x3c>)
 8016c12:	f04f 32ff 	mov.w	r2, #4294967295
 8016c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016c18:	e008      	b.n	8016c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c1a:	4b07      	ldr	r3, [pc, #28]	; (8016c38 <prvResetNextTaskUnblockTime+0x38>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	68db      	ldr	r3, [r3, #12]
 8016c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	685b      	ldr	r3, [r3, #4]
 8016c28:	4a04      	ldr	r2, [pc, #16]	; (8016c3c <prvResetNextTaskUnblockTime+0x3c>)
 8016c2a:	6013      	str	r3, [r2, #0]
}
 8016c2c:	bf00      	nop
 8016c2e:	370c      	adds	r7, #12
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr
 8016c38:	20000650 	.word	0x20000650
 8016c3c:	200006b8 	.word	0x200006b8

08016c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016c40:	b480      	push	{r7}
 8016c42:	b083      	sub	sp, #12
 8016c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016c46:	4b0b      	ldr	r3, [pc, #44]	; (8016c74 <xTaskGetSchedulerState+0x34>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d102      	bne.n	8016c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016c4e:	2301      	movs	r3, #1
 8016c50:	607b      	str	r3, [r7, #4]
 8016c52:	e008      	b.n	8016c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c54:	4b08      	ldr	r3, [pc, #32]	; (8016c78 <xTaskGetSchedulerState+0x38>)
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d102      	bne.n	8016c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c5c:	2302      	movs	r3, #2
 8016c5e:	607b      	str	r3, [r7, #4]
 8016c60:	e001      	b.n	8016c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c62:	2300      	movs	r3, #0
 8016c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c66:	687b      	ldr	r3, [r7, #4]
	}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	370c      	adds	r7, #12
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr
 8016c74:	200006a4 	.word	0x200006a4
 8016c78:	200006c0 	.word	0x200006c0

08016c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b084      	sub	sp, #16
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d069      	beq.n	8016d66 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c96:	4b36      	ldr	r3, [pc, #216]	; (8016d70 <xTaskPriorityInherit+0xf4>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c9c:	429a      	cmp	r2, r3
 8016c9e:	d259      	bcs.n	8016d54 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016ca0:	68bb      	ldr	r3, [r7, #8]
 8016ca2:	699b      	ldr	r3, [r3, #24]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	db06      	blt.n	8016cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ca8:	4b31      	ldr	r3, [pc, #196]	; (8016d70 <xTaskPriorityInherit+0xf4>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cae:	f1c3 0207 	rsb	r2, r3, #7
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016cb6:	68bb      	ldr	r3, [r7, #8]
 8016cb8:	6959      	ldr	r1, [r3, #20]
 8016cba:	68bb      	ldr	r3, [r7, #8]
 8016cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	009b      	lsls	r3, r3, #2
 8016cc2:	4413      	add	r3, r2
 8016cc4:	009b      	lsls	r3, r3, #2
 8016cc6:	4a2b      	ldr	r2, [pc, #172]	; (8016d74 <xTaskPriorityInherit+0xf8>)
 8016cc8:	4413      	add	r3, r2
 8016cca:	4299      	cmp	r1, r3
 8016ccc:	d13a      	bne.n	8016d44 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	3304      	adds	r3, #4
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7fe f8a5 	bl	8014e22 <uxListRemove>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d115      	bne.n	8016d0a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016cde:	68bb      	ldr	r3, [r7, #8]
 8016ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ce2:	4924      	ldr	r1, [pc, #144]	; (8016d74 <xTaskPriorityInherit+0xf8>)
 8016ce4:	4613      	mov	r3, r2
 8016ce6:	009b      	lsls	r3, r3, #2
 8016ce8:	4413      	add	r3, r2
 8016cea:	009b      	lsls	r3, r3, #2
 8016cec:	440b      	add	r3, r1
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10a      	bne.n	8016d0a <xTaskPriorityInherit+0x8e>
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf8:	2201      	movs	r2, #1
 8016cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8016cfe:	43da      	mvns	r2, r3
 8016d00:	4b1d      	ldr	r3, [pc, #116]	; (8016d78 <xTaskPriorityInherit+0xfc>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	4013      	ands	r3, r2
 8016d06:	4a1c      	ldr	r2, [pc, #112]	; (8016d78 <xTaskPriorityInherit+0xfc>)
 8016d08:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d0a:	4b19      	ldr	r3, [pc, #100]	; (8016d70 <xTaskPriorityInherit+0xf4>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016d14:	68bb      	ldr	r3, [r7, #8]
 8016d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d18:	2201      	movs	r2, #1
 8016d1a:	409a      	lsls	r2, r3
 8016d1c:	4b16      	ldr	r3, [pc, #88]	; (8016d78 <xTaskPriorityInherit+0xfc>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4313      	orrs	r3, r2
 8016d22:	4a15      	ldr	r2, [pc, #84]	; (8016d78 <xTaskPriorityInherit+0xfc>)
 8016d24:	6013      	str	r3, [r2, #0]
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	009b      	lsls	r3, r3, #2
 8016d2e:	4413      	add	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	4a10      	ldr	r2, [pc, #64]	; (8016d74 <xTaskPriorityInherit+0xf8>)
 8016d34:	441a      	add	r2, r3
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	3304      	adds	r3, #4
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	4610      	mov	r0, r2
 8016d3e:	f7fe f813 	bl	8014d68 <vListInsertEnd>
 8016d42:	e004      	b.n	8016d4e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016d44:	4b0a      	ldr	r3, [pc, #40]	; (8016d70 <xTaskPriorityInherit+0xf4>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016d4e:	2301      	movs	r3, #1
 8016d50:	60fb      	str	r3, [r7, #12]
 8016d52:	e008      	b.n	8016d66 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016d58:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <xTaskPriorityInherit+0xf4>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d201      	bcs.n	8016d66 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016d62:	2301      	movs	r3, #1
 8016d64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016d66:	68fb      	ldr	r3, [r7, #12]
	}
 8016d68:	4618      	mov	r0, r3
 8016d6a:	3710      	adds	r7, #16
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	bd80      	pop	{r7, pc}
 8016d70:	20000598 	.word	0x20000598
 8016d74:	2000059c 	.word	0x2000059c
 8016d78:	200006a0 	.word	0x200006a0

08016d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b086      	sub	sp, #24
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d072      	beq.n	8016e78 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016d92:	4b3c      	ldr	r3, [pc, #240]	; (8016e84 <xTaskPriorityDisinherit+0x108>)
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	693a      	ldr	r2, [r7, #16]
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d00c      	beq.n	8016db6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8016d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016da0:	b672      	cpsid	i
 8016da2:	f383 8811 	msr	BASEPRI, r3
 8016da6:	f3bf 8f6f 	isb	sy
 8016daa:	f3bf 8f4f 	dsb	sy
 8016dae:	b662      	cpsie	i
 8016db0:	60fb      	str	r3, [r7, #12]
}
 8016db2:	bf00      	nop
 8016db4:	e7fe      	b.n	8016db4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d10c      	bne.n	8016dd8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8016dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc2:	b672      	cpsid	i
 8016dc4:	f383 8811 	msr	BASEPRI, r3
 8016dc8:	f3bf 8f6f 	isb	sy
 8016dcc:	f3bf 8f4f 	dsb	sy
 8016dd0:	b662      	cpsie	i
 8016dd2:	60bb      	str	r3, [r7, #8]
}
 8016dd4:	bf00      	nop
 8016dd6:	e7fe      	b.n	8016dd6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ddc:	1e5a      	subs	r2, r3, #1
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016de6:	693b      	ldr	r3, [r7, #16]
 8016de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d044      	beq.n	8016e78 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d140      	bne.n	8016e78 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016df6:	693b      	ldr	r3, [r7, #16]
 8016df8:	3304      	adds	r3, #4
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f7fe f811 	bl	8014e22 <uxListRemove>
 8016e00:	4603      	mov	r3, r0
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d115      	bne.n	8016e32 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e0a:	491f      	ldr	r1, [pc, #124]	; (8016e88 <xTaskPriorityDisinherit+0x10c>)
 8016e0c:	4613      	mov	r3, r2
 8016e0e:	009b      	lsls	r3, r3, #2
 8016e10:	4413      	add	r3, r2
 8016e12:	009b      	lsls	r3, r3, #2
 8016e14:	440b      	add	r3, r1
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d10a      	bne.n	8016e32 <xTaskPriorityDisinherit+0xb6>
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e20:	2201      	movs	r2, #1
 8016e22:	fa02 f303 	lsl.w	r3, r2, r3
 8016e26:	43da      	mvns	r2, r3
 8016e28:	4b18      	ldr	r3, [pc, #96]	; (8016e8c <xTaskPriorityDisinherit+0x110>)
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	4013      	ands	r3, r2
 8016e2e:	4a17      	ldr	r2, [pc, #92]	; (8016e8c <xTaskPriorityDisinherit+0x110>)
 8016e30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e3e:	f1c3 0207 	rsb	r2, r3, #7
 8016e42:	693b      	ldr	r3, [r7, #16]
 8016e44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016e46:	693b      	ldr	r3, [r7, #16]
 8016e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e4a:	2201      	movs	r2, #1
 8016e4c:	409a      	lsls	r2, r3
 8016e4e:	4b0f      	ldr	r3, [pc, #60]	; (8016e8c <xTaskPriorityDisinherit+0x110>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	4313      	orrs	r3, r2
 8016e54:	4a0d      	ldr	r2, [pc, #52]	; (8016e8c <xTaskPriorityDisinherit+0x110>)
 8016e56:	6013      	str	r3, [r2, #0]
 8016e58:	693b      	ldr	r3, [r7, #16]
 8016e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	009b      	lsls	r3, r3, #2
 8016e60:	4413      	add	r3, r2
 8016e62:	009b      	lsls	r3, r3, #2
 8016e64:	4a08      	ldr	r2, [pc, #32]	; (8016e88 <xTaskPriorityDisinherit+0x10c>)
 8016e66:	441a      	add	r2, r3
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	3304      	adds	r3, #4
 8016e6c:	4619      	mov	r1, r3
 8016e6e:	4610      	mov	r0, r2
 8016e70:	f7fd ff7a 	bl	8014d68 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016e74:	2301      	movs	r3, #1
 8016e76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016e78:	697b      	ldr	r3, [r7, #20]
	}
 8016e7a:	4618      	mov	r0, r3
 8016e7c:	3718      	adds	r7, #24
 8016e7e:	46bd      	mov	sp, r7
 8016e80:	bd80      	pop	{r7, pc}
 8016e82:	bf00      	nop
 8016e84:	20000598 	.word	0x20000598
 8016e88:	2000059c 	.word	0x2000059c
 8016e8c:	200006a0 	.word	0x200006a0

08016e90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
 8016e98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	f000 8087 	beq.w	8016fb8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016eaa:	69bb      	ldr	r3, [r7, #24]
 8016eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d10c      	bne.n	8016ecc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8016eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb6:	b672      	cpsid	i
 8016eb8:	f383 8811 	msr	BASEPRI, r3
 8016ebc:	f3bf 8f6f 	isb	sy
 8016ec0:	f3bf 8f4f 	dsb	sy
 8016ec4:	b662      	cpsie	i
 8016ec6:	60fb      	str	r3, [r7, #12]
}
 8016ec8:	bf00      	nop
 8016eca:	e7fe      	b.n	8016eca <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ed0:	683a      	ldr	r2, [r7, #0]
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d902      	bls.n	8016edc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	61fb      	str	r3, [r7, #28]
 8016eda:	e002      	b.n	8016ee2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016edc:	69bb      	ldr	r3, [r7, #24]
 8016ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ee0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016ee2:	69bb      	ldr	r3, [r7, #24]
 8016ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ee6:	69fa      	ldr	r2, [r7, #28]
 8016ee8:	429a      	cmp	r2, r3
 8016eea:	d065      	beq.n	8016fb8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016eec:	69bb      	ldr	r3, [r7, #24]
 8016eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016ef0:	697a      	ldr	r2, [r7, #20]
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d160      	bne.n	8016fb8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016ef6:	4b32      	ldr	r3, [pc, #200]	; (8016fc0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	69ba      	ldr	r2, [r7, #24]
 8016efc:	429a      	cmp	r2, r3
 8016efe:	d10c      	bne.n	8016f1a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8016f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f04:	b672      	cpsid	i
 8016f06:	f383 8811 	msr	BASEPRI, r3
 8016f0a:	f3bf 8f6f 	isb	sy
 8016f0e:	f3bf 8f4f 	dsb	sy
 8016f12:	b662      	cpsie	i
 8016f14:	60bb      	str	r3, [r7, #8]
}
 8016f16:	bf00      	nop
 8016f18:	e7fe      	b.n	8016f18 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f1e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016f20:	69bb      	ldr	r3, [r7, #24]
 8016f22:	69fa      	ldr	r2, [r7, #28]
 8016f24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f26:	69bb      	ldr	r3, [r7, #24]
 8016f28:	699b      	ldr	r3, [r3, #24]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	db04      	blt.n	8016f38 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	f1c3 0207 	rsb	r2, r3, #7
 8016f34:	69bb      	ldr	r3, [r7, #24]
 8016f36:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016f38:	69bb      	ldr	r3, [r7, #24]
 8016f3a:	6959      	ldr	r1, [r3, #20]
 8016f3c:	693a      	ldr	r2, [r7, #16]
 8016f3e:	4613      	mov	r3, r2
 8016f40:	009b      	lsls	r3, r3, #2
 8016f42:	4413      	add	r3, r2
 8016f44:	009b      	lsls	r3, r3, #2
 8016f46:	4a1f      	ldr	r2, [pc, #124]	; (8016fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016f48:	4413      	add	r3, r2
 8016f4a:	4299      	cmp	r1, r3
 8016f4c:	d134      	bne.n	8016fb8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	3304      	adds	r3, #4
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7fd ff65 	bl	8014e22 <uxListRemove>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d115      	bne.n	8016f8a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f5e:	69bb      	ldr	r3, [r7, #24]
 8016f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f62:	4918      	ldr	r1, [pc, #96]	; (8016fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016f64:	4613      	mov	r3, r2
 8016f66:	009b      	lsls	r3, r3, #2
 8016f68:	4413      	add	r3, r2
 8016f6a:	009b      	lsls	r3, r3, #2
 8016f6c:	440b      	add	r3, r1
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d10a      	bne.n	8016f8a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8016f74:	69bb      	ldr	r3, [r7, #24]
 8016f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f78:	2201      	movs	r2, #1
 8016f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8016f7e:	43da      	mvns	r2, r3
 8016f80:	4b11      	ldr	r3, [pc, #68]	; (8016fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	4013      	ands	r3, r2
 8016f86:	4a10      	ldr	r2, [pc, #64]	; (8016fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016f88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016f8a:	69bb      	ldr	r3, [r7, #24]
 8016f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f8e:	2201      	movs	r2, #1
 8016f90:	409a      	lsls	r2, r3
 8016f92:	4b0d      	ldr	r3, [pc, #52]	; (8016fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	4313      	orrs	r3, r2
 8016f98:	4a0b      	ldr	r2, [pc, #44]	; (8016fc8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8016f9a:	6013      	str	r3, [r2, #0]
 8016f9c:	69bb      	ldr	r3, [r7, #24]
 8016f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fa0:	4613      	mov	r3, r2
 8016fa2:	009b      	lsls	r3, r3, #2
 8016fa4:	4413      	add	r3, r2
 8016fa6:	009b      	lsls	r3, r3, #2
 8016fa8:	4a06      	ldr	r2, [pc, #24]	; (8016fc4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8016faa:	441a      	add	r2, r3
 8016fac:	69bb      	ldr	r3, [r7, #24]
 8016fae:	3304      	adds	r3, #4
 8016fb0:	4619      	mov	r1, r3
 8016fb2:	4610      	mov	r0, r2
 8016fb4:	f7fd fed8 	bl	8014d68 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016fb8:	bf00      	nop
 8016fba:	3720      	adds	r7, #32
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	20000598 	.word	0x20000598
 8016fc4:	2000059c 	.word	0x2000059c
 8016fc8:	200006a0 	.word	0x200006a0

08016fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016fcc:	b480      	push	{r7}
 8016fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016fd0:	4b07      	ldr	r3, [pc, #28]	; (8016ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d004      	beq.n	8016fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016fd8:	4b05      	ldr	r3, [pc, #20]	; (8016ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016fde:	3201      	adds	r2, #1
 8016fe0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016fe2:	4b03      	ldr	r3, [pc, #12]	; (8016ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
	}
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr
 8016ff0:	20000598 	.word	0x20000598

08016ff4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016ffe:	4b29      	ldr	r3, [pc, #164]	; (80170a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017004:	4b28      	ldr	r3, [pc, #160]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	3304      	adds	r3, #4
 801700a:	4618      	mov	r0, r3
 801700c:	f7fd ff09 	bl	8014e22 <uxListRemove>
 8017010:	4603      	mov	r3, r0
 8017012:	2b00      	cmp	r3, #0
 8017014:	d10b      	bne.n	801702e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8017016:	4b24      	ldr	r3, [pc, #144]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801701c:	2201      	movs	r2, #1
 801701e:	fa02 f303 	lsl.w	r3, r2, r3
 8017022:	43da      	mvns	r2, r3
 8017024:	4b21      	ldr	r3, [pc, #132]	; (80170ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	4013      	ands	r3, r2
 801702a:	4a20      	ldr	r2, [pc, #128]	; (80170ac <prvAddCurrentTaskToDelayedList+0xb8>)
 801702c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017034:	d10a      	bne.n	801704c <prvAddCurrentTaskToDelayedList+0x58>
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d007      	beq.n	801704c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801703c:	4b1a      	ldr	r3, [pc, #104]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	3304      	adds	r3, #4
 8017042:	4619      	mov	r1, r3
 8017044:	481a      	ldr	r0, [pc, #104]	; (80170b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8017046:	f7fd fe8f 	bl	8014d68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801704a:	e026      	b.n	801709a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801704c:	68fa      	ldr	r2, [r7, #12]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	4413      	add	r3, r2
 8017052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017054:	4b14      	ldr	r3, [pc, #80]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	68ba      	ldr	r2, [r7, #8]
 801705a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801705c:	68ba      	ldr	r2, [r7, #8]
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	429a      	cmp	r2, r3
 8017062:	d209      	bcs.n	8017078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017064:	4b13      	ldr	r3, [pc, #76]	; (80170b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	4b0f      	ldr	r3, [pc, #60]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	3304      	adds	r3, #4
 801706e:	4619      	mov	r1, r3
 8017070:	4610      	mov	r0, r2
 8017072:	f7fd fe9d 	bl	8014db0 <vListInsert>
}
 8017076:	e010      	b.n	801709a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017078:	4b0f      	ldr	r3, [pc, #60]	; (80170b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801707a:	681a      	ldr	r2, [r3, #0]
 801707c:	4b0a      	ldr	r3, [pc, #40]	; (80170a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	3304      	adds	r3, #4
 8017082:	4619      	mov	r1, r3
 8017084:	4610      	mov	r0, r2
 8017086:	f7fd fe93 	bl	8014db0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801708a:	4b0c      	ldr	r3, [pc, #48]	; (80170bc <prvAddCurrentTaskToDelayedList+0xc8>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	68ba      	ldr	r2, [r7, #8]
 8017090:	429a      	cmp	r2, r3
 8017092:	d202      	bcs.n	801709a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8017094:	4a09      	ldr	r2, [pc, #36]	; (80170bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	6013      	str	r3, [r2, #0]
}
 801709a:	bf00      	nop
 801709c:	3710      	adds	r7, #16
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	2000069c 	.word	0x2000069c
 80170a8:	20000598 	.word	0x20000598
 80170ac:	200006a0 	.word	0x200006a0
 80170b0:	20000684 	.word	0x20000684
 80170b4:	20000654 	.word	0x20000654
 80170b8:	20000650 	.word	0x20000650
 80170bc:	200006b8 	.word	0x200006b8

080170c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80170c0:	b480      	push	{r7}
 80170c2:	b085      	sub	sp, #20
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	60f8      	str	r0, [r7, #12]
 80170c8:	60b9      	str	r1, [r7, #8]
 80170ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	3b04      	subs	r3, #4
 80170d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80170d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	3b04      	subs	r3, #4
 80170de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	f023 0201 	bic.w	r2, r3, #1
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	3b04      	subs	r3, #4
 80170ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80170f0:	4a0c      	ldr	r2, [pc, #48]	; (8017124 <pxPortInitialiseStack+0x64>)
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	3b14      	subs	r3, #20
 80170fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80170fc:	687a      	ldr	r2, [r7, #4]
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	3b04      	subs	r3, #4
 8017106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	f06f 0202 	mvn.w	r2, #2
 801710e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	3b20      	subs	r3, #32
 8017114:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017116:	68fb      	ldr	r3, [r7, #12]
}
 8017118:	4618      	mov	r0, r3
 801711a:	3714      	adds	r7, #20
 801711c:	46bd      	mov	sp, r7
 801711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017122:	4770      	bx	lr
 8017124:	08017129 	.word	0x08017129

08017128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017128:	b480      	push	{r7}
 801712a:	b085      	sub	sp, #20
 801712c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801712e:	2300      	movs	r3, #0
 8017130:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017132:	4b14      	ldr	r3, [pc, #80]	; (8017184 <prvTaskExitError+0x5c>)
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801713a:	d00c      	beq.n	8017156 <prvTaskExitError+0x2e>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017140:	b672      	cpsid	i
 8017142:	f383 8811 	msr	BASEPRI, r3
 8017146:	f3bf 8f6f 	isb	sy
 801714a:	f3bf 8f4f 	dsb	sy
 801714e:	b662      	cpsie	i
 8017150:	60fb      	str	r3, [r7, #12]
}
 8017152:	bf00      	nop
 8017154:	e7fe      	b.n	8017154 <prvTaskExitError+0x2c>
	__asm volatile
 8017156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801715a:	b672      	cpsid	i
 801715c:	f383 8811 	msr	BASEPRI, r3
 8017160:	f3bf 8f6f 	isb	sy
 8017164:	f3bf 8f4f 	dsb	sy
 8017168:	b662      	cpsie	i
 801716a:	60bb      	str	r3, [r7, #8]
}
 801716c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801716e:	bf00      	nop
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d0fc      	beq.n	8017170 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017176:	bf00      	nop
 8017178:	bf00      	nop
 801717a:	3714      	adds	r7, #20
 801717c:	46bd      	mov	sp, r7
 801717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017182:	4770      	bx	lr
 8017184:	20000060 	.word	0x20000060
	...

08017190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017190:	4b07      	ldr	r3, [pc, #28]	; (80171b0 <pxCurrentTCBConst2>)
 8017192:	6819      	ldr	r1, [r3, #0]
 8017194:	6808      	ldr	r0, [r1, #0]
 8017196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801719a:	f380 8809 	msr	PSP, r0
 801719e:	f3bf 8f6f 	isb	sy
 80171a2:	f04f 0000 	mov.w	r0, #0
 80171a6:	f380 8811 	msr	BASEPRI, r0
 80171aa:	4770      	bx	lr
 80171ac:	f3af 8000 	nop.w

080171b0 <pxCurrentTCBConst2>:
 80171b0:	20000598 	.word	0x20000598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80171b4:	bf00      	nop
 80171b6:	bf00      	nop

080171b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80171b8:	4808      	ldr	r0, [pc, #32]	; (80171dc <prvPortStartFirstTask+0x24>)
 80171ba:	6800      	ldr	r0, [r0, #0]
 80171bc:	6800      	ldr	r0, [r0, #0]
 80171be:	f380 8808 	msr	MSP, r0
 80171c2:	f04f 0000 	mov.w	r0, #0
 80171c6:	f380 8814 	msr	CONTROL, r0
 80171ca:	b662      	cpsie	i
 80171cc:	b661      	cpsie	f
 80171ce:	f3bf 8f4f 	dsb	sy
 80171d2:	f3bf 8f6f 	isb	sy
 80171d6:	df00      	svc	0
 80171d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80171da:	bf00      	nop
 80171dc:	e000ed08 	.word	0xe000ed08

080171e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b084      	sub	sp, #16
 80171e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80171e6:	4b37      	ldr	r3, [pc, #220]	; (80172c4 <xPortStartScheduler+0xe4>)
 80171e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	781b      	ldrb	r3, [r3, #0]
 80171ee:	b2db      	uxtb	r3, r3
 80171f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	22ff      	movs	r2, #255	; 0xff
 80171f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	b2db      	uxtb	r3, r3
 80171fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017200:	78fb      	ldrb	r3, [r7, #3]
 8017202:	b2db      	uxtb	r3, r3
 8017204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017208:	b2da      	uxtb	r2, r3
 801720a:	4b2f      	ldr	r3, [pc, #188]	; (80172c8 <xPortStartScheduler+0xe8>)
 801720c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801720e:	4b2f      	ldr	r3, [pc, #188]	; (80172cc <xPortStartScheduler+0xec>)
 8017210:	2207      	movs	r2, #7
 8017212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017214:	e009      	b.n	801722a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8017216:	4b2d      	ldr	r3, [pc, #180]	; (80172cc <xPortStartScheduler+0xec>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	3b01      	subs	r3, #1
 801721c:	4a2b      	ldr	r2, [pc, #172]	; (80172cc <xPortStartScheduler+0xec>)
 801721e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017220:	78fb      	ldrb	r3, [r7, #3]
 8017222:	b2db      	uxtb	r3, r3
 8017224:	005b      	lsls	r3, r3, #1
 8017226:	b2db      	uxtb	r3, r3
 8017228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801722a:	78fb      	ldrb	r3, [r7, #3]
 801722c:	b2db      	uxtb	r3, r3
 801722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017232:	2b80      	cmp	r3, #128	; 0x80
 8017234:	d0ef      	beq.n	8017216 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017236:	4b25      	ldr	r3, [pc, #148]	; (80172cc <xPortStartScheduler+0xec>)
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	f1c3 0307 	rsb	r3, r3, #7
 801723e:	2b04      	cmp	r3, #4
 8017240:	d00c      	beq.n	801725c <xPortStartScheduler+0x7c>
	__asm volatile
 8017242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017246:	b672      	cpsid	i
 8017248:	f383 8811 	msr	BASEPRI, r3
 801724c:	f3bf 8f6f 	isb	sy
 8017250:	f3bf 8f4f 	dsb	sy
 8017254:	b662      	cpsie	i
 8017256:	60bb      	str	r3, [r7, #8]
}
 8017258:	bf00      	nop
 801725a:	e7fe      	b.n	801725a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801725c:	4b1b      	ldr	r3, [pc, #108]	; (80172cc <xPortStartScheduler+0xec>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	021b      	lsls	r3, r3, #8
 8017262:	4a1a      	ldr	r2, [pc, #104]	; (80172cc <xPortStartScheduler+0xec>)
 8017264:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017266:	4b19      	ldr	r3, [pc, #100]	; (80172cc <xPortStartScheduler+0xec>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801726e:	4a17      	ldr	r2, [pc, #92]	; (80172cc <xPortStartScheduler+0xec>)
 8017270:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	b2da      	uxtb	r2, r3
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801727a:	4b15      	ldr	r3, [pc, #84]	; (80172d0 <xPortStartScheduler+0xf0>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4a14      	ldr	r2, [pc, #80]	; (80172d0 <xPortStartScheduler+0xf0>)
 8017280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017284:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017286:	4b12      	ldr	r3, [pc, #72]	; (80172d0 <xPortStartScheduler+0xf0>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	4a11      	ldr	r2, [pc, #68]	; (80172d0 <xPortStartScheduler+0xf0>)
 801728c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017290:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017292:	f000 f8dd 	bl	8017450 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017296:	4b0f      	ldr	r3, [pc, #60]	; (80172d4 <xPortStartScheduler+0xf4>)
 8017298:	2200      	movs	r2, #0
 801729a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801729c:	f000 f8fc 	bl	8017498 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80172a0:	4b0d      	ldr	r3, [pc, #52]	; (80172d8 <xPortStartScheduler+0xf8>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	4a0c      	ldr	r2, [pc, #48]	; (80172d8 <xPortStartScheduler+0xf8>)
 80172a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80172aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80172ac:	f7ff ff84 	bl	80171b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80172b0:	f7ff fa4c 	bl	801674c <vTaskSwitchContext>
	prvTaskExitError();
 80172b4:	f7ff ff38 	bl	8017128 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80172b8:	2300      	movs	r3, #0
}
 80172ba:	4618      	mov	r0, r3
 80172bc:	3710      	adds	r7, #16
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	e000e400 	.word	0xe000e400
 80172c8:	200006c4 	.word	0x200006c4
 80172cc:	200006c8 	.word	0x200006c8
 80172d0:	e000ed20 	.word	0xe000ed20
 80172d4:	20000060 	.word	0x20000060
 80172d8:	e000ef34 	.word	0xe000ef34

080172dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80172dc:	b480      	push	{r7}
 80172de:	b083      	sub	sp, #12
 80172e0:	af00      	add	r7, sp, #0
	__asm volatile
 80172e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e6:	b672      	cpsid	i
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	b662      	cpsie	i
 80172f6:	607b      	str	r3, [r7, #4]
}
 80172f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80172fa:	4b10      	ldr	r3, [pc, #64]	; (801733c <vPortEnterCritical+0x60>)
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	3301      	adds	r3, #1
 8017300:	4a0e      	ldr	r2, [pc, #56]	; (801733c <vPortEnterCritical+0x60>)
 8017302:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017304:	4b0d      	ldr	r3, [pc, #52]	; (801733c <vPortEnterCritical+0x60>)
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	2b01      	cmp	r3, #1
 801730a:	d111      	bne.n	8017330 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801730c:	4b0c      	ldr	r3, [pc, #48]	; (8017340 <vPortEnterCritical+0x64>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	b2db      	uxtb	r3, r3
 8017312:	2b00      	cmp	r3, #0
 8017314:	d00c      	beq.n	8017330 <vPortEnterCritical+0x54>
	__asm volatile
 8017316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801731a:	b672      	cpsid	i
 801731c:	f383 8811 	msr	BASEPRI, r3
 8017320:	f3bf 8f6f 	isb	sy
 8017324:	f3bf 8f4f 	dsb	sy
 8017328:	b662      	cpsie	i
 801732a:	603b      	str	r3, [r7, #0]
}
 801732c:	bf00      	nop
 801732e:	e7fe      	b.n	801732e <vPortEnterCritical+0x52>
	}
}
 8017330:	bf00      	nop
 8017332:	370c      	adds	r7, #12
 8017334:	46bd      	mov	sp, r7
 8017336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801733a:	4770      	bx	lr
 801733c:	20000060 	.word	0x20000060
 8017340:	e000ed04 	.word	0xe000ed04

08017344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801734a:	4b13      	ldr	r3, [pc, #76]	; (8017398 <vPortExitCritical+0x54>)
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d10c      	bne.n	801736c <vPortExitCritical+0x28>
	__asm volatile
 8017352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017356:	b672      	cpsid	i
 8017358:	f383 8811 	msr	BASEPRI, r3
 801735c:	f3bf 8f6f 	isb	sy
 8017360:	f3bf 8f4f 	dsb	sy
 8017364:	b662      	cpsie	i
 8017366:	607b      	str	r3, [r7, #4]
}
 8017368:	bf00      	nop
 801736a:	e7fe      	b.n	801736a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801736c:	4b0a      	ldr	r3, [pc, #40]	; (8017398 <vPortExitCritical+0x54>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	3b01      	subs	r3, #1
 8017372:	4a09      	ldr	r2, [pc, #36]	; (8017398 <vPortExitCritical+0x54>)
 8017374:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017376:	4b08      	ldr	r3, [pc, #32]	; (8017398 <vPortExitCritical+0x54>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d105      	bne.n	801738a <vPortExitCritical+0x46>
 801737e:	2300      	movs	r3, #0
 8017380:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	f383 8811 	msr	BASEPRI, r3
}
 8017388:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801738a:	bf00      	nop
 801738c:	370c      	adds	r7, #12
 801738e:	46bd      	mov	sp, r7
 8017390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017394:	4770      	bx	lr
 8017396:	bf00      	nop
 8017398:	20000060 	.word	0x20000060
 801739c:	00000000 	.word	0x00000000

080173a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80173a0:	f3ef 8009 	mrs	r0, PSP
 80173a4:	f3bf 8f6f 	isb	sy
 80173a8:	4b15      	ldr	r3, [pc, #84]	; (8017400 <pxCurrentTCBConst>)
 80173aa:	681a      	ldr	r2, [r3, #0]
 80173ac:	f01e 0f10 	tst.w	lr, #16
 80173b0:	bf08      	it	eq
 80173b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80173b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ba:	6010      	str	r0, [r2, #0]
 80173bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80173c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80173c4:	b672      	cpsid	i
 80173c6:	f380 8811 	msr	BASEPRI, r0
 80173ca:	f3bf 8f4f 	dsb	sy
 80173ce:	f3bf 8f6f 	isb	sy
 80173d2:	b662      	cpsie	i
 80173d4:	f7ff f9ba 	bl	801674c <vTaskSwitchContext>
 80173d8:	f04f 0000 	mov.w	r0, #0
 80173dc:	f380 8811 	msr	BASEPRI, r0
 80173e0:	bc09      	pop	{r0, r3}
 80173e2:	6819      	ldr	r1, [r3, #0]
 80173e4:	6808      	ldr	r0, [r1, #0]
 80173e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ea:	f01e 0f10 	tst.w	lr, #16
 80173ee:	bf08      	it	eq
 80173f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80173f4:	f380 8809 	msr	PSP, r0
 80173f8:	f3bf 8f6f 	isb	sy
 80173fc:	4770      	bx	lr
 80173fe:	bf00      	nop

08017400 <pxCurrentTCBConst>:
 8017400:	20000598 	.word	0x20000598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017404:	bf00      	nop
 8017406:	bf00      	nop

08017408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b082      	sub	sp, #8
 801740c:	af00      	add	r7, sp, #0
	__asm volatile
 801740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017412:	b672      	cpsid	i
 8017414:	f383 8811 	msr	BASEPRI, r3
 8017418:	f3bf 8f6f 	isb	sy
 801741c:	f3bf 8f4f 	dsb	sy
 8017420:	b662      	cpsie	i
 8017422:	607b      	str	r3, [r7, #4]
}
 8017424:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017426:	f7ff f8d7 	bl	80165d8 <xTaskIncrementTick>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d003      	beq.n	8017438 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017430:	4b06      	ldr	r3, [pc, #24]	; (801744c <SysTick_Handler+0x44>)
 8017432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017436:	601a      	str	r2, [r3, #0]
 8017438:	2300      	movs	r3, #0
 801743a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801743c:	683b      	ldr	r3, [r7, #0]
 801743e:	f383 8811 	msr	BASEPRI, r3
}
 8017442:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017444:	bf00      	nop
 8017446:	3708      	adds	r7, #8
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}
 801744c:	e000ed04 	.word	0xe000ed04

08017450 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017450:	b480      	push	{r7}
 8017452:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017454:	4b0b      	ldr	r3, [pc, #44]	; (8017484 <vPortSetupTimerInterrupt+0x34>)
 8017456:	2200      	movs	r2, #0
 8017458:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801745a:	4b0b      	ldr	r3, [pc, #44]	; (8017488 <vPortSetupTimerInterrupt+0x38>)
 801745c:	2200      	movs	r2, #0
 801745e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017460:	4b0a      	ldr	r3, [pc, #40]	; (801748c <vPortSetupTimerInterrupt+0x3c>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4a0a      	ldr	r2, [pc, #40]	; (8017490 <vPortSetupTimerInterrupt+0x40>)
 8017466:	fba2 2303 	umull	r2, r3, r2, r3
 801746a:	099b      	lsrs	r3, r3, #6
 801746c:	4a09      	ldr	r2, [pc, #36]	; (8017494 <vPortSetupTimerInterrupt+0x44>)
 801746e:	3b01      	subs	r3, #1
 8017470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017472:	4b04      	ldr	r3, [pc, #16]	; (8017484 <vPortSetupTimerInterrupt+0x34>)
 8017474:	2207      	movs	r2, #7
 8017476:	601a      	str	r2, [r3, #0]
}
 8017478:	bf00      	nop
 801747a:	46bd      	mov	sp, r7
 801747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017480:	4770      	bx	lr
 8017482:	bf00      	nop
 8017484:	e000e010 	.word	0xe000e010
 8017488:	e000e018 	.word	0xe000e018
 801748c:	20000000 	.word	0x20000000
 8017490:	10624dd3 	.word	0x10624dd3
 8017494:	e000e014 	.word	0xe000e014

08017498 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017498:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80174a8 <vPortEnableVFP+0x10>
 801749c:	6801      	ldr	r1, [r0, #0]
 801749e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80174a2:	6001      	str	r1, [r0, #0]
 80174a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80174a6:	bf00      	nop
 80174a8:	e000ed88 	.word	0xe000ed88

080174ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80174ac:	b480      	push	{r7}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80174b2:	f3ef 8305 	mrs	r3, IPSR
 80174b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2b0f      	cmp	r3, #15
 80174bc:	d916      	bls.n	80174ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80174be:	4a19      	ldr	r2, [pc, #100]	; (8017524 <vPortValidateInterruptPriority+0x78>)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	4413      	add	r3, r2
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80174c8:	4b17      	ldr	r3, [pc, #92]	; (8017528 <vPortValidateInterruptPriority+0x7c>)
 80174ca:	781b      	ldrb	r3, [r3, #0]
 80174cc:	7afa      	ldrb	r2, [r7, #11]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d20c      	bcs.n	80174ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80174d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174d6:	b672      	cpsid	i
 80174d8:	f383 8811 	msr	BASEPRI, r3
 80174dc:	f3bf 8f6f 	isb	sy
 80174e0:	f3bf 8f4f 	dsb	sy
 80174e4:	b662      	cpsie	i
 80174e6:	607b      	str	r3, [r7, #4]
}
 80174e8:	bf00      	nop
 80174ea:	e7fe      	b.n	80174ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80174ec:	4b0f      	ldr	r3, [pc, #60]	; (801752c <vPortValidateInterruptPriority+0x80>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80174f4:	4b0e      	ldr	r3, [pc, #56]	; (8017530 <vPortValidateInterruptPriority+0x84>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d90c      	bls.n	8017516 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80174fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017500:	b672      	cpsid	i
 8017502:	f383 8811 	msr	BASEPRI, r3
 8017506:	f3bf 8f6f 	isb	sy
 801750a:	f3bf 8f4f 	dsb	sy
 801750e:	b662      	cpsie	i
 8017510:	603b      	str	r3, [r7, #0]
}
 8017512:	bf00      	nop
 8017514:	e7fe      	b.n	8017514 <vPortValidateInterruptPriority+0x68>
	}
 8017516:	bf00      	nop
 8017518:	3714      	adds	r7, #20
 801751a:	46bd      	mov	sp, r7
 801751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017520:	4770      	bx	lr
 8017522:	bf00      	nop
 8017524:	e000e3f0 	.word	0xe000e3f0
 8017528:	200006c4 	.word	0x200006c4
 801752c:	e000ed0c 	.word	0xe000ed0c
 8017530:	200006c8 	.word	0x200006c8

08017534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b08a      	sub	sp, #40	; 0x28
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801753c:	2300      	movs	r3, #0
 801753e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017540:	f7fe ff7c 	bl	801643c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017544:	4b5e      	ldr	r3, [pc, #376]	; (80176c0 <pvPortMalloc+0x18c>)
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d101      	bne.n	8017550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801754c:	f000 f920 	bl	8017790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017550:	4b5c      	ldr	r3, [pc, #368]	; (80176c4 <pvPortMalloc+0x190>)
 8017552:	681a      	ldr	r2, [r3, #0]
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	4013      	ands	r3, r2
 8017558:	2b00      	cmp	r3, #0
 801755a:	f040 8092 	bne.w	8017682 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d01f      	beq.n	80175a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8017564:	2208      	movs	r2, #8
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	4413      	add	r3, r2
 801756a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	f003 0307 	and.w	r3, r3, #7
 8017572:	2b00      	cmp	r3, #0
 8017574:	d016      	beq.n	80175a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f023 0307 	bic.w	r3, r3, #7
 801757c:	3308      	adds	r3, #8
 801757e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f003 0307 	and.w	r3, r3, #7
 8017586:	2b00      	cmp	r3, #0
 8017588:	d00c      	beq.n	80175a4 <pvPortMalloc+0x70>
	__asm volatile
 801758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801758e:	b672      	cpsid	i
 8017590:	f383 8811 	msr	BASEPRI, r3
 8017594:	f3bf 8f6f 	isb	sy
 8017598:	f3bf 8f4f 	dsb	sy
 801759c:	b662      	cpsie	i
 801759e:	617b      	str	r3, [r7, #20]
}
 80175a0:	bf00      	nop
 80175a2:	e7fe      	b.n	80175a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d06b      	beq.n	8017682 <pvPortMalloc+0x14e>
 80175aa:	4b47      	ldr	r3, [pc, #284]	; (80176c8 <pvPortMalloc+0x194>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	429a      	cmp	r2, r3
 80175b2:	d866      	bhi.n	8017682 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80175b4:	4b45      	ldr	r3, [pc, #276]	; (80176cc <pvPortMalloc+0x198>)
 80175b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80175b8:	4b44      	ldr	r3, [pc, #272]	; (80176cc <pvPortMalloc+0x198>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80175be:	e004      	b.n	80175ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80175c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80175c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80175ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	687a      	ldr	r2, [r7, #4]
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d903      	bls.n	80175dc <pvPortMalloc+0xa8>
 80175d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d1f1      	bne.n	80175c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80175dc:	4b38      	ldr	r3, [pc, #224]	; (80176c0 <pvPortMalloc+0x18c>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d04d      	beq.n	8017682 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80175e6:	6a3b      	ldr	r3, [r7, #32]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2208      	movs	r2, #8
 80175ec:	4413      	add	r3, r2
 80175ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80175f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f2:	681a      	ldr	r2, [r3, #0]
 80175f4:	6a3b      	ldr	r3, [r7, #32]
 80175f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80175f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fa:	685a      	ldr	r2, [r3, #4]
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	1ad2      	subs	r2, r2, r3
 8017600:	2308      	movs	r3, #8
 8017602:	005b      	lsls	r3, r3, #1
 8017604:	429a      	cmp	r2, r3
 8017606:	d921      	bls.n	801764c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	4413      	add	r3, r2
 801760e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017610:	69bb      	ldr	r3, [r7, #24]
 8017612:	f003 0307 	and.w	r3, r3, #7
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00c      	beq.n	8017634 <pvPortMalloc+0x100>
	__asm volatile
 801761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801761e:	b672      	cpsid	i
 8017620:	f383 8811 	msr	BASEPRI, r3
 8017624:	f3bf 8f6f 	isb	sy
 8017628:	f3bf 8f4f 	dsb	sy
 801762c:	b662      	cpsie	i
 801762e:	613b      	str	r3, [r7, #16]
}
 8017630:	bf00      	nop
 8017632:	e7fe      	b.n	8017632 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017636:	685a      	ldr	r2, [r3, #4]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	1ad2      	subs	r2, r2, r3
 801763c:	69bb      	ldr	r3, [r7, #24]
 801763e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017646:	69b8      	ldr	r0, [r7, #24]
 8017648:	f000 f904 	bl	8017854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801764c:	4b1e      	ldr	r3, [pc, #120]	; (80176c8 <pvPortMalloc+0x194>)
 801764e:	681a      	ldr	r2, [r3, #0]
 8017650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	4a1c      	ldr	r2, [pc, #112]	; (80176c8 <pvPortMalloc+0x194>)
 8017658:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801765a:	4b1b      	ldr	r3, [pc, #108]	; (80176c8 <pvPortMalloc+0x194>)
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	4b1c      	ldr	r3, [pc, #112]	; (80176d0 <pvPortMalloc+0x19c>)
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	429a      	cmp	r2, r3
 8017664:	d203      	bcs.n	801766e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017666:	4b18      	ldr	r3, [pc, #96]	; (80176c8 <pvPortMalloc+0x194>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	4a19      	ldr	r2, [pc, #100]	; (80176d0 <pvPortMalloc+0x19c>)
 801766c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017670:	685a      	ldr	r2, [r3, #4]
 8017672:	4b14      	ldr	r3, [pc, #80]	; (80176c4 <pvPortMalloc+0x190>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	431a      	orrs	r2, r3
 8017678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801767a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801767c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801767e:	2200      	movs	r2, #0
 8017680:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017682:	f7fe fee9 	bl	8016458 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d101      	bne.n	8017690 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801768c:	f7e8 ff9e 	bl	80005cc <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	f003 0307 	and.w	r3, r3, #7
 8017696:	2b00      	cmp	r3, #0
 8017698:	d00c      	beq.n	80176b4 <pvPortMalloc+0x180>
	__asm volatile
 801769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801769e:	b672      	cpsid	i
 80176a0:	f383 8811 	msr	BASEPRI, r3
 80176a4:	f3bf 8f6f 	isb	sy
 80176a8:	f3bf 8f4f 	dsb	sy
 80176ac:	b662      	cpsie	i
 80176ae:	60fb      	str	r3, [r7, #12]
}
 80176b0:	bf00      	nop
 80176b2:	e7fe      	b.n	80176b2 <pvPortMalloc+0x17e>
	return pvReturn;
 80176b4:	69fb      	ldr	r3, [r7, #28]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3728      	adds	r7, #40	; 0x28
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	200086d4 	.word	0x200086d4
 80176c4:	200086e0 	.word	0x200086e0
 80176c8:	200086d8 	.word	0x200086d8
 80176cc:	200086cc 	.word	0x200086cc
 80176d0:	200086dc 	.word	0x200086dc

080176d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b086      	sub	sp, #24
 80176d8:	af00      	add	r7, sp, #0
 80176da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d04c      	beq.n	8017780 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80176e6:	2308      	movs	r3, #8
 80176e8:	425b      	negs	r3, r3
 80176ea:	697a      	ldr	r2, [r7, #20]
 80176ec:	4413      	add	r3, r2
 80176ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	685a      	ldr	r2, [r3, #4]
 80176f8:	4b23      	ldr	r3, [pc, #140]	; (8017788 <vPortFree+0xb4>)
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	4013      	ands	r3, r2
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d10c      	bne.n	801771c <vPortFree+0x48>
	__asm volatile
 8017702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017706:	b672      	cpsid	i
 8017708:	f383 8811 	msr	BASEPRI, r3
 801770c:	f3bf 8f6f 	isb	sy
 8017710:	f3bf 8f4f 	dsb	sy
 8017714:	b662      	cpsie	i
 8017716:	60fb      	str	r3, [r7, #12]
}
 8017718:	bf00      	nop
 801771a:	e7fe      	b.n	801771a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801771c:	693b      	ldr	r3, [r7, #16]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d00c      	beq.n	801773e <vPortFree+0x6a>
	__asm volatile
 8017724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017728:	b672      	cpsid	i
 801772a:	f383 8811 	msr	BASEPRI, r3
 801772e:	f3bf 8f6f 	isb	sy
 8017732:	f3bf 8f4f 	dsb	sy
 8017736:	b662      	cpsie	i
 8017738:	60bb      	str	r3, [r7, #8]
}
 801773a:	bf00      	nop
 801773c:	e7fe      	b.n	801773c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801773e:	693b      	ldr	r3, [r7, #16]
 8017740:	685a      	ldr	r2, [r3, #4]
 8017742:	4b11      	ldr	r3, [pc, #68]	; (8017788 <vPortFree+0xb4>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4013      	ands	r3, r2
 8017748:	2b00      	cmp	r3, #0
 801774a:	d019      	beq.n	8017780 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801774c:	693b      	ldr	r3, [r7, #16]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d115      	bne.n	8017780 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	685a      	ldr	r2, [r3, #4]
 8017758:	4b0b      	ldr	r3, [pc, #44]	; (8017788 <vPortFree+0xb4>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	43db      	mvns	r3, r3
 801775e:	401a      	ands	r2, r3
 8017760:	693b      	ldr	r3, [r7, #16]
 8017762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017764:	f7fe fe6a 	bl	801643c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	685a      	ldr	r2, [r3, #4]
 801776c:	4b07      	ldr	r3, [pc, #28]	; (801778c <vPortFree+0xb8>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	4413      	add	r3, r2
 8017772:	4a06      	ldr	r2, [pc, #24]	; (801778c <vPortFree+0xb8>)
 8017774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017776:	6938      	ldr	r0, [r7, #16]
 8017778:	f000 f86c 	bl	8017854 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801777c:	f7fe fe6c 	bl	8016458 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017780:	bf00      	nop
 8017782:	3718      	adds	r7, #24
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}
 8017788:	200086e0 	.word	0x200086e0
 801778c:	200086d8 	.word	0x200086d8

08017790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017790:	b480      	push	{r7}
 8017792:	b085      	sub	sp, #20
 8017794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801779a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801779c:	4b27      	ldr	r3, [pc, #156]	; (801783c <prvHeapInit+0xac>)
 801779e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f003 0307 	and.w	r3, r3, #7
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d00c      	beq.n	80177c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	3307      	adds	r3, #7
 80177ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	f023 0307 	bic.w	r3, r3, #7
 80177b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	1ad3      	subs	r3, r2, r3
 80177be:	4a1f      	ldr	r2, [pc, #124]	; (801783c <prvHeapInit+0xac>)
 80177c0:	4413      	add	r3, r2
 80177c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80177c8:	4a1d      	ldr	r2, [pc, #116]	; (8017840 <prvHeapInit+0xb0>)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80177ce:	4b1c      	ldr	r3, [pc, #112]	; (8017840 <prvHeapInit+0xb0>)
 80177d0:	2200      	movs	r2, #0
 80177d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	68ba      	ldr	r2, [r7, #8]
 80177d8:	4413      	add	r3, r2
 80177da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80177dc:	2208      	movs	r2, #8
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	1a9b      	subs	r3, r3, r2
 80177e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	f023 0307 	bic.w	r3, r3, #7
 80177ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	4a15      	ldr	r2, [pc, #84]	; (8017844 <prvHeapInit+0xb4>)
 80177f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80177f2:	4b14      	ldr	r3, [pc, #80]	; (8017844 <prvHeapInit+0xb4>)
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	2200      	movs	r2, #0
 80177f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80177fa:	4b12      	ldr	r3, [pc, #72]	; (8017844 <prvHeapInit+0xb4>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	2200      	movs	r2, #0
 8017800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	68fa      	ldr	r2, [r7, #12]
 801780a:	1ad2      	subs	r2, r2, r3
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017810:	4b0c      	ldr	r3, [pc, #48]	; (8017844 <prvHeapInit+0xb4>)
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	4a0a      	ldr	r2, [pc, #40]	; (8017848 <prvHeapInit+0xb8>)
 801781e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	4a09      	ldr	r2, [pc, #36]	; (801784c <prvHeapInit+0xbc>)
 8017826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017828:	4b09      	ldr	r3, [pc, #36]	; (8017850 <prvHeapInit+0xc0>)
 801782a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801782e:	601a      	str	r2, [r3, #0]
}
 8017830:	bf00      	nop
 8017832:	3714      	adds	r7, #20
 8017834:	46bd      	mov	sp, r7
 8017836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801783a:	4770      	bx	lr
 801783c:	200006cc 	.word	0x200006cc
 8017840:	200086cc 	.word	0x200086cc
 8017844:	200086d4 	.word	0x200086d4
 8017848:	200086dc 	.word	0x200086dc
 801784c:	200086d8 	.word	0x200086d8
 8017850:	200086e0 	.word	0x200086e0

08017854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017854:	b480      	push	{r7}
 8017856:	b085      	sub	sp, #20
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801785c:	4b28      	ldr	r3, [pc, #160]	; (8017900 <prvInsertBlockIntoFreeList+0xac>)
 801785e:	60fb      	str	r3, [r7, #12]
 8017860:	e002      	b.n	8017868 <prvInsertBlockIntoFreeList+0x14>
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	60fb      	str	r3, [r7, #12]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	687a      	ldr	r2, [r7, #4]
 801786e:	429a      	cmp	r2, r3
 8017870:	d8f7      	bhi.n	8017862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	68ba      	ldr	r2, [r7, #8]
 801787c:	4413      	add	r3, r2
 801787e:	687a      	ldr	r2, [r7, #4]
 8017880:	429a      	cmp	r2, r3
 8017882:	d108      	bne.n	8017896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	685a      	ldr	r2, [r3, #4]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	685b      	ldr	r3, [r3, #4]
 801788c:	441a      	add	r2, r3
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	685b      	ldr	r3, [r3, #4]
 801789e:	68ba      	ldr	r2, [r7, #8]
 80178a0:	441a      	add	r2, r3
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	d118      	bne.n	80178dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80178aa:	68fb      	ldr	r3, [r7, #12]
 80178ac:	681a      	ldr	r2, [r3, #0]
 80178ae:	4b15      	ldr	r3, [pc, #84]	; (8017904 <prvInsertBlockIntoFreeList+0xb0>)
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	429a      	cmp	r2, r3
 80178b4:	d00d      	beq.n	80178d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	685a      	ldr	r2, [r3, #4]
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	441a      	add	r2, r3
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	681a      	ldr	r2, [r3, #0]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	601a      	str	r2, [r3, #0]
 80178d0:	e008      	b.n	80178e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80178d2:	4b0c      	ldr	r3, [pc, #48]	; (8017904 <prvInsertBlockIntoFreeList+0xb0>)
 80178d4:	681a      	ldr	r2, [r3, #0]
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	601a      	str	r2, [r3, #0]
 80178da:	e003      	b.n	80178e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80178e4:	68fa      	ldr	r2, [r7, #12]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d002      	beq.n	80178f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80178f2:	bf00      	nop
 80178f4:	3714      	adds	r7, #20
 80178f6:	46bd      	mov	sp, r7
 80178f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fc:	4770      	bx	lr
 80178fe:	bf00      	nop
 8017900:	200086cc 	.word	0x200086cc
 8017904:	200086d4 	.word	0x200086d4

08017908 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b084      	sub	sp, #16
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	330c      	adds	r3, #12
 8017918:	461a      	mov	r2, r3
 801791a:	6839      	ldr	r1, [r7, #0]
 801791c:	6878      	ldr	r0, [r7, #4]
 801791e:	f002 fa9f 	bl	8019e60 <tcpip_send_msg_wait_sem>
 8017922:	4603      	mov	r3, r0
 8017924:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8017926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d103      	bne.n	8017936 <netconn_apimsg+0x2e>
    return apimsg->err;
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8017934:	e001      	b.n	801793a <netconn_apimsg+0x32>
  }
  return err;
 8017936:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801793a:	4618      	mov	r0, r3
 801793c:	3710      	adds	r7, #16
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}
	...

08017944 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b08c      	sub	sp, #48	; 0x30
 8017948:	af00      	add	r7, sp, #0
 801794a:	4603      	mov	r3, r0
 801794c:	603a      	str	r2, [r7, #0]
 801794e:	71fb      	strb	r3, [r7, #7]
 8017950:	460b      	mov	r3, r1
 8017952:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8017954:	79fb      	ldrb	r3, [r7, #7]
 8017956:	6839      	ldr	r1, [r7, #0]
 8017958:	4618      	mov	r0, r3
 801795a:	f001 f923 	bl	8018ba4 <netconn_alloc>
 801795e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8017960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017962:	2b00      	cmp	r3, #0
 8017964:	d054      	beq.n	8017a10 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8017966:	79bb      	ldrb	r3, [r7, #6]
 8017968:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801796c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801796e:	f107 0308 	add.w	r3, r7, #8
 8017972:	4619      	mov	r1, r3
 8017974:	4829      	ldr	r0, [pc, #164]	; (8017a1c <netconn_new_with_proto_and_callback+0xd8>)
 8017976:	f7ff ffc7 	bl	8017908 <netconn_apimsg>
 801797a:	4603      	mov	r3, r0
 801797c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8017980:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017984:	2b00      	cmp	r3, #0
 8017986:	d043      	beq.n	8017a10 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8017988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d005      	beq.n	801799c <netconn_new_with_proto_and_callback+0x58>
 8017990:	4b23      	ldr	r3, [pc, #140]	; (8017a20 <netconn_new_with_proto_and_callback+0xdc>)
 8017992:	22a3      	movs	r2, #163	; 0xa3
 8017994:	4923      	ldr	r1, [pc, #140]	; (8017a24 <netconn_new_with_proto_and_callback+0xe0>)
 8017996:	4824      	ldr	r0, [pc, #144]	; (8017a28 <netconn_new_with_proto_and_callback+0xe4>)
 8017998:	f00e faaa 	bl	8025ef0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801799c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801799e:	3310      	adds	r3, #16
 80179a0:	4618      	mov	r0, r3
 80179a2:	f00d f968 	bl	8024c76 <sys_mbox_valid>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d105      	bne.n	80179b8 <netconn_new_with_proto_and_callback+0x74>
 80179ac:	4b1c      	ldr	r3, [pc, #112]	; (8017a20 <netconn_new_with_proto_and_callback+0xdc>)
 80179ae:	22a4      	movs	r2, #164	; 0xa4
 80179b0:	491e      	ldr	r1, [pc, #120]	; (8017a2c <netconn_new_with_proto_and_callback+0xe8>)
 80179b2:	481d      	ldr	r0, [pc, #116]	; (8017a28 <netconn_new_with_proto_and_callback+0xe4>)
 80179b4:	f00e fa9c 	bl	8025ef0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80179b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ba:	3314      	adds	r3, #20
 80179bc:	4618      	mov	r0, r3
 80179be:	f00d f95a 	bl	8024c76 <sys_mbox_valid>
 80179c2:	4603      	mov	r3, r0
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d005      	beq.n	80179d4 <netconn_new_with_proto_and_callback+0x90>
 80179c8:	4b15      	ldr	r3, [pc, #84]	; (8017a20 <netconn_new_with_proto_and_callback+0xdc>)
 80179ca:	22a6      	movs	r2, #166	; 0xa6
 80179cc:	4918      	ldr	r1, [pc, #96]	; (8017a30 <netconn_new_with_proto_and_callback+0xec>)
 80179ce:	4816      	ldr	r0, [pc, #88]	; (8017a28 <netconn_new_with_proto_and_callback+0xe4>)
 80179d0:	f00e fa8e 	bl	8025ef0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80179d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d6:	330c      	adds	r3, #12
 80179d8:	4618      	mov	r0, r3
 80179da:	f00d f9dd 	bl	8024d98 <sys_sem_valid>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d105      	bne.n	80179f0 <netconn_new_with_proto_and_callback+0xac>
 80179e4:	4b0e      	ldr	r3, [pc, #56]	; (8017a20 <netconn_new_with_proto_and_callback+0xdc>)
 80179e6:	22a9      	movs	r2, #169	; 0xa9
 80179e8:	4912      	ldr	r1, [pc, #72]	; (8017a34 <netconn_new_with_proto_and_callback+0xf0>)
 80179ea:	480f      	ldr	r0, [pc, #60]	; (8017a28 <netconn_new_with_proto_and_callback+0xe4>)
 80179ec:	f00e fa80 	bl	8025ef0 <iprintf>
      sys_sem_free(&conn->op_completed);
 80179f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f2:	330c      	adds	r3, #12
 80179f4:	4618      	mov	r0, r3
 80179f6:	f00d f9c2 	bl	8024d7e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	3310      	adds	r3, #16
 80179fe:	4618      	mov	r0, r3
 8017a00:	f00d f8b2 	bl	8024b68 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8017a04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a06:	2007      	movs	r0, #7
 8017a08:	f002 ff92 	bl	801a930 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	e000      	b.n	8017a12 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8017a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3730      	adds	r7, #48	; 0x30
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
 8017a1a:	bf00      	nop
 8017a1c:	08018b79 	.word	0x08018b79
 8017a20:	080268c8 	.word	0x080268c8
 8017a24:	080268fc 	.word	0x080268fc
 8017a28:	08026920 	.word	0x08026920
 8017a2c:	08026948 	.word	0x08026948
 8017a30:	08026960 	.word	0x08026960
 8017a34:	08026984 	.word	0x08026984

08017a38 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b08c      	sub	sp, #48	; 0x30
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d101      	bne.n	8017a4a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8017a46:	2300      	movs	r3, #0
 8017a48:	e014      	b.n	8017a74 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8017a4e:	2329      	movs	r3, #41	; 0x29
 8017a50:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8017a52:	f107 030c 	add.w	r3, r7, #12
 8017a56:	4619      	mov	r1, r3
 8017a58:	4808      	ldr	r0, [pc, #32]	; (8017a7c <netconn_prepare_delete+0x44>)
 8017a5a:	f7ff ff55 	bl	8017908 <netconn_apimsg>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8017a64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d002      	beq.n	8017a72 <netconn_prepare_delete+0x3a>
    return err;
 8017a6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8017a70:	e000      	b.n	8017a74 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8017a72:	2300      	movs	r3, #0
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3730      	adds	r7, #48	; 0x30
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	080190dd 	.word	0x080190dd

08017a80 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d101      	bne.n	8017a92 <netconn_delete+0x12>
    return ERR_OK;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e00d      	b.n	8017aae <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7ff ffd0 	bl	8017a38 <netconn_prepare_delete>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8017a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d102      	bne.n	8017aaa <netconn_delete+0x2a>
    netconn_free(conn);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f001 f8eb 	bl	8018c80 <netconn_free>
  }
  return err;
 8017aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017aae:	4618      	mov	r0, r3
 8017ab0:	3710      	adds	r7, #16
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	bd80      	pop	{r7, pc}
	...

08017ab8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b08e      	sub	sp, #56	; 0x38
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	4613      	mov	r3, r2
 8017ac4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d109      	bne.n	8017ae0 <netconn_bind+0x28>
 8017acc:	4b11      	ldr	r3, [pc, #68]	; (8017b14 <netconn_bind+0x5c>)
 8017ace:	f44f 729c 	mov.w	r2, #312	; 0x138
 8017ad2:	4911      	ldr	r1, [pc, #68]	; (8017b18 <netconn_bind+0x60>)
 8017ad4:	4811      	ldr	r0, [pc, #68]	; (8017b1c <netconn_bind+0x64>)
 8017ad6:	f00e fa0b 	bl	8025ef0 <iprintf>
 8017ada:	f06f 030f 	mvn.w	r3, #15
 8017ade:	e015      	b.n	8017b0c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8017ae0:	68bb      	ldr	r3, [r7, #8]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d101      	bne.n	8017aea <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8017ae6:	4b0e      	ldr	r3, [pc, #56]	; (8017b20 <netconn_bind+0x68>)
 8017ae8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8017af2:	88fb      	ldrh	r3, [r7, #6]
 8017af4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8017af6:	f107 0314 	add.w	r3, r7, #20
 8017afa:	4619      	mov	r1, r3
 8017afc:	4809      	ldr	r0, [pc, #36]	; (8017b24 <netconn_bind+0x6c>)
 8017afe:	f7ff ff03 	bl	8017908 <netconn_apimsg>
 8017b02:	4603      	mov	r3, r0
 8017b04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8017b08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3738      	adds	r7, #56	; 0x38
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	080268c8 	.word	0x080268c8
 8017b18:	08026a00 	.word	0x08026a00
 8017b1c:	08026920 	.word	0x08026920
 8017b20:	0802b998 	.word	0x0802b998
 8017b24:	080192a5 	.word	0x080192a5

08017b28 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b08c      	sub	sp, #48	; 0x30
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	460b      	mov	r3, r1
 8017b32:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d109      	bne.n	8017b4e <netconn_listen_with_backlog+0x26>
 8017b3a:	4b0d      	ldr	r3, [pc, #52]	; (8017b70 <netconn_listen_with_backlog+0x48>)
 8017b3c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8017b40:	490c      	ldr	r1, [pc, #48]	; (8017b74 <netconn_listen_with_backlog+0x4c>)
 8017b42:	480d      	ldr	r0, [pc, #52]	; (8017b78 <netconn_listen_with_backlog+0x50>)
 8017b44:	f00e f9d4 	bl	8025ef0 <iprintf>
 8017b48:	f06f 030f 	mvn.w	r3, #15
 8017b4c:	e00c      	b.n	8017b68 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8017b52:	f107 030c 	add.w	r3, r7, #12
 8017b56:	4619      	mov	r1, r3
 8017b58:	4808      	ldr	r0, [pc, #32]	; (8017b7c <netconn_listen_with_backlog+0x54>)
 8017b5a:	f7ff fed5 	bl	8017908 <netconn_apimsg>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8017b64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017b68:	4618      	mov	r0, r3
 8017b6a:	3730      	adds	r7, #48	; 0x30
 8017b6c:	46bd      	mov	sp, r7
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	080268c8 	.word	0x080268c8
 8017b74:	08026a80 	.word	0x08026a80
 8017b78:	08026920 	.word	0x08026920
 8017b7c:	08019319 	.word	0x08019319

08017b80 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8017b8a:	683b      	ldr	r3, [r7, #0]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d109      	bne.n	8017ba4 <netconn_accept+0x24>
 8017b90:	4b3d      	ldr	r3, [pc, #244]	; (8017c88 <netconn_accept+0x108>)
 8017b92:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017b96:	493d      	ldr	r1, [pc, #244]	; (8017c8c <netconn_accept+0x10c>)
 8017b98:	483d      	ldr	r0, [pc, #244]	; (8017c90 <netconn_accept+0x110>)
 8017b9a:	f00e f9a9 	bl	8025ef0 <iprintf>
 8017b9e:	f06f 030f 	mvn.w	r3, #15
 8017ba2:	e06c      	b.n	8017c7e <netconn_accept+0xfe>
  *new_conn = NULL;
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d109      	bne.n	8017bc4 <netconn_accept+0x44>
 8017bb0:	4b35      	ldr	r3, [pc, #212]	; (8017c88 <netconn_accept+0x108>)
 8017bb2:	f240 12e3 	movw	r2, #483	; 0x1e3
 8017bb6:	4937      	ldr	r1, [pc, #220]	; (8017c94 <netconn_accept+0x114>)
 8017bb8:	4835      	ldr	r0, [pc, #212]	; (8017c90 <netconn_accept+0x110>)
 8017bba:	f00e f999 	bl	8025ef0 <iprintf>
 8017bbe:	f06f 030f 	mvn.w	r3, #15
 8017bc2:	e05c      	b.n	8017c7e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f000 fb6c 	bl	80182a2 <netconn_err>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8017bce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d002      	beq.n	8017bdc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8017bd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bda:	e050      	b.n	8017c7e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	3314      	adds	r3, #20
 8017be0:	4618      	mov	r0, r3
 8017be2:	f00d f848 	bl	8024c76 <sys_mbox_valid>
 8017be6:	4603      	mov	r3, r0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d005      	beq.n	8017bf8 <netconn_accept+0x78>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	7f1b      	ldrb	r3, [r3, #28]
 8017bf0:	f003 0301 	and.w	r3, r3, #1
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8017bf8:	f06f 030e 	mvn.w	r3, #14
 8017bfc:	e03f      	b.n	8017c7e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	7f1b      	ldrb	r3, [r3, #28]
 8017c02:	f003 0302 	and.w	r3, r3, #2
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00e      	beq.n	8017c28 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	3314      	adds	r3, #20
 8017c0e:	f107 020c 	add.w	r2, r7, #12
 8017c12:	4611      	mov	r1, r2
 8017c14:	4618      	mov	r0, r3
 8017c16:	f00d f812 	bl	8024c3e <sys_arch_mbox_tryfetch>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c20:	d10a      	bne.n	8017c38 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8017c22:	f06f 0306 	mvn.w	r3, #6
 8017c26:	e02a      	b.n	8017c7e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	3314      	adds	r3, #20
 8017c2c:	f107 010c 	add.w	r1, r7, #12
 8017c30:	2200      	movs	r2, #0
 8017c32:	4618      	mov	r0, r3
 8017c34:	f00c ffc4 	bl	8024bc0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d005      	beq.n	8017c4c <netconn_accept+0xcc>
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c44:	2200      	movs	r2, #0
 8017c46:	2101      	movs	r1, #1
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	f107 0213 	add.w	r2, r7, #19
 8017c52:	4611      	mov	r1, r2
 8017c54:	4618      	mov	r0, r3
 8017c56:	f000 fb75 	bl	8018344 <lwip_netconn_is_err_msg>
 8017c5a:	4603      	mov	r3, r0
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d002      	beq.n	8017c66 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8017c60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c64:	e00b      	b.n	8017c7e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d102      	bne.n	8017c72 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8017c6c:	f06f 030e 	mvn.w	r3, #14
 8017c70:	e005      	b.n	8017c7e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	697a      	ldr	r2, [r7, #20]
 8017c7a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017c7c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3718      	adds	r7, #24
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}
 8017c86:	bf00      	nop
 8017c88:	080268c8 	.word	0x080268c8
 8017c8c:	08026aa0 	.word	0x08026aa0
 8017c90:	08026920 	.word	0x08026920
 8017c94:	08026ac0 	.word	0x08026ac0

08017c98 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b088      	sub	sp, #32
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	60b9      	str	r1, [r7, #8]
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d109      	bne.n	8017cc4 <netconn_recv_data+0x2c>
 8017cb0:	4b58      	ldr	r3, [pc, #352]	; (8017e14 <netconn_recv_data+0x17c>)
 8017cb2:	f44f 7212 	mov.w	r2, #584	; 0x248
 8017cb6:	4958      	ldr	r1, [pc, #352]	; (8017e18 <netconn_recv_data+0x180>)
 8017cb8:	4858      	ldr	r0, [pc, #352]	; (8017e1c <netconn_recv_data+0x184>)
 8017cba:	f00e f919 	bl	8025ef0 <iprintf>
 8017cbe:	f06f 030f 	mvn.w	r3, #15
 8017cc2:	e0a2      	b.n	8017e0a <netconn_recv_data+0x172>
  *new_buf = NULL;
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d109      	bne.n	8017ce4 <netconn_recv_data+0x4c>
 8017cd0:	4b50      	ldr	r3, [pc, #320]	; (8017e14 <netconn_recv_data+0x17c>)
 8017cd2:	f240 224a 	movw	r2, #586	; 0x24a
 8017cd6:	4952      	ldr	r1, [pc, #328]	; (8017e20 <netconn_recv_data+0x188>)
 8017cd8:	4850      	ldr	r0, [pc, #320]	; (8017e1c <netconn_recv_data+0x184>)
 8017cda:	f00e f909 	bl	8025ef0 <iprintf>
 8017cde:	f06f 030f 	mvn.w	r3, #15
 8017ce2:	e092      	b.n	8017e0a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	3310      	adds	r3, #16
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f00c ffc4 	bl	8024c76 <sys_mbox_valid>
 8017cee:	4603      	mov	r3, r0
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d10e      	bne.n	8017d12 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8017cf4:	68f8      	ldr	r0, [r7, #12]
 8017cf6:	f000 fad4 	bl	80182a2 <netconn_err>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8017cfe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d002      	beq.n	8017d0c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8017d06:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017d0a:	e07e      	b.n	8017e0a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8017d0c:	f06f 030a 	mvn.w	r3, #10
 8017d10:	e07b      	b.n	8017e0a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	7f1b      	ldrb	r3, [r3, #28]
 8017d16:	f003 0302 	and.w	r3, r3, #2
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d10f      	bne.n	8017d3e <netconn_recv_data+0xa6>
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	f003 0304 	and.w	r3, r3, #4
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d10a      	bne.n	8017d3e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	7f1b      	ldrb	r3, [r3, #28]
 8017d2c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d104      	bne.n	8017d3e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d023      	beq.n	8017d86 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	3310      	adds	r3, #16
 8017d42:	f107 0218 	add.w	r2, r7, #24
 8017d46:	4611      	mov	r1, r2
 8017d48:	4618      	mov	r0, r3
 8017d4a:	f00c ff78 	bl	8024c3e <sys_arch_mbox_tryfetch>
 8017d4e:	4603      	mov	r3, r0
 8017d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d54:	d11f      	bne.n	8017d96 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8017d56:	68f8      	ldr	r0, [r7, #12]
 8017d58:	f000 faa3 	bl	80182a2 <netconn_err>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8017d60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d002      	beq.n	8017d6e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8017d68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017d6c:	e04d      	b.n	8017e0a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	7f1b      	ldrb	r3, [r3, #28]
 8017d72:	f003 0301 	and.w	r3, r3, #1
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d002      	beq.n	8017d80 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8017d7a:	f06f 030a 	mvn.w	r3, #10
 8017d7e:	e044      	b.n	8017e0a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8017d80:	f06f 0306 	mvn.w	r3, #6
 8017d84:	e041      	b.n	8017e0a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	3310      	adds	r3, #16
 8017d8a:	f107 0118 	add.w	r1, r7, #24
 8017d8e:	2200      	movs	r2, #0
 8017d90:	4618      	mov	r0, r3
 8017d92:	f00c ff15 	bl	8024bc0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	781b      	ldrb	r3, [r3, #0]
 8017d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d9e:	2b10      	cmp	r3, #16
 8017da0:	d117      	bne.n	8017dd2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8017da2:	69bb      	ldr	r3, [r7, #24]
 8017da4:	f107 0217 	add.w	r2, r7, #23
 8017da8:	4611      	mov	r1, r2
 8017daa:	4618      	mov	r0, r3
 8017dac:	f000 faca 	bl	8018344 <lwip_netconn_is_err_msg>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d009      	beq.n	8017dca <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8017db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017dba:	f113 0f0f 	cmn.w	r3, #15
 8017dbe:	d101      	bne.n	8017dc4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e022      	b.n	8017e0a <netconn_recv_data+0x172>
      }
      return err;
 8017dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017dc8:	e01f      	b.n	8017e0a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	891b      	ldrh	r3, [r3, #8]
 8017dce:	83fb      	strh	r3, [r7, #30]
 8017dd0:	e00d      	b.n	8017dee <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d106      	bne.n	8017de6 <netconn_recv_data+0x14e>
 8017dd8:	4b0e      	ldr	r3, [pc, #56]	; (8017e14 <netconn_recv_data+0x17c>)
 8017dda:	f240 2291 	movw	r2, #657	; 0x291
 8017dde:	4911      	ldr	r1, [pc, #68]	; (8017e24 <netconn_recv_data+0x18c>)
 8017de0:	480e      	ldr	r0, [pc, #56]	; (8017e1c <netconn_recv_data+0x184>)
 8017de2:	f00e f885 	bl	8025ef0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	891b      	ldrh	r3, [r3, #8]
 8017dec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d005      	beq.n	8017e02 <netconn_recv_data+0x16a>
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfa:	8bfa      	ldrh	r2, [r7, #30]
 8017dfc:	2101      	movs	r1, #1
 8017dfe:	68f8      	ldr	r0, [r7, #12]
 8017e00:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8017e02:	69ba      	ldr	r2, [r7, #24]
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8017e08:	2300      	movs	r3, #0
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3720      	adds	r7, #32
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	080268c8 	.word	0x080268c8
 8017e18:	08026ae0 	.word	0x08026ae0
 8017e1c:	08026920 	.word	0x08026920
 8017e20:	08026b00 	.word	0x08026b00
 8017e24:	08026b1c 	.word	0x08026b1c

08017e28 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b084      	sub	sp, #16
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d005      	beq.n	8017e46 <netconn_tcp_recvd_msg+0x1e>
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e42:	2b10      	cmp	r3, #16
 8017e44:	d009      	beq.n	8017e5a <netconn_tcp_recvd_msg+0x32>
 8017e46:	4b0c      	ldr	r3, [pc, #48]	; (8017e78 <netconn_tcp_recvd_msg+0x50>)
 8017e48:	f240 22a7 	movw	r2, #679	; 0x2a7
 8017e4c:	490b      	ldr	r1, [pc, #44]	; (8017e7c <netconn_tcp_recvd_msg+0x54>)
 8017e4e:	480c      	ldr	r0, [pc, #48]	; (8017e80 <netconn_tcp_recvd_msg+0x58>)
 8017e50:	f00e f84e 	bl	8025ef0 <iprintf>
 8017e54:	f06f 030f 	mvn.w	r3, #15
 8017e58:	e00a      	b.n	8017e70 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	68fa      	ldr	r2, [r7, #12]
 8017e5e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	68ba      	ldr	r2, [r7, #8]
 8017e64:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8017e66:	6879      	ldr	r1, [r7, #4]
 8017e68:	4806      	ldr	r0, [pc, #24]	; (8017e84 <netconn_tcp_recvd_msg+0x5c>)
 8017e6a:	f7ff fd4d 	bl	8017908 <netconn_apimsg>
 8017e6e:	4603      	mov	r3, r0
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3710      	adds	r7, #16
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}
 8017e78:	080268c8 	.word	0x080268c8
 8017e7c:	08026b28 	.word	0x08026b28
 8017e80:	08026920 	.word	0x08026920
 8017e84:	08019449 	.word	0x08019449

08017e88 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b090      	sub	sp, #64	; 0x40
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	4613      	mov	r3, r2
 8017e94:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	3310      	adds	r3, #16
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f00c feeb 	bl	8024c76 <sys_mbox_valid>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d102      	bne.n	8017eac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8017ea6:	f06f 030a 	mvn.w	r3, #10
 8017eaa:	e06d      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	7f1b      	ldrb	r3, [r3, #28]
 8017eb0:	b25b      	sxtb	r3, r3
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	da07      	bge.n	8017ec6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	7f1b      	ldrb	r3, [r3, #28]
 8017eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017ebe:	b2da      	uxtb	r2, r3
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8017ec4:	e039      	b.n	8017f3a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8017ec6:	79fb      	ldrb	r3, [r7, #7]
 8017ec8:	461a      	mov	r2, r3
 8017eca:	68b9      	ldr	r1, [r7, #8]
 8017ecc:	68f8      	ldr	r0, [r7, #12]
 8017ece:	f7ff fee3 	bl	8017c98 <netconn_recv_data>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8017ed8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d002      	beq.n	8017ee6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8017ee0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8017ee4:	e050      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8017ee6:	68bb      	ldr	r3, [r7, #8]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8017eec:	79fb      	ldrb	r3, [r7, #7]
 8017eee:	f003 0308 	and.w	r3, r3, #8
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d10e      	bne.n	8017f14 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8017ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d002      	beq.n	8017f02 <netconn_recv_data_tcp+0x7a>
 8017efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017efe:	891b      	ldrh	r3, [r3, #8]
 8017f00:	e000      	b.n	8017f04 <netconn_recv_data_tcp+0x7c>
 8017f02:	2301      	movs	r3, #1
 8017f04:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8017f06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017f08:	f107 0214 	add.w	r2, r7, #20
 8017f0c:	4619      	mov	r1, r3
 8017f0e:	68f8      	ldr	r0, [r7, #12]
 8017f10:	f7ff ff8a 	bl	8017e28 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8017f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d134      	bne.n	8017f84 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8017f1a:	79fb      	ldrb	r3, [r7, #7]
 8017f1c:	f003 0310 	and.w	r3, r3, #16
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d009      	beq.n	8017f38 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	7f1b      	ldrb	r3, [r3, #28]
 8017f28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017f2c:	b2da      	uxtb	r2, r3
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8017f32:	f06f 0306 	mvn.w	r3, #6
 8017f36:	e027      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8017f38:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d005      	beq.n	8017f4e <netconn_recv_data_tcp+0xc6>
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f46:	2200      	movs	r2, #0
 8017f48:	2101      	movs	r1, #1
 8017f4a:	68f8      	ldr	r0, [r7, #12]
 8017f4c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	685b      	ldr	r3, [r3, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d10f      	bne.n	8017f76 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8017f56:	68f8      	ldr	r0, [r7, #12]
 8017f58:	f000 f9a3 	bl	80182a2 <netconn_err>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8017f62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d002      	beq.n	8017f70 <netconn_recv_data_tcp+0xe8>
          return err;
 8017f6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8017f6e:	e00b      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8017f70:	f06f 030d 	mvn.w	r3, #13
 8017f74:	e008      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8017f76:	2101      	movs	r1, #1
 8017f78:	68f8      	ldr	r0, [r7, #12]
 8017f7a:	f000 f955 	bl	8018228 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8017f7e:	f06f 030e 	mvn.w	r3, #14
 8017f82:	e001      	b.n	8017f88 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8017f84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3740      	adds	r7, #64	; 0x40
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}

08017f90 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8017f9a:	2300      	movs	r3, #0
 8017f9c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d109      	bne.n	8017fb8 <netconn_recv+0x28>
 8017fa4:	4b32      	ldr	r3, [pc, #200]	; (8018070 <netconn_recv+0xe0>)
 8017fa6:	f240 3263 	movw	r2, #867	; 0x363
 8017faa:	4932      	ldr	r1, [pc, #200]	; (8018074 <netconn_recv+0xe4>)
 8017fac:	4832      	ldr	r0, [pc, #200]	; (8018078 <netconn_recv+0xe8>)
 8017fae:	f00d ff9f 	bl	8025ef0 <iprintf>
 8017fb2:	f06f 030f 	mvn.w	r3, #15
 8017fb6:	e056      	b.n	8018066 <netconn_recv+0xd6>
  *new_buf = NULL;
 8017fb8:	683b      	ldr	r3, [r7, #0]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d109      	bne.n	8017fd8 <netconn_recv+0x48>
 8017fc4:	4b2a      	ldr	r3, [pc, #168]	; (8018070 <netconn_recv+0xe0>)
 8017fc6:	f240 3265 	movw	r2, #869	; 0x365
 8017fca:	492c      	ldr	r1, [pc, #176]	; (801807c <netconn_recv+0xec>)
 8017fcc:	482a      	ldr	r0, [pc, #168]	; (8018078 <netconn_recv+0xe8>)
 8017fce:	f00d ff8f 	bl	8025ef0 <iprintf>
 8017fd2:	f06f 030f 	mvn.w	r3, #15
 8017fd6:	e046      	b.n	8018066 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	781b      	ldrb	r3, [r3, #0]
 8017fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fe0:	2b10      	cmp	r3, #16
 8017fe2:	d13a      	bne.n	801805a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017fe8:	2006      	movs	r0, #6
 8017fea:	f002 fc4f 	bl	801a88c <memp_malloc>
 8017fee:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8017ff0:	697b      	ldr	r3, [r7, #20]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d102      	bne.n	8017ffc <netconn_recv+0x6c>
      return ERR_MEM;
 8017ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8017ffa:	e034      	b.n	8018066 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8017ffc:	f107 030c 	add.w	r3, r7, #12
 8018000:	2200      	movs	r2, #0
 8018002:	4619      	mov	r1, r3
 8018004:	6878      	ldr	r0, [r7, #4]
 8018006:	f7ff ff3f 	bl	8017e88 <netconn_recv_data_tcp>
 801800a:	4603      	mov	r3, r0
 801800c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801800e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d006      	beq.n	8018024 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8018016:	6979      	ldr	r1, [r7, #20]
 8018018:	2006      	movs	r0, #6
 801801a:	f002 fc89 	bl	801a930 <memp_free>
      return err;
 801801e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018022:	e020      	b.n	8018066 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d106      	bne.n	8018038 <netconn_recv+0xa8>
 801802a:	4b11      	ldr	r3, [pc, #68]	; (8018070 <netconn_recv+0xe0>)
 801802c:	f240 3279 	movw	r2, #889	; 0x379
 8018030:	4913      	ldr	r1, [pc, #76]	; (8018080 <netconn_recv+0xf0>)
 8018032:	4811      	ldr	r0, [pc, #68]	; (8018078 <netconn_recv+0xe8>)
 8018034:	f00d ff5c 	bl	8025ef0 <iprintf>

    buf->p = p;
 8018038:	68fa      	ldr	r2, [r7, #12]
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801803e:	68fa      	ldr	r2, [r7, #12]
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8018044:	697b      	ldr	r3, [r7, #20]
 8018046:	2200      	movs	r2, #0
 8018048:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	2200      	movs	r2, #0
 801804e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8018050:	683b      	ldr	r3, [r7, #0]
 8018052:	697a      	ldr	r2, [r7, #20]
 8018054:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8018056:	2300      	movs	r3, #0
 8018058:	e005      	b.n	8018066 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801805a:	2200      	movs	r2, #0
 801805c:	6839      	ldr	r1, [r7, #0]
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7ff fe1a 	bl	8017c98 <netconn_recv_data>
 8018064:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8018066:	4618      	mov	r0, r3
 8018068:	3718      	adds	r7, #24
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}
 801806e:	bf00      	nop
 8018070:	080268c8 	.word	0x080268c8
 8018074:	08026ae0 	.word	0x08026ae0
 8018078:	08026920 	.word	0x08026920
 801807c:	08026b00 	.word	0x08026b00
 8018080:	08026b78 	.word	0x08026b78

08018084 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b088      	sub	sp, #32
 8018088:	af02      	add	r7, sp, #8
 801808a:	60f8      	str	r0, [r7, #12]
 801808c:	60b9      	str	r1, [r7, #8]
 801808e:	607a      	str	r2, [r7, #4]
 8018090:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8018092:	68bb      	ldr	r3, [r7, #8]
 8018094:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 801809a:	78fa      	ldrb	r2, [r7, #3]
 801809c:	f107 0110 	add.w	r1, r7, #16
 80180a0:	6a3b      	ldr	r3, [r7, #32]
 80180a2:	9300      	str	r3, [sp, #0]
 80180a4:	4613      	mov	r3, r2
 80180a6:	2201      	movs	r2, #1
 80180a8:	68f8      	ldr	r0, [r7, #12]
 80180aa:	f000 f805 	bl	80180b8 <netconn_write_vectors_partly>
 80180ae:	4603      	mov	r3, r0
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	3718      	adds	r7, #24
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b092      	sub	sp, #72	; 0x48
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	4611      	mov	r1, r2
 80180c4:	461a      	mov	r2, r3
 80180c6:	460b      	mov	r3, r1
 80180c8:	80fb      	strh	r3, [r7, #6]
 80180ca:	4613      	mov	r3, r2
 80180cc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d109      	bne.n	80180e8 <netconn_write_vectors_partly+0x30>
 80180d4:	4b4e      	ldr	r3, [pc, #312]	; (8018210 <netconn_write_vectors_partly+0x158>)
 80180d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80180da:	494e      	ldr	r1, [pc, #312]	; (8018214 <netconn_write_vectors_partly+0x15c>)
 80180dc:	484e      	ldr	r0, [pc, #312]	; (8018218 <netconn_write_vectors_partly+0x160>)
 80180de:	f00d ff07 	bl	8025ef0 <iprintf>
 80180e2:	f06f 030f 	mvn.w	r3, #15
 80180e6:	e08e      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	781b      	ldrb	r3, [r3, #0]
 80180ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180f0:	2b10      	cmp	r3, #16
 80180f2:	d009      	beq.n	8018108 <netconn_write_vectors_partly+0x50>
 80180f4:	4b46      	ldr	r3, [pc, #280]	; (8018210 <netconn_write_vectors_partly+0x158>)
 80180f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80180fa:	4948      	ldr	r1, [pc, #288]	; (801821c <netconn_write_vectors_partly+0x164>)
 80180fc:	4846      	ldr	r0, [pc, #280]	; (8018218 <netconn_write_vectors_partly+0x160>)
 80180fe:	f00d fef7 	bl	8025ef0 <iprintf>
 8018102:	f06f 0305 	mvn.w	r3, #5
 8018106:	e07e      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	7f1b      	ldrb	r3, [r3, #28]
 801810c:	f003 0302 	and.w	r3, r3, #2
 8018110:	2b00      	cmp	r3, #0
 8018112:	d104      	bne.n	801811e <netconn_write_vectors_partly+0x66>
 8018114:	797b      	ldrb	r3, [r7, #5]
 8018116:	f003 0304 	and.w	r3, r3, #4
 801811a:	2b00      	cmp	r3, #0
 801811c:	d001      	beq.n	8018122 <netconn_write_vectors_partly+0x6a>
 801811e:	2301      	movs	r3, #1
 8018120:	e000      	b.n	8018124 <netconn_write_vectors_partly+0x6c>
 8018122:	2300      	movs	r3, #0
 8018124:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8018128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801812c:	2b00      	cmp	r3, #0
 801812e:	d005      	beq.n	801813c <netconn_write_vectors_partly+0x84>
 8018130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018132:	2b00      	cmp	r3, #0
 8018134:	d102      	bne.n	801813c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8018136:	f06f 0305 	mvn.w	r3, #5
 801813a:	e064      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 801813c:	2300      	movs	r3, #0
 801813e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8018140:	2300      	movs	r3, #0
 8018142:	643b      	str	r3, [r7, #64]	; 0x40
 8018144:	e015      	b.n	8018172 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8018146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018148:	00db      	lsls	r3, r3, #3
 801814a:	68ba      	ldr	r2, [r7, #8]
 801814c:	4413      	add	r3, r2
 801814e:	685b      	ldr	r3, [r3, #4]
 8018150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018152:	4413      	add	r3, r2
 8018154:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8018156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018158:	00db      	lsls	r3, r3, #3
 801815a:	68ba      	ldr	r2, [r7, #8]
 801815c:	4413      	add	r3, r2
 801815e:	685b      	ldr	r3, [r3, #4]
 8018160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018162:	429a      	cmp	r2, r3
 8018164:	d202      	bcs.n	801816c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8018166:	f06f 0305 	mvn.w	r3, #5
 801816a:	e04c      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 801816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801816e:	3301      	adds	r3, #1
 8018170:	643b      	str	r3, [r7, #64]	; 0x40
 8018172:	88fb      	ldrh	r3, [r7, #6]
 8018174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018176:	429a      	cmp	r2, r3
 8018178:	dbe5      	blt.n	8018146 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 801817a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801817c:	2b00      	cmp	r3, #0
 801817e:	d101      	bne.n	8018184 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8018180:	2300      	movs	r3, #0
 8018182:	e040      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8018184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018186:	2b00      	cmp	r3, #0
 8018188:	da0a      	bge.n	80181a0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 801818a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801818c:	2b00      	cmp	r3, #0
 801818e:	d102      	bne.n	8018196 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8018190:	f06f 0305 	mvn.w	r3, #5
 8018194:	e037      	b.n	8018206 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8018196:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801819a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 801819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801819e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80181a4:	68bb      	ldr	r3, [r7, #8]
 80181a6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80181a8:	88fb      	ldrh	r3, [r7, #6]
 80181aa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80181ac:	2300      	movs	r3, #0
 80181ae:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80181b0:	797b      	ldrb	r3, [r7, #5]
 80181b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80181b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80181ba:	2300      	movs	r3, #0
 80181bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80181be:	f107 0314 	add.w	r3, r7, #20
 80181c2:	4619      	mov	r1, r3
 80181c4:	4816      	ldr	r0, [pc, #88]	; (8018220 <netconn_write_vectors_partly+0x168>)
 80181c6:	f7ff fb9f 	bl	8017908 <netconn_apimsg>
 80181ca:	4603      	mov	r3, r0
 80181cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80181d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d114      	bne.n	8018202 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80181d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d002      	beq.n	80181e4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80181de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181e2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80181e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d10a      	bne.n	8018202 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80181ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80181f0:	429a      	cmp	r2, r3
 80181f2:	d006      	beq.n	8018202 <netconn_write_vectors_partly+0x14a>
 80181f4:	4b06      	ldr	r3, [pc, #24]	; (8018210 <netconn_write_vectors_partly+0x158>)
 80181f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80181fa:	490a      	ldr	r1, [pc, #40]	; (8018224 <netconn_write_vectors_partly+0x16c>)
 80181fc:	4806      	ldr	r0, [pc, #24]	; (8018218 <netconn_write_vectors_partly+0x160>)
 80181fe:	f00d fe77 	bl	8025ef0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8018202:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8018206:	4618      	mov	r0, r3
 8018208:	3748      	adds	r7, #72	; 0x48
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	080268c8 	.word	0x080268c8
 8018214:	08026ba0 	.word	0x08026ba0
 8018218:	08026920 	.word	0x08026920
 801821c:	08026bbc 	.word	0x08026bbc
 8018220:	0801984d 	.word	0x0801984d
 8018224:	08026be0 	.word	0x08026be0

08018228 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b08c      	sub	sp, #48	; 0x30
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	460b      	mov	r3, r1
 8018232:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d109      	bne.n	801824e <netconn_close_shutdown+0x26>
 801823a:	4b0f      	ldr	r3, [pc, #60]	; (8018278 <netconn_close_shutdown+0x50>)
 801823c:	f240 4247 	movw	r2, #1095	; 0x447
 8018240:	490e      	ldr	r1, [pc, #56]	; (801827c <netconn_close_shutdown+0x54>)
 8018242:	480f      	ldr	r0, [pc, #60]	; (8018280 <netconn_close_shutdown+0x58>)
 8018244:	f00d fe54 	bl	8025ef0 <iprintf>
 8018248:	f06f 030f 	mvn.w	r3, #15
 801824c:	e010      	b.n	8018270 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8018252:	78fb      	ldrb	r3, [r7, #3]
 8018254:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8018256:	2329      	movs	r3, #41	; 0x29
 8018258:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801825a:	f107 030c 	add.w	r3, r7, #12
 801825e:	4619      	mov	r1, r3
 8018260:	4808      	ldr	r0, [pc, #32]	; (8018284 <netconn_close_shutdown+0x5c>)
 8018262:	f7ff fb51 	bl	8017908 <netconn_apimsg>
 8018266:	4603      	mov	r3, r0
 8018268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801826c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8018270:	4618      	mov	r0, r3
 8018272:	3730      	adds	r7, #48	; 0x30
 8018274:	46bd      	mov	sp, r7
 8018276:	bd80      	pop	{r7, pc}
 8018278:	080268c8 	.word	0x080268c8
 801827c:	08026c04 	.word	0x08026c04
 8018280:	08026920 	.word	0x08026920
 8018284:	08019965 	.word	0x08019965

08018288 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b082      	sub	sp, #8
 801828c:	af00      	add	r7, sp, #0
 801828e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8018290:	2103      	movs	r1, #3
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f7ff ffc8 	bl	8018228 <netconn_close_shutdown>
 8018298:	4603      	mov	r3, r0
}
 801829a:	4618      	mov	r0, r3
 801829c:	3708      	adds	r7, #8
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}

080182a2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80182a2:	b580      	push	{r7, lr}
 80182a4:	b084      	sub	sp, #16
 80182a6:	af00      	add	r7, sp, #0
 80182a8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d101      	bne.n	80182b4 <netconn_err+0x12>
    return ERR_OK;
 80182b0:	2300      	movs	r3, #0
 80182b2:	e00d      	b.n	80182d0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80182b4:	f00c fdfa 	bl	8024eac <sys_arch_protect>
 80182b8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	7a1b      	ldrb	r3, [r3, #8]
 80182be:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2200      	movs	r2, #0
 80182c4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80182c6:	68f8      	ldr	r0, [r7, #12]
 80182c8:	f00c fdfe 	bl	8024ec8 <sys_arch_unprotect>
  return err;
 80182cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80182d0:	4618      	mov	r0, r3
 80182d2:	3710      	adds	r7, #16
 80182d4:	46bd      	mov	sp, r7
 80182d6:	bd80      	pop	{r7, pc}

080182d8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b082      	sub	sp, #8
 80182dc:	af00      	add	r7, sp, #0
 80182de:	4603      	mov	r3, r0
 80182e0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80182e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80182e6:	f113 0f0d 	cmn.w	r3, #13
 80182ea:	d009      	beq.n	8018300 <lwip_netconn_err_to_msg+0x28>
 80182ec:	f113 0f0d 	cmn.w	r3, #13
 80182f0:	dc0c      	bgt.n	801830c <lwip_netconn_err_to_msg+0x34>
 80182f2:	f113 0f0f 	cmn.w	r3, #15
 80182f6:	d007      	beq.n	8018308 <lwip_netconn_err_to_msg+0x30>
 80182f8:	f113 0f0e 	cmn.w	r3, #14
 80182fc:	d002      	beq.n	8018304 <lwip_netconn_err_to_msg+0x2c>
 80182fe:	e005      	b.n	801830c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8018300:	4b0a      	ldr	r3, [pc, #40]	; (801832c <lwip_netconn_err_to_msg+0x54>)
 8018302:	e00e      	b.n	8018322 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8018304:	4b0a      	ldr	r3, [pc, #40]	; (8018330 <lwip_netconn_err_to_msg+0x58>)
 8018306:	e00c      	b.n	8018322 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8018308:	4b0a      	ldr	r3, [pc, #40]	; (8018334 <lwip_netconn_err_to_msg+0x5c>)
 801830a:	e00a      	b.n	8018322 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801830c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018310:	2b00      	cmp	r3, #0
 8018312:	d005      	beq.n	8018320 <lwip_netconn_err_to_msg+0x48>
 8018314:	4b08      	ldr	r3, [pc, #32]	; (8018338 <lwip_netconn_err_to_msg+0x60>)
 8018316:	227d      	movs	r2, #125	; 0x7d
 8018318:	4908      	ldr	r1, [pc, #32]	; (801833c <lwip_netconn_err_to_msg+0x64>)
 801831a:	4809      	ldr	r0, [pc, #36]	; (8018340 <lwip_netconn_err_to_msg+0x68>)
 801831c:	f00d fde8 	bl	8025ef0 <iprintf>
      return NULL;
 8018320:	2300      	movs	r3, #0
  }
}
 8018322:	4618      	mov	r0, r3
 8018324:	3708      	adds	r7, #8
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
 801832a:	bf00      	nop
 801832c:	0802b884 	.word	0x0802b884
 8018330:	0802b885 	.word	0x0802b885
 8018334:	0802b886 	.word	0x0802b886
 8018338:	08026c20 	.word	0x08026c20
 801833c:	08026c54 	.word	0x08026c54
 8018340:	08026c64 	.word	0x08026c64

08018344 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d105      	bne.n	8018360 <lwip_netconn_is_err_msg+0x1c>
 8018354:	4b12      	ldr	r3, [pc, #72]	; (80183a0 <lwip_netconn_is_err_msg+0x5c>)
 8018356:	2285      	movs	r2, #133	; 0x85
 8018358:	4912      	ldr	r1, [pc, #72]	; (80183a4 <lwip_netconn_is_err_msg+0x60>)
 801835a:	4813      	ldr	r0, [pc, #76]	; (80183a8 <lwip_netconn_is_err_msg+0x64>)
 801835c:	f00d fdc8 	bl	8025ef0 <iprintf>

  if (msg == &netconn_aborted) {
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	4a12      	ldr	r2, [pc, #72]	; (80183ac <lwip_netconn_is_err_msg+0x68>)
 8018364:	4293      	cmp	r3, r2
 8018366:	d104      	bne.n	8018372 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8018368:	683b      	ldr	r3, [r7, #0]
 801836a:	22f3      	movs	r2, #243	; 0xf3
 801836c:	701a      	strb	r2, [r3, #0]
    return 1;
 801836e:	2301      	movs	r3, #1
 8018370:	e012      	b.n	8018398 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	4a0e      	ldr	r2, [pc, #56]	; (80183b0 <lwip_netconn_is_err_msg+0x6c>)
 8018376:	4293      	cmp	r3, r2
 8018378:	d104      	bne.n	8018384 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801837a:	683b      	ldr	r3, [r7, #0]
 801837c:	22f2      	movs	r2, #242	; 0xf2
 801837e:	701a      	strb	r2, [r3, #0]
    return 1;
 8018380:	2301      	movs	r3, #1
 8018382:	e009      	b.n	8018398 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	4a0b      	ldr	r2, [pc, #44]	; (80183b4 <lwip_netconn_is_err_msg+0x70>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d104      	bne.n	8018396 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	22f1      	movs	r2, #241	; 0xf1
 8018390:	701a      	strb	r2, [r3, #0]
    return 1;
 8018392:	2301      	movs	r3, #1
 8018394:	e000      	b.n	8018398 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8018396:	2300      	movs	r3, #0
}
 8018398:	4618      	mov	r0, r3
 801839a:	3708      	adds	r7, #8
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}
 80183a0:	08026c20 	.word	0x08026c20
 80183a4:	08026c8c 	.word	0x08026c8c
 80183a8:	08026c64 	.word	0x08026c64
 80183ac:	0802b884 	.word	0x0802b884
 80183b0:	0802b885 	.word	0x0802b885
 80183b4:	0802b886 	.word	0x0802b886

080183b8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b088      	sub	sp, #32
 80183bc:	af00      	add	r7, sp, #0
 80183be:	60f8      	str	r0, [r7, #12]
 80183c0:	60b9      	str	r1, [r7, #8]
 80183c2:	607a      	str	r2, [r7, #4]
 80183c4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d105      	bne.n	80183d8 <recv_udp+0x20>
 80183cc:	4b34      	ldr	r3, [pc, #208]	; (80184a0 <recv_udp+0xe8>)
 80183ce:	22e5      	movs	r2, #229	; 0xe5
 80183d0:	4934      	ldr	r1, [pc, #208]	; (80184a4 <recv_udp+0xec>)
 80183d2:	4835      	ldr	r0, [pc, #212]	; (80184a8 <recv_udp+0xf0>)
 80183d4:	f00d fd8c 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d105      	bne.n	80183ea <recv_udp+0x32>
 80183de:	4b30      	ldr	r3, [pc, #192]	; (80184a0 <recv_udp+0xe8>)
 80183e0:	22e6      	movs	r2, #230	; 0xe6
 80183e2:	4932      	ldr	r1, [pc, #200]	; (80184ac <recv_udp+0xf4>)
 80183e4:	4830      	ldr	r0, [pc, #192]	; (80184a8 <recv_udp+0xf0>)
 80183e6:	f00d fd83 	bl	8025ef0 <iprintf>
  conn = (struct netconn *)arg;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80183ee:	69fb      	ldr	r3, [r7, #28]
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d103      	bne.n	80183fc <recv_udp+0x44>
    pbuf_free(p);
 80183f4:	6878      	ldr	r0, [r7, #4]
 80183f6:	f003 f93f 	bl	801b678 <pbuf_free>
    return;
 80183fa:	e04d      	b.n	8018498 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80183fc:	69fb      	ldr	r3, [r7, #28]
 80183fe:	685b      	ldr	r3, [r3, #4]
 8018400:	68ba      	ldr	r2, [r7, #8]
 8018402:	429a      	cmp	r2, r3
 8018404:	d005      	beq.n	8018412 <recv_udp+0x5a>
 8018406:	4b26      	ldr	r3, [pc, #152]	; (80184a0 <recv_udp+0xe8>)
 8018408:	22ee      	movs	r2, #238	; 0xee
 801840a:	4929      	ldr	r1, [pc, #164]	; (80184b0 <recv_udp+0xf8>)
 801840c:	4826      	ldr	r0, [pc, #152]	; (80184a8 <recv_udp+0xf0>)
 801840e:	f00d fd6f 	bl	8025ef0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8018412:	69fb      	ldr	r3, [r7, #28]
 8018414:	3310      	adds	r3, #16
 8018416:	4618      	mov	r0, r3
 8018418:	f00c fc2d 	bl	8024c76 <sys_mbox_valid>
 801841c:	4603      	mov	r3, r0
 801841e:	2b00      	cmp	r3, #0
 8018420:	d103      	bne.n	801842a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f003 f928 	bl	801b678 <pbuf_free>
    return;
 8018428:	e036      	b.n	8018498 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801842a:	2006      	movs	r0, #6
 801842c:	f002 fa2e 	bl	801a88c <memp_malloc>
 8018430:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d103      	bne.n	8018440 <recv_udp+0x88>
    pbuf_free(p);
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f003 f91d 	bl	801b678 <pbuf_free>
    return;
 801843e:	e02b      	b.n	8018498 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8018440:	69bb      	ldr	r3, [r7, #24]
 8018442:	687a      	ldr	r2, [r7, #4]
 8018444:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8018446:	69bb      	ldr	r3, [r7, #24]
 8018448:	687a      	ldr	r2, [r7, #4]
 801844a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d002      	beq.n	8018458 <recv_udp+0xa0>
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	e000      	b.n	801845a <recv_udp+0xa2>
 8018458:	2300      	movs	r3, #0
 801845a:	69ba      	ldr	r2, [r7, #24]
 801845c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801845e:	69bb      	ldr	r3, [r7, #24]
 8018460:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8018462:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	891b      	ldrh	r3, [r3, #8]
 8018468:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801846a:	69fb      	ldr	r3, [r7, #28]
 801846c:	3310      	adds	r3, #16
 801846e:	69b9      	ldr	r1, [r7, #24]
 8018470:	4618      	mov	r0, r3
 8018472:	f00c fb8b 	bl	8024b8c <sys_mbox_trypost>
 8018476:	4603      	mov	r3, r0
 8018478:	2b00      	cmp	r3, #0
 801847a:	d003      	beq.n	8018484 <recv_udp+0xcc>
    netbuf_delete(buf);
 801847c:	69b8      	ldr	r0, [r7, #24]
 801847e:	f001 fafd 	bl	8019a7c <netbuf_delete>
    return;
 8018482:	e009      	b.n	8018498 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018488:	2b00      	cmp	r3, #0
 801848a:	d005      	beq.n	8018498 <recv_udp+0xe0>
 801848c:	69fb      	ldr	r3, [r7, #28]
 801848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018490:	8afa      	ldrh	r2, [r7, #22]
 8018492:	2100      	movs	r1, #0
 8018494:	69f8      	ldr	r0, [r7, #28]
 8018496:	4798      	blx	r3
  }
}
 8018498:	3720      	adds	r7, #32
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}
 801849e:	bf00      	nop
 80184a0:	08026c20 	.word	0x08026c20
 80184a4:	08026c98 	.word	0x08026c98
 80184a8:	08026c64 	.word	0x08026c64
 80184ac:	08026cbc 	.word	0x08026cbc
 80184b0:	08026cdc 	.word	0x08026cdc

080184b4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b088      	sub	sp, #32
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
 80184c0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d106      	bne.n	80184d6 <recv_tcp+0x22>
 80184c8:	4b36      	ldr	r3, [pc, #216]	; (80185a4 <recv_tcp+0xf0>)
 80184ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80184ce:	4936      	ldr	r1, [pc, #216]	; (80185a8 <recv_tcp+0xf4>)
 80184d0:	4836      	ldr	r0, [pc, #216]	; (80185ac <recv_tcp+0xf8>)
 80184d2:	f00d fd0d 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d106      	bne.n	80184ea <recv_tcp+0x36>
 80184dc:	4b31      	ldr	r3, [pc, #196]	; (80185a4 <recv_tcp+0xf0>)
 80184de:	f240 122d 	movw	r2, #301	; 0x12d
 80184e2:	4933      	ldr	r1, [pc, #204]	; (80185b0 <recv_tcp+0xfc>)
 80184e4:	4831      	ldr	r0, [pc, #196]	; (80185ac <recv_tcp+0xf8>)
 80184e6:	f00d fd03 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80184ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d006      	beq.n	8018500 <recv_tcp+0x4c>
 80184f2:	4b2c      	ldr	r3, [pc, #176]	; (80185a4 <recv_tcp+0xf0>)
 80184f4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80184f8:	492e      	ldr	r1, [pc, #184]	; (80185b4 <recv_tcp+0x100>)
 80184fa:	482c      	ldr	r0, [pc, #176]	; (80185ac <recv_tcp+0xf8>)
 80184fc:	f00d fcf8 	bl	8025ef0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8018504:	697b      	ldr	r3, [r7, #20]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d102      	bne.n	8018510 <recv_tcp+0x5c>
    return ERR_VAL;
 801850a:	f06f 0305 	mvn.w	r3, #5
 801850e:	e045      	b.n	801859c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8018510:	697b      	ldr	r3, [r7, #20]
 8018512:	685b      	ldr	r3, [r3, #4]
 8018514:	68ba      	ldr	r2, [r7, #8]
 8018516:	429a      	cmp	r2, r3
 8018518:	d006      	beq.n	8018528 <recv_tcp+0x74>
 801851a:	4b22      	ldr	r3, [pc, #136]	; (80185a4 <recv_tcp+0xf0>)
 801851c:	f240 1235 	movw	r2, #309	; 0x135
 8018520:	4925      	ldr	r1, [pc, #148]	; (80185b8 <recv_tcp+0x104>)
 8018522:	4822      	ldr	r0, [pc, #136]	; (80185ac <recv_tcp+0xf8>)
 8018524:	f00d fce4 	bl	8025ef0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	3310      	adds	r3, #16
 801852c:	4618      	mov	r0, r3
 801852e:	f00c fba2 	bl	8024c76 <sys_mbox_valid>
 8018532:	4603      	mov	r3, r0
 8018534:	2b00      	cmp	r3, #0
 8018536:	d10d      	bne.n	8018554 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2b00      	cmp	r3, #0
 801853c:	d008      	beq.n	8018550 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	891b      	ldrh	r3, [r3, #8]
 8018542:	4619      	mov	r1, r3
 8018544:	68b8      	ldr	r0, [r7, #8]
 8018546:	f004 f84f 	bl	801c5e8 <tcp_recved>
      pbuf_free(p);
 801854a:	6878      	ldr	r0, [r7, #4]
 801854c:	f003 f894 	bl	801b678 <pbuf_free>
    }
    return ERR_OK;
 8018550:	2300      	movs	r3, #0
 8018552:	e023      	b.n	801859c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d005      	beq.n	8018566 <recv_tcp+0xb2>
    msg = p;
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	891b      	ldrh	r3, [r3, #8]
 8018562:	83fb      	strh	r3, [r7, #30]
 8018564:	e003      	b.n	801856e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8018566:	4b15      	ldr	r3, [pc, #84]	; (80185bc <recv_tcp+0x108>)
 8018568:	61bb      	str	r3, [r7, #24]
    len = 0;
 801856a:	2300      	movs	r3, #0
 801856c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	3310      	adds	r3, #16
 8018572:	69b9      	ldr	r1, [r7, #24]
 8018574:	4618      	mov	r0, r3
 8018576:	f00c fb09 	bl	8024b8c <sys_mbox_trypost>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	d002      	beq.n	8018586 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8018580:	f04f 33ff 	mov.w	r3, #4294967295
 8018584:	e00a      	b.n	801859c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801858a:	2b00      	cmp	r3, #0
 801858c:	d005      	beq.n	801859a <recv_tcp+0xe6>
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018592:	8bfa      	ldrh	r2, [r7, #30]
 8018594:	2100      	movs	r1, #0
 8018596:	6978      	ldr	r0, [r7, #20]
 8018598:	4798      	blx	r3
  }

  return ERR_OK;
 801859a:	2300      	movs	r3, #0
}
 801859c:	4618      	mov	r0, r3
 801859e:	3720      	adds	r7, #32
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	08026c20 	.word	0x08026c20
 80185a8:	08026cfc 	.word	0x08026cfc
 80185ac:	08026c64 	.word	0x08026c64
 80185b0:	08026d20 	.word	0x08026d20
 80185b4:	08026d40 	.word	0x08026d40
 80185b8:	08026d58 	.word	0x08026d58
 80185bc:	0802b886 	.word	0x0802b886

080185c0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b084      	sub	sp, #16
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d106      	bne.n	80185e2 <poll_tcp+0x22>
 80185d4:	4b29      	ldr	r3, [pc, #164]	; (801867c <poll_tcp+0xbc>)
 80185d6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80185da:	4929      	ldr	r1, [pc, #164]	; (8018680 <poll_tcp+0xc0>)
 80185dc:	4829      	ldr	r0, [pc, #164]	; (8018684 <poll_tcp+0xc4>)
 80185de:	f00d fc87 	bl	8025ef0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	785b      	ldrb	r3, [r3, #1]
 80185e6:	2b01      	cmp	r3, #1
 80185e8:	d104      	bne.n	80185f4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80185ea:	2101      	movs	r1, #1
 80185ec:	68f8      	ldr	r0, [r7, #12]
 80185ee:	f000 ff61 	bl	80194b4 <lwip_netconn_do_writemore>
 80185f2:	e016      	b.n	8018622 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	785b      	ldrb	r3, [r3, #1]
 80185f8:	2b04      	cmp	r3, #4
 80185fa:	d112      	bne.n	8018622 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	6a1b      	ldr	r3, [r3, #32]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d00a      	beq.n	801861a <poll_tcp+0x5a>
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	6a1b      	ldr	r3, [r3, #32]
 8018608:	7a5b      	ldrb	r3, [r3, #9]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d005      	beq.n	801861a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	6a1b      	ldr	r3, [r3, #32]
 8018612:	7a5a      	ldrb	r2, [r3, #9]
 8018614:	3a01      	subs	r2, #1
 8018616:	b2d2      	uxtb	r2, r2
 8018618:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801861a:	2101      	movs	r1, #1
 801861c:	68f8      	ldr	r0, [r7, #12]
 801861e:	f000 fbf7 	bl	8018e10 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	7f1b      	ldrb	r3, [r3, #28]
 8018626:	f003 0310 	and.w	r3, r3, #16
 801862a:	2b00      	cmp	r3, #0
 801862c:	d021      	beq.n	8018672 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	685b      	ldr	r3, [r3, #4]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d01d      	beq.n	8018672 <poll_tcp+0xb2>
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801863e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8018642:	d316      	bcc.n	8018672 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	685b      	ldr	r3, [r3, #4]
 8018648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801864c:	2b04      	cmp	r3, #4
 801864e:	d810      	bhi.n	8018672 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	7f1b      	ldrb	r3, [r3, #28]
 8018654:	f023 0310 	bic.w	r3, r3, #16
 8018658:	b2da      	uxtb	r2, r3
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018662:	2b00      	cmp	r3, #0
 8018664:	d005      	beq.n	8018672 <poll_tcp+0xb2>
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801866a:	2200      	movs	r2, #0
 801866c:	2102      	movs	r1, #2
 801866e:	68f8      	ldr	r0, [r7, #12]
 8018670:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8018672:	2300      	movs	r3, #0
}
 8018674:	4618      	mov	r0, r3
 8018676:	3710      	adds	r7, #16
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}
 801867c:	08026c20 	.word	0x08026c20
 8018680:	08026d78 	.word	0x08026d78
 8018684:	08026c64 	.word	0x08026c64

08018688 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b086      	sub	sp, #24
 801868c:	af00      	add	r7, sp, #0
 801868e:	60f8      	str	r0, [r7, #12]
 8018690:	60b9      	str	r1, [r7, #8]
 8018692:	4613      	mov	r3, r2
 8018694:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8018696:	68fb      	ldr	r3, [r7, #12]
 8018698:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d106      	bne.n	80186ae <sent_tcp+0x26>
 80186a0:	4b20      	ldr	r3, [pc, #128]	; (8018724 <sent_tcp+0x9c>)
 80186a2:	f240 1293 	movw	r2, #403	; 0x193
 80186a6:	4920      	ldr	r1, [pc, #128]	; (8018728 <sent_tcp+0xa0>)
 80186a8:	4820      	ldr	r0, [pc, #128]	; (801872c <sent_tcp+0xa4>)
 80186aa:	f00d fc21 	bl	8025ef0 <iprintf>

  if (conn) {
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d032      	beq.n	801871a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80186b4:	697b      	ldr	r3, [r7, #20]
 80186b6:	785b      	ldrb	r3, [r3, #1]
 80186b8:	2b01      	cmp	r3, #1
 80186ba:	d104      	bne.n	80186c6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80186bc:	2101      	movs	r1, #1
 80186be:	6978      	ldr	r0, [r7, #20]
 80186c0:	f000 fef8 	bl	80194b4 <lwip_netconn_do_writemore>
 80186c4:	e007      	b.n	80186d6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80186c6:	697b      	ldr	r3, [r7, #20]
 80186c8:	785b      	ldrb	r3, [r3, #1]
 80186ca:	2b04      	cmp	r3, #4
 80186cc:	d103      	bne.n	80186d6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80186ce:	2101      	movs	r1, #1
 80186d0:	6978      	ldr	r0, [r7, #20]
 80186d2:	f000 fb9d 	bl	8018e10 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d01d      	beq.n	801871a <sent_tcp+0x92>
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80186e6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80186ea:	d316      	bcc.n	801871a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80186ec:	697b      	ldr	r3, [r7, #20]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80186f4:	2b04      	cmp	r3, #4
 80186f6:	d810      	bhi.n	801871a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80186f8:	697b      	ldr	r3, [r7, #20]
 80186fa:	7f1b      	ldrb	r3, [r3, #28]
 80186fc:	f023 0310 	bic.w	r3, r3, #16
 8018700:	b2da      	uxtb	r2, r3
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8018706:	697b      	ldr	r3, [r7, #20]
 8018708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801870a:	2b00      	cmp	r3, #0
 801870c:	d005      	beq.n	801871a <sent_tcp+0x92>
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018712:	88fa      	ldrh	r2, [r7, #6]
 8018714:	2102      	movs	r1, #2
 8018716:	6978      	ldr	r0, [r7, #20]
 8018718:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801871a:	2300      	movs	r3, #0
}
 801871c:	4618      	mov	r0, r3
 801871e:	3718      	adds	r7, #24
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}
 8018724:	08026c20 	.word	0x08026c20
 8018728:	08026d78 	.word	0x08026d78
 801872c:	08026c64 	.word	0x08026c64

08018730 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b088      	sub	sp, #32
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
 8018738:	460b      	mov	r3, r1
 801873a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d106      	bne.n	8018754 <err_tcp+0x24>
 8018746:	4b5f      	ldr	r3, [pc, #380]	; (80188c4 <err_tcp+0x194>)
 8018748:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801874c:	495e      	ldr	r1, [pc, #376]	; (80188c8 <err_tcp+0x198>)
 801874e:	485f      	ldr	r0, [pc, #380]	; (80188cc <err_tcp+0x19c>)
 8018750:	f00d fbce 	bl	8025ef0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8018754:	f00c fbaa 	bl	8024eac <sys_arch_protect>
 8018758:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801875a:	69fb      	ldr	r3, [r7, #28]
 801875c:	2200      	movs	r2, #0
 801875e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8018760:	69fb      	ldr	r3, [r7, #28]
 8018762:	78fa      	ldrb	r2, [r7, #3]
 8018764:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	7f1b      	ldrb	r3, [r3, #28]
 801876a:	f043 0301 	orr.w	r3, r3, #1
 801876e:	b2da      	uxtb	r2, r3
 8018770:	69fb      	ldr	r3, [r7, #28]
 8018772:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8018774:	69fb      	ldr	r3, [r7, #28]
 8018776:	785b      	ldrb	r3, [r3, #1]
 8018778:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801877a:	69fb      	ldr	r3, [r7, #28]
 801877c:	2200      	movs	r2, #0
 801877e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8018780:	69b8      	ldr	r0, [r7, #24]
 8018782:	f00c fba1 	bl	8024ec8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8018786:	69fb      	ldr	r3, [r7, #28]
 8018788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878a:	2b00      	cmp	r3, #0
 801878c:	d005      	beq.n	801879a <err_tcp+0x6a>
 801878e:	69fb      	ldr	r3, [r7, #28]
 8018790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018792:	2200      	movs	r2, #0
 8018794:	2104      	movs	r1, #4
 8018796:	69f8      	ldr	r0, [r7, #28]
 8018798:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801879a:	69fb      	ldr	r3, [r7, #28]
 801879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d005      	beq.n	80187ae <err_tcp+0x7e>
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a6:	2200      	movs	r2, #0
 80187a8:	2100      	movs	r1, #0
 80187aa:	69f8      	ldr	r0, [r7, #28]
 80187ac:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80187ae:	69fb      	ldr	r3, [r7, #28]
 80187b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d005      	beq.n	80187c2 <err_tcp+0x92>
 80187b6:	69fb      	ldr	r3, [r7, #28]
 80187b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ba:	2200      	movs	r2, #0
 80187bc:	2102      	movs	r1, #2
 80187be:	69f8      	ldr	r0, [r7, #28]
 80187c0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80187c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7ff fd86 	bl	80182d8 <lwip_netconn_err_to_msg>
 80187cc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	3310      	adds	r3, #16
 80187d2:	4618      	mov	r0, r3
 80187d4:	f00c fa4f 	bl	8024c76 <sys_mbox_valid>
 80187d8:	4603      	mov	r3, r0
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d005      	beq.n	80187ea <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80187de:	69fb      	ldr	r3, [r7, #28]
 80187e0:	3310      	adds	r3, #16
 80187e2:	6939      	ldr	r1, [r7, #16]
 80187e4:	4618      	mov	r0, r3
 80187e6:	f00c f9d1 	bl	8024b8c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80187ea:	69fb      	ldr	r3, [r7, #28]
 80187ec:	3314      	adds	r3, #20
 80187ee:	4618      	mov	r0, r3
 80187f0:	f00c fa41 	bl	8024c76 <sys_mbox_valid>
 80187f4:	4603      	mov	r3, r0
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d005      	beq.n	8018806 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80187fa:	69fb      	ldr	r3, [r7, #28]
 80187fc:	3314      	adds	r3, #20
 80187fe:	6939      	ldr	r1, [r7, #16]
 8018800:	4618      	mov	r0, r3
 8018802:	f00c f9c3 	bl	8024b8c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8018806:	7dfb      	ldrb	r3, [r7, #23]
 8018808:	2b01      	cmp	r3, #1
 801880a:	d005      	beq.n	8018818 <err_tcp+0xe8>
 801880c:	7dfb      	ldrb	r3, [r7, #23]
 801880e:	2b04      	cmp	r3, #4
 8018810:	d002      	beq.n	8018818 <err_tcp+0xe8>
 8018812:	7dfb      	ldrb	r3, [r7, #23]
 8018814:	2b03      	cmp	r3, #3
 8018816:	d143      	bne.n	80188a0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8018818:	69fb      	ldr	r3, [r7, #28]
 801881a:	7f1b      	ldrb	r3, [r3, #28]
 801881c:	f003 0304 	and.w	r3, r3, #4
 8018820:	2b00      	cmp	r3, #0
 8018822:	bf14      	ite	ne
 8018824:	2301      	movne	r3, #1
 8018826:	2300      	moveq	r3, #0
 8018828:	b2db      	uxtb	r3, r3
 801882a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801882c:	69fb      	ldr	r3, [r7, #28]
 801882e:	7f1b      	ldrb	r3, [r3, #28]
 8018830:	f023 0304 	bic.w	r3, r3, #4
 8018834:	b2da      	uxtb	r2, r3
 8018836:	69fb      	ldr	r3, [r7, #28]
 8018838:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	2b00      	cmp	r3, #0
 801883e:	d13b      	bne.n	80188b8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8018840:	69fb      	ldr	r3, [r7, #28]
 8018842:	6a1b      	ldr	r3, [r3, #32]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d106      	bne.n	8018856 <err_tcp+0x126>
 8018848:	4b1e      	ldr	r3, [pc, #120]	; (80188c4 <err_tcp+0x194>)
 801884a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801884e:	4920      	ldr	r1, [pc, #128]	; (80188d0 <err_tcp+0x1a0>)
 8018850:	481e      	ldr	r0, [pc, #120]	; (80188cc <err_tcp+0x19c>)
 8018852:	f00d fb4d 	bl	8025ef0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8018856:	7dfb      	ldrb	r3, [r7, #23]
 8018858:	2b04      	cmp	r3, #4
 801885a:	d104      	bne.n	8018866 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801885c:	69fb      	ldr	r3, [r7, #28]
 801885e:	6a1b      	ldr	r3, [r3, #32]
 8018860:	2200      	movs	r2, #0
 8018862:	711a      	strb	r2, [r3, #4]
 8018864:	e003      	b.n	801886e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	6a1b      	ldr	r3, [r3, #32]
 801886a:	78fa      	ldrb	r2, [r7, #3]
 801886c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801886e:	69fb      	ldr	r3, [r7, #28]
 8018870:	6a1b      	ldr	r3, [r3, #32]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	330c      	adds	r3, #12
 8018876:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8018878:	68b8      	ldr	r0, [r7, #8]
 801887a:	f00c fa8d 	bl	8024d98 <sys_sem_valid>
 801887e:	4603      	mov	r3, r0
 8018880:	2b00      	cmp	r3, #0
 8018882:	d106      	bne.n	8018892 <err_tcp+0x162>
 8018884:	4b0f      	ldr	r3, [pc, #60]	; (80188c4 <err_tcp+0x194>)
 8018886:	f240 12ef 	movw	r2, #495	; 0x1ef
 801888a:	4912      	ldr	r1, [pc, #72]	; (80188d4 <err_tcp+0x1a4>)
 801888c:	480f      	ldr	r0, [pc, #60]	; (80188cc <err_tcp+0x19c>)
 801888e:	f00d fb2f 	bl	8025ef0 <iprintf>
      conn->current_msg = NULL;
 8018892:	69fb      	ldr	r3, [r7, #28]
 8018894:	2200      	movs	r2, #0
 8018896:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8018898:	68b8      	ldr	r0, [r7, #8]
 801889a:	f00c fa63 	bl	8024d64 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801889e:	e00b      	b.n	80188b8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	6a1b      	ldr	r3, [r3, #32]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d008      	beq.n	80188ba <err_tcp+0x18a>
 80188a8:	4b06      	ldr	r3, [pc, #24]	; (80188c4 <err_tcp+0x194>)
 80188aa:	f240 12f7 	movw	r2, #503	; 0x1f7
 80188ae:	490a      	ldr	r1, [pc, #40]	; (80188d8 <err_tcp+0x1a8>)
 80188b0:	4806      	ldr	r0, [pc, #24]	; (80188cc <err_tcp+0x19c>)
 80188b2:	f00d fb1d 	bl	8025ef0 <iprintf>
  }
}
 80188b6:	e000      	b.n	80188ba <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80188b8:	bf00      	nop
}
 80188ba:	bf00      	nop
 80188bc:	3720      	adds	r7, #32
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
 80188c2:	bf00      	nop
 80188c4:	08026c20 	.word	0x08026c20
 80188c8:	08026d78 	.word	0x08026d78
 80188cc:	08026c64 	.word	0x08026c64
 80188d0:	08026d88 	.word	0x08026d88
 80188d4:	08026da4 	.word	0x08026da4
 80188d8:	08026dc0 	.word	0x08026dc0

080188dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b084      	sub	sp, #16
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	685b      	ldr	r3, [r3, #4]
 80188e8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80188ea:	6879      	ldr	r1, [r7, #4]
 80188ec:	68f8      	ldr	r0, [r7, #12]
 80188ee:	f004 fd41 	bl	801d374 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80188f2:	490a      	ldr	r1, [pc, #40]	; (801891c <setup_tcp+0x40>)
 80188f4:	68f8      	ldr	r0, [r7, #12]
 80188f6:	f004 fd4f 	bl	801d398 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80188fa:	4909      	ldr	r1, [pc, #36]	; (8018920 <setup_tcp+0x44>)
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f004 fd6d 	bl	801d3dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8018902:	2202      	movs	r2, #2
 8018904:	4907      	ldr	r1, [pc, #28]	; (8018924 <setup_tcp+0x48>)
 8018906:	68f8      	ldr	r0, [r7, #12]
 8018908:	f004 fdc4 	bl	801d494 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801890c:	4906      	ldr	r1, [pc, #24]	; (8018928 <setup_tcp+0x4c>)
 801890e:	68f8      	ldr	r0, [r7, #12]
 8018910:	f004 fd86 	bl	801d420 <tcp_err>
}
 8018914:	bf00      	nop
 8018916:	3710      	adds	r7, #16
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	080184b5 	.word	0x080184b5
 8018920:	08018689 	.word	0x08018689
 8018924:	080185c1 	.word	0x080185c1
 8018928:	08018731 	.word	0x08018731

0801892c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 801892c:	b590      	push	{r4, r7, lr}
 801892e:	b089      	sub	sp, #36	; 0x24
 8018930:	af00      	add	r7, sp, #0
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	4613      	mov	r3, r2
 8018938:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 801893a:	68fb      	ldr	r3, [r7, #12]
 801893c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801893e:	69fb      	ldr	r3, [r7, #28]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d102      	bne.n	801894a <accept_function+0x1e>
    return ERR_VAL;
 8018944:	f06f 0305 	mvn.w	r3, #5
 8018948:	e0a1      	b.n	8018a8e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801894a:	69fb      	ldr	r3, [r7, #28]
 801894c:	3314      	adds	r3, #20
 801894e:	4618      	mov	r0, r3
 8018950:	f00c f991 	bl	8024c76 <sys_mbox_valid>
 8018954:	4603      	mov	r3, r0
 8018956:	2b00      	cmp	r3, #0
 8018958:	d102      	bne.n	8018960 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 801895a:	f06f 0305 	mvn.w	r3, #5
 801895e:	e096      	b.n	8018a8e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8018960:	68bb      	ldr	r3, [r7, #8]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d11b      	bne.n	801899e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8018966:	69fb      	ldr	r3, [r7, #28]
 8018968:	f103 0414 	add.w	r4, r3, #20
 801896c:	f06f 000c 	mvn.w	r0, #12
 8018970:	f7ff fcb2 	bl	80182d8 <lwip_netconn_err_to_msg>
 8018974:	4603      	mov	r3, r0
 8018976:	4619      	mov	r1, r3
 8018978:	4620      	mov	r0, r4
 801897a:	f00c f907 	bl	8024b8c <sys_mbox_trypost>
 801897e:	4603      	mov	r3, r0
 8018980:	2b00      	cmp	r3, #0
 8018982:	d109      	bne.n	8018998 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018988:	2b00      	cmp	r3, #0
 801898a:	d005      	beq.n	8018998 <accept_function+0x6c>
 801898c:	69fb      	ldr	r3, [r7, #28]
 801898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018990:	2200      	movs	r2, #0
 8018992:	2100      	movs	r1, #0
 8018994:	69f8      	ldr	r0, [r7, #28]
 8018996:	4798      	blx	r3
    }
    return ERR_VAL;
 8018998:	f06f 0305 	mvn.w	r3, #5
 801899c:	e077      	b.n	8018a8e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 801899e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d006      	beq.n	80189b4 <accept_function+0x88>
 80189a6:	4b3c      	ldr	r3, [pc, #240]	; (8018a98 <accept_function+0x16c>)
 80189a8:	f240 222a 	movw	r2, #554	; 0x22a
 80189ac:	493b      	ldr	r1, [pc, #236]	; (8018a9c <accept_function+0x170>)
 80189ae:	483c      	ldr	r0, [pc, #240]	; (8018aa0 <accept_function+0x174>)
 80189b0:	f00d fa9e 	bl	8025ef0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80189b4:	69fb      	ldr	r3, [r7, #28]
 80189b6:	781a      	ldrb	r2, [r3, #0]
 80189b8:	69fb      	ldr	r3, [r7, #28]
 80189ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189bc:	4619      	mov	r1, r3
 80189be:	4610      	mov	r0, r2
 80189c0:	f000 f8f0 	bl	8018ba4 <netconn_alloc>
 80189c4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80189c6:	69bb      	ldr	r3, [r7, #24]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d11b      	bne.n	8018a04 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	f103 0414 	add.w	r4, r3, #20
 80189d2:	f06f 000c 	mvn.w	r0, #12
 80189d6:	f7ff fc7f 	bl	80182d8 <lwip_netconn_err_to_msg>
 80189da:	4603      	mov	r3, r0
 80189dc:	4619      	mov	r1, r3
 80189de:	4620      	mov	r0, r4
 80189e0:	f00c f8d4 	bl	8024b8c <sys_mbox_trypost>
 80189e4:	4603      	mov	r3, r0
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d109      	bne.n	80189fe <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80189ea:	69fb      	ldr	r3, [r7, #28]
 80189ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d005      	beq.n	80189fe <accept_function+0xd2>
 80189f2:	69fb      	ldr	r3, [r7, #28]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f6:	2200      	movs	r2, #0
 80189f8:	2100      	movs	r1, #0
 80189fa:	69f8      	ldr	r0, [r7, #28]
 80189fc:	4798      	blx	r3
    }
    return ERR_MEM;
 80189fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018a02:	e044      	b.n	8018a8e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8018a04:	69bb      	ldr	r3, [r7, #24]
 8018a06:	68ba      	ldr	r2, [r7, #8]
 8018a08:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8018a0a:	69b8      	ldr	r0, [r7, #24]
 8018a0c:	f7ff ff66 	bl	80188dc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8018a10:	69fb      	ldr	r3, [r7, #28]
 8018a12:	3314      	adds	r3, #20
 8018a14:	69b9      	ldr	r1, [r7, #24]
 8018a16:	4618      	mov	r0, r3
 8018a18:	f00c f8b8 	bl	8024b8c <sys_mbox_trypost>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d02a      	beq.n	8018a78 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8018a22:	69bb      	ldr	r3, [r7, #24]
 8018a24:	685b      	ldr	r3, [r3, #4]
 8018a26:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8018a28:	2100      	movs	r1, #0
 8018a2a:	6978      	ldr	r0, [r7, #20]
 8018a2c:	f004 fca2 	bl	801d374 <tcp_arg>
    tcp_recv(pcb, NULL);
 8018a30:	2100      	movs	r1, #0
 8018a32:	6978      	ldr	r0, [r7, #20]
 8018a34:	f004 fcb0 	bl	801d398 <tcp_recv>
    tcp_sent(pcb, NULL);
 8018a38:	2100      	movs	r1, #0
 8018a3a:	6978      	ldr	r0, [r7, #20]
 8018a3c:	f004 fcce 	bl	801d3dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8018a40:	2200      	movs	r2, #0
 8018a42:	2100      	movs	r1, #0
 8018a44:	6978      	ldr	r0, [r7, #20]
 8018a46:	f004 fd25 	bl	801d494 <tcp_poll>
    tcp_err(pcb, NULL);
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	6978      	ldr	r0, [r7, #20]
 8018a4e:	f004 fce7 	bl	801d420 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8018a52:	69bb      	ldr	r3, [r7, #24]
 8018a54:	2200      	movs	r2, #0
 8018a56:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8018a58:	69bb      	ldr	r3, [r7, #24]
 8018a5a:	3310      	adds	r3, #16
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f00c f883 	bl	8024b68 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8018a62:	69bb      	ldr	r3, [r7, #24]
 8018a64:	3310      	adds	r3, #16
 8018a66:	4618      	mov	r0, r3
 8018a68:	f00c f916 	bl	8024c98 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8018a6c:	69b8      	ldr	r0, [r7, #24]
 8018a6e:	f000 f907 	bl	8018c80 <netconn_free>
    return ERR_MEM;
 8018a72:	f04f 33ff 	mov.w	r3, #4294967295
 8018a76:	e00a      	b.n	8018a8e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8018a78:	69fb      	ldr	r3, [r7, #28]
 8018a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d005      	beq.n	8018a8c <accept_function+0x160>
 8018a80:	69fb      	ldr	r3, [r7, #28]
 8018a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a84:	2200      	movs	r2, #0
 8018a86:	2100      	movs	r1, #0
 8018a88:	69f8      	ldr	r0, [r7, #28]
 8018a8a:	4798      	blx	r3
  }

  return ERR_OK;
 8018a8c:	2300      	movs	r3, #0
}
 8018a8e:	4618      	mov	r0, r3
 8018a90:	3724      	adds	r7, #36	; 0x24
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd90      	pop	{r4, r7, pc}
 8018a96:	bf00      	nop
 8018a98:	08026c20 	.word	0x08026c20
 8018a9c:	08026ddc 	.word	0x08026ddc
 8018aa0:	08026c64 	.word	0x08026c64

08018aa4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8018aa4:	b590      	push	{r4, r7, lr}
 8018aa6:	b085      	sub	sp, #20
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8018aac:	2300      	movs	r3, #0
 8018aae:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	685b      	ldr	r3, [r3, #4]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d006      	beq.n	8018ac8 <pcb_new+0x24>
 8018aba:	4b2b      	ldr	r3, [pc, #172]	; (8018b68 <pcb_new+0xc4>)
 8018abc:	f240 2265 	movw	r2, #613	; 0x265
 8018ac0:	492a      	ldr	r1, [pc, #168]	; (8018b6c <pcb_new+0xc8>)
 8018ac2:	482b      	ldr	r0, [pc, #172]	; (8018b70 <pcb_new+0xcc>)
 8018ac4:	f00d fa14 	bl	8025ef0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	781b      	ldrb	r3, [r3, #0]
 8018ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ad2:	2b10      	cmp	r3, #16
 8018ad4:	d022      	beq.n	8018b1c <pcb_new+0x78>
 8018ad6:	2b20      	cmp	r3, #32
 8018ad8:	d133      	bne.n	8018b42 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681c      	ldr	r4, [r3, #0]
 8018ade:	7bfb      	ldrb	r3, [r7, #15]
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f009 fd22 	bl	802252a <udp_new_ip_type>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	685b      	ldr	r3, [r3, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d02a      	beq.n	8018b4a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	781b      	ldrb	r3, [r3, #0]
 8018afa:	2b22      	cmp	r3, #34	; 0x22
 8018afc:	d104      	bne.n	8018b08 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	2201      	movs	r2, #1
 8018b06:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	6858      	ldr	r0, [r3, #4]
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	461a      	mov	r2, r3
 8018b14:	4917      	ldr	r1, [pc, #92]	; (8018b74 <pcb_new+0xd0>)
 8018b16:	f009 fc8f 	bl	8022438 <udp_recv>
      }
      break;
 8018b1a:	e016      	b.n	8018b4a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681c      	ldr	r4, [r3, #0]
 8018b20:	7bfb      	ldrb	r3, [r7, #15]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f004 fc18 	bl	801d358 <tcp_new_ip_type>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	685b      	ldr	r3, [r3, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d00b      	beq.n	8018b4e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f7ff fece 	bl	80188dc <setup_tcp>
      }
      break;
 8018b40:	e005      	b.n	8018b4e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	22fa      	movs	r2, #250	; 0xfa
 8018b46:	711a      	strb	r2, [r3, #4]
      return;
 8018b48:	e00a      	b.n	8018b60 <pcb_new+0xbc>
      break;
 8018b4a:	bf00      	nop
 8018b4c:	e000      	b.n	8018b50 <pcb_new+0xac>
      break;
 8018b4e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	685b      	ldr	r3, [r3, #4]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d102      	bne.n	8018b60 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	22ff      	movs	r2, #255	; 0xff
 8018b5e:	711a      	strb	r2, [r3, #4]
  }
}
 8018b60:	3714      	adds	r7, #20
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd90      	pop	{r4, r7, pc}
 8018b66:	bf00      	nop
 8018b68:	08026c20 	.word	0x08026c20
 8018b6c:	08026e04 	.word	0x08026e04
 8018b70:	08026c64 	.word	0x08026c64
 8018b74:	080183b9 	.word	0x080183b9

08018b78 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2200      	movs	r2, #0
 8018b88:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d102      	bne.n	8018b9a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8018b94:	68f8      	ldr	r0, [r7, #12]
 8018b96:	f7ff ff85 	bl	8018aa4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8018b9a:	bf00      	nop
 8018b9c:	3710      	adds	r7, #16
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
	...

08018ba4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b086      	sub	sp, #24
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	4603      	mov	r3, r0
 8018bac:	6039      	str	r1, [r7, #0]
 8018bae:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8018bb4:	2007      	movs	r0, #7
 8018bb6:	f001 fe69 	bl	801a88c <memp_malloc>
 8018bba:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d101      	bne.n	8018bc6 <netconn_alloc+0x22>
    return NULL;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	e052      	b.n	8018c6c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	2200      	movs	r2, #0
 8018bca:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	79fa      	ldrb	r2, [r7, #7]
 8018bd0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	2200      	movs	r2, #0
 8018bd6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8018bd8:	79fb      	ldrb	r3, [r7, #7]
 8018bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018bde:	2b10      	cmp	r3, #16
 8018be0:	d004      	beq.n	8018bec <netconn_alloc+0x48>
 8018be2:	2b20      	cmp	r3, #32
 8018be4:	d105      	bne.n	8018bf2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8018be6:	2306      	movs	r3, #6
 8018be8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8018bea:	e00a      	b.n	8018c02 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8018bec:	2306      	movs	r3, #6
 8018bee:	617b      	str	r3, [r7, #20]
      break;
 8018bf0:	e007      	b.n	8018c02 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8018bf2:	4b20      	ldr	r3, [pc, #128]	; (8018c74 <netconn_alloc+0xd0>)
 8018bf4:	f240 22e5 	movw	r2, #741	; 0x2e5
 8018bf8:	491f      	ldr	r1, [pc, #124]	; (8018c78 <netconn_alloc+0xd4>)
 8018bfa:	4820      	ldr	r0, [pc, #128]	; (8018c7c <netconn_alloc+0xd8>)
 8018bfc:	f00d f978 	bl	8025ef0 <iprintf>
      goto free_and_return;
 8018c00:	e02f      	b.n	8018c62 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8018c02:	68fb      	ldr	r3, [r7, #12]
 8018c04:	3310      	adds	r3, #16
 8018c06:	6979      	ldr	r1, [r7, #20]
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f00b ff8b 	bl	8024b24 <sys_mbox_new>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d125      	bne.n	8018c60 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	330c      	adds	r3, #12
 8018c18:	2100      	movs	r1, #0
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	f00c f849 	bl	8024cb2 <sys_sem_new>
 8018c20:	4603      	mov	r3, r0
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d005      	beq.n	8018c32 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	3310      	adds	r3, #16
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f00b ff9c 	bl	8024b68 <sys_mbox_free>
    goto free_and_return;
 8018c30:	e017      	b.n	8018c62 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	3314      	adds	r3, #20
 8018c36:	4618      	mov	r0, r3
 8018c38:	f00c f82e 	bl	8024c98 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	2200      	movs	r2, #0
 8018c40:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	f04f 32ff 	mov.w	r2, #4294967295
 8018c48:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	683a      	ldr	r2, [r7, #0]
 8018c4e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2200      	movs	r2, #0
 8018c54:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	7cfa      	ldrb	r2, [r7, #19]
 8018c5a:	771a      	strb	r2, [r3, #28]
  return conn;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	e005      	b.n	8018c6c <netconn_alloc+0xc8>
    goto free_and_return;
 8018c60:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8018c62:	68f9      	ldr	r1, [r7, #12]
 8018c64:	2007      	movs	r0, #7
 8018c66:	f001 fe63 	bl	801a930 <memp_free>
  return NULL;
 8018c6a:	2300      	movs	r3, #0
}
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	3718      	adds	r7, #24
 8018c70:	46bd      	mov	sp, r7
 8018c72:	bd80      	pop	{r7, pc}
 8018c74:	08026c20 	.word	0x08026c20
 8018c78:	08026e24 	.word	0x08026e24
 8018c7c:	08026c64 	.word	0x08026c64

08018c80 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d006      	beq.n	8018c9e <netconn_free+0x1e>
 8018c90:	4b1b      	ldr	r3, [pc, #108]	; (8018d00 <netconn_free+0x80>)
 8018c92:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018c96:	491b      	ldr	r1, [pc, #108]	; (8018d04 <netconn_free+0x84>)
 8018c98:	481b      	ldr	r0, [pc, #108]	; (8018d08 <netconn_free+0x88>)
 8018c9a:	f00d f929 	bl	8025ef0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	3310      	adds	r3, #16
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f00b ffe7 	bl	8024c76 <sys_mbox_valid>
 8018ca8:	4603      	mov	r3, r0
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d006      	beq.n	8018cbc <netconn_free+0x3c>
 8018cae:	4b14      	ldr	r3, [pc, #80]	; (8018d00 <netconn_free+0x80>)
 8018cb0:	f240 3223 	movw	r2, #803	; 0x323
 8018cb4:	4915      	ldr	r1, [pc, #84]	; (8018d0c <netconn_free+0x8c>)
 8018cb6:	4814      	ldr	r0, [pc, #80]	; (8018d08 <netconn_free+0x88>)
 8018cb8:	f00d f91a 	bl	8025ef0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	3314      	adds	r3, #20
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f00b ffd8 	bl	8024c76 <sys_mbox_valid>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d006      	beq.n	8018cda <netconn_free+0x5a>
 8018ccc:	4b0c      	ldr	r3, [pc, #48]	; (8018d00 <netconn_free+0x80>)
 8018cce:	f240 3226 	movw	r2, #806	; 0x326
 8018cd2:	490f      	ldr	r1, [pc, #60]	; (8018d10 <netconn_free+0x90>)
 8018cd4:	480c      	ldr	r0, [pc, #48]	; (8018d08 <netconn_free+0x88>)
 8018cd6:	f00d f90b 	bl	8025ef0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	330c      	adds	r3, #12
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f00c f84d 	bl	8024d7e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	330c      	adds	r3, #12
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f00c f866 	bl	8024dba <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8018cee:	6879      	ldr	r1, [r7, #4]
 8018cf0:	2007      	movs	r0, #7
 8018cf2:	f001 fe1d 	bl	801a930 <memp_free>
}
 8018cf6:	bf00      	nop
 8018cf8:	3708      	adds	r7, #8
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}
 8018cfe:	bf00      	nop
 8018d00:	08026c20 	.word	0x08026c20
 8018d04:	08026e4c 	.word	0x08026e4c
 8018d08:	08026c64 	.word	0x08026c64
 8018d0c:	08026e7c 	.word	0x08026e7c
 8018d10:	08026eb8 	.word	0x08026eb8

08018d14 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b086      	sub	sp, #24
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	3310      	adds	r3, #16
 8018d20:	4618      	mov	r0, r3
 8018d22:	f00b ffa8 	bl	8024c76 <sys_mbox_valid>
 8018d26:	4603      	mov	r3, r0
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d02f      	beq.n	8018d8c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018d2c:	e018      	b.n	8018d60 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	781b      	ldrb	r3, [r3, #0]
 8018d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018d36:	2b10      	cmp	r3, #16
 8018d38:	d10e      	bne.n	8018d58 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8018d3a:	693b      	ldr	r3, [r7, #16]
 8018d3c:	f107 020f 	add.w	r2, r7, #15
 8018d40:	4611      	mov	r1, r2
 8018d42:	4618      	mov	r0, r3
 8018d44:	f7ff fafe 	bl	8018344 <lwip_netconn_is_err_msg>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d108      	bne.n	8018d60 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	4618      	mov	r0, r3
 8018d52:	f002 fc91 	bl	801b678 <pbuf_free>
 8018d56:	e003      	b.n	8018d60 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	4618      	mov	r0, r3
 8018d5c:	f000 fe8e 	bl	8019a7c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	3310      	adds	r3, #16
 8018d64:	f107 0210 	add.w	r2, r7, #16
 8018d68:	4611      	mov	r1, r2
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	f00b ff67 	bl	8024c3e <sys_arch_mbox_tryfetch>
 8018d70:	4603      	mov	r3, r0
 8018d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d76:	d1da      	bne.n	8018d2e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	3310      	adds	r3, #16
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f00b fef3 	bl	8024b68 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	3310      	adds	r3, #16
 8018d86:	4618      	mov	r0, r3
 8018d88:	f00b ff86 	bl	8024c98 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	3314      	adds	r3, #20
 8018d90:	4618      	mov	r0, r3
 8018d92:	f00b ff70 	bl	8024c76 <sys_mbox_valid>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d034      	beq.n	8018e06 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8018d9c:	e01d      	b.n	8018dda <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	f107 020e 	add.w	r2, r7, #14
 8018da4:	4611      	mov	r1, r2
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7ff facc 	bl	8018344 <lwip_netconn_is_err_msg>
 8018dac:	4603      	mov	r3, r0
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d113      	bne.n	8018dda <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8018db2:	693b      	ldr	r3, [r7, #16]
 8018db4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8018db6:	6978      	ldr	r0, [r7, #20]
 8018db8:	f7ff ffac 	bl	8018d14 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d007      	beq.n	8018dd4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f003 fa45 	bl	801c258 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8018dd4:	6978      	ldr	r0, [r7, #20]
 8018dd6:	f7ff ff53 	bl	8018c80 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	3314      	adds	r3, #20
 8018dde:	f107 0210 	add.w	r2, r7, #16
 8018de2:	4611      	mov	r1, r2
 8018de4:	4618      	mov	r0, r3
 8018de6:	f00b ff2a 	bl	8024c3e <sys_arch_mbox_tryfetch>
 8018dea:	4603      	mov	r3, r0
 8018dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018df0:	d1d5      	bne.n	8018d9e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	3314      	adds	r3, #20
 8018df6:	4618      	mov	r0, r3
 8018df8:	f00b feb6 	bl	8024b68 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	3314      	adds	r3, #20
 8018e00:	4618      	mov	r0, r3
 8018e02:	f00b ff49 	bl	8024c98 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8018e06:	bf00      	nop
 8018e08:	3718      	adds	r7, #24
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd80      	pop	{r7, pc}
	...

08018e10 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8018e10:	b580      	push	{r7, lr}
 8018e12:	b086      	sub	sp, #24
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	6078      	str	r0, [r7, #4]
 8018e18:	460b      	mov	r3, r1
 8018e1a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d106      	bne.n	8018e34 <lwip_netconn_do_close_internal+0x24>
 8018e26:	4ba1      	ldr	r3, [pc, #644]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8018e28:	f240 32a2 	movw	r2, #930	; 0x3a2
 8018e2c:	49a0      	ldr	r1, [pc, #640]	; (80190b0 <lwip_netconn_do_close_internal+0x2a0>)
 8018e2e:	48a1      	ldr	r0, [pc, #644]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 8018e30:	f00d f85e 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018e3c:	2b10      	cmp	r3, #16
 8018e3e:	d006      	beq.n	8018e4e <lwip_netconn_do_close_internal+0x3e>
 8018e40:	4b9a      	ldr	r3, [pc, #616]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8018e42:	f240 32a3 	movw	r2, #931	; 0x3a3
 8018e46:	499c      	ldr	r1, [pc, #624]	; (80190b8 <lwip_netconn_do_close_internal+0x2a8>)
 8018e48:	489a      	ldr	r0, [pc, #616]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 8018e4a:	f00d f851 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	785b      	ldrb	r3, [r3, #1]
 8018e52:	2b04      	cmp	r3, #4
 8018e54:	d006      	beq.n	8018e64 <lwip_netconn_do_close_internal+0x54>
 8018e56:	4b95      	ldr	r3, [pc, #596]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8018e58:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8018e5c:	4997      	ldr	r1, [pc, #604]	; (80190bc <lwip_netconn_do_close_internal+0x2ac>)
 8018e5e:	4895      	ldr	r0, [pc, #596]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 8018e60:	f00d f846 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	685b      	ldr	r3, [r3, #4]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d106      	bne.n	8018e7a <lwip_netconn_do_close_internal+0x6a>
 8018e6c:	4b8f      	ldr	r3, [pc, #572]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8018e6e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8018e72:	4993      	ldr	r1, [pc, #588]	; (80190c0 <lwip_netconn_do_close_internal+0x2b0>)
 8018e74:	488f      	ldr	r0, [pc, #572]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 8018e76:	f00d f83b 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	6a1b      	ldr	r3, [r3, #32]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d106      	bne.n	8018e90 <lwip_netconn_do_close_internal+0x80>
 8018e82:	4b8a      	ldr	r3, [pc, #552]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8018e84:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018e88:	498e      	ldr	r1, [pc, #568]	; (80190c4 <lwip_netconn_do_close_internal+0x2b4>)
 8018e8a:	488a      	ldr	r0, [pc, #552]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 8018e8c:	f00d f830 	bl	8025ef0 <iprintf>

  tpcb = conn->pcb.tcp;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	685b      	ldr	r3, [r3, #4]
 8018e94:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	6a1b      	ldr	r3, [r3, #32]
 8018e9a:	7a1b      	ldrb	r3, [r3, #8]
 8018e9c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8018e9e:	7bfb      	ldrb	r3, [r7, #15]
 8018ea0:	f003 0301 	and.w	r3, r3, #1
 8018ea4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8018ea6:	7bfb      	ldrb	r3, [r7, #15]
 8018ea8:	f003 0302 	and.w	r3, r3, #2
 8018eac:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8018eae:	7bfb      	ldrb	r3, [r7, #15]
 8018eb0:	2b03      	cmp	r3, #3
 8018eb2:	d102      	bne.n	8018eba <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8018eb4:	2301      	movs	r3, #1
 8018eb6:	75bb      	strb	r3, [r7, #22]
 8018eb8:	e01f      	b.n	8018efa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8018eba:	7bbb      	ldrb	r3, [r7, #14]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d00e      	beq.n	8018ede <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8018ec4:	2b05      	cmp	r3, #5
 8018ec6:	d007      	beq.n	8018ed8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8018ec8:	693b      	ldr	r3, [r7, #16]
 8018eca:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8018ecc:	2b06      	cmp	r3, #6
 8018ece:	d003      	beq.n	8018ed8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8018ed4:	2b08      	cmp	r3, #8
 8018ed6:	d102      	bne.n	8018ede <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8018ed8:	2301      	movs	r3, #1
 8018eda:	75bb      	strb	r3, [r7, #22]
 8018edc:	e00d      	b.n	8018efa <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8018ede:	7b7b      	ldrb	r3, [r7, #13]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d008      	beq.n	8018ef6 <lwip_netconn_do_close_internal+0xe6>
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	8b5b      	ldrh	r3, [r3, #26]
 8018ee8:	f003 0310 	and.w	r3, r3, #16
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d002      	beq.n	8018ef6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8018ef0:	2301      	movs	r3, #1
 8018ef2:	75bb      	strb	r3, [r7, #22]
 8018ef4:	e001      	b.n	8018efa <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8018efa:	7dbb      	ldrb	r3, [r7, #22]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d003      	beq.n	8018f08 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8018f00:	2100      	movs	r1, #0
 8018f02:	6938      	ldr	r0, [r7, #16]
 8018f04:	f004 fa36 	bl	801d374 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	7d1b      	ldrb	r3, [r3, #20]
 8018f0c:	2b01      	cmp	r3, #1
 8018f0e:	d104      	bne.n	8018f1a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8018f10:	2100      	movs	r1, #0
 8018f12:	6938      	ldr	r0, [r7, #16]
 8018f14:	f004 faa6 	bl	801d464 <tcp_accept>
 8018f18:	e01d      	b.n	8018f56 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8018f1a:	7bbb      	ldrb	r3, [r7, #14]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d007      	beq.n	8018f30 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8018f20:	2100      	movs	r1, #0
 8018f22:	6938      	ldr	r0, [r7, #16]
 8018f24:	f004 fa38 	bl	801d398 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8018f28:	2100      	movs	r1, #0
 8018f2a:	6938      	ldr	r0, [r7, #16]
 8018f2c:	f004 fa9a 	bl	801d464 <tcp_accept>
    }
    if (shut_tx) {
 8018f30:	7b7b      	ldrb	r3, [r7, #13]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d003      	beq.n	8018f3e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8018f36:	2100      	movs	r1, #0
 8018f38:	6938      	ldr	r0, [r7, #16]
 8018f3a:	f004 fa4f 	bl	801d3dc <tcp_sent>
    }
    if (shut_close) {
 8018f3e:	7dbb      	ldrb	r3, [r7, #22]
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d008      	beq.n	8018f56 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8018f44:	2200      	movs	r2, #0
 8018f46:	2100      	movs	r1, #0
 8018f48:	6938      	ldr	r0, [r7, #16]
 8018f4a:	f004 faa3 	bl	801d494 <tcp_poll>
      tcp_err(tpcb, NULL);
 8018f4e:	2100      	movs	r1, #0
 8018f50:	6938      	ldr	r0, [r7, #16]
 8018f52:	f004 fa65 	bl	801d420 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8018f56:	7dbb      	ldrb	r3, [r7, #22]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d005      	beq.n	8018f68 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8018f5c:	6938      	ldr	r0, [r7, #16]
 8018f5e:	f003 f835 	bl	801bfcc <tcp_close>
 8018f62:	4603      	mov	r3, r0
 8018f64:	75fb      	strb	r3, [r7, #23]
 8018f66:	e007      	b.n	8018f78 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8018f68:	7bbb      	ldrb	r3, [r7, #14]
 8018f6a:	7b7a      	ldrb	r2, [r7, #13]
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	6938      	ldr	r0, [r7, #16]
 8018f70:	f003 f858 	bl	801c024 <tcp_shutdown>
 8018f74:	4603      	mov	r3, r0
 8018f76:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8018f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d102      	bne.n	8018f86 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8018f80:	2301      	movs	r3, #1
 8018f82:	757b      	strb	r3, [r7, #21]
 8018f84:	e016      	b.n	8018fb4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8018f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f8e:	d10f      	bne.n	8018fb0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6a1b      	ldr	r3, [r3, #32]
 8018f94:	7a5b      	ldrb	r3, [r3, #9]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d10c      	bne.n	8018fb4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8018f9a:	2301      	movs	r3, #1
 8018f9c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8018f9e:	7dbb      	ldrb	r3, [r7, #22]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d007      	beq.n	8018fb4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8018fa4:	6938      	ldr	r0, [r7, #16]
 8018fa6:	f003 f957 	bl	801c258 <tcp_abort>
          err = ERR_OK;
 8018faa:	2300      	movs	r3, #0
 8018fac:	75fb      	strb	r3, [r7, #23]
 8018fae:	e001      	b.n	8018fb4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8018fb0:	2301      	movs	r3, #1
 8018fb2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8018fb4:	7d7b      	ldrb	r3, [r7, #21]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d044      	beq.n	8019044 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6a1b      	ldr	r3, [r3, #32]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	330c      	adds	r3, #12
 8018fc2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	6a1b      	ldr	r3, [r3, #32]
 8018fc8:	7dfa      	ldrb	r2, [r7, #23]
 8018fca:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8018fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d129      	bne.n	8019034 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8018fe0:	7dbb      	ldrb	r3, [r7, #22]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d00c      	beq.n	8019000 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d005      	beq.n	8019000 <lwip_netconn_do_close_internal+0x1f0>
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	2104      	movs	r1, #4
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	4798      	blx	r3
      }
      if (shut_rx) {
 8019000:	7bbb      	ldrb	r3, [r7, #14]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d009      	beq.n	801901a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900a:	2b00      	cmp	r3, #0
 801900c:	d005      	beq.n	801901a <lwip_netconn_do_close_internal+0x20a>
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019012:	2200      	movs	r2, #0
 8019014:	2100      	movs	r1, #0
 8019016:	6878      	ldr	r0, [r7, #4]
 8019018:	4798      	blx	r3
      }
      if (shut_tx) {
 801901a:	7b7b      	ldrb	r3, [r7, #13]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d009      	beq.n	8019034 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019024:	2b00      	cmp	r3, #0
 8019026:	d005      	beq.n	8019034 <lwip_netconn_do_close_internal+0x224>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902c:	2200      	movs	r2, #0
 801902e:	2102      	movs	r1, #2
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8019034:	78fb      	ldrb	r3, [r7, #3]
 8019036:	2b00      	cmp	r3, #0
 8019038:	d002      	beq.n	8019040 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801903a:	68b8      	ldr	r0, [r7, #8]
 801903c:	f00b fe92 	bl	8024d64 <sys_sem_signal>
    }
    return ERR_OK;
 8019040:	2300      	movs	r3, #0
 8019042:	e02e      	b.n	80190a2 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8019044:	7d7b      	ldrb	r3, [r7, #21]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d11e      	bne.n	8019088 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801904a:	693b      	ldr	r3, [r7, #16]
 801904c:	7d1b      	ldrb	r3, [r3, #20]
 801904e:	2b01      	cmp	r3, #1
 8019050:	d106      	bne.n	8019060 <lwip_netconn_do_close_internal+0x250>
 8019052:	4b16      	ldr	r3, [pc, #88]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8019054:	f240 4241 	movw	r2, #1089	; 0x441
 8019058:	491b      	ldr	r1, [pc, #108]	; (80190c8 <lwip_netconn_do_close_internal+0x2b8>)
 801905a:	4816      	ldr	r0, [pc, #88]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 801905c:	f00c ff48 	bl	8025ef0 <iprintf>
    if (shut_tx) {
 8019060:	7b7b      	ldrb	r3, [r7, #13]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d003      	beq.n	801906e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8019066:	4919      	ldr	r1, [pc, #100]	; (80190cc <lwip_netconn_do_close_internal+0x2bc>)
 8019068:	6938      	ldr	r0, [r7, #16]
 801906a:	f004 f9b7 	bl	801d3dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801906e:	2201      	movs	r2, #1
 8019070:	4917      	ldr	r1, [pc, #92]	; (80190d0 <lwip_netconn_do_close_internal+0x2c0>)
 8019072:	6938      	ldr	r0, [r7, #16]
 8019074:	f004 fa0e 	bl	801d494 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8019078:	4916      	ldr	r1, [pc, #88]	; (80190d4 <lwip_netconn_do_close_internal+0x2c4>)
 801907a:	6938      	ldr	r0, [r7, #16]
 801907c:	f004 f9d0 	bl	801d420 <tcp_err>
    tcp_arg(tpcb, conn);
 8019080:	6879      	ldr	r1, [r7, #4]
 8019082:	6938      	ldr	r0, [r7, #16]
 8019084:	f004 f976 	bl	801d374 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8019088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801908c:	2b00      	cmp	r3, #0
 801908e:	d106      	bne.n	801909e <lwip_netconn_do_close_internal+0x28e>
 8019090:	4b06      	ldr	r3, [pc, #24]	; (80190ac <lwip_netconn_do_close_internal+0x29c>)
 8019092:	f240 424d 	movw	r2, #1101	; 0x44d
 8019096:	4910      	ldr	r1, [pc, #64]	; (80190d8 <lwip_netconn_do_close_internal+0x2c8>)
 8019098:	4806      	ldr	r0, [pc, #24]	; (80190b4 <lwip_netconn_do_close_internal+0x2a4>)
 801909a:	f00c ff29 	bl	8025ef0 <iprintf>
  return err;
 801909e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80190a2:	4618      	mov	r0, r3
 80190a4:	3718      	adds	r7, #24
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}
 80190aa:	bf00      	nop
 80190ac:	08026c20 	.word	0x08026c20
 80190b0:	08026ef4 	.word	0x08026ef4
 80190b4:	08026c64 	.word	0x08026c64
 80190b8:	08026f04 	.word	0x08026f04
 80190bc:	08026f24 	.word	0x08026f24
 80190c0:	08026f48 	.word	0x08026f48
 80190c4:	08026d88 	.word	0x08026d88
 80190c8:	08026f5c 	.word	0x08026f5c
 80190cc:	08018689 	.word	0x08018689
 80190d0:	080185c1 	.word	0x080185c1
 80190d4:	08018731 	.word	0x08018731
 80190d8:	08026f80 	.word	0x08026f80

080190dc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	785b      	ldrb	r3, [r3, #1]
 80190ee:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80190f0:	7afb      	ldrb	r3, [r7, #11]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d00d      	beq.n	8019112 <lwip_netconn_do_delconn+0x36>
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	781b      	ldrb	r3, [r3, #0]
 80190fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019100:	2b10      	cmp	r3, #16
 8019102:	d006      	beq.n	8019112 <lwip_netconn_do_delconn+0x36>
 8019104:	4b60      	ldr	r3, [pc, #384]	; (8019288 <lwip_netconn_do_delconn+0x1ac>)
 8019106:	f240 425e 	movw	r2, #1118	; 0x45e
 801910a:	4960      	ldr	r1, [pc, #384]	; (801928c <lwip_netconn_do_delconn+0x1b0>)
 801910c:	4860      	ldr	r0, [pc, #384]	; (8019290 <lwip_netconn_do_delconn+0x1b4>)
 801910e:	f00c feef 	bl	8025ef0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8019112:	7afb      	ldrb	r3, [r7, #11]
 8019114:	2b00      	cmp	r3, #0
 8019116:	d005      	beq.n	8019124 <lwip_netconn_do_delconn+0x48>
 8019118:	7afb      	ldrb	r3, [r7, #11]
 801911a:	2b02      	cmp	r3, #2
 801911c:	d002      	beq.n	8019124 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801911e:	7afb      	ldrb	r3, [r7, #11]
 8019120:	2b03      	cmp	r3, #3
 8019122:	d109      	bne.n	8019138 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8019124:	7afb      	ldrb	r3, [r7, #11]
 8019126:	2b03      	cmp	r3, #3
 8019128:	d10a      	bne.n	8019140 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	7f1b      	ldrb	r3, [r3, #28]
 8019130:	f003 0304 	and.w	r3, r3, #4
 8019134:	2b00      	cmp	r3, #0
 8019136:	d103      	bne.n	8019140 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	22fb      	movs	r2, #251	; 0xfb
 801913c:	711a      	strb	r2, [r3, #4]
 801913e:	e097      	b.n	8019270 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8019140:	7afb      	ldrb	r3, [r7, #11]
 8019142:	2b03      	cmp	r3, #3
 8019144:	d10d      	bne.n	8019162 <lwip_netconn_do_delconn+0x86>
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	7f1b      	ldrb	r3, [r3, #28]
 801914c:	f003 0304 	and.w	r3, r3, #4
 8019150:	2b00      	cmp	r3, #0
 8019152:	d106      	bne.n	8019162 <lwip_netconn_do_delconn+0x86>
 8019154:	4b4c      	ldr	r3, [pc, #304]	; (8019288 <lwip_netconn_do_delconn+0x1ac>)
 8019156:	f240 427a 	movw	r2, #1146	; 0x47a
 801915a:	494e      	ldr	r1, [pc, #312]	; (8019294 <lwip_netconn_do_delconn+0x1b8>)
 801915c:	484c      	ldr	r0, [pc, #304]	; (8019290 <lwip_netconn_do_delconn+0x1b4>)
 801915e:	f00c fec7 	bl	8025ef0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	2200      	movs	r2, #0
 8019166:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	4618      	mov	r0, r3
 801916e:	f7ff fdd1 	bl	8018d14 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d05f      	beq.n	801923c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019186:	2b10      	cmp	r3, #16
 8019188:	d00d      	beq.n	80191a6 <lwip_netconn_do_delconn+0xca>
 801918a:	2b20      	cmp	r3, #32
 801918c:	d151      	bne.n	8019232 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	685b      	ldr	r3, [r3, #4]
 8019194:	2200      	movs	r2, #0
 8019196:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	685b      	ldr	r3, [r3, #4]
 801919e:	4618      	mov	r0, r3
 80191a0:	f009 f96a 	bl	8022478 <udp_remove>
          break;
 80191a4:	e046      	b.n	8019234 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	6a1b      	ldr	r3, [r3, #32]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d006      	beq.n	80191be <lwip_netconn_do_delconn+0xe2>
 80191b0:	4b35      	ldr	r3, [pc, #212]	; (8019288 <lwip_netconn_do_delconn+0x1ac>)
 80191b2:	f240 4294 	movw	r2, #1172	; 0x494
 80191b6:	4938      	ldr	r1, [pc, #224]	; (8019298 <lwip_netconn_do_delconn+0x1bc>)
 80191b8:	4835      	ldr	r0, [pc, #212]	; (8019290 <lwip_netconn_do_delconn+0x1b4>)
 80191ba:	f00c fe99 	bl	8025ef0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	2204      	movs	r2, #4
 80191c4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	2203      	movs	r2, #3
 80191ca:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2100      	movs	r1, #0
 80191da:	4618      	mov	r0, r3
 80191dc:	f7ff fe18 	bl	8018e10 <lwip_netconn_do_close_internal>
 80191e0:	4603      	mov	r3, r0
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d04b      	beq.n	801927e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	785b      	ldrb	r3, [r3, #1]
 80191ec:	2b04      	cmp	r3, #4
 80191ee:	d006      	beq.n	80191fe <lwip_netconn_do_delconn+0x122>
 80191f0:	4b25      	ldr	r3, [pc, #148]	; (8019288 <lwip_netconn_do_delconn+0x1ac>)
 80191f2:	f240 429a 	movw	r2, #1178	; 0x49a
 80191f6:	4929      	ldr	r1, [pc, #164]	; (801929c <lwip_netconn_do_delconn+0x1c0>)
 80191f8:	4825      	ldr	r0, [pc, #148]	; (8019290 <lwip_netconn_do_delconn+0x1b4>)
 80191fa:	f00c fe79 	bl	8025ef0 <iprintf>
            UNLOCK_TCPIP_CORE();
 80191fe:	4828      	ldr	r0, [pc, #160]	; (80192a0 <lwip_netconn_do_delconn+0x1c4>)
 8019200:	f00b fe21 	bl	8024e46 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	681b      	ldr	r3, [r3, #0]
 8019208:	330c      	adds	r3, #12
 801920a:	2100      	movs	r1, #0
 801920c:	4618      	mov	r0, r3
 801920e:	f00b fd78 	bl	8024d02 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8019212:	4823      	ldr	r0, [pc, #140]	; (80192a0 <lwip_netconn_do_delconn+0x1c4>)
 8019214:	f00b fe08 	bl	8024e28 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	785b      	ldrb	r3, [r3, #1]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d02d      	beq.n	801927e <lwip_netconn_do_delconn+0x1a2>
 8019222:	4b19      	ldr	r3, [pc, #100]	; (8019288 <lwip_netconn_do_delconn+0x1ac>)
 8019224:	f240 429e 	movw	r2, #1182	; 0x49e
 8019228:	491c      	ldr	r1, [pc, #112]	; (801929c <lwip_netconn_do_delconn+0x1c0>)
 801922a:	4819      	ldr	r0, [pc, #100]	; (8019290 <lwip_netconn_do_delconn+0x1b4>)
 801922c:	f00c fe60 	bl	8025ef0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8019230:	e025      	b.n	801927e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8019232:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8019234:	68fb      	ldr	r3, [r7, #12]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	2200      	movs	r2, #0
 801923a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019242:	2b00      	cmp	r3, #0
 8019244:	d007      	beq.n	8019256 <lwip_netconn_do_delconn+0x17a>
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801924c:	68fa      	ldr	r2, [r7, #12]
 801924e:	6810      	ldr	r0, [r2, #0]
 8019250:	2200      	movs	r2, #0
 8019252:	2100      	movs	r1, #0
 8019254:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801925c:	2b00      	cmp	r3, #0
 801925e:	d007      	beq.n	8019270 <lwip_netconn_do_delconn+0x194>
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019266:	68fa      	ldr	r2, [r7, #12]
 8019268:	6810      	ldr	r0, [r2, #0]
 801926a:	2200      	movs	r2, #0
 801926c:	2102      	movs	r1, #2
 801926e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	330c      	adds	r3, #12
 8019276:	4618      	mov	r0, r3
 8019278:	f00b fd8e 	bl	8024d98 <sys_sem_valid>
 801927c:	e000      	b.n	8019280 <lwip_netconn_do_delconn+0x1a4>
          return;
 801927e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	08026c20 	.word	0x08026c20
 801928c:	08026f90 	.word	0x08026f90
 8019290:	08026c64 	.word	0x08026c64
 8019294:	08026fa4 	.word	0x08026fa4
 8019298:	08026fc4 	.word	0x08026fc4
 801929c:	08026fe0 	.word	0x08026fe0
 80192a0:	2000cb9c 	.word	0x2000cb9c

080192a4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b084      	sub	sp, #16
 80192a8:	af00      	add	r7, sp, #0
 80192aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80192b0:	68bb      	ldr	r3, [r7, #8]
 80192b2:	681b      	ldr	r3, [r3, #0]
 80192b4:	685b      	ldr	r3, [r3, #4]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d025      	beq.n	8019306 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80192ba:	68bb      	ldr	r3, [r7, #8]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	781b      	ldrb	r3, [r3, #0]
 80192c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80192c4:	2b10      	cmp	r3, #16
 80192c6:	d00e      	beq.n	80192e6 <lwip_netconn_do_bind+0x42>
 80192c8:	2b20      	cmp	r3, #32
 80192ca:	d119      	bne.n	8019300 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80192cc:	68bb      	ldr	r3, [r7, #8]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	6858      	ldr	r0, [r3, #4]
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	6899      	ldr	r1, [r3, #8]
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	899b      	ldrh	r3, [r3, #12]
 80192da:	461a      	mov	r2, r3
 80192dc:	f009 f824 	bl	8022328 <udp_bind>
 80192e0:	4603      	mov	r3, r0
 80192e2:	73fb      	strb	r3, [r7, #15]
        break;
 80192e4:	e011      	b.n	801930a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	6858      	ldr	r0, [r3, #4]
 80192ec:	68bb      	ldr	r3, [r7, #8]
 80192ee:	6899      	ldr	r1, [r3, #8]
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	899b      	ldrh	r3, [r3, #12]
 80192f4:	461a      	mov	r2, r3
 80192f6:	f002 ffbb 	bl	801c270 <tcp_bind>
 80192fa:	4603      	mov	r3, r0
 80192fc:	73fb      	strb	r3, [r7, #15]
        break;
 80192fe:	e004      	b.n	801930a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8019300:	23fa      	movs	r3, #250	; 0xfa
 8019302:	73fb      	strb	r3, [r7, #15]
        break;
 8019304:	e001      	b.n	801930a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8019306:	23fa      	movs	r3, #250	; 0xfa
 8019308:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801930a:	68bb      	ldr	r3, [r7, #8]
 801930c:	7bfa      	ldrb	r2, [r7, #15]
 801930e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8019310:	bf00      	nop
 8019312:	3710      	adds	r7, #16
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8019324:	697b      	ldr	r3, [r7, #20]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	685b      	ldr	r3, [r3, #4]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d07f      	beq.n	801942e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801932e:	697b      	ldr	r3, [r7, #20]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	781b      	ldrb	r3, [r3, #0]
 8019334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019338:	2b10      	cmp	r3, #16
 801933a:	d175      	bne.n	8019428 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	785b      	ldrb	r3, [r3, #1]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d165      	bne.n	8019412 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8019346:	697b      	ldr	r3, [r7, #20]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	685b      	ldr	r3, [r3, #4]
 801934c:	7d1b      	ldrb	r3, [r3, #20]
 801934e:	2b00      	cmp	r3, #0
 8019350:	d002      	beq.n	8019358 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8019352:	23fa      	movs	r3, #250	; 0xfa
 8019354:	72fb      	strb	r3, [r7, #11]
 8019356:	e06c      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8019358:	23ff      	movs	r3, #255	; 0xff
 801935a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801935c:	697b      	ldr	r3, [r7, #20]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	685b      	ldr	r3, [r3, #4]
 8019362:	f107 020b 	add.w	r2, r7, #11
 8019366:	7cf9      	ldrb	r1, [r7, #19]
 8019368:	4618      	mov	r0, r3
 801936a:	f003 f839 	bl	801c3e0 <tcp_listen_with_backlog_and_err>
 801936e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d05d      	beq.n	8019432 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8019376:	697b      	ldr	r3, [r7, #20]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	3310      	adds	r3, #16
 801937c:	4618      	mov	r0, r3
 801937e:	f00b fc7a 	bl	8024c76 <sys_mbox_valid>
 8019382:	4603      	mov	r3, r0
 8019384:	2b00      	cmp	r3, #0
 8019386:	d00b      	beq.n	80193a0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8019388:	697b      	ldr	r3, [r7, #20]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	3310      	adds	r3, #16
 801938e:	4618      	mov	r0, r3
 8019390:	f00b fbea 	bl	8024b68 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	3310      	adds	r3, #16
 801939a:	4618      	mov	r0, r3
 801939c:	f00b fc7c 	bl	8024c98 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80193a0:	2300      	movs	r3, #0
 80193a2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	3314      	adds	r3, #20
 80193aa:	4618      	mov	r0, r3
 80193ac:	f00b fc63 	bl	8024c76 <sys_mbox_valid>
 80193b0:	4603      	mov	r3, r0
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d108      	bne.n	80193c8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80193b6:	697b      	ldr	r3, [r7, #20]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	3314      	adds	r3, #20
 80193bc:	2106      	movs	r1, #6
 80193be:	4618      	mov	r0, r3
 80193c0:	f00b fbb0 	bl	8024b24 <sys_mbox_new>
 80193c4:	4603      	mov	r3, r0
 80193c6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80193c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d118      	bne.n	8019402 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80193d0:	697b      	ldr	r3, [r7, #20]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2202      	movs	r2, #2
 80193d6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80193d8:	697b      	ldr	r3, [r7, #20]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	68fa      	ldr	r2, [r7, #12]
 80193de:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	685a      	ldr	r2, [r3, #4]
 80193e6:	697b      	ldr	r3, [r7, #20]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	4619      	mov	r1, r3
 80193ec:	4610      	mov	r0, r2
 80193ee:	f003 ffc1 	bl	801d374 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80193f2:	697b      	ldr	r3, [r7, #20]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	685b      	ldr	r3, [r3, #4]
 80193f8:	4912      	ldr	r1, [pc, #72]	; (8019444 <lwip_netconn_do_listen+0x12c>)
 80193fa:	4618      	mov	r0, r3
 80193fc:	f004 f832 	bl	801d464 <tcp_accept>
 8019400:	e017      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8019402:	68f8      	ldr	r0, [r7, #12]
 8019404:	f002 fde2 	bl	801bfcc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8019408:	697b      	ldr	r3, [r7, #20]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	2200      	movs	r2, #0
 801940e:	605a      	str	r2, [r3, #4]
 8019410:	e00f      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8019412:	697b      	ldr	r3, [r7, #20]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	785b      	ldrb	r3, [r3, #1]
 8019418:	2b02      	cmp	r3, #2
 801941a:	d102      	bne.n	8019422 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 801941c:	2300      	movs	r3, #0
 801941e:	72fb      	strb	r3, [r7, #11]
 8019420:	e007      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8019422:	23f5      	movs	r3, #245	; 0xf5
 8019424:	72fb      	strb	r3, [r7, #11]
 8019426:	e004      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8019428:	23f0      	movs	r3, #240	; 0xf0
 801942a:	72fb      	strb	r3, [r7, #11]
 801942c:	e001      	b.n	8019432 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801942e:	23f5      	movs	r3, #245	; 0xf5
 8019430:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8019432:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801943a:	bf00      	nop
 801943c:	3718      	adds	r7, #24
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}
 8019442:	bf00      	nop
 8019444:	0801892d 	.word	0x0801892d

08019448 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8019448:	b580      	push	{r7, lr}
 801944a:	b086      	sub	sp, #24
 801944c:	af00      	add	r7, sp, #0
 801944e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8019454:	693b      	ldr	r3, [r7, #16]
 8019456:	2200      	movs	r2, #0
 8019458:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801945a:	693b      	ldr	r3, [r7, #16]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	685b      	ldr	r3, [r3, #4]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d022      	beq.n	80194aa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801946e:	2b10      	cmp	r3, #16
 8019470:	d11b      	bne.n	80194aa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8019472:	693b      	ldr	r3, [r7, #16]
 8019474:	689b      	ldr	r3, [r3, #8]
 8019476:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8019478:	697b      	ldr	r3, [r7, #20]
 801947a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801947e:	d202      	bcs.n	8019486 <lwip_netconn_do_recv+0x3e>
 8019480:	697b      	ldr	r3, [r7, #20]
 8019482:	b29b      	uxth	r3, r3
 8019484:	e001      	b.n	801948a <lwip_netconn_do_recv+0x42>
 8019486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801948a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801948c:	693b      	ldr	r3, [r7, #16]
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	89fa      	ldrh	r2, [r7, #14]
 8019494:	4611      	mov	r1, r2
 8019496:	4618      	mov	r0, r3
 8019498:	f003 f8a6 	bl	801c5e8 <tcp_recved>
        remaining -= recved;
 801949c:	89fb      	ldrh	r3, [r7, #14]
 801949e:	697a      	ldr	r2, [r7, #20]
 80194a0:	1ad3      	subs	r3, r2, r3
 80194a2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80194a4:	697b      	ldr	r3, [r7, #20]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d1e6      	bne.n	8019478 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80194aa:	bf00      	nop
 80194ac:	3718      	adds	r7, #24
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd80      	pop	{r7, pc}
	...

080194b4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b088      	sub	sp, #32
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
 80194bc:	460b      	mov	r3, r1
 80194be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80194c0:	2300      	movs	r3, #0
 80194c2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d106      	bne.n	80194d8 <lwip_netconn_do_writemore+0x24>
 80194ca:	4b96      	ldr	r3, [pc, #600]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 80194cc:	f240 6273 	movw	r2, #1651	; 0x673
 80194d0:	4995      	ldr	r1, [pc, #596]	; (8019728 <lwip_netconn_do_writemore+0x274>)
 80194d2:	4896      	ldr	r0, [pc, #600]	; (801972c <lwip_netconn_do_writemore+0x278>)
 80194d4:	f00c fd0c 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	785b      	ldrb	r3, [r3, #1]
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d006      	beq.n	80194ee <lwip_netconn_do_writemore+0x3a>
 80194e0:	4b90      	ldr	r3, [pc, #576]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 80194e2:	f240 6274 	movw	r2, #1652	; 0x674
 80194e6:	4992      	ldr	r1, [pc, #584]	; (8019730 <lwip_netconn_do_writemore+0x27c>)
 80194e8:	4890      	ldr	r0, [pc, #576]	; (801972c <lwip_netconn_do_writemore+0x278>)
 80194ea:	f00c fd01 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6a1b      	ldr	r3, [r3, #32]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d106      	bne.n	8019504 <lwip_netconn_do_writemore+0x50>
 80194f6:	4b8b      	ldr	r3, [pc, #556]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 80194f8:	f240 6275 	movw	r2, #1653	; 0x675
 80194fc:	498d      	ldr	r1, [pc, #564]	; (8019734 <lwip_netconn_do_writemore+0x280>)
 80194fe:	488b      	ldr	r0, [pc, #556]	; (801972c <lwip_netconn_do_writemore+0x278>)
 8019500:	f00c fcf6 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d106      	bne.n	801951a <lwip_netconn_do_writemore+0x66>
 801950c:	4b85      	ldr	r3, [pc, #532]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 801950e:	f240 6276 	movw	r2, #1654	; 0x676
 8019512:	4989      	ldr	r1, [pc, #548]	; (8019738 <lwip_netconn_do_writemore+0x284>)
 8019514:	4885      	ldr	r0, [pc, #532]	; (801972c <lwip_netconn_do_writemore+0x278>)
 8019516:	f00c fceb 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a1b      	ldr	r3, [r3, #32]
 801951e:	699a      	ldr	r2, [r3, #24]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6a1b      	ldr	r3, [r3, #32]
 8019524:	695b      	ldr	r3, [r3, #20]
 8019526:	429a      	cmp	r2, r3
 8019528:	d306      	bcc.n	8019538 <lwip_netconn_do_writemore+0x84>
 801952a:	4b7e      	ldr	r3, [pc, #504]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 801952c:	f240 6277 	movw	r2, #1655	; 0x677
 8019530:	4982      	ldr	r1, [pc, #520]	; (801973c <lwip_netconn_do_writemore+0x288>)
 8019532:	487e      	ldr	r0, [pc, #504]	; (801972c <lwip_netconn_do_writemore+0x278>)
 8019534:	f00c fcdc 	bl	8025ef0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	6a1b      	ldr	r3, [r3, #32]
 801953c:	899b      	ldrh	r3, [r3, #12]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d106      	bne.n	8019550 <lwip_netconn_do_writemore+0x9c>
 8019542:	4b78      	ldr	r3, [pc, #480]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 8019544:	f240 6279 	movw	r2, #1657	; 0x679
 8019548:	497d      	ldr	r1, [pc, #500]	; (8019740 <lwip_netconn_do_writemore+0x28c>)
 801954a:	4878      	ldr	r0, [pc, #480]	; (801972c <lwip_netconn_do_writemore+0x278>)
 801954c:	f00c fcd0 	bl	8025ef0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6a1b      	ldr	r3, [r3, #32]
 8019554:	7f1b      	ldrb	r3, [r3, #28]
 8019556:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	7f1b      	ldrb	r3, [r3, #28]
 801955c:	f003 0302 	and.w	r3, r3, #2
 8019560:	2b00      	cmp	r3, #0
 8019562:	d104      	bne.n	801956e <lwip_netconn_do_writemore+0xba>
 8019564:	7ebb      	ldrb	r3, [r7, #26]
 8019566:	f003 0304 	and.w	r3, r3, #4
 801956a:	2b00      	cmp	r3, #0
 801956c:	d001      	beq.n	8019572 <lwip_netconn_do_writemore+0xbe>
 801956e:	2301      	movs	r3, #1
 8019570:	e000      	b.n	8019574 <lwip_netconn_do_writemore+0xc0>
 8019572:	2300      	movs	r3, #0
 8019574:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6a1b      	ldr	r3, [r3, #32]
 801957a:	689b      	ldr	r3, [r3, #8]
 801957c:	681a      	ldr	r2, [r3, #0]
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	6a1b      	ldr	r3, [r3, #32]
 8019582:	691b      	ldr	r3, [r3, #16]
 8019584:	4413      	add	r3, r2
 8019586:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6a1b      	ldr	r3, [r3, #32]
 801958c:	689b      	ldr	r3, [r3, #8]
 801958e:	685a      	ldr	r2, [r3, #4]
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a1b      	ldr	r3, [r3, #32]
 8019594:	691b      	ldr	r3, [r3, #16]
 8019596:	1ad3      	subs	r3, r2, r3
 8019598:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801959a:	693b      	ldr	r3, [r7, #16]
 801959c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80195a0:	d307      	bcc.n	80195b2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80195a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195a6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80195a8:	7ebb      	ldrb	r3, [r7, #26]
 80195aa:	f043 0302 	orr.w	r3, r3, #2
 80195ae:	76bb      	strb	r3, [r7, #26]
 80195b0:	e001      	b.n	80195b6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80195b2:	693b      	ldr	r3, [r7, #16]
 80195b4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80195be:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80195c0:	89fa      	ldrh	r2, [r7, #14]
 80195c2:	8bbb      	ldrh	r3, [r7, #28]
 80195c4:	429a      	cmp	r2, r3
 80195c6:	d216      	bcs.n	80195f6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80195c8:	89fb      	ldrh	r3, [r7, #14]
 80195ca:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80195cc:	7e3b      	ldrb	r3, [r7, #24]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d00d      	beq.n	80195ee <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80195d2:	8bbb      	ldrh	r3, [r7, #28]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d10e      	bne.n	80195f6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a1b      	ldr	r3, [r3, #32]
 80195dc:	699b      	ldr	r3, [r3, #24]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d102      	bne.n	80195e8 <lwip_netconn_do_writemore+0x134>
 80195e2:	f06f 0306 	mvn.w	r3, #6
 80195e6:	e000      	b.n	80195ea <lwip_netconn_do_writemore+0x136>
 80195e8:	2300      	movs	r3, #0
 80195ea:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80195ec:	e07d      	b.n	80196ea <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80195ee:	7ebb      	ldrb	r3, [r7, #26]
 80195f0:	f043 0302 	orr.w	r3, r3, #2
 80195f4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	6a1b      	ldr	r3, [r3, #32]
 80195fa:	691a      	ldr	r2, [r3, #16]
 80195fc:	8bbb      	ldrh	r3, [r7, #28]
 80195fe:	441a      	add	r2, r3
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	6a1b      	ldr	r3, [r3, #32]
 8019604:	689b      	ldr	r3, [r3, #8]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	429a      	cmp	r2, r3
 801960a:	d906      	bls.n	801961a <lwip_netconn_do_writemore+0x166>
 801960c:	4b45      	ldr	r3, [pc, #276]	; (8019724 <lwip_netconn_do_writemore+0x270>)
 801960e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8019612:	494c      	ldr	r1, [pc, #304]	; (8019744 <lwip_netconn_do_writemore+0x290>)
 8019614:	4845      	ldr	r0, [pc, #276]	; (801972c <lwip_netconn_do_writemore+0x278>)
 8019616:	f00c fc6b 	bl	8025ef0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801961a:	8bbb      	ldrh	r3, [r7, #28]
 801961c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019620:	4293      	cmp	r3, r2
 8019622:	d103      	bne.n	801962c <lwip_netconn_do_writemore+0x178>
 8019624:	693b      	ldr	r3, [r7, #16]
 8019626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801962a:	d209      	bcs.n	8019640 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801962c:	693b      	ldr	r3, [r7, #16]
 801962e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8019630:	8bba      	ldrh	r2, [r7, #28]
 8019632:	429a      	cmp	r2, r3
 8019634:	d10b      	bne.n	801964e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	6a1b      	ldr	r3, [r3, #32]
 801963a:	899b      	ldrh	r3, [r3, #12]
 801963c:	2b01      	cmp	r3, #1
 801963e:	d906      	bls.n	801964e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8019640:	2301      	movs	r3, #1
 8019642:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8019644:	7ebb      	ldrb	r3, [r7, #26]
 8019646:	f043 0302 	orr.w	r3, r3, #2
 801964a:	76bb      	strb	r3, [r7, #26]
 801964c:	e001      	b.n	8019652 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801964e:	2300      	movs	r3, #0
 8019650:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	6858      	ldr	r0, [r3, #4]
 8019656:	7ebb      	ldrb	r3, [r7, #26]
 8019658:	8bba      	ldrh	r2, [r7, #28]
 801965a:	6979      	ldr	r1, [r7, #20]
 801965c:	f006 fdc8 	bl	80201f0 <tcp_write>
 8019660:	4603      	mov	r3, r0
 8019662:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8019664:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d12c      	bne.n	80196c6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	6a1b      	ldr	r3, [r3, #32]
 8019670:	6999      	ldr	r1, [r3, #24]
 8019672:	8bba      	ldrh	r2, [r7, #28]
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	6a1b      	ldr	r3, [r3, #32]
 8019678:	440a      	add	r2, r1
 801967a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	6a1b      	ldr	r3, [r3, #32]
 8019680:	6919      	ldr	r1, [r3, #16]
 8019682:	8bba      	ldrh	r2, [r7, #28]
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	6a1b      	ldr	r3, [r3, #32]
 8019688:	440a      	add	r2, r1
 801968a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6a1b      	ldr	r3, [r3, #32]
 8019690:	691a      	ldr	r2, [r3, #16]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	6a1b      	ldr	r3, [r3, #32]
 8019696:	689b      	ldr	r3, [r3, #8]
 8019698:	685b      	ldr	r3, [r3, #4]
 801969a:	429a      	cmp	r2, r3
 801969c:	d113      	bne.n	80196c6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6a1b      	ldr	r3, [r3, #32]
 80196a2:	899a      	ldrh	r2, [r3, #12]
 80196a4:	3a01      	subs	r2, #1
 80196a6:	b292      	uxth	r2, r2
 80196a8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	6a1b      	ldr	r3, [r3, #32]
 80196ae:	899b      	ldrh	r3, [r3, #12]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d008      	beq.n	80196c6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	6a1b      	ldr	r3, [r3, #32]
 80196b8:	689a      	ldr	r2, [r3, #8]
 80196ba:	3208      	adds	r2, #8
 80196bc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	6a1b      	ldr	r3, [r3, #32]
 80196c2:	2200      	movs	r2, #0
 80196c4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80196c6:	7e7b      	ldrb	r3, [r7, #25]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d004      	beq.n	80196d6 <lwip_netconn_do_writemore+0x222>
 80196cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	f43f af50 	beq.w	8019576 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80196d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d004      	beq.n	80196e8 <lwip_netconn_do_writemore+0x234>
 80196de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80196e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80196e6:	d146      	bne.n	8019776 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80196e8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80196ea:	7e3b      	ldrb	r3, [r7, #24]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d02b      	beq.n	8019748 <lwip_netconn_do_writemore+0x294>
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6a1b      	ldr	r3, [r3, #32]
 80196f4:	699a      	ldr	r2, [r3, #24]
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6a1b      	ldr	r3, [r3, #32]
 80196fa:	695b      	ldr	r3, [r3, #20]
 80196fc:	429a      	cmp	r2, r3
 80196fe:	d223      	bcs.n	8019748 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019704:	2b00      	cmp	r3, #0
 8019706:	d005      	beq.n	8019714 <lwip_netconn_do_writemore+0x260>
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801970c:	2200      	movs	r2, #0
 801970e:	2103      	movs	r1, #3
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	7f1b      	ldrb	r3, [r3, #28]
 8019718:	f043 0310 	orr.w	r3, r3, #16
 801971c:	b2da      	uxtb	r2, r3
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	771a      	strb	r2, [r3, #28]
 8019722:	e028      	b.n	8019776 <lwip_netconn_do_writemore+0x2c2>
 8019724:	08026c20 	.word	0x08026c20
 8019728:	08026d78 	.word	0x08026d78
 801972c:	08026c64 	.word	0x08026c64
 8019730:	08027080 	.word	0x08027080
 8019734:	08026d88 	.word	0x08026d88
 8019738:	080270a0 	.word	0x080270a0
 801973c:	080270b8 	.word	0x080270b8
 8019740:	080270f8 	.word	0x080270f8
 8019744:	08027120 	.word	0x08027120
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	685b      	ldr	r3, [r3, #4]
 801974c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019750:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8019754:	d305      	bcc.n	8019762 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	685b      	ldr	r3, [r3, #4]
 801975a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801975e:	2b04      	cmp	r3, #4
 8019760:	d909      	bls.n	8019776 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019766:	2b00      	cmp	r3, #0
 8019768:	d005      	beq.n	8019776 <lwip_netconn_do_writemore+0x2c2>
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801976e:	2200      	movs	r2, #0
 8019770:	2103      	movs	r1, #3
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8019776:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d11d      	bne.n	80197ba <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	6a1b      	ldr	r3, [r3, #32]
 8019782:	699a      	ldr	r2, [r3, #24]
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6a1b      	ldr	r3, [r3, #32]
 8019788:	695b      	ldr	r3, [r3, #20]
 801978a:	429a      	cmp	r2, r3
 801978c:	d002      	beq.n	8019794 <lwip_netconn_do_writemore+0x2e0>
 801978e:	7e3b      	ldrb	r3, [r7, #24]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d001      	beq.n	8019798 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8019794:	2301      	movs	r3, #1
 8019796:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	685b      	ldr	r3, [r3, #4]
 801979c:	4618      	mov	r0, r3
 801979e:	f007 fb11 	bl	8020dc4 <tcp_output>
 80197a2:	4603      	mov	r3, r0
 80197a4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80197a6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80197aa:	f113 0f04 	cmn.w	r3, #4
 80197ae:	d12c      	bne.n	801980a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80197b0:	7b3b      	ldrb	r3, [r7, #12]
 80197b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80197b4:	2301      	movs	r3, #1
 80197b6:	76fb      	strb	r3, [r7, #27]
 80197b8:	e027      	b.n	801980a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 80197ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80197be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197c2:	d120      	bne.n	8019806 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	685b      	ldr	r3, [r3, #4]
 80197c8:	4618      	mov	r0, r3
 80197ca:	f007 fafb 	bl	8020dc4 <tcp_output>
 80197ce:	4603      	mov	r3, r0
 80197d0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80197d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80197d6:	f113 0f04 	cmn.w	r3, #4
 80197da:	d104      	bne.n	80197e6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80197dc:	7b7b      	ldrb	r3, [r7, #13]
 80197de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80197e0:	2301      	movs	r3, #1
 80197e2:	76fb      	strb	r3, [r7, #27]
 80197e4:	e011      	b.n	801980a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80197e6:	7e3b      	ldrb	r3, [r7, #24]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d00e      	beq.n	801980a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6a1b      	ldr	r3, [r3, #32]
 80197f0:	699b      	ldr	r3, [r3, #24]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d102      	bne.n	80197fc <lwip_netconn_do_writemore+0x348>
 80197f6:	f06f 0306 	mvn.w	r3, #6
 80197fa:	e000      	b.n	80197fe <lwip_netconn_do_writemore+0x34a>
 80197fc:	2300      	movs	r3, #0
 80197fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8019800:	2301      	movs	r3, #1
 8019802:	76fb      	strb	r3, [r7, #27]
 8019804:	e001      	b.n	801980a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8019806:	2301      	movs	r3, #1
 8019808:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801980a:	7efb      	ldrb	r3, [r7, #27]
 801980c:	2b00      	cmp	r3, #0
 801980e:	d015      	beq.n	801983c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6a1b      	ldr	r3, [r3, #32]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	330c      	adds	r3, #12
 8019818:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	6a1b      	ldr	r3, [r3, #32]
 801981e:	7ffa      	ldrb	r2, [r7, #31]
 8019820:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2200      	movs	r2, #0
 8019826:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	2200      	movs	r2, #0
 801982c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801982e:	78fb      	ldrb	r3, [r7, #3]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d006      	beq.n	8019842 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8019834:	68b8      	ldr	r0, [r7, #8]
 8019836:	f00b fa95 	bl	8024d64 <sys_sem_signal>
 801983a:	e002      	b.n	8019842 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801983c:	f04f 33ff 	mov.w	r3, #4294967295
 8019840:	e000      	b.n	8019844 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8019842:	2300      	movs	r3, #0
}
 8019844:	4618      	mov	r0, r3
 8019846:	3720      	adds	r7, #32
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}

0801984c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b084      	sub	sp, #16
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8019858:	68bb      	ldr	r3, [r7, #8]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4618      	mov	r0, r3
 801985e:	f7fe fd20 	bl	80182a2 <netconn_err>
 8019862:	4603      	mov	r3, r0
 8019864:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8019866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801986a:	2b00      	cmp	r3, #0
 801986c:	d166      	bne.n	801993c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019878:	2b10      	cmp	r3, #16
 801987a:	d15d      	bne.n	8019938 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801987c:	68bb      	ldr	r3, [r7, #8]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	785b      	ldrb	r3, [r3, #1]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d002      	beq.n	801988c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8019886:	23fb      	movs	r3, #251	; 0xfb
 8019888:	73fb      	strb	r3, [r7, #15]
 801988a:	e057      	b.n	801993c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	685b      	ldr	r3, [r3, #4]
 8019892:	2b00      	cmp	r3, #0
 8019894:	d04d      	beq.n	8019932 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	2201      	movs	r2, #1
 801989c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801989e:	68bb      	ldr	r3, [r7, #8]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	6a1b      	ldr	r3, [r3, #32]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d006      	beq.n	80198b6 <lwip_netconn_do_write+0x6a>
 80198a8:	4b28      	ldr	r3, [pc, #160]	; (801994c <lwip_netconn_do_write+0x100>)
 80198aa:	f240 7223 	movw	r2, #1827	; 0x723
 80198ae:	4928      	ldr	r1, [pc, #160]	; (8019950 <lwip_netconn_do_write+0x104>)
 80198b0:	4828      	ldr	r0, [pc, #160]	; (8019954 <lwip_netconn_do_write+0x108>)
 80198b2:	f00c fb1d 	bl	8025ef0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80198b6:	68bb      	ldr	r3, [r7, #8]
 80198b8:	695b      	ldr	r3, [r3, #20]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d106      	bne.n	80198cc <lwip_netconn_do_write+0x80>
 80198be:	4b23      	ldr	r3, [pc, #140]	; (801994c <lwip_netconn_do_write+0x100>)
 80198c0:	f240 7224 	movw	r2, #1828	; 0x724
 80198c4:	4924      	ldr	r1, [pc, #144]	; (8019958 <lwip_netconn_do_write+0x10c>)
 80198c6:	4823      	ldr	r0, [pc, #140]	; (8019954 <lwip_netconn_do_write+0x108>)
 80198c8:	f00c fb12 	bl	8025ef0 <iprintf>
        msg->conn->current_msg = msg;
 80198cc:	68bb      	ldr	r3, [r7, #8]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	68ba      	ldr	r2, [r7, #8]
 80198d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	2100      	movs	r1, #0
 80198da:	4618      	mov	r0, r3
 80198dc:	f7ff fdea 	bl	80194b4 <lwip_netconn_do_writemore>
 80198e0:	4603      	mov	r3, r0
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d02e      	beq.n	8019944 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	785b      	ldrb	r3, [r3, #1]
 80198ec:	2b01      	cmp	r3, #1
 80198ee:	d006      	beq.n	80198fe <lwip_netconn_do_write+0xb2>
 80198f0:	4b16      	ldr	r3, [pc, #88]	; (801994c <lwip_netconn_do_write+0x100>)
 80198f2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80198f6:	4919      	ldr	r1, [pc, #100]	; (801995c <lwip_netconn_do_write+0x110>)
 80198f8:	4816      	ldr	r0, [pc, #88]	; (8019954 <lwip_netconn_do_write+0x108>)
 80198fa:	f00c faf9 	bl	8025ef0 <iprintf>
          UNLOCK_TCPIP_CORE();
 80198fe:	4818      	ldr	r0, [pc, #96]	; (8019960 <lwip_netconn_do_write+0x114>)
 8019900:	f00b faa1 	bl	8024e46 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8019904:	68bb      	ldr	r3, [r7, #8]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	330c      	adds	r3, #12
 801990a:	2100      	movs	r1, #0
 801990c:	4618      	mov	r0, r3
 801990e:	f00b f9f8 	bl	8024d02 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8019912:	4813      	ldr	r0, [pc, #76]	; (8019960 <lwip_netconn_do_write+0x114>)
 8019914:	f00b fa88 	bl	8024e28 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8019918:	68bb      	ldr	r3, [r7, #8]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	785b      	ldrb	r3, [r3, #1]
 801991e:	2b01      	cmp	r3, #1
 8019920:	d110      	bne.n	8019944 <lwip_netconn_do_write+0xf8>
 8019922:	4b0a      	ldr	r3, [pc, #40]	; (801994c <lwip_netconn_do_write+0x100>)
 8019924:	f240 722c 	movw	r2, #1836	; 0x72c
 8019928:	490c      	ldr	r1, [pc, #48]	; (801995c <lwip_netconn_do_write+0x110>)
 801992a:	480a      	ldr	r0, [pc, #40]	; (8019954 <lwip_netconn_do_write+0x108>)
 801992c:	f00c fae0 	bl	8025ef0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8019930:	e008      	b.n	8019944 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8019932:	23f5      	movs	r3, #245	; 0xf5
 8019934:	73fb      	strb	r3, [r7, #15]
 8019936:	e001      	b.n	801993c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8019938:	23fa      	movs	r3, #250	; 0xfa
 801993a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 801993c:	68bb      	ldr	r3, [r7, #8]
 801993e:	7bfa      	ldrb	r2, [r7, #15]
 8019940:	711a      	strb	r2, [r3, #4]
 8019942:	e000      	b.n	8019946 <lwip_netconn_do_write+0xfa>
        return;
 8019944:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8019946:	3710      	adds	r7, #16
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	08026c20 	.word	0x08026c20
 8019950:	08026fc4 	.word	0x08026fc4
 8019954:	08026c64 	.word	0x08026c64
 8019958:	0802714c 	.word	0x0802714c
 801995c:	08026fe0 	.word	0x08026fe0
 8019960:	2000cb9c 	.word	0x2000cb9c

08019964 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8019964:	b580      	push	{r7, lr}
 8019966:	b084      	sub	sp, #16
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	785b      	ldrb	r3, [r3, #1]
 8019976:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d069      	beq.n	8019a56 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801998c:	2b10      	cmp	r3, #16
 801998e:	d162      	bne.n	8019a56 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8019994:	2b03      	cmp	r3, #3
 8019996:	d002      	beq.n	801999e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8019998:	7afb      	ldrb	r3, [r7, #11]
 801999a:	2b02      	cmp	r3, #2
 801999c:	d05b      	beq.n	8019a56 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801999e:	7afb      	ldrb	r3, [r7, #11]
 80199a0:	2b03      	cmp	r3, #3
 80199a2:	d103      	bne.n	80199ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	22f5      	movs	r2, #245	; 0xf5
 80199a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80199aa:	e059      	b.n	8019a60 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80199ac:	7afb      	ldrb	r3, [r7, #11]
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d103      	bne.n	80199ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80199b2:	68fb      	ldr	r3, [r7, #12]
 80199b4:	22fb      	movs	r2, #251	; 0xfb
 80199b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80199b8:	e052      	b.n	8019a60 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	7a1b      	ldrb	r3, [r3, #8]
 80199be:	f003 0301 	and.w	r3, r3, #1
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d004      	beq.n	80199d0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	4618      	mov	r0, r3
 80199cc:	f7ff f9a2 	bl	8018d14 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	6a1b      	ldr	r3, [r3, #32]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d006      	beq.n	80199e8 <lwip_netconn_do_close+0x84>
 80199da:	4b23      	ldr	r3, [pc, #140]	; (8019a68 <lwip_netconn_do_close+0x104>)
 80199dc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80199e0:	4922      	ldr	r1, [pc, #136]	; (8019a6c <lwip_netconn_do_close+0x108>)
 80199e2:	4823      	ldr	r0, [pc, #140]	; (8019a70 <lwip_netconn_do_close+0x10c>)
 80199e4:	f00c fa84 	bl	8025ef0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	2204      	movs	r2, #4
 80199ee:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	68fa      	ldr	r2, [r7, #12]
 80199f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	2100      	movs	r1, #0
 80199fe:	4618      	mov	r0, r3
 8019a00:	f7ff fa06 	bl	8018e10 <lwip_netconn_do_close_internal>
 8019a04:	4603      	mov	r3, r0
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d029      	beq.n	8019a5e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	785b      	ldrb	r3, [r3, #1]
 8019a10:	2b04      	cmp	r3, #4
 8019a12:	d006      	beq.n	8019a22 <lwip_netconn_do_close+0xbe>
 8019a14:	4b14      	ldr	r3, [pc, #80]	; (8019a68 <lwip_netconn_do_close+0x104>)
 8019a16:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8019a1a:	4916      	ldr	r1, [pc, #88]	; (8019a74 <lwip_netconn_do_close+0x110>)
 8019a1c:	4814      	ldr	r0, [pc, #80]	; (8019a70 <lwip_netconn_do_close+0x10c>)
 8019a1e:	f00c fa67 	bl	8025ef0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8019a22:	4815      	ldr	r0, [pc, #84]	; (8019a78 <lwip_netconn_do_close+0x114>)
 8019a24:	f00b fa0f 	bl	8024e46 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	330c      	adds	r3, #12
 8019a2e:	2100      	movs	r1, #0
 8019a30:	4618      	mov	r0, r3
 8019a32:	f00b f966 	bl	8024d02 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8019a36:	4810      	ldr	r0, [pc, #64]	; (8019a78 <lwip_netconn_do_close+0x114>)
 8019a38:	f00b f9f6 	bl	8024e28 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	785b      	ldrb	r3, [r3, #1]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d00b      	beq.n	8019a5e <lwip_netconn_do_close+0xfa>
 8019a46:	4b08      	ldr	r3, [pc, #32]	; (8019a68 <lwip_netconn_do_close+0x104>)
 8019a48:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8019a4c:	4909      	ldr	r1, [pc, #36]	; (8019a74 <lwip_netconn_do_close+0x110>)
 8019a4e:	4808      	ldr	r0, [pc, #32]	; (8019a70 <lwip_netconn_do_close+0x10c>)
 8019a50:	f00c fa4e 	bl	8025ef0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8019a54:	e003      	b.n	8019a5e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	22f5      	movs	r2, #245	; 0xf5
 8019a5a:	711a      	strb	r2, [r3, #4]
 8019a5c:	e000      	b.n	8019a60 <lwip_netconn_do_close+0xfc>
      return;
 8019a5e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8019a60:	3710      	adds	r7, #16
 8019a62:	46bd      	mov	sp, r7
 8019a64:	bd80      	pop	{r7, pc}
 8019a66:	bf00      	nop
 8019a68:	08026c20 	.word	0x08026c20
 8019a6c:	08026fc4 	.word	0x08026fc4
 8019a70:	08026c64 	.word	0x08026c64
 8019a74:	08026fe0 	.word	0x08026fe0
 8019a78:	2000cb9c 	.word	0x2000cb9c

08019a7c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b082      	sub	sp, #8
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d013      	beq.n	8019ab2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d00b      	beq.n	8019aaa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f001 fdee 	bl	801b678 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	605a      	str	r2, [r3, #4]
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	685a      	ldr	r2, [r3, #4]
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8019aaa:	6879      	ldr	r1, [r7, #4]
 8019aac:	2006      	movs	r0, #6
 8019aae:	f000 ff3f 	bl	801a930 <memp_free>
  }
}
 8019ab2:	bf00      	nop
 8019ab4:	3708      	adds	r7, #8
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
	...

08019abc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	60f8      	str	r0, [r7, #12]
 8019ac4:	60b9      	str	r1, [r7, #8]
 8019ac6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d108      	bne.n	8019ae0 <netbuf_data+0x24>
 8019ace:	4b1b      	ldr	r3, [pc, #108]	; (8019b3c <netbuf_data+0x80>)
 8019ad0:	22c6      	movs	r2, #198	; 0xc6
 8019ad2:	491b      	ldr	r1, [pc, #108]	; (8019b40 <netbuf_data+0x84>)
 8019ad4:	481b      	ldr	r0, [pc, #108]	; (8019b44 <netbuf_data+0x88>)
 8019ad6:	f00c fa0b 	bl	8025ef0 <iprintf>
 8019ada:	f06f 030f 	mvn.w	r3, #15
 8019ade:	e029      	b.n	8019b34 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d108      	bne.n	8019af8 <netbuf_data+0x3c>
 8019ae6:	4b15      	ldr	r3, [pc, #84]	; (8019b3c <netbuf_data+0x80>)
 8019ae8:	22c7      	movs	r2, #199	; 0xc7
 8019aea:	4917      	ldr	r1, [pc, #92]	; (8019b48 <netbuf_data+0x8c>)
 8019aec:	4815      	ldr	r0, [pc, #84]	; (8019b44 <netbuf_data+0x88>)
 8019aee:	f00c f9ff 	bl	8025ef0 <iprintf>
 8019af2:	f06f 030f 	mvn.w	r3, #15
 8019af6:	e01d      	b.n	8019b34 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d108      	bne.n	8019b10 <netbuf_data+0x54>
 8019afe:	4b0f      	ldr	r3, [pc, #60]	; (8019b3c <netbuf_data+0x80>)
 8019b00:	22c8      	movs	r2, #200	; 0xc8
 8019b02:	4912      	ldr	r1, [pc, #72]	; (8019b4c <netbuf_data+0x90>)
 8019b04:	480f      	ldr	r0, [pc, #60]	; (8019b44 <netbuf_data+0x88>)
 8019b06:	f00c f9f3 	bl	8025ef0 <iprintf>
 8019b0a:	f06f 030f 	mvn.w	r3, #15
 8019b0e:	e011      	b.n	8019b34 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d102      	bne.n	8019b1e <netbuf_data+0x62>
    return ERR_BUF;
 8019b18:	f06f 0301 	mvn.w	r3, #1
 8019b1c:	e00a      	b.n	8019b34 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	685a      	ldr	r2, [r3, #4]
 8019b24:	68bb      	ldr	r3, [r7, #8]
 8019b26:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	895a      	ldrh	r2, [r3, #10]
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8019b32:	2300      	movs	r3, #0
}
 8019b34:	4618      	mov	r0, r3
 8019b36:	3710      	adds	r7, #16
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	bd80      	pop	{r7, pc}
 8019b3c:	08027178 	.word	0x08027178
 8019b40:	08027280 	.word	0x08027280
 8019b44:	080271c8 	.word	0x080271c8
 8019b48:	0802729c 	.word	0x0802729c
 8019b4c:	080272bc 	.word	0x080272bc

08019b50 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d108      	bne.n	8019b70 <netbuf_next+0x20>
 8019b5e:	4b11      	ldr	r3, [pc, #68]	; (8019ba4 <netbuf_next+0x54>)
 8019b60:	22e0      	movs	r2, #224	; 0xe0
 8019b62:	4911      	ldr	r1, [pc, #68]	; (8019ba8 <netbuf_next+0x58>)
 8019b64:	4811      	ldr	r0, [pc, #68]	; (8019bac <netbuf_next+0x5c>)
 8019b66:	f00c f9c3 	bl	8025ef0 <iprintf>
 8019b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b6e:	e014      	b.n	8019b9a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	685b      	ldr	r3, [r3, #4]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d102      	bne.n	8019b80 <netbuf_next+0x30>
    return -1;
 8019b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b7e:	e00c      	b.n	8019b9a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	685b      	ldr	r3, [r3, #4]
 8019b84:	681a      	ldr	r2, [r3, #0]
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	685b      	ldr	r3, [r3, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d101      	bne.n	8019b98 <netbuf_next+0x48>
    return 1;
 8019b94:	2301      	movs	r3, #1
 8019b96:	e000      	b.n	8019b9a <netbuf_next+0x4a>
  }
  return 0;
 8019b98:	2300      	movs	r3, #0
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3708      	adds	r7, #8
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}
 8019ba2:	bf00      	nop
 8019ba4:	08027178 	.word	0x08027178
 8019ba8:	080272d8 	.word	0x080272d8
 8019bac:	080271c8 	.word	0x080271c8

08019bb0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8019bb0:	b580      	push	{r7, lr}
 8019bb2:	b084      	sub	sp, #16
 8019bb4:	af00      	add	r7, sp, #0
 8019bb6:	6078      	str	r0, [r7, #4]
 8019bb8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8019bba:	f008 f9bb 	bl	8021f34 <sys_timeouts_sleeptime>
 8019bbe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bc6:	d10b      	bne.n	8019be0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8019bc8:	4813      	ldr	r0, [pc, #76]	; (8019c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8019bca:	f00b f93c 	bl	8024e46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8019bce:	2200      	movs	r2, #0
 8019bd0:	6839      	ldr	r1, [r7, #0]
 8019bd2:	6878      	ldr	r0, [r7, #4]
 8019bd4:	f00a fff4 	bl	8024bc0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8019bd8:	480f      	ldr	r0, [pc, #60]	; (8019c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8019bda:	f00b f925 	bl	8024e28 <sys_mutex_lock>
    return;
 8019bde:	e018      	b.n	8019c12 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d102      	bne.n	8019bec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8019be6:	f008 f96b 	bl	8021ec0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8019bea:	e7e6      	b.n	8019bba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8019bec:	480a      	ldr	r0, [pc, #40]	; (8019c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8019bee:	f00b f92a 	bl	8024e46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8019bf2:	68fa      	ldr	r2, [r7, #12]
 8019bf4:	6839      	ldr	r1, [r7, #0]
 8019bf6:	6878      	ldr	r0, [r7, #4]
 8019bf8:	f00a ffe2 	bl	8024bc0 <sys_arch_mbox_fetch>
 8019bfc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8019bfe:	4806      	ldr	r0, [pc, #24]	; (8019c18 <tcpip_timeouts_mbox_fetch+0x68>)
 8019c00:	f00b f912 	bl	8024e28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8019c04:	68bb      	ldr	r3, [r7, #8]
 8019c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c0a:	d102      	bne.n	8019c12 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8019c0c:	f008 f958 	bl	8021ec0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8019c10:	e7d3      	b.n	8019bba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8019c12:	3710      	adds	r7, #16
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	2000cb9c 	.word	0x2000cb9c

08019c1c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8019c1c:	b580      	push	{r7, lr}
 8019c1e:	b084      	sub	sp, #16
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8019c24:	4810      	ldr	r0, [pc, #64]	; (8019c68 <tcpip_thread+0x4c>)
 8019c26:	f00b f8ff 	bl	8024e28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8019c2a:	4b10      	ldr	r3, [pc, #64]	; (8019c6c <tcpip_thread+0x50>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d005      	beq.n	8019c3e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8019c32:	4b0e      	ldr	r3, [pc, #56]	; (8019c6c <tcpip_thread+0x50>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	4a0e      	ldr	r2, [pc, #56]	; (8019c70 <tcpip_thread+0x54>)
 8019c38:	6812      	ldr	r2, [r2, #0]
 8019c3a:	4610      	mov	r0, r2
 8019c3c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8019c3e:	f107 030c 	add.w	r3, r7, #12
 8019c42:	4619      	mov	r1, r3
 8019c44:	480b      	ldr	r0, [pc, #44]	; (8019c74 <tcpip_thread+0x58>)
 8019c46:	f7ff ffb3 	bl	8019bb0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d106      	bne.n	8019c5e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019c50:	4b09      	ldr	r3, [pc, #36]	; (8019c78 <tcpip_thread+0x5c>)
 8019c52:	2291      	movs	r2, #145	; 0x91
 8019c54:	4909      	ldr	r1, [pc, #36]	; (8019c7c <tcpip_thread+0x60>)
 8019c56:	480a      	ldr	r0, [pc, #40]	; (8019c80 <tcpip_thread+0x64>)
 8019c58:	f00c f94a 	bl	8025ef0 <iprintf>
      continue;
 8019c5c:	e003      	b.n	8019c66 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	4618      	mov	r0, r3
 8019c62:	f000 f80f 	bl	8019c84 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8019c66:	e7ea      	b.n	8019c3e <tcpip_thread+0x22>
 8019c68:	2000cb9c 	.word	0x2000cb9c
 8019c6c:	200086e4 	.word	0x200086e4
 8019c70:	200086e8 	.word	0x200086e8
 8019c74:	200086ec 	.word	0x200086ec
 8019c78:	08027310 	.word	0x08027310
 8019c7c:	08027340 	.word	0x08027340
 8019c80:	08027360 	.word	0x08027360

08019c84 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b082      	sub	sp, #8
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	2b02      	cmp	r3, #2
 8019c92:	d026      	beq.n	8019ce2 <tcpip_thread_handle_msg+0x5e>
 8019c94:	2b02      	cmp	r3, #2
 8019c96:	dc2b      	bgt.n	8019cf0 <tcpip_thread_handle_msg+0x6c>
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d002      	beq.n	8019ca2 <tcpip_thread_handle_msg+0x1e>
 8019c9c:	2b01      	cmp	r3, #1
 8019c9e:	d015      	beq.n	8019ccc <tcpip_thread_handle_msg+0x48>
 8019ca0:	e026      	b.n	8019cf0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	68db      	ldr	r3, [r3, #12]
 8019ca6:	687a      	ldr	r2, [r7, #4]
 8019ca8:	6850      	ldr	r0, [r2, #4]
 8019caa:	687a      	ldr	r2, [r7, #4]
 8019cac:	6892      	ldr	r2, [r2, #8]
 8019cae:	4611      	mov	r1, r2
 8019cb0:	4798      	blx	r3
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d004      	beq.n	8019cc2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	685b      	ldr	r3, [r3, #4]
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f001 fcdb 	bl	801b678 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019cc2:	6879      	ldr	r1, [r7, #4]
 8019cc4:	2009      	movs	r0, #9
 8019cc6:	f000 fe33 	bl	801a930 <memp_free>
      break;
 8019cca:	e018      	b.n	8019cfe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	685b      	ldr	r3, [r3, #4]
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	6892      	ldr	r2, [r2, #8]
 8019cd4:	4610      	mov	r0, r2
 8019cd6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8019cd8:	6879      	ldr	r1, [r7, #4]
 8019cda:	2008      	movs	r0, #8
 8019cdc:	f000 fe28 	bl	801a930 <memp_free>
      break;
 8019ce0:	e00d      	b.n	8019cfe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	685b      	ldr	r3, [r3, #4]
 8019ce6:	687a      	ldr	r2, [r7, #4]
 8019ce8:	6892      	ldr	r2, [r2, #8]
 8019cea:	4610      	mov	r0, r2
 8019cec:	4798      	blx	r3
      break;
 8019cee:	e006      	b.n	8019cfe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8019cf0:	4b05      	ldr	r3, [pc, #20]	; (8019d08 <tcpip_thread_handle_msg+0x84>)
 8019cf2:	22cf      	movs	r2, #207	; 0xcf
 8019cf4:	4905      	ldr	r1, [pc, #20]	; (8019d0c <tcpip_thread_handle_msg+0x88>)
 8019cf6:	4806      	ldr	r0, [pc, #24]	; (8019d10 <tcpip_thread_handle_msg+0x8c>)
 8019cf8:	f00c f8fa 	bl	8025ef0 <iprintf>
      break;
 8019cfc:	bf00      	nop
  }
}
 8019cfe:	bf00      	nop
 8019d00:	3708      	adds	r7, #8
 8019d02:	46bd      	mov	sp, r7
 8019d04:	bd80      	pop	{r7, pc}
 8019d06:	bf00      	nop
 8019d08:	08027310 	.word	0x08027310
 8019d0c:	08027340 	.word	0x08027340
 8019d10:	08027360 	.word	0x08027360

08019d14 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b086      	sub	sp, #24
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	60f8      	str	r0, [r7, #12]
 8019d1c:	60b9      	str	r1, [r7, #8]
 8019d1e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019d20:	481a      	ldr	r0, [pc, #104]	; (8019d8c <tcpip_inpkt+0x78>)
 8019d22:	f00a ffa8 	bl	8024c76 <sys_mbox_valid>
 8019d26:	4603      	mov	r3, r0
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d105      	bne.n	8019d38 <tcpip_inpkt+0x24>
 8019d2c:	4b18      	ldr	r3, [pc, #96]	; (8019d90 <tcpip_inpkt+0x7c>)
 8019d2e:	22fc      	movs	r2, #252	; 0xfc
 8019d30:	4918      	ldr	r1, [pc, #96]	; (8019d94 <tcpip_inpkt+0x80>)
 8019d32:	4819      	ldr	r0, [pc, #100]	; (8019d98 <tcpip_inpkt+0x84>)
 8019d34:	f00c f8dc 	bl	8025ef0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8019d38:	2009      	movs	r0, #9
 8019d3a:	f000 fda7 	bl	801a88c <memp_malloc>
 8019d3e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8019d40:	697b      	ldr	r3, [r7, #20]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d102      	bne.n	8019d4c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8019d46:	f04f 33ff 	mov.w	r3, #4294967295
 8019d4a:	e01a      	b.n	8019d82 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8019d4c:	697b      	ldr	r3, [r7, #20]
 8019d4e:	2200      	movs	r2, #0
 8019d50:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8019d52:	697b      	ldr	r3, [r7, #20]
 8019d54:	68fa      	ldr	r2, [r7, #12]
 8019d56:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8019d58:	697b      	ldr	r3, [r7, #20]
 8019d5a:	68ba      	ldr	r2, [r7, #8]
 8019d5c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8019d5e:	697b      	ldr	r3, [r7, #20]
 8019d60:	687a      	ldr	r2, [r7, #4]
 8019d62:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019d64:	6979      	ldr	r1, [r7, #20]
 8019d66:	4809      	ldr	r0, [pc, #36]	; (8019d8c <tcpip_inpkt+0x78>)
 8019d68:	f00a ff10 	bl	8024b8c <sys_mbox_trypost>
 8019d6c:	4603      	mov	r3, r0
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d006      	beq.n	8019d80 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8019d72:	6979      	ldr	r1, [r7, #20]
 8019d74:	2009      	movs	r0, #9
 8019d76:	f000 fddb 	bl	801a930 <memp_free>
    return ERR_MEM;
 8019d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d7e:	e000      	b.n	8019d82 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8019d80:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8019d82:	4618      	mov	r0, r3
 8019d84:	3718      	adds	r7, #24
 8019d86:	46bd      	mov	sp, r7
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	bf00      	nop
 8019d8c:	200086ec 	.word	0x200086ec
 8019d90:	08027310 	.word	0x08027310
 8019d94:	08027388 	.word	0x08027388
 8019d98:	08027360 	.word	0x08027360

08019d9c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	6078      	str	r0, [r7, #4]
 8019da4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019dac:	f003 0318 	and.w	r3, r3, #24
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d006      	beq.n	8019dc2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8019db4:	4a08      	ldr	r2, [pc, #32]	; (8019dd8 <tcpip_input+0x3c>)
 8019db6:	6839      	ldr	r1, [r7, #0]
 8019db8:	6878      	ldr	r0, [r7, #4]
 8019dba:	f7ff ffab 	bl	8019d14 <tcpip_inpkt>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	e005      	b.n	8019dce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8019dc2:	4a06      	ldr	r2, [pc, #24]	; (8019ddc <tcpip_input+0x40>)
 8019dc4:	6839      	ldr	r1, [r7, #0]
 8019dc6:	6878      	ldr	r0, [r7, #4]
 8019dc8:	f7ff ffa4 	bl	8019d14 <tcpip_inpkt>
 8019dcc:	4603      	mov	r3, r0
}
 8019dce:	4618      	mov	r0, r3
 8019dd0:	3708      	adds	r7, #8
 8019dd2:	46bd      	mov	sp, r7
 8019dd4:	bd80      	pop	{r7, pc}
 8019dd6:	bf00      	nop
 8019dd8:	08024979 	.word	0x08024979
 8019ddc:	0802388d 	.word	0x0802388d

08019de0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8019de0:	b580      	push	{r7, lr}
 8019de2:	b084      	sub	sp, #16
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
 8019de8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8019dea:	4819      	ldr	r0, [pc, #100]	; (8019e50 <tcpip_try_callback+0x70>)
 8019dec:	f00a ff43 	bl	8024c76 <sys_mbox_valid>
 8019df0:	4603      	mov	r3, r0
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d106      	bne.n	8019e04 <tcpip_try_callback+0x24>
 8019df6:	4b17      	ldr	r3, [pc, #92]	; (8019e54 <tcpip_try_callback+0x74>)
 8019df8:	f240 125d 	movw	r2, #349	; 0x15d
 8019dfc:	4916      	ldr	r1, [pc, #88]	; (8019e58 <tcpip_try_callback+0x78>)
 8019dfe:	4817      	ldr	r0, [pc, #92]	; (8019e5c <tcpip_try_callback+0x7c>)
 8019e00:	f00c f876 	bl	8025ef0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8019e04:	2008      	movs	r0, #8
 8019e06:	f000 fd41 	bl	801a88c <memp_malloc>
 8019e0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d102      	bne.n	8019e18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8019e12:	f04f 33ff 	mov.w	r3, #4294967295
 8019e16:	e017      	b.n	8019e48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	2201      	movs	r2, #1
 8019e1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	687a      	ldr	r2, [r7, #4]
 8019e22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	683a      	ldr	r2, [r7, #0]
 8019e28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8019e2a:	68f9      	ldr	r1, [r7, #12]
 8019e2c:	4808      	ldr	r0, [pc, #32]	; (8019e50 <tcpip_try_callback+0x70>)
 8019e2e:	f00a fead 	bl	8024b8c <sys_mbox_trypost>
 8019e32:	4603      	mov	r3, r0
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d006      	beq.n	8019e46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8019e38:	68f9      	ldr	r1, [r7, #12]
 8019e3a:	2008      	movs	r0, #8
 8019e3c:	f000 fd78 	bl	801a930 <memp_free>
    return ERR_MEM;
 8019e40:	f04f 33ff 	mov.w	r3, #4294967295
 8019e44:	e000      	b.n	8019e48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8019e46:	2300      	movs	r3, #0
}
 8019e48:	4618      	mov	r0, r3
 8019e4a:	3710      	adds	r7, #16
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}
 8019e50:	200086ec 	.word	0x200086ec
 8019e54:	08027310 	.word	0x08027310
 8019e58:	08027388 	.word	0x08027388
 8019e5c:	08027360 	.word	0x08027360

08019e60 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b084      	sub	sp, #16
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8019e6c:	4806      	ldr	r0, [pc, #24]	; (8019e88 <tcpip_send_msg_wait_sem+0x28>)
 8019e6e:	f00a ffdb 	bl	8024e28 <sys_mutex_lock>
  fn(apimsg);
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	68b8      	ldr	r0, [r7, #8]
 8019e76:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8019e78:	4803      	ldr	r0, [pc, #12]	; (8019e88 <tcpip_send_msg_wait_sem+0x28>)
 8019e7a:	f00a ffe4 	bl	8024e46 <sys_mutex_unlock>
  return ERR_OK;
 8019e7e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3710      	adds	r7, #16
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}
 8019e88:	2000cb9c 	.word	0x2000cb9c

08019e8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8019e8c:	b580      	push	{r7, lr}
 8019e8e:	b084      	sub	sp, #16
 8019e90:	af02      	add	r7, sp, #8
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	6039      	str	r1, [r7, #0]
  lwip_init();
 8019e96:	f000 f871 	bl	8019f7c <lwip_init>

  tcpip_init_done = initfunc;
 8019e9a:	4a17      	ldr	r2, [pc, #92]	; (8019ef8 <tcpip_init+0x6c>)
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8019ea0:	4a16      	ldr	r2, [pc, #88]	; (8019efc <tcpip_init+0x70>)
 8019ea2:	683b      	ldr	r3, [r7, #0]
 8019ea4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8019ea6:	2106      	movs	r1, #6
 8019ea8:	4815      	ldr	r0, [pc, #84]	; (8019f00 <tcpip_init+0x74>)
 8019eaa:	f00a fe3b 	bl	8024b24 <sys_mbox_new>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d006      	beq.n	8019ec2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8019eb4:	4b13      	ldr	r3, [pc, #76]	; (8019f04 <tcpip_init+0x78>)
 8019eb6:	f240 2261 	movw	r2, #609	; 0x261
 8019eba:	4913      	ldr	r1, [pc, #76]	; (8019f08 <tcpip_init+0x7c>)
 8019ebc:	4813      	ldr	r0, [pc, #76]	; (8019f0c <tcpip_init+0x80>)
 8019ebe:	f00c f817 	bl	8025ef0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8019ec2:	4813      	ldr	r0, [pc, #76]	; (8019f10 <tcpip_init+0x84>)
 8019ec4:	f00a ff94 	bl	8024df0 <sys_mutex_new>
 8019ec8:	4603      	mov	r3, r0
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d006      	beq.n	8019edc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8019ece:	4b0d      	ldr	r3, [pc, #52]	; (8019f04 <tcpip_init+0x78>)
 8019ed0:	f240 2265 	movw	r2, #613	; 0x265
 8019ed4:	490f      	ldr	r1, [pc, #60]	; (8019f14 <tcpip_init+0x88>)
 8019ed6:	480d      	ldr	r0, [pc, #52]	; (8019f0c <tcpip_init+0x80>)
 8019ed8:	f00c f80a 	bl	8025ef0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8019edc:	2300      	movs	r3, #0
 8019ede:	9300      	str	r3, [sp, #0]
 8019ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ee4:	2200      	movs	r2, #0
 8019ee6:	490c      	ldr	r1, [pc, #48]	; (8019f18 <tcpip_init+0x8c>)
 8019ee8:	480c      	ldr	r0, [pc, #48]	; (8019f1c <tcpip_init+0x90>)
 8019eea:	f00a ffb9 	bl	8024e60 <sys_thread_new>
}
 8019eee:	bf00      	nop
 8019ef0:	3708      	adds	r7, #8
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}
 8019ef6:	bf00      	nop
 8019ef8:	200086e4 	.word	0x200086e4
 8019efc:	200086e8 	.word	0x200086e8
 8019f00:	200086ec 	.word	0x200086ec
 8019f04:	08027310 	.word	0x08027310
 8019f08:	08027398 	.word	0x08027398
 8019f0c:	08027360 	.word	0x08027360
 8019f10:	2000cb9c 	.word	0x2000cb9c
 8019f14:	080273bc 	.word	0x080273bc
 8019f18:	08019c1d 	.word	0x08019c1d
 8019f1c:	080273e0 	.word	0x080273e0

08019f20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8019f20:	b480      	push	{r7}
 8019f22:	b083      	sub	sp, #12
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	4603      	mov	r3, r0
 8019f28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8019f2a:	88fb      	ldrh	r3, [r7, #6]
 8019f2c:	021b      	lsls	r3, r3, #8
 8019f2e:	b21a      	sxth	r2, r3
 8019f30:	88fb      	ldrh	r3, [r7, #6]
 8019f32:	0a1b      	lsrs	r3, r3, #8
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	b21b      	sxth	r3, r3
 8019f38:	4313      	orrs	r3, r2
 8019f3a:	b21b      	sxth	r3, r3
 8019f3c:	b29b      	uxth	r3, r3
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	370c      	adds	r7, #12
 8019f42:	46bd      	mov	sp, r7
 8019f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f48:	4770      	bx	lr

08019f4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8019f4a:	b480      	push	{r7}
 8019f4c:	b083      	sub	sp, #12
 8019f4e:	af00      	add	r7, sp, #0
 8019f50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	061a      	lsls	r2, r3, #24
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	021b      	lsls	r3, r3, #8
 8019f5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8019f5e:	431a      	orrs	r2, r3
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	0a1b      	lsrs	r3, r3, #8
 8019f64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f68:	431a      	orrs	r2, r3
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	0e1b      	lsrs	r3, r3, #24
 8019f6e:	4313      	orrs	r3, r2
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	370c      	adds	r7, #12
 8019f74:	46bd      	mov	sp, r7
 8019f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7a:	4770      	bx	lr

08019f7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019f7c:	b580      	push	{r7, lr}
 8019f7e:	b082      	sub	sp, #8
 8019f80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8019f82:	2300      	movs	r3, #0
 8019f84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019f86:	f00a ff25 	bl	8024dd4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019f8a:	f000 f8d5 	bl	801a138 <mem_init>
  memp_init();
 8019f8e:	f000 fc31 	bl	801a7f4 <memp_init>
  pbuf_init();
  netif_init();
 8019f92:	f000 fcf7 	bl	801a984 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019f96:	f008 f805 	bl	8021fa4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019f9a:	f001 fe07 	bl	801bbac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8019f9e:	f007 ff47 	bl	8021e30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8019fa2:	bf00      	nop
 8019fa4:	3708      	adds	r7, #8
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
	...

08019fac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8019fac:	b480      	push	{r7}
 8019fae:	b083      	sub	sp, #12
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8019fb6:	4b05      	ldr	r3, [pc, #20]	; (8019fcc <ptr_to_mem+0x20>)
 8019fb8:	681a      	ldr	r2, [r3, #0]
 8019fba:	88fb      	ldrh	r3, [r7, #6]
 8019fbc:	4413      	add	r3, r2
}
 8019fbe:	4618      	mov	r0, r3
 8019fc0:	370c      	adds	r7, #12
 8019fc2:	46bd      	mov	sp, r7
 8019fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc8:	4770      	bx	lr
 8019fca:	bf00      	nop
 8019fcc:	200086f0 	.word	0x200086f0

08019fd0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8019fd0:	b480      	push	{r7}
 8019fd2:	b083      	sub	sp, #12
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8019fd8:	4b05      	ldr	r3, [pc, #20]	; (8019ff0 <mem_to_ptr+0x20>)
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	687a      	ldr	r2, [r7, #4]
 8019fde:	1ad3      	subs	r3, r2, r3
 8019fe0:	b29b      	uxth	r3, r3
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	370c      	adds	r7, #12
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fec:	4770      	bx	lr
 8019fee:	bf00      	nop
 8019ff0:	200086f0 	.word	0x200086f0

08019ff4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8019ff4:	b590      	push	{r4, r7, lr}
 8019ff6:	b085      	sub	sp, #20
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019ffc:	4b45      	ldr	r3, [pc, #276]	; (801a114 <plug_holes+0x120>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	687a      	ldr	r2, [r7, #4]
 801a002:	429a      	cmp	r2, r3
 801a004:	d206      	bcs.n	801a014 <plug_holes+0x20>
 801a006:	4b44      	ldr	r3, [pc, #272]	; (801a118 <plug_holes+0x124>)
 801a008:	f240 12df 	movw	r2, #479	; 0x1df
 801a00c:	4943      	ldr	r1, [pc, #268]	; (801a11c <plug_holes+0x128>)
 801a00e:	4844      	ldr	r0, [pc, #272]	; (801a120 <plug_holes+0x12c>)
 801a010:	f00b ff6e 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a014:	4b43      	ldr	r3, [pc, #268]	; (801a124 <plug_holes+0x130>)
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	687a      	ldr	r2, [r7, #4]
 801a01a:	429a      	cmp	r2, r3
 801a01c:	d306      	bcc.n	801a02c <plug_holes+0x38>
 801a01e:	4b3e      	ldr	r3, [pc, #248]	; (801a118 <plug_holes+0x124>)
 801a020:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a024:	4940      	ldr	r1, [pc, #256]	; (801a128 <plug_holes+0x134>)
 801a026:	483e      	ldr	r0, [pc, #248]	; (801a120 <plug_holes+0x12c>)
 801a028:	f00b ff62 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	791b      	ldrb	r3, [r3, #4]
 801a030:	2b00      	cmp	r3, #0
 801a032:	d006      	beq.n	801a042 <plug_holes+0x4e>
 801a034:	4b38      	ldr	r3, [pc, #224]	; (801a118 <plug_holes+0x124>)
 801a036:	f240 12e1 	movw	r2, #481	; 0x1e1
 801a03a:	493c      	ldr	r1, [pc, #240]	; (801a12c <plug_holes+0x138>)
 801a03c:	4838      	ldr	r0, [pc, #224]	; (801a120 <plug_holes+0x12c>)
 801a03e:	f00b ff57 	bl	8025ef0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a04a:	d906      	bls.n	801a05a <plug_holes+0x66>
 801a04c:	4b32      	ldr	r3, [pc, #200]	; (801a118 <plug_holes+0x124>)
 801a04e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801a052:	4937      	ldr	r1, [pc, #220]	; (801a130 <plug_holes+0x13c>)
 801a054:	4832      	ldr	r0, [pc, #200]	; (801a120 <plug_holes+0x12c>)
 801a056:	f00b ff4b 	bl	8025ef0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	4618      	mov	r0, r3
 801a060:	f7ff ffa4 	bl	8019fac <ptr_to_mem>
 801a064:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801a066:	687a      	ldr	r2, [r7, #4]
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	429a      	cmp	r2, r3
 801a06c:	d024      	beq.n	801a0b8 <plug_holes+0xc4>
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	791b      	ldrb	r3, [r3, #4]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d120      	bne.n	801a0b8 <plug_holes+0xc4>
 801a076:	4b2b      	ldr	r3, [pc, #172]	; (801a124 <plug_holes+0x130>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	68fa      	ldr	r2, [r7, #12]
 801a07c:	429a      	cmp	r2, r3
 801a07e:	d01b      	beq.n	801a0b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801a080:	4b2c      	ldr	r3, [pc, #176]	; (801a134 <plug_holes+0x140>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	429a      	cmp	r2, r3
 801a088:	d102      	bne.n	801a090 <plug_holes+0x9c>
      lfree = mem;
 801a08a:	4a2a      	ldr	r2, [pc, #168]	; (801a134 <plug_holes+0x140>)
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	881a      	ldrh	r2, [r3, #0]
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801a098:	68fb      	ldr	r3, [r7, #12]
 801a09a:	881b      	ldrh	r3, [r3, #0]
 801a09c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a0a0:	d00a      	beq.n	801a0b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	881b      	ldrh	r3, [r3, #0]
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7ff ff80 	bl	8019fac <ptr_to_mem>
 801a0ac:	4604      	mov	r4, r0
 801a0ae:	6878      	ldr	r0, [r7, #4]
 801a0b0:	f7ff ff8e 	bl	8019fd0 <mem_to_ptr>
 801a0b4:	4603      	mov	r3, r0
 801a0b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	885b      	ldrh	r3, [r3, #2]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7ff ff75 	bl	8019fac <ptr_to_mem>
 801a0c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801a0c4:	68ba      	ldr	r2, [r7, #8]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	429a      	cmp	r2, r3
 801a0ca:	d01f      	beq.n	801a10c <plug_holes+0x118>
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	791b      	ldrb	r3, [r3, #4]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d11b      	bne.n	801a10c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801a0d4:	4b17      	ldr	r3, [pc, #92]	; (801a134 <plug_holes+0x140>)
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	429a      	cmp	r2, r3
 801a0dc:	d102      	bne.n	801a0e4 <plug_holes+0xf0>
      lfree = pmem;
 801a0de:	4a15      	ldr	r2, [pc, #84]	; (801a134 <plug_holes+0x140>)
 801a0e0:	68bb      	ldr	r3, [r7, #8]
 801a0e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	881a      	ldrh	r2, [r3, #0]
 801a0e8:	68bb      	ldr	r3, [r7, #8]
 801a0ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	881b      	ldrh	r3, [r3, #0]
 801a0f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a0f4:	d00a      	beq.n	801a10c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	881b      	ldrh	r3, [r3, #0]
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	f7ff ff56 	bl	8019fac <ptr_to_mem>
 801a100:	4604      	mov	r4, r0
 801a102:	68b8      	ldr	r0, [r7, #8]
 801a104:	f7ff ff64 	bl	8019fd0 <mem_to_ptr>
 801a108:	4603      	mov	r3, r0
 801a10a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801a10c:	bf00      	nop
 801a10e:	3714      	adds	r7, #20
 801a110:	46bd      	mov	sp, r7
 801a112:	bd90      	pop	{r4, r7, pc}
 801a114:	200086f0 	.word	0x200086f0
 801a118:	080273f0 	.word	0x080273f0
 801a11c:	08027420 	.word	0x08027420
 801a120:	08027438 	.word	0x08027438
 801a124:	200086f4 	.word	0x200086f4
 801a128:	08027460 	.word	0x08027460
 801a12c:	0802747c 	.word	0x0802747c
 801a130:	08027498 	.word	0x08027498
 801a134:	200086fc 	.word	0x200086fc

0801a138 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b082      	sub	sp, #8
 801a13c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a13e:	4b1f      	ldr	r3, [pc, #124]	; (801a1bc <mem_init+0x84>)
 801a140:	3303      	adds	r3, #3
 801a142:	f023 0303 	bic.w	r3, r3, #3
 801a146:	461a      	mov	r2, r3
 801a148:	4b1d      	ldr	r3, [pc, #116]	; (801a1c0 <mem_init+0x88>)
 801a14a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801a14c:	4b1c      	ldr	r3, [pc, #112]	; (801a1c0 <mem_init+0x88>)
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a158:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2200      	movs	r2, #0
 801a15e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2200      	movs	r2, #0
 801a164:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a166:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801a16a:	f7ff ff1f 	bl	8019fac <ptr_to_mem>
 801a16e:	4603      	mov	r3, r0
 801a170:	4a14      	ldr	r2, [pc, #80]	; (801a1c4 <mem_init+0x8c>)
 801a172:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801a174:	4b13      	ldr	r3, [pc, #76]	; (801a1c4 <mem_init+0x8c>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	2201      	movs	r2, #1
 801a17a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801a17c:	4b11      	ldr	r3, [pc, #68]	; (801a1c4 <mem_init+0x8c>)
 801a17e:	681b      	ldr	r3, [r3, #0]
 801a180:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a184:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801a186:	4b0f      	ldr	r3, [pc, #60]	; (801a1c4 <mem_init+0x8c>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801a18e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801a190:	4b0b      	ldr	r3, [pc, #44]	; (801a1c0 <mem_init+0x88>)
 801a192:	681b      	ldr	r3, [r3, #0]
 801a194:	4a0c      	ldr	r2, [pc, #48]	; (801a1c8 <mem_init+0x90>)
 801a196:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a198:	480c      	ldr	r0, [pc, #48]	; (801a1cc <mem_init+0x94>)
 801a19a:	f00a fe29 	bl	8024df0 <sys_mutex_new>
 801a19e:	4603      	mov	r3, r0
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d006      	beq.n	801a1b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a1a4:	4b0a      	ldr	r3, [pc, #40]	; (801a1d0 <mem_init+0x98>)
 801a1a6:	f240 221f 	movw	r2, #543	; 0x21f
 801a1aa:	490a      	ldr	r1, [pc, #40]	; (801a1d4 <mem_init+0x9c>)
 801a1ac:	480a      	ldr	r0, [pc, #40]	; (801a1d8 <mem_init+0xa0>)
 801a1ae:	f00b fe9f 	bl	8025ef0 <iprintf>
  }
}
 801a1b2:	bf00      	nop
 801a1b4:	3708      	adds	r7, #8
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bd80      	pop	{r7, pc}
 801a1ba:	bf00      	nop
 801a1bc:	2000cbb8 	.word	0x2000cbb8
 801a1c0:	200086f0 	.word	0x200086f0
 801a1c4:	200086f4 	.word	0x200086f4
 801a1c8:	200086fc 	.word	0x200086fc
 801a1cc:	200086f8 	.word	0x200086f8
 801a1d0:	080273f0 	.word	0x080273f0
 801a1d4:	080274c4 	.word	0x080274c4
 801a1d8:	08027438 	.word	0x08027438

0801a1dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b086      	sub	sp, #24
 801a1e0:	af00      	add	r7, sp, #0
 801a1e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801a1e4:	6878      	ldr	r0, [r7, #4]
 801a1e6:	f7ff fef3 	bl	8019fd0 <mem_to_ptr>
 801a1ea:	4603      	mov	r3, r0
 801a1ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	881b      	ldrh	r3, [r3, #0]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7ff feda 	bl	8019fac <ptr_to_mem>
 801a1f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	885b      	ldrh	r3, [r3, #2]
 801a1fe:	4618      	mov	r0, r3
 801a200:	f7ff fed4 	bl	8019fac <ptr_to_mem>
 801a204:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	881b      	ldrh	r3, [r3, #0]
 801a20a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a20e:	d818      	bhi.n	801a242 <mem_link_valid+0x66>
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	885b      	ldrh	r3, [r3, #2]
 801a214:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a218:	d813      	bhi.n	801a242 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801a21e:	8afa      	ldrh	r2, [r7, #22]
 801a220:	429a      	cmp	r2, r3
 801a222:	d004      	beq.n	801a22e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	881b      	ldrh	r3, [r3, #0]
 801a228:	8afa      	ldrh	r2, [r7, #22]
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d109      	bne.n	801a242 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801a22e:	4b08      	ldr	r3, [pc, #32]	; (801a250 <mem_link_valid+0x74>)
 801a230:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801a232:	693a      	ldr	r2, [r7, #16]
 801a234:	429a      	cmp	r2, r3
 801a236:	d006      	beq.n	801a246 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801a238:	693b      	ldr	r3, [r7, #16]
 801a23a:	885b      	ldrh	r3, [r3, #2]
 801a23c:	8afa      	ldrh	r2, [r7, #22]
 801a23e:	429a      	cmp	r2, r3
 801a240:	d001      	beq.n	801a246 <mem_link_valid+0x6a>
    return 0;
 801a242:	2300      	movs	r3, #0
 801a244:	e000      	b.n	801a248 <mem_link_valid+0x6c>
  }
  return 1;
 801a246:	2301      	movs	r3, #1
}
 801a248:	4618      	mov	r0, r3
 801a24a:	3718      	adds	r7, #24
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	200086f4 	.word	0x200086f4

0801a254 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b088      	sub	sp, #32
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d070      	beq.n	801a344 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	f003 0303 	and.w	r3, r3, #3
 801a268:	2b00      	cmp	r3, #0
 801a26a:	d00d      	beq.n	801a288 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a26c:	4b37      	ldr	r3, [pc, #220]	; (801a34c <mem_free+0xf8>)
 801a26e:	f240 2273 	movw	r2, #627	; 0x273
 801a272:	4937      	ldr	r1, [pc, #220]	; (801a350 <mem_free+0xfc>)
 801a274:	4837      	ldr	r0, [pc, #220]	; (801a354 <mem_free+0x100>)
 801a276:	f00b fe3b 	bl	8025ef0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a27a:	f00a fe17 	bl	8024eac <sys_arch_protect>
 801a27e:	60f8      	str	r0, [r7, #12]
 801a280:	68f8      	ldr	r0, [r7, #12]
 801a282:	f00a fe21 	bl	8024ec8 <sys_arch_unprotect>
    return;
 801a286:	e05e      	b.n	801a346 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	3b08      	subs	r3, #8
 801a28c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a28e:	4b32      	ldr	r3, [pc, #200]	; (801a358 <mem_free+0x104>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	69fa      	ldr	r2, [r7, #28]
 801a294:	429a      	cmp	r2, r3
 801a296:	d306      	bcc.n	801a2a6 <mem_free+0x52>
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	f103 020c 	add.w	r2, r3, #12
 801a29e:	4b2f      	ldr	r3, [pc, #188]	; (801a35c <mem_free+0x108>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	429a      	cmp	r2, r3
 801a2a4:	d90d      	bls.n	801a2c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a2a6:	4b29      	ldr	r3, [pc, #164]	; (801a34c <mem_free+0xf8>)
 801a2a8:	f240 227f 	movw	r2, #639	; 0x27f
 801a2ac:	492c      	ldr	r1, [pc, #176]	; (801a360 <mem_free+0x10c>)
 801a2ae:	4829      	ldr	r0, [pc, #164]	; (801a354 <mem_free+0x100>)
 801a2b0:	f00b fe1e 	bl	8025ef0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a2b4:	f00a fdfa 	bl	8024eac <sys_arch_protect>
 801a2b8:	6138      	str	r0, [r7, #16]
 801a2ba:	6938      	ldr	r0, [r7, #16]
 801a2bc:	f00a fe04 	bl	8024ec8 <sys_arch_unprotect>
    return;
 801a2c0:	e041      	b.n	801a346 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801a2c2:	4828      	ldr	r0, [pc, #160]	; (801a364 <mem_free+0x110>)
 801a2c4:	f00a fdb0 	bl	8024e28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801a2c8:	69fb      	ldr	r3, [r7, #28]
 801a2ca:	791b      	ldrb	r3, [r3, #4]
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d110      	bne.n	801a2f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a2d0:	4b1e      	ldr	r3, [pc, #120]	; (801a34c <mem_free+0xf8>)
 801a2d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801a2d6:	4924      	ldr	r1, [pc, #144]	; (801a368 <mem_free+0x114>)
 801a2d8:	481e      	ldr	r0, [pc, #120]	; (801a354 <mem_free+0x100>)
 801a2da:	f00b fe09 	bl	8025ef0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801a2de:	4821      	ldr	r0, [pc, #132]	; (801a364 <mem_free+0x110>)
 801a2e0:	f00a fdb1 	bl	8024e46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a2e4:	f00a fde2 	bl	8024eac <sys_arch_protect>
 801a2e8:	6178      	str	r0, [r7, #20]
 801a2ea:	6978      	ldr	r0, [r7, #20]
 801a2ec:	f00a fdec 	bl	8024ec8 <sys_arch_unprotect>
    return;
 801a2f0:	e029      	b.n	801a346 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801a2f2:	69f8      	ldr	r0, [r7, #28]
 801a2f4:	f7ff ff72 	bl	801a1dc <mem_link_valid>
 801a2f8:	4603      	mov	r3, r0
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d110      	bne.n	801a320 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a2fe:	4b13      	ldr	r3, [pc, #76]	; (801a34c <mem_free+0xf8>)
 801a300:	f240 2295 	movw	r2, #661	; 0x295
 801a304:	4919      	ldr	r1, [pc, #100]	; (801a36c <mem_free+0x118>)
 801a306:	4813      	ldr	r0, [pc, #76]	; (801a354 <mem_free+0x100>)
 801a308:	f00b fdf2 	bl	8025ef0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801a30c:	4815      	ldr	r0, [pc, #84]	; (801a364 <mem_free+0x110>)
 801a30e:	f00a fd9a 	bl	8024e46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a312:	f00a fdcb 	bl	8024eac <sys_arch_protect>
 801a316:	61b8      	str	r0, [r7, #24]
 801a318:	69b8      	ldr	r0, [r7, #24]
 801a31a:	f00a fdd5 	bl	8024ec8 <sys_arch_unprotect>
    return;
 801a31e:	e012      	b.n	801a346 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801a320:	69fb      	ldr	r3, [r7, #28]
 801a322:	2200      	movs	r2, #0
 801a324:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801a326:	4b12      	ldr	r3, [pc, #72]	; (801a370 <mem_free+0x11c>)
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	69fa      	ldr	r2, [r7, #28]
 801a32c:	429a      	cmp	r2, r3
 801a32e:	d202      	bcs.n	801a336 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801a330:	4a0f      	ldr	r2, [pc, #60]	; (801a370 <mem_free+0x11c>)
 801a332:	69fb      	ldr	r3, [r7, #28]
 801a334:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801a336:	69f8      	ldr	r0, [r7, #28]
 801a338:	f7ff fe5c 	bl	8019ff4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801a33c:	4809      	ldr	r0, [pc, #36]	; (801a364 <mem_free+0x110>)
 801a33e:	f00a fd82 	bl	8024e46 <sys_mutex_unlock>
 801a342:	e000      	b.n	801a346 <mem_free+0xf2>
    return;
 801a344:	bf00      	nop
}
 801a346:	3720      	adds	r7, #32
 801a348:	46bd      	mov	sp, r7
 801a34a:	bd80      	pop	{r7, pc}
 801a34c:	080273f0 	.word	0x080273f0
 801a350:	080274e0 	.word	0x080274e0
 801a354:	08027438 	.word	0x08027438
 801a358:	200086f0 	.word	0x200086f0
 801a35c:	200086f4 	.word	0x200086f4
 801a360:	08027504 	.word	0x08027504
 801a364:	200086f8 	.word	0x200086f8
 801a368:	08027520 	.word	0x08027520
 801a36c:	08027548 	.word	0x08027548
 801a370:	200086fc 	.word	0x200086fc

0801a374 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b088      	sub	sp, #32
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
 801a37c:	460b      	mov	r3, r1
 801a37e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a380:	887b      	ldrh	r3, [r7, #2]
 801a382:	3303      	adds	r3, #3
 801a384:	b29b      	uxth	r3, r3
 801a386:	f023 0303 	bic.w	r3, r3, #3
 801a38a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801a38c:	8bfb      	ldrh	r3, [r7, #30]
 801a38e:	2b0b      	cmp	r3, #11
 801a390:	d801      	bhi.n	801a396 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801a392:	230c      	movs	r3, #12
 801a394:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a396:	8bfb      	ldrh	r3, [r7, #30]
 801a398:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a39c:	d803      	bhi.n	801a3a6 <mem_trim+0x32>
 801a39e:	8bfa      	ldrh	r2, [r7, #30]
 801a3a0:	887b      	ldrh	r3, [r7, #2]
 801a3a2:	429a      	cmp	r2, r3
 801a3a4:	d201      	bcs.n	801a3aa <mem_trim+0x36>
    return NULL;
 801a3a6:	2300      	movs	r3, #0
 801a3a8:	e0d8      	b.n	801a55c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801a3aa:	4b6e      	ldr	r3, [pc, #440]	; (801a564 <mem_trim+0x1f0>)
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	429a      	cmp	r2, r3
 801a3b2:	d304      	bcc.n	801a3be <mem_trim+0x4a>
 801a3b4:	4b6c      	ldr	r3, [pc, #432]	; (801a568 <mem_trim+0x1f4>)
 801a3b6:	681b      	ldr	r3, [r3, #0]
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	429a      	cmp	r2, r3
 801a3bc:	d306      	bcc.n	801a3cc <mem_trim+0x58>
 801a3be:	4b6b      	ldr	r3, [pc, #428]	; (801a56c <mem_trim+0x1f8>)
 801a3c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a3c4:	496a      	ldr	r1, [pc, #424]	; (801a570 <mem_trim+0x1fc>)
 801a3c6:	486b      	ldr	r0, [pc, #428]	; (801a574 <mem_trim+0x200>)
 801a3c8:	f00b fd92 	bl	8025ef0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a3cc:	4b65      	ldr	r3, [pc, #404]	; (801a564 <mem_trim+0x1f0>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	687a      	ldr	r2, [r7, #4]
 801a3d2:	429a      	cmp	r2, r3
 801a3d4:	d304      	bcc.n	801a3e0 <mem_trim+0x6c>
 801a3d6:	4b64      	ldr	r3, [pc, #400]	; (801a568 <mem_trim+0x1f4>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	687a      	ldr	r2, [r7, #4]
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d307      	bcc.n	801a3f0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801a3e0:	f00a fd64 	bl	8024eac <sys_arch_protect>
 801a3e4:	60b8      	str	r0, [r7, #8]
 801a3e6:	68b8      	ldr	r0, [r7, #8]
 801a3e8:	f00a fd6e 	bl	8024ec8 <sys_arch_unprotect>
    return rmem;
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	e0b5      	b.n	801a55c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	3b08      	subs	r3, #8
 801a3f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801a3f6:	69b8      	ldr	r0, [r7, #24]
 801a3f8:	f7ff fdea 	bl	8019fd0 <mem_to_ptr>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	881a      	ldrh	r2, [r3, #0]
 801a404:	8afb      	ldrh	r3, [r7, #22]
 801a406:	1ad3      	subs	r3, r2, r3
 801a408:	b29b      	uxth	r3, r3
 801a40a:	3b08      	subs	r3, #8
 801a40c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a40e:	8bfa      	ldrh	r2, [r7, #30]
 801a410:	8abb      	ldrh	r3, [r7, #20]
 801a412:	429a      	cmp	r2, r3
 801a414:	d906      	bls.n	801a424 <mem_trim+0xb0>
 801a416:	4b55      	ldr	r3, [pc, #340]	; (801a56c <mem_trim+0x1f8>)
 801a418:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801a41c:	4956      	ldr	r1, [pc, #344]	; (801a578 <mem_trim+0x204>)
 801a41e:	4855      	ldr	r0, [pc, #340]	; (801a574 <mem_trim+0x200>)
 801a420:	f00b fd66 	bl	8025ef0 <iprintf>
  if (newsize > size) {
 801a424:	8bfa      	ldrh	r2, [r7, #30]
 801a426:	8abb      	ldrh	r3, [r7, #20]
 801a428:	429a      	cmp	r2, r3
 801a42a:	d901      	bls.n	801a430 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801a42c:	2300      	movs	r3, #0
 801a42e:	e095      	b.n	801a55c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801a430:	8bfa      	ldrh	r2, [r7, #30]
 801a432:	8abb      	ldrh	r3, [r7, #20]
 801a434:	429a      	cmp	r2, r3
 801a436:	d101      	bne.n	801a43c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	e08f      	b.n	801a55c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801a43c:	484f      	ldr	r0, [pc, #316]	; (801a57c <mem_trim+0x208>)
 801a43e:	f00a fcf3 	bl	8024e28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801a442:	69bb      	ldr	r3, [r7, #24]
 801a444:	881b      	ldrh	r3, [r3, #0]
 801a446:	4618      	mov	r0, r3
 801a448:	f7ff fdb0 	bl	8019fac <ptr_to_mem>
 801a44c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801a44e:	693b      	ldr	r3, [r7, #16]
 801a450:	791b      	ldrb	r3, [r3, #4]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d13f      	bne.n	801a4d6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a456:	69bb      	ldr	r3, [r7, #24]
 801a458:	881b      	ldrh	r3, [r3, #0]
 801a45a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a45e:	d106      	bne.n	801a46e <mem_trim+0xfa>
 801a460:	4b42      	ldr	r3, [pc, #264]	; (801a56c <mem_trim+0x1f8>)
 801a462:	f240 22f5 	movw	r2, #757	; 0x2f5
 801a466:	4946      	ldr	r1, [pc, #280]	; (801a580 <mem_trim+0x20c>)
 801a468:	4842      	ldr	r0, [pc, #264]	; (801a574 <mem_trim+0x200>)
 801a46a:	f00b fd41 	bl	8025ef0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801a46e:	693b      	ldr	r3, [r7, #16]
 801a470:	881b      	ldrh	r3, [r3, #0]
 801a472:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a474:	8afa      	ldrh	r2, [r7, #22]
 801a476:	8bfb      	ldrh	r3, [r7, #30]
 801a478:	4413      	add	r3, r2
 801a47a:	b29b      	uxth	r3, r3
 801a47c:	3308      	adds	r3, #8
 801a47e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801a480:	4b40      	ldr	r3, [pc, #256]	; (801a584 <mem_trim+0x210>)
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	693a      	ldr	r2, [r7, #16]
 801a486:	429a      	cmp	r2, r3
 801a488:	d106      	bne.n	801a498 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801a48a:	89fb      	ldrh	r3, [r7, #14]
 801a48c:	4618      	mov	r0, r3
 801a48e:	f7ff fd8d 	bl	8019fac <ptr_to_mem>
 801a492:	4603      	mov	r3, r0
 801a494:	4a3b      	ldr	r2, [pc, #236]	; (801a584 <mem_trim+0x210>)
 801a496:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801a498:	89fb      	ldrh	r3, [r7, #14]
 801a49a:	4618      	mov	r0, r3
 801a49c:	f7ff fd86 	bl	8019fac <ptr_to_mem>
 801a4a0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801a4a2:	693b      	ldr	r3, [r7, #16]
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801a4a8:	693b      	ldr	r3, [r7, #16]
 801a4aa:	89ba      	ldrh	r2, [r7, #12]
 801a4ac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801a4ae:	693b      	ldr	r3, [r7, #16]
 801a4b0:	8afa      	ldrh	r2, [r7, #22]
 801a4b2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801a4b4:	69bb      	ldr	r3, [r7, #24]
 801a4b6:	89fa      	ldrh	r2, [r7, #14]
 801a4b8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a4ba:	693b      	ldr	r3, [r7, #16]
 801a4bc:	881b      	ldrh	r3, [r3, #0]
 801a4be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a4c2:	d047      	beq.n	801a554 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f7ff fd6f 	bl	8019fac <ptr_to_mem>
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	89fb      	ldrh	r3, [r7, #14]
 801a4d2:	8053      	strh	r3, [r2, #2]
 801a4d4:	e03e      	b.n	801a554 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a4d6:	8bfb      	ldrh	r3, [r7, #30]
 801a4d8:	f103 0214 	add.w	r2, r3, #20
 801a4dc:	8abb      	ldrh	r3, [r7, #20]
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d838      	bhi.n	801a554 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a4e2:	8afa      	ldrh	r2, [r7, #22]
 801a4e4:	8bfb      	ldrh	r3, [r7, #30]
 801a4e6:	4413      	add	r3, r2
 801a4e8:	b29b      	uxth	r3, r3
 801a4ea:	3308      	adds	r3, #8
 801a4ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a4ee:	69bb      	ldr	r3, [r7, #24]
 801a4f0:	881b      	ldrh	r3, [r3, #0]
 801a4f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a4f6:	d106      	bne.n	801a506 <mem_trim+0x192>
 801a4f8:	4b1c      	ldr	r3, [pc, #112]	; (801a56c <mem_trim+0x1f8>)
 801a4fa:	f240 3216 	movw	r2, #790	; 0x316
 801a4fe:	4920      	ldr	r1, [pc, #128]	; (801a580 <mem_trim+0x20c>)
 801a500:	481c      	ldr	r0, [pc, #112]	; (801a574 <mem_trim+0x200>)
 801a502:	f00b fcf5 	bl	8025ef0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801a506:	89fb      	ldrh	r3, [r7, #14]
 801a508:	4618      	mov	r0, r3
 801a50a:	f7ff fd4f 	bl	8019fac <ptr_to_mem>
 801a50e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801a510:	4b1c      	ldr	r3, [pc, #112]	; (801a584 <mem_trim+0x210>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	693a      	ldr	r2, [r7, #16]
 801a516:	429a      	cmp	r2, r3
 801a518:	d202      	bcs.n	801a520 <mem_trim+0x1ac>
      lfree = mem2;
 801a51a:	4a1a      	ldr	r2, [pc, #104]	; (801a584 <mem_trim+0x210>)
 801a51c:	693b      	ldr	r3, [r7, #16]
 801a51e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	2200      	movs	r2, #0
 801a524:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801a526:	69bb      	ldr	r3, [r7, #24]
 801a528:	881a      	ldrh	r2, [r3, #0]
 801a52a:	693b      	ldr	r3, [r7, #16]
 801a52c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	8afa      	ldrh	r2, [r7, #22]
 801a532:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801a534:	69bb      	ldr	r3, [r7, #24]
 801a536:	89fa      	ldrh	r2, [r7, #14]
 801a538:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a53a:	693b      	ldr	r3, [r7, #16]
 801a53c:	881b      	ldrh	r3, [r3, #0]
 801a53e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a542:	d007      	beq.n	801a554 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	881b      	ldrh	r3, [r3, #0]
 801a548:	4618      	mov	r0, r3
 801a54a:	f7ff fd2f 	bl	8019fac <ptr_to_mem>
 801a54e:	4602      	mov	r2, r0
 801a550:	89fb      	ldrh	r3, [r7, #14]
 801a552:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801a554:	4809      	ldr	r0, [pc, #36]	; (801a57c <mem_trim+0x208>)
 801a556:	f00a fc76 	bl	8024e46 <sys_mutex_unlock>
  return rmem;
 801a55a:	687b      	ldr	r3, [r7, #4]
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3720      	adds	r7, #32
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	200086f0 	.word	0x200086f0
 801a568:	200086f4 	.word	0x200086f4
 801a56c:	080273f0 	.word	0x080273f0
 801a570:	0802757c 	.word	0x0802757c
 801a574:	08027438 	.word	0x08027438
 801a578:	08027594 	.word	0x08027594
 801a57c:	200086f8 	.word	0x200086f8
 801a580:	080275b4 	.word	0x080275b4
 801a584:	200086fc 	.word	0x200086fc

0801a588 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b088      	sub	sp, #32
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	4603      	mov	r3, r0
 801a590:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a592:	88fb      	ldrh	r3, [r7, #6]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d101      	bne.n	801a59c <mem_malloc+0x14>
    return NULL;
 801a598:	2300      	movs	r3, #0
 801a59a:	e0e2      	b.n	801a762 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a59c:	88fb      	ldrh	r3, [r7, #6]
 801a59e:	3303      	adds	r3, #3
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	f023 0303 	bic.w	r3, r3, #3
 801a5a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801a5a8:	8bbb      	ldrh	r3, [r7, #28]
 801a5aa:	2b0b      	cmp	r3, #11
 801a5ac:	d801      	bhi.n	801a5b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801a5ae:	230c      	movs	r3, #12
 801a5b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a5b2:	8bbb      	ldrh	r3, [r7, #28]
 801a5b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a5b8:	d803      	bhi.n	801a5c2 <mem_malloc+0x3a>
 801a5ba:	8bba      	ldrh	r2, [r7, #28]
 801a5bc:	88fb      	ldrh	r3, [r7, #6]
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d201      	bcs.n	801a5c6 <mem_malloc+0x3e>
    return NULL;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	e0cd      	b.n	801a762 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a5c6:	4869      	ldr	r0, [pc, #420]	; (801a76c <mem_malloc+0x1e4>)
 801a5c8:	f00a fc2e 	bl	8024e28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a5cc:	4b68      	ldr	r3, [pc, #416]	; (801a770 <mem_malloc+0x1e8>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	f7ff fcfd 	bl	8019fd0 <mem_to_ptr>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	83fb      	strh	r3, [r7, #30]
 801a5da:	e0b7      	b.n	801a74c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801a5dc:	8bfb      	ldrh	r3, [r7, #30]
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7ff fce4 	bl	8019fac <ptr_to_mem>
 801a5e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	791b      	ldrb	r3, [r3, #4]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	f040 80a7 	bne.w	801a73e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a5f0:	697b      	ldr	r3, [r7, #20]
 801a5f2:	881b      	ldrh	r3, [r3, #0]
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	8bfb      	ldrh	r3, [r7, #30]
 801a5f8:	1ad3      	subs	r3, r2, r3
 801a5fa:	f1a3 0208 	sub.w	r2, r3, #8
 801a5fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801a600:	429a      	cmp	r2, r3
 801a602:	f0c0 809c 	bcc.w	801a73e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a606:	697b      	ldr	r3, [r7, #20]
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	461a      	mov	r2, r3
 801a60c:	8bfb      	ldrh	r3, [r7, #30]
 801a60e:	1ad3      	subs	r3, r2, r3
 801a610:	f1a3 0208 	sub.w	r2, r3, #8
 801a614:	8bbb      	ldrh	r3, [r7, #28]
 801a616:	3314      	adds	r3, #20
 801a618:	429a      	cmp	r2, r3
 801a61a:	d333      	bcc.n	801a684 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a61c:	8bfa      	ldrh	r2, [r7, #30]
 801a61e:	8bbb      	ldrh	r3, [r7, #28]
 801a620:	4413      	add	r3, r2
 801a622:	b29b      	uxth	r3, r3
 801a624:	3308      	adds	r3, #8
 801a626:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a628:	8a7b      	ldrh	r3, [r7, #18]
 801a62a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a62e:	d106      	bne.n	801a63e <mem_malloc+0xb6>
 801a630:	4b50      	ldr	r3, [pc, #320]	; (801a774 <mem_malloc+0x1ec>)
 801a632:	f240 3287 	movw	r2, #903	; 0x387
 801a636:	4950      	ldr	r1, [pc, #320]	; (801a778 <mem_malloc+0x1f0>)
 801a638:	4850      	ldr	r0, [pc, #320]	; (801a77c <mem_malloc+0x1f4>)
 801a63a:	f00b fc59 	bl	8025ef0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801a63e:	8a7b      	ldrh	r3, [r7, #18]
 801a640:	4618      	mov	r0, r3
 801a642:	f7ff fcb3 	bl	8019fac <ptr_to_mem>
 801a646:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	2200      	movs	r2, #0
 801a64c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801a64e:	697b      	ldr	r3, [r7, #20]
 801a650:	881a      	ldrh	r2, [r3, #0]
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	8bfa      	ldrh	r2, [r7, #30]
 801a65a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801a65c:	697b      	ldr	r3, [r7, #20]
 801a65e:	8a7a      	ldrh	r2, [r7, #18]
 801a660:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801a662:	697b      	ldr	r3, [r7, #20]
 801a664:	2201      	movs	r2, #1
 801a666:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	881b      	ldrh	r3, [r3, #0]
 801a66c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801a670:	d00b      	beq.n	801a68a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	4618      	mov	r0, r3
 801a678:	f7ff fc98 	bl	8019fac <ptr_to_mem>
 801a67c:	4602      	mov	r2, r0
 801a67e:	8a7b      	ldrh	r3, [r7, #18]
 801a680:	8053      	strh	r3, [r2, #2]
 801a682:	e002      	b.n	801a68a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801a684:	697b      	ldr	r3, [r7, #20]
 801a686:	2201      	movs	r2, #1
 801a688:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801a68a:	4b39      	ldr	r3, [pc, #228]	; (801a770 <mem_malloc+0x1e8>)
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	697a      	ldr	r2, [r7, #20]
 801a690:	429a      	cmp	r2, r3
 801a692:	d127      	bne.n	801a6e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801a694:	4b36      	ldr	r3, [pc, #216]	; (801a770 <mem_malloc+0x1e8>)
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801a69a:	e005      	b.n	801a6a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801a69c:	69bb      	ldr	r3, [r7, #24]
 801a69e:	881b      	ldrh	r3, [r3, #0]
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	f7ff fc83 	bl	8019fac <ptr_to_mem>
 801a6a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801a6a8:	69bb      	ldr	r3, [r7, #24]
 801a6aa:	791b      	ldrb	r3, [r3, #4]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d004      	beq.n	801a6ba <mem_malloc+0x132>
 801a6b0:	4b33      	ldr	r3, [pc, #204]	; (801a780 <mem_malloc+0x1f8>)
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	69ba      	ldr	r2, [r7, #24]
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	d1f0      	bne.n	801a69c <mem_malloc+0x114>
          }
          lfree = cur;
 801a6ba:	4a2d      	ldr	r2, [pc, #180]	; (801a770 <mem_malloc+0x1e8>)
 801a6bc:	69bb      	ldr	r3, [r7, #24]
 801a6be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a6c0:	4b2b      	ldr	r3, [pc, #172]	; (801a770 <mem_malloc+0x1e8>)
 801a6c2:	681a      	ldr	r2, [r3, #0]
 801a6c4:	4b2e      	ldr	r3, [pc, #184]	; (801a780 <mem_malloc+0x1f8>)
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d00b      	beq.n	801a6e4 <mem_malloc+0x15c>
 801a6cc:	4b28      	ldr	r3, [pc, #160]	; (801a770 <mem_malloc+0x1e8>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	791b      	ldrb	r3, [r3, #4]
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d006      	beq.n	801a6e4 <mem_malloc+0x15c>
 801a6d6:	4b27      	ldr	r3, [pc, #156]	; (801a774 <mem_malloc+0x1ec>)
 801a6d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 801a6dc:	4929      	ldr	r1, [pc, #164]	; (801a784 <mem_malloc+0x1fc>)
 801a6de:	4827      	ldr	r0, [pc, #156]	; (801a77c <mem_malloc+0x1f4>)
 801a6e0:	f00b fc06 	bl	8025ef0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801a6e4:	4821      	ldr	r0, [pc, #132]	; (801a76c <mem_malloc+0x1e4>)
 801a6e6:	f00a fbae 	bl	8024e46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a6ea:	8bba      	ldrh	r2, [r7, #28]
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	4413      	add	r3, r2
 801a6f0:	3308      	adds	r3, #8
 801a6f2:	4a23      	ldr	r2, [pc, #140]	; (801a780 <mem_malloc+0x1f8>)
 801a6f4:	6812      	ldr	r2, [r2, #0]
 801a6f6:	4293      	cmp	r3, r2
 801a6f8:	d906      	bls.n	801a708 <mem_malloc+0x180>
 801a6fa:	4b1e      	ldr	r3, [pc, #120]	; (801a774 <mem_malloc+0x1ec>)
 801a6fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 801a700:	4921      	ldr	r1, [pc, #132]	; (801a788 <mem_malloc+0x200>)
 801a702:	481e      	ldr	r0, [pc, #120]	; (801a77c <mem_malloc+0x1f4>)
 801a704:	f00b fbf4 	bl	8025ef0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a708:	697b      	ldr	r3, [r7, #20]
 801a70a:	f003 0303 	and.w	r3, r3, #3
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d006      	beq.n	801a720 <mem_malloc+0x198>
 801a712:	4b18      	ldr	r3, [pc, #96]	; (801a774 <mem_malloc+0x1ec>)
 801a714:	f240 32bb 	movw	r2, #955	; 0x3bb
 801a718:	491c      	ldr	r1, [pc, #112]	; (801a78c <mem_malloc+0x204>)
 801a71a:	4818      	ldr	r0, [pc, #96]	; (801a77c <mem_malloc+0x1f4>)
 801a71c:	f00b fbe8 	bl	8025ef0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	f003 0303 	and.w	r3, r3, #3
 801a726:	2b00      	cmp	r3, #0
 801a728:	d006      	beq.n	801a738 <mem_malloc+0x1b0>
 801a72a:	4b12      	ldr	r3, [pc, #72]	; (801a774 <mem_malloc+0x1ec>)
 801a72c:	f240 32bd 	movw	r2, #957	; 0x3bd
 801a730:	4917      	ldr	r1, [pc, #92]	; (801a790 <mem_malloc+0x208>)
 801a732:	4812      	ldr	r0, [pc, #72]	; (801a77c <mem_malloc+0x1f4>)
 801a734:	f00b fbdc 	bl	8025ef0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	3308      	adds	r3, #8
 801a73c:	e011      	b.n	801a762 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801a73e:	8bfb      	ldrh	r3, [r7, #30]
 801a740:	4618      	mov	r0, r3
 801a742:	f7ff fc33 	bl	8019fac <ptr_to_mem>
 801a746:	4603      	mov	r3, r0
 801a748:	881b      	ldrh	r3, [r3, #0]
 801a74a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a74c:	8bfa      	ldrh	r2, [r7, #30]
 801a74e:	8bbb      	ldrh	r3, [r7, #28]
 801a750:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801a754:	429a      	cmp	r2, r3
 801a756:	f4ff af41 	bcc.w	801a5dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801a75a:	4804      	ldr	r0, [pc, #16]	; (801a76c <mem_malloc+0x1e4>)
 801a75c:	f00a fb73 	bl	8024e46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801a760:	2300      	movs	r3, #0
}
 801a762:	4618      	mov	r0, r3
 801a764:	3720      	adds	r7, #32
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}
 801a76a:	bf00      	nop
 801a76c:	200086f8 	.word	0x200086f8
 801a770:	200086fc 	.word	0x200086fc
 801a774:	080273f0 	.word	0x080273f0
 801a778:	080275b4 	.word	0x080275b4
 801a77c:	08027438 	.word	0x08027438
 801a780:	200086f4 	.word	0x200086f4
 801a784:	080275c8 	.word	0x080275c8
 801a788:	080275e4 	.word	0x080275e4
 801a78c:	08027614 	.word	0x08027614
 801a790:	08027644 	.word	0x08027644

0801a794 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801a794:	b480      	push	{r7}
 801a796:	b085      	sub	sp, #20
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	689b      	ldr	r3, [r3, #8]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	685b      	ldr	r3, [r3, #4]
 801a7a8:	3303      	adds	r3, #3
 801a7aa:	f023 0303 	bic.w	r3, r3, #3
 801a7ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	60fb      	str	r3, [r7, #12]
 801a7b4:	e011      	b.n	801a7da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	689b      	ldr	r3, [r3, #8]
 801a7ba:	681a      	ldr	r2, [r3, #0]
 801a7bc:	68bb      	ldr	r3, [r7, #8]
 801a7be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	689b      	ldr	r3, [r3, #8]
 801a7c4:	68ba      	ldr	r2, [r7, #8]
 801a7c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	881b      	ldrh	r3, [r3, #0]
 801a7cc:	461a      	mov	r2, r3
 801a7ce:	68bb      	ldr	r3, [r7, #8]
 801a7d0:	4413      	add	r3, r2
 801a7d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	60fb      	str	r3, [r7, #12]
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	885b      	ldrh	r3, [r3, #2]
 801a7de:	461a      	mov	r2, r3
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	4293      	cmp	r3, r2
 801a7e4:	dbe7      	blt.n	801a7b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801a7e6:	bf00      	nop
 801a7e8:	bf00      	nop
 801a7ea:	3714      	adds	r7, #20
 801a7ec:	46bd      	mov	sp, r7
 801a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f2:	4770      	bx	lr

0801a7f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b082      	sub	sp, #8
 801a7f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	80fb      	strh	r3, [r7, #6]
 801a7fe:	e009      	b.n	801a814 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801a800:	88fb      	ldrh	r3, [r7, #6]
 801a802:	4a08      	ldr	r2, [pc, #32]	; (801a824 <memp_init+0x30>)
 801a804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a808:	4618      	mov	r0, r3
 801a80a:	f7ff ffc3 	bl	801a794 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a80e:	88fb      	ldrh	r3, [r7, #6]
 801a810:	3301      	adds	r3, #1
 801a812:	80fb      	strh	r3, [r7, #6]
 801a814:	88fb      	ldrh	r3, [r7, #6]
 801a816:	2b0c      	cmp	r3, #12
 801a818:	d9f2      	bls.n	801a800 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801a81a:	bf00      	nop
 801a81c:	bf00      	nop
 801a81e:	3708      	adds	r7, #8
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}
 801a824:	0802b924 	.word	0x0802b924

0801a828 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801a830:	f00a fb3c 	bl	8024eac <sys_arch_protect>
 801a834:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	689b      	ldr	r3, [r3, #8]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801a83e:	68bb      	ldr	r3, [r7, #8]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d015      	beq.n	801a870 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	689b      	ldr	r3, [r3, #8]
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	6812      	ldr	r2, [r2, #0]
 801a84c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a84e:	68bb      	ldr	r3, [r7, #8]
 801a850:	f003 0303 	and.w	r3, r3, #3
 801a854:	2b00      	cmp	r3, #0
 801a856:	d006      	beq.n	801a866 <do_memp_malloc_pool+0x3e>
 801a858:	4b09      	ldr	r3, [pc, #36]	; (801a880 <do_memp_malloc_pool+0x58>)
 801a85a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801a85e:	4909      	ldr	r1, [pc, #36]	; (801a884 <do_memp_malloc_pool+0x5c>)
 801a860:	4809      	ldr	r0, [pc, #36]	; (801a888 <do_memp_malloc_pool+0x60>)
 801a862:	f00b fb45 	bl	8025ef0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801a866:	68f8      	ldr	r0, [r7, #12]
 801a868:	f00a fb2e 	bl	8024ec8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801a86c:	68bb      	ldr	r3, [r7, #8]
 801a86e:	e003      	b.n	801a878 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801a870:	68f8      	ldr	r0, [r7, #12]
 801a872:	f00a fb29 	bl	8024ec8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801a876:	2300      	movs	r3, #0
}
 801a878:	4618      	mov	r0, r3
 801a87a:	3710      	adds	r7, #16
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bd80      	pop	{r7, pc}
 801a880:	08027668 	.word	0x08027668
 801a884:	08027698 	.word	0x08027698
 801a888:	080276bc 	.word	0x080276bc

0801a88c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b084      	sub	sp, #16
 801a890:	af00      	add	r7, sp, #0
 801a892:	4603      	mov	r3, r0
 801a894:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a896:	79fb      	ldrb	r3, [r7, #7]
 801a898:	2b0c      	cmp	r3, #12
 801a89a:	d908      	bls.n	801a8ae <memp_malloc+0x22>
 801a89c:	4b0a      	ldr	r3, [pc, #40]	; (801a8c8 <memp_malloc+0x3c>)
 801a89e:	f240 1257 	movw	r2, #343	; 0x157
 801a8a2:	490a      	ldr	r1, [pc, #40]	; (801a8cc <memp_malloc+0x40>)
 801a8a4:	480a      	ldr	r0, [pc, #40]	; (801a8d0 <memp_malloc+0x44>)
 801a8a6:	f00b fb23 	bl	8025ef0 <iprintf>
 801a8aa:	2300      	movs	r3, #0
 801a8ac:	e008      	b.n	801a8c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801a8ae:	79fb      	ldrb	r3, [r7, #7]
 801a8b0:	4a08      	ldr	r2, [pc, #32]	; (801a8d4 <memp_malloc+0x48>)
 801a8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7ff ffb6 	bl	801a828 <do_memp_malloc_pool>
 801a8bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801a8be:	68fb      	ldr	r3, [r7, #12]
}
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	3710      	adds	r7, #16
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}
 801a8c8:	08027668 	.word	0x08027668
 801a8cc:	080276f8 	.word	0x080276f8
 801a8d0:	080276bc 	.word	0x080276bc
 801a8d4:	0802b924 	.word	0x0802b924

0801a8d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b084      	sub	sp, #16
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
 801a8e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a8e2:	683b      	ldr	r3, [r7, #0]
 801a8e4:	f003 0303 	and.w	r3, r3, #3
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d006      	beq.n	801a8fa <do_memp_free_pool+0x22>
 801a8ec:	4b0d      	ldr	r3, [pc, #52]	; (801a924 <do_memp_free_pool+0x4c>)
 801a8ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a8f2:	490d      	ldr	r1, [pc, #52]	; (801a928 <do_memp_free_pool+0x50>)
 801a8f4:	480d      	ldr	r0, [pc, #52]	; (801a92c <do_memp_free_pool+0x54>)
 801a8f6:	f00b fafb 	bl	8025ef0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a8fa:	683b      	ldr	r3, [r7, #0]
 801a8fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801a8fe:	f00a fad5 	bl	8024eac <sys_arch_protect>
 801a902:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	689b      	ldr	r3, [r3, #8]
 801a908:	681a      	ldr	r2, [r3, #0]
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	689b      	ldr	r3, [r3, #8]
 801a912:	68fa      	ldr	r2, [r7, #12]
 801a914:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801a916:	68b8      	ldr	r0, [r7, #8]
 801a918:	f00a fad6 	bl	8024ec8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801a91c:	bf00      	nop
 801a91e:	3710      	adds	r7, #16
 801a920:	46bd      	mov	sp, r7
 801a922:	bd80      	pop	{r7, pc}
 801a924:	08027668 	.word	0x08027668
 801a928:	08027718 	.word	0x08027718
 801a92c:	080276bc 	.word	0x080276bc

0801a930 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b082      	sub	sp, #8
 801a934:	af00      	add	r7, sp, #0
 801a936:	4603      	mov	r3, r0
 801a938:	6039      	str	r1, [r7, #0]
 801a93a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a93c:	79fb      	ldrb	r3, [r7, #7]
 801a93e:	2b0c      	cmp	r3, #12
 801a940:	d907      	bls.n	801a952 <memp_free+0x22>
 801a942:	4b0c      	ldr	r3, [pc, #48]	; (801a974 <memp_free+0x44>)
 801a944:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801a948:	490b      	ldr	r1, [pc, #44]	; (801a978 <memp_free+0x48>)
 801a94a:	480c      	ldr	r0, [pc, #48]	; (801a97c <memp_free+0x4c>)
 801a94c:	f00b fad0 	bl	8025ef0 <iprintf>
 801a950:	e00c      	b.n	801a96c <memp_free+0x3c>

  if (mem == NULL) {
 801a952:	683b      	ldr	r3, [r7, #0]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d008      	beq.n	801a96a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a958:	79fb      	ldrb	r3, [r7, #7]
 801a95a:	4a09      	ldr	r2, [pc, #36]	; (801a980 <memp_free+0x50>)
 801a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a960:	6839      	ldr	r1, [r7, #0]
 801a962:	4618      	mov	r0, r3
 801a964:	f7ff ffb8 	bl	801a8d8 <do_memp_free_pool>
 801a968:	e000      	b.n	801a96c <memp_free+0x3c>
    return;
 801a96a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a96c:	3708      	adds	r7, #8
 801a96e:	46bd      	mov	sp, r7
 801a970:	bd80      	pop	{r7, pc}
 801a972:	bf00      	nop
 801a974:	08027668 	.word	0x08027668
 801a978:	08027738 	.word	0x08027738
 801a97c:	080276bc 	.word	0x080276bc
 801a980:	0802b924 	.word	0x0802b924

0801a984 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801a984:	b480      	push	{r7}
 801a986:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801a988:	bf00      	nop
 801a98a:	46bd      	mov	sp, r7
 801a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a990:	4770      	bx	lr
	...

0801a994 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b086      	sub	sp, #24
 801a998:	af00      	add	r7, sp, #0
 801a99a:	60f8      	str	r0, [r7, #12]
 801a99c:	60b9      	str	r1, [r7, #8]
 801a99e:	607a      	str	r2, [r7, #4]
 801a9a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d108      	bne.n	801a9ba <netif_add+0x26>
 801a9a8:	4b57      	ldr	r3, [pc, #348]	; (801ab08 <netif_add+0x174>)
 801a9aa:	f240 1227 	movw	r2, #295	; 0x127
 801a9ae:	4957      	ldr	r1, [pc, #348]	; (801ab0c <netif_add+0x178>)
 801a9b0:	4857      	ldr	r0, [pc, #348]	; (801ab10 <netif_add+0x17c>)
 801a9b2:	f00b fa9d 	bl	8025ef0 <iprintf>
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	e0a2      	b.n	801ab00 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d108      	bne.n	801a9d2 <netif_add+0x3e>
 801a9c0:	4b51      	ldr	r3, [pc, #324]	; (801ab08 <netif_add+0x174>)
 801a9c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 801a9c6:	4953      	ldr	r1, [pc, #332]	; (801ab14 <netif_add+0x180>)
 801a9c8:	4851      	ldr	r0, [pc, #324]	; (801ab10 <netif_add+0x17c>)
 801a9ca:	f00b fa91 	bl	8025ef0 <iprintf>
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	e096      	b.n	801ab00 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d101      	bne.n	801a9dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801a9d8:	4b4f      	ldr	r3, [pc, #316]	; (801ab18 <netif_add+0x184>)
 801a9da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d101      	bne.n	801a9e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801a9e2:	4b4d      	ldr	r3, [pc, #308]	; (801ab18 <netif_add+0x184>)
 801a9e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d101      	bne.n	801a9f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801a9ec:	4b4a      	ldr	r3, [pc, #296]	; (801ab18 <netif_add+0x184>)
 801a9ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	2200      	movs	r2, #0
 801a9fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	2200      	movs	r2, #0
 801aa00:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	4a45      	ldr	r2, [pc, #276]	; (801ab1c <netif_add+0x188>)
 801aa06:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	2200      	movs	r2, #0
 801aa12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	2200      	movs	r2, #0
 801aa1a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	6a3a      	ldr	r2, [r7, #32]
 801aa20:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801aa22:	4b3f      	ldr	r3, [pc, #252]	; (801ab20 <netif_add+0x18c>)
 801aa24:	781a      	ldrb	r2, [r3, #0]
 801aa26:	68fb      	ldr	r3, [r7, #12]
 801aa28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa30:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	687a      	ldr	r2, [r7, #4]
 801aa36:	68b9      	ldr	r1, [r7, #8]
 801aa38:	68f8      	ldr	r0, [r7, #12]
 801aa3a:	f000 f913 	bl	801ac64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa40:	68f8      	ldr	r0, [r7, #12]
 801aa42:	4798      	blx	r3
 801aa44:	4603      	mov	r3, r0
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d001      	beq.n	801aa4e <netif_add+0xba>
    return NULL;
 801aa4a:	2300      	movs	r3, #0
 801aa4c:	e058      	b.n	801ab00 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aa54:	2bff      	cmp	r3, #255	; 0xff
 801aa56:	d103      	bne.n	801aa60 <netif_add+0xcc>
        netif->num = 0;
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801aa60:	2300      	movs	r3, #0
 801aa62:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801aa64:	4b2f      	ldr	r3, [pc, #188]	; (801ab24 <netif_add+0x190>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	617b      	str	r3, [r7, #20]
 801aa6a:	e02b      	b.n	801aac4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801aa6c:	697a      	ldr	r2, [r7, #20]
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	429a      	cmp	r2, r3
 801aa72:	d106      	bne.n	801aa82 <netif_add+0xee>
 801aa74:	4b24      	ldr	r3, [pc, #144]	; (801ab08 <netif_add+0x174>)
 801aa76:	f240 128b 	movw	r2, #395	; 0x18b
 801aa7a:	492b      	ldr	r1, [pc, #172]	; (801ab28 <netif_add+0x194>)
 801aa7c:	4824      	ldr	r0, [pc, #144]	; (801ab10 <netif_add+0x17c>)
 801aa7e:	f00b fa37 	bl	8025ef0 <iprintf>
        num_netifs++;
 801aa82:	693b      	ldr	r3, [r7, #16]
 801aa84:	3301      	adds	r3, #1
 801aa86:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801aa88:	693b      	ldr	r3, [r7, #16]
 801aa8a:	2bff      	cmp	r3, #255	; 0xff
 801aa8c:	dd06      	ble.n	801aa9c <netif_add+0x108>
 801aa8e:	4b1e      	ldr	r3, [pc, #120]	; (801ab08 <netif_add+0x174>)
 801aa90:	f240 128d 	movw	r2, #397	; 0x18d
 801aa94:	4925      	ldr	r1, [pc, #148]	; (801ab2c <netif_add+0x198>)
 801aa96:	481e      	ldr	r0, [pc, #120]	; (801ab10 <netif_add+0x17c>)
 801aa98:	f00b fa2a 	bl	8025ef0 <iprintf>
        if (netif2->num == netif->num) {
 801aa9c:	697b      	ldr	r3, [r7, #20]
 801aa9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d108      	bne.n	801aabe <netif_add+0x12a>
          netif->num++;
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aab2:	3301      	adds	r3, #1
 801aab4:	b2da      	uxtb	r2, r3
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801aabc:	e005      	b.n	801aaca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801aabe:	697b      	ldr	r3, [r7, #20]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	617b      	str	r3, [r7, #20]
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d1d0      	bne.n	801aa6c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801aaca:	697b      	ldr	r3, [r7, #20]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d1be      	bne.n	801aa4e <netif_add+0xba>
  }
  if (netif->num == 254) {
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aad6:	2bfe      	cmp	r3, #254	; 0xfe
 801aad8:	d103      	bne.n	801aae2 <netif_add+0x14e>
    netif_num = 0;
 801aada:	4b11      	ldr	r3, [pc, #68]	; (801ab20 <netif_add+0x18c>)
 801aadc:	2200      	movs	r2, #0
 801aade:	701a      	strb	r2, [r3, #0]
 801aae0:	e006      	b.n	801aaf0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aae8:	3301      	adds	r3, #1
 801aaea:	b2da      	uxtb	r2, r3
 801aaec:	4b0c      	ldr	r3, [pc, #48]	; (801ab20 <netif_add+0x18c>)
 801aaee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801aaf0:	4b0c      	ldr	r3, [pc, #48]	; (801ab24 <netif_add+0x190>)
 801aaf2:	681a      	ldr	r2, [r3, #0]
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801aaf8:	4a0a      	ldr	r2, [pc, #40]	; (801ab24 <netif_add+0x190>)
 801aafa:	68fb      	ldr	r3, [r7, #12]
 801aafc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801aafe:	68fb      	ldr	r3, [r7, #12]
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3718      	adds	r7, #24
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	08027754 	.word	0x08027754
 801ab0c:	080277e8 	.word	0x080277e8
 801ab10:	080277a4 	.word	0x080277a4
 801ab14:	08027804 	.word	0x08027804
 801ab18:	0802b998 	.word	0x0802b998
 801ab1c:	0801af3f 	.word	0x0801af3f
 801ab20:	20008734 	.word	0x20008734
 801ab24:	200102a4 	.word	0x200102a4
 801ab28:	08027828 	.word	0x08027828
 801ab2c:	0802783c 	.word	0x0802783c

0801ab30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801ab3a:	6839      	ldr	r1, [r7, #0]
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	f002 fe4f 	bl	801d7e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801ab42:	6839      	ldr	r1, [r7, #0]
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	f007 fcfd 	bl	8022544 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801ab4a:	bf00      	nop
 801ab4c:	3708      	adds	r7, #8
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
	...

0801ab54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801ab54:	b580      	push	{r7, lr}
 801ab56:	b086      	sub	sp, #24
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	60f8      	str	r0, [r7, #12]
 801ab5c:	60b9      	str	r1, [r7, #8]
 801ab5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801ab60:	68bb      	ldr	r3, [r7, #8]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d106      	bne.n	801ab74 <netif_do_set_ipaddr+0x20>
 801ab66:	4b1d      	ldr	r3, [pc, #116]	; (801abdc <netif_do_set_ipaddr+0x88>)
 801ab68:	f240 12cb 	movw	r2, #459	; 0x1cb
 801ab6c:	491c      	ldr	r1, [pc, #112]	; (801abe0 <netif_do_set_ipaddr+0x8c>)
 801ab6e:	481d      	ldr	r0, [pc, #116]	; (801abe4 <netif_do_set_ipaddr+0x90>)
 801ab70:	f00b f9be 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	d106      	bne.n	801ab88 <netif_do_set_ipaddr+0x34>
 801ab7a:	4b18      	ldr	r3, [pc, #96]	; (801abdc <netif_do_set_ipaddr+0x88>)
 801ab7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801ab80:	4917      	ldr	r1, [pc, #92]	; (801abe0 <netif_do_set_ipaddr+0x8c>)
 801ab82:	4818      	ldr	r0, [pc, #96]	; (801abe4 <netif_do_set_ipaddr+0x90>)
 801ab84:	f00b f9b4 	bl	8025ef0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	681a      	ldr	r2, [r3, #0]
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	3304      	adds	r3, #4
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	429a      	cmp	r2, r3
 801ab94:	d01c      	beq.n	801abd0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801ab96:	68bb      	ldr	r3, [r7, #8]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	3304      	adds	r3, #4
 801aba0:	681a      	ldr	r2, [r3, #0]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801aba6:	f107 0314 	add.w	r3, r7, #20
 801abaa:	4619      	mov	r1, r3
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	f7ff ffbf 	bl	801ab30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801abb2:	68bb      	ldr	r3, [r7, #8]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d002      	beq.n	801abbe <netif_do_set_ipaddr+0x6a>
 801abb8:	68bb      	ldr	r3, [r7, #8]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	e000      	b.n	801abc0 <netif_do_set_ipaddr+0x6c>
 801abbe:	2300      	movs	r3, #0
 801abc0:	68fa      	ldr	r2, [r7, #12]
 801abc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801abc4:	2101      	movs	r1, #1
 801abc6:	68f8      	ldr	r0, [r7, #12]
 801abc8:	f000 f8d2 	bl	801ad70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801abcc:	2301      	movs	r3, #1
 801abce:	e000      	b.n	801abd2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801abd0:	2300      	movs	r3, #0
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3718      	adds	r7, #24
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}
 801abda:	bf00      	nop
 801abdc:	08027754 	.word	0x08027754
 801abe0:	0802786c 	.word	0x0802786c
 801abe4:	080277a4 	.word	0x080277a4

0801abe8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801abe8:	b480      	push	{r7}
 801abea:	b085      	sub	sp, #20
 801abec:	af00      	add	r7, sp, #0
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801abf4:	68bb      	ldr	r3, [r7, #8]
 801abf6:	681a      	ldr	r2, [r3, #0]
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	3308      	adds	r3, #8
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d00a      	beq.n	801ac18 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801ac02:	68bb      	ldr	r3, [r7, #8]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d002      	beq.n	801ac0e <netif_do_set_netmask+0x26>
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	e000      	b.n	801ac10 <netif_do_set_netmask+0x28>
 801ac0e:	2300      	movs	r3, #0
 801ac10:	68fa      	ldr	r2, [r7, #12]
 801ac12:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801ac14:	2301      	movs	r3, #1
 801ac16:	e000      	b.n	801ac1a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801ac18:	2300      	movs	r3, #0
}
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	3714      	adds	r7, #20
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac24:	4770      	bx	lr

0801ac26 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801ac26:	b480      	push	{r7}
 801ac28:	b085      	sub	sp, #20
 801ac2a:	af00      	add	r7, sp, #0
 801ac2c:	60f8      	str	r0, [r7, #12]
 801ac2e:	60b9      	str	r1, [r7, #8]
 801ac30:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801ac32:	68bb      	ldr	r3, [r7, #8]
 801ac34:	681a      	ldr	r2, [r3, #0]
 801ac36:	68fb      	ldr	r3, [r7, #12]
 801ac38:	330c      	adds	r3, #12
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	d00a      	beq.n	801ac56 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801ac40:	68bb      	ldr	r3, [r7, #8]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d002      	beq.n	801ac4c <netif_do_set_gw+0x26>
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	e000      	b.n	801ac4e <netif_do_set_gw+0x28>
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	68fa      	ldr	r2, [r7, #12]
 801ac50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801ac52:	2301      	movs	r3, #1
 801ac54:	e000      	b.n	801ac58 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801ac56:	2300      	movs	r3, #0
}
 801ac58:	4618      	mov	r0, r3
 801ac5a:	3714      	adds	r7, #20
 801ac5c:	46bd      	mov	sp, r7
 801ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac62:	4770      	bx	lr

0801ac64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801ac64:	b580      	push	{r7, lr}
 801ac66:	b088      	sub	sp, #32
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	60f8      	str	r0, [r7, #12]
 801ac6c:	60b9      	str	r1, [r7, #8]
 801ac6e:	607a      	str	r2, [r7, #4]
 801ac70:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801ac72:	2300      	movs	r3, #0
 801ac74:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801ac76:	2300      	movs	r3, #0
 801ac78:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ac7a:	68bb      	ldr	r3, [r7, #8]
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d101      	bne.n	801ac84 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801ac80:	4b1c      	ldr	r3, [pc, #112]	; (801acf4 <netif_set_addr+0x90>)
 801ac82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d101      	bne.n	801ac8e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801ac8a:	4b1a      	ldr	r3, [pc, #104]	; (801acf4 <netif_set_addr+0x90>)
 801ac8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801ac8e:	683b      	ldr	r3, [r7, #0]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d101      	bne.n	801ac98 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801ac94:	4b17      	ldr	r3, [pc, #92]	; (801acf4 <netif_set_addr+0x90>)
 801ac96:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d003      	beq.n	801aca6 <netif_set_addr+0x42>
 801ac9e:	68bb      	ldr	r3, [r7, #8]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d101      	bne.n	801acaa <netif_set_addr+0x46>
 801aca6:	2301      	movs	r3, #1
 801aca8:	e000      	b.n	801acac <netif_set_addr+0x48>
 801acaa:	2300      	movs	r3, #0
 801acac:	617b      	str	r3, [r7, #20]
  if (remove) {
 801acae:	697b      	ldr	r3, [r7, #20]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d006      	beq.n	801acc2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801acb4:	f107 0310 	add.w	r3, r7, #16
 801acb8:	461a      	mov	r2, r3
 801acba:	68b9      	ldr	r1, [r7, #8]
 801acbc:	68f8      	ldr	r0, [r7, #12]
 801acbe:	f7ff ff49 	bl	801ab54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801acc2:	69fa      	ldr	r2, [r7, #28]
 801acc4:	6879      	ldr	r1, [r7, #4]
 801acc6:	68f8      	ldr	r0, [r7, #12]
 801acc8:	f7ff ff8e 	bl	801abe8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801accc:	69ba      	ldr	r2, [r7, #24]
 801acce:	6839      	ldr	r1, [r7, #0]
 801acd0:	68f8      	ldr	r0, [r7, #12]
 801acd2:	f7ff ffa8 	bl	801ac26 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801acd6:	697b      	ldr	r3, [r7, #20]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d106      	bne.n	801acea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801acdc:	f107 0310 	add.w	r3, r7, #16
 801ace0:	461a      	mov	r2, r3
 801ace2:	68b9      	ldr	r1, [r7, #8]
 801ace4:	68f8      	ldr	r0, [r7, #12]
 801ace6:	f7ff ff35 	bl	801ab54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801acea:	bf00      	nop
 801acec:	3720      	adds	r7, #32
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}
 801acf2:	bf00      	nop
 801acf4:	0802b998 	.word	0x0802b998

0801acf8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801acf8:	b480      	push	{r7}
 801acfa:	b083      	sub	sp, #12
 801acfc:	af00      	add	r7, sp, #0
 801acfe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801ad00:	4a04      	ldr	r2, [pc, #16]	; (801ad14 <netif_set_default+0x1c>)
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801ad06:	bf00      	nop
 801ad08:	370c      	adds	r7, #12
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad10:	4770      	bx	lr
 801ad12:	bf00      	nop
 801ad14:	200102a8 	.word	0x200102a8

0801ad18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801ad18:	b580      	push	{r7, lr}
 801ad1a:	b082      	sub	sp, #8
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d107      	bne.n	801ad36 <netif_set_up+0x1e>
 801ad26:	4b0f      	ldr	r3, [pc, #60]	; (801ad64 <netif_set_up+0x4c>)
 801ad28:	f44f 7254 	mov.w	r2, #848	; 0x350
 801ad2c:	490e      	ldr	r1, [pc, #56]	; (801ad68 <netif_set_up+0x50>)
 801ad2e:	480f      	ldr	r0, [pc, #60]	; (801ad6c <netif_set_up+0x54>)
 801ad30:	f00b f8de 	bl	8025ef0 <iprintf>
 801ad34:	e013      	b.n	801ad5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ad3c:	f003 0301 	and.w	r3, r3, #1
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d10c      	bne.n	801ad5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ad4a:	f043 0301 	orr.w	r3, r3, #1
 801ad4e:	b2da      	uxtb	r2, r3
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ad56:	2103      	movs	r1, #3
 801ad58:	6878      	ldr	r0, [r7, #4]
 801ad5a:	f000 f809 	bl	801ad70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801ad5e:	3708      	adds	r7, #8
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}
 801ad64:	08027754 	.word	0x08027754
 801ad68:	080278dc 	.word	0x080278dc
 801ad6c:	080277a4 	.word	0x080277a4

0801ad70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b082      	sub	sp, #8
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
 801ad78:	460b      	mov	r3, r1
 801ad7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d106      	bne.n	801ad90 <netif_issue_reports+0x20>
 801ad82:	4b18      	ldr	r3, [pc, #96]	; (801ade4 <netif_issue_reports+0x74>)
 801ad84:	f240 326d 	movw	r2, #877	; 0x36d
 801ad88:	4917      	ldr	r1, [pc, #92]	; (801ade8 <netif_issue_reports+0x78>)
 801ad8a:	4818      	ldr	r0, [pc, #96]	; (801adec <netif_issue_reports+0x7c>)
 801ad8c:	f00b f8b0 	bl	8025ef0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ad96:	f003 0304 	and.w	r3, r3, #4
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d01e      	beq.n	801addc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ada4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d017      	beq.n	801addc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801adac:	78fb      	ldrb	r3, [r7, #3]
 801adae:	f003 0301 	and.w	r3, r3, #1
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d013      	beq.n	801adde <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	3304      	adds	r3, #4
 801adba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d00e      	beq.n	801adde <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801adc6:	f003 0308 	and.w	r3, r3, #8
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d007      	beq.n	801adde <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	3304      	adds	r3, #4
 801add2:	4619      	mov	r1, r3
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	f008 fb1f 	bl	8023418 <etharp_request>
 801adda:	e000      	b.n	801adde <netif_issue_reports+0x6e>
    return;
 801addc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801adde:	3708      	adds	r7, #8
 801ade0:	46bd      	mov	sp, r7
 801ade2:	bd80      	pop	{r7, pc}
 801ade4:	08027754 	.word	0x08027754
 801ade8:	080278f8 	.word	0x080278f8
 801adec:	080277a4 	.word	0x080277a4

0801adf0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801adf0:	b580      	push	{r7, lr}
 801adf2:	b082      	sub	sp, #8
 801adf4:	af00      	add	r7, sp, #0
 801adf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d107      	bne.n	801ae0e <netif_set_down+0x1e>
 801adfe:	4b12      	ldr	r3, [pc, #72]	; (801ae48 <netif_set_down+0x58>)
 801ae00:	f240 329b 	movw	r2, #923	; 0x39b
 801ae04:	4911      	ldr	r1, [pc, #68]	; (801ae4c <netif_set_down+0x5c>)
 801ae06:	4812      	ldr	r0, [pc, #72]	; (801ae50 <netif_set_down+0x60>)
 801ae08:	f00b f872 	bl	8025ef0 <iprintf>
 801ae0c:	e019      	b.n	801ae42 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ae14:	f003 0301 	and.w	r3, r3, #1
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d012      	beq.n	801ae42 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ae22:	f023 0301 	bic.w	r3, r3, #1
 801ae26:	b2da      	uxtb	r2, r3
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ae34:	f003 0308 	and.w	r3, r3, #8
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d002      	beq.n	801ae42 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	f007 fea9 	bl	8022b94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801ae42:	3708      	adds	r7, #8
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bd80      	pop	{r7, pc}
 801ae48:	08027754 	.word	0x08027754
 801ae4c:	0802791c 	.word	0x0802791c
 801ae50:	080277a4 	.word	0x080277a4

0801ae54 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801ae54:	b580      	push	{r7, lr}
 801ae56:	b082      	sub	sp, #8
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d107      	bne.n	801ae72 <netif_set_link_up+0x1e>
 801ae62:	4b13      	ldr	r3, [pc, #76]	; (801aeb0 <netif_set_link_up+0x5c>)
 801ae64:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801ae68:	4912      	ldr	r1, [pc, #72]	; (801aeb4 <netif_set_link_up+0x60>)
 801ae6a:	4813      	ldr	r0, [pc, #76]	; (801aeb8 <netif_set_link_up+0x64>)
 801ae6c:	f00b f840 	bl	8025ef0 <iprintf>
 801ae70:	e01b      	b.n	801aeaa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ae78:	f003 0304 	and.w	r3, r3, #4
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d114      	bne.n	801aeaa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ae86:	f043 0304 	orr.w	r3, r3, #4
 801ae8a:	b2da      	uxtb	r2, r3
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ae92:	2103      	movs	r1, #3
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f7ff ff6b 	bl	801ad70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	69db      	ldr	r3, [r3, #28]
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	d003      	beq.n	801aeaa <netif_set_link_up+0x56>
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	69db      	ldr	r3, [r3, #28]
 801aea6:	6878      	ldr	r0, [r7, #4]
 801aea8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801aeaa:	3708      	adds	r7, #8
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}
 801aeb0:	08027754 	.word	0x08027754
 801aeb4:	0802793c 	.word	0x0802793c
 801aeb8:	080277a4 	.word	0x080277a4

0801aebc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b082      	sub	sp, #8
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d107      	bne.n	801aeda <netif_set_link_down+0x1e>
 801aeca:	4b11      	ldr	r3, [pc, #68]	; (801af10 <netif_set_link_down+0x54>)
 801aecc:	f240 4206 	movw	r2, #1030	; 0x406
 801aed0:	4910      	ldr	r1, [pc, #64]	; (801af14 <netif_set_link_down+0x58>)
 801aed2:	4811      	ldr	r0, [pc, #68]	; (801af18 <netif_set_link_down+0x5c>)
 801aed4:	f00b f80c 	bl	8025ef0 <iprintf>
 801aed8:	e017      	b.n	801af0a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aee0:	f003 0304 	and.w	r3, r3, #4
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d010      	beq.n	801af0a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aeee:	f023 0304 	bic.w	r3, r3, #4
 801aef2:	b2da      	uxtb	r2, r3
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	69db      	ldr	r3, [r3, #28]
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d003      	beq.n	801af0a <netif_set_link_down+0x4e>
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	69db      	ldr	r3, [r3, #28]
 801af06:	6878      	ldr	r0, [r7, #4]
 801af08:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801af0a:	3708      	adds	r7, #8
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	08027754 	.word	0x08027754
 801af14:	08027960 	.word	0x08027960
 801af18:	080277a4 	.word	0x080277a4

0801af1c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801af1c:	b480      	push	{r7}
 801af1e:	b083      	sub	sp, #12
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
 801af24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d002      	beq.n	801af32 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	683a      	ldr	r2, [r7, #0]
 801af30:	61da      	str	r2, [r3, #28]
  }
}
 801af32:	bf00      	nop
 801af34:	370c      	adds	r7, #12
 801af36:	46bd      	mov	sp, r7
 801af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3c:	4770      	bx	lr

0801af3e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801af3e:	b480      	push	{r7}
 801af40:	b085      	sub	sp, #20
 801af42:	af00      	add	r7, sp, #0
 801af44:	60f8      	str	r0, [r7, #12]
 801af46:	60b9      	str	r1, [r7, #8]
 801af48:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801af4a:	f06f 030b 	mvn.w	r3, #11
}
 801af4e:	4618      	mov	r0, r3
 801af50:	3714      	adds	r7, #20
 801af52:	46bd      	mov	sp, r7
 801af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af58:	4770      	bx	lr
	...

0801af5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801af5c:	b480      	push	{r7}
 801af5e:	b085      	sub	sp, #20
 801af60:	af00      	add	r7, sp, #0
 801af62:	4603      	mov	r3, r0
 801af64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801af66:	79fb      	ldrb	r3, [r7, #7]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d013      	beq.n	801af94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801af6c:	4b0d      	ldr	r3, [pc, #52]	; (801afa4 <netif_get_by_index+0x48>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	60fb      	str	r3, [r7, #12]
 801af72:	e00c      	b.n	801af8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801af7a:	3301      	adds	r3, #1
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	79fa      	ldrb	r2, [r7, #7]
 801af80:	429a      	cmp	r2, r3
 801af82:	d101      	bne.n	801af88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	e006      	b.n	801af96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	60fb      	str	r3, [r7, #12]
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d1ef      	bne.n	801af74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801af94:	2300      	movs	r3, #0
}
 801af96:	4618      	mov	r0, r3
 801af98:	3714      	adds	r7, #20
 801af9a:	46bd      	mov	sp, r7
 801af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afa0:	4770      	bx	lr
 801afa2:	bf00      	nop
 801afa4:	200102a4 	.word	0x200102a4

0801afa8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b082      	sub	sp, #8
 801afac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801afae:	f009 ff7d 	bl	8024eac <sys_arch_protect>
 801afb2:	6038      	str	r0, [r7, #0]
 801afb4:	4b0d      	ldr	r3, [pc, #52]	; (801afec <pbuf_free_ooseq+0x44>)
 801afb6:	2200      	movs	r2, #0
 801afb8:	701a      	strb	r2, [r3, #0]
 801afba:	6838      	ldr	r0, [r7, #0]
 801afbc:	f009 ff84 	bl	8024ec8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801afc0:	4b0b      	ldr	r3, [pc, #44]	; (801aff0 <pbuf_free_ooseq+0x48>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	607b      	str	r3, [r7, #4]
 801afc6:	e00a      	b.n	801afde <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d003      	beq.n	801afd8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801afd0:	6878      	ldr	r0, [r7, #4]
 801afd2:	f002 fc43 	bl	801d85c <tcp_free_ooseq>
      return;
 801afd6:	e005      	b.n	801afe4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	68db      	ldr	r3, [r3, #12]
 801afdc:	607b      	str	r3, [r7, #4]
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d1f1      	bne.n	801afc8 <pbuf_free_ooseq+0x20>
    }
  }
}
 801afe4:	3708      	adds	r7, #8
 801afe6:	46bd      	mov	sp, r7
 801afe8:	bd80      	pop	{r7, pc}
 801afea:	bf00      	nop
 801afec:	200102ac 	.word	0x200102ac
 801aff0:	200102b4 	.word	0x200102b4

0801aff4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b082      	sub	sp, #8
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801affc:	f7ff ffd4 	bl	801afa8 <pbuf_free_ooseq>
}
 801b000:	bf00      	nop
 801b002:	3708      	adds	r7, #8
 801b004:	46bd      	mov	sp, r7
 801b006:	bd80      	pop	{r7, pc}

0801b008 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b082      	sub	sp, #8
 801b00c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801b00e:	f009 ff4d 	bl	8024eac <sys_arch_protect>
 801b012:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801b014:	4b0f      	ldr	r3, [pc, #60]	; (801b054 <pbuf_pool_is_empty+0x4c>)
 801b016:	781b      	ldrb	r3, [r3, #0]
 801b018:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801b01a:	4b0e      	ldr	r3, [pc, #56]	; (801b054 <pbuf_pool_is_empty+0x4c>)
 801b01c:	2201      	movs	r2, #1
 801b01e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	f009 ff51 	bl	8024ec8 <sys_arch_unprotect>

  if (!queued) {
 801b026:	78fb      	ldrb	r3, [r7, #3]
 801b028:	2b00      	cmp	r3, #0
 801b02a:	d10f      	bne.n	801b04c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801b02c:	2100      	movs	r1, #0
 801b02e:	480a      	ldr	r0, [pc, #40]	; (801b058 <pbuf_pool_is_empty+0x50>)
 801b030:	f7fe fed6 	bl	8019de0 <tcpip_try_callback>
 801b034:	4603      	mov	r3, r0
 801b036:	2b00      	cmp	r3, #0
 801b038:	d008      	beq.n	801b04c <pbuf_pool_is_empty+0x44>
 801b03a:	f009 ff37 	bl	8024eac <sys_arch_protect>
 801b03e:	6078      	str	r0, [r7, #4]
 801b040:	4b04      	ldr	r3, [pc, #16]	; (801b054 <pbuf_pool_is_empty+0x4c>)
 801b042:	2200      	movs	r2, #0
 801b044:	701a      	strb	r2, [r3, #0]
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f009 ff3e 	bl	8024ec8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801b04c:	bf00      	nop
 801b04e:	3708      	adds	r7, #8
 801b050:	46bd      	mov	sp, r7
 801b052:	bd80      	pop	{r7, pc}
 801b054:	200102ac 	.word	0x200102ac
 801b058:	0801aff5 	.word	0x0801aff5

0801b05c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801b05c:	b480      	push	{r7}
 801b05e:	b085      	sub	sp, #20
 801b060:	af00      	add	r7, sp, #0
 801b062:	60f8      	str	r0, [r7, #12]
 801b064:	60b9      	str	r1, [r7, #8]
 801b066:	4611      	mov	r1, r2
 801b068:	461a      	mov	r2, r3
 801b06a:	460b      	mov	r3, r1
 801b06c:	80fb      	strh	r3, [r7, #6]
 801b06e:	4613      	mov	r3, r2
 801b070:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	2200      	movs	r2, #0
 801b076:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	68ba      	ldr	r2, [r7, #8]
 801b07c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	88fa      	ldrh	r2, [r7, #6]
 801b082:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	88ba      	ldrh	r2, [r7, #4]
 801b088:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801b08a:	8b3b      	ldrh	r3, [r7, #24]
 801b08c:	b2da      	uxtb	r2, r3
 801b08e:	68fb      	ldr	r3, [r7, #12]
 801b090:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	7f3a      	ldrb	r2, [r7, #28]
 801b096:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	2201      	movs	r2, #1
 801b09c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	73da      	strb	r2, [r3, #15]
}
 801b0a4:	bf00      	nop
 801b0a6:	3714      	adds	r7, #20
 801b0a8:	46bd      	mov	sp, r7
 801b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ae:	4770      	bx	lr

0801b0b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b08c      	sub	sp, #48	; 0x30
 801b0b4:	af02      	add	r7, sp, #8
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	71fb      	strb	r3, [r7, #7]
 801b0ba:	460b      	mov	r3, r1
 801b0bc:	80bb      	strh	r3, [r7, #4]
 801b0be:	4613      	mov	r3, r2
 801b0c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801b0c2:	79fb      	ldrb	r3, [r7, #7]
 801b0c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801b0c6:	887b      	ldrh	r3, [r7, #2]
 801b0c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801b0cc:	d07f      	beq.n	801b1ce <pbuf_alloc+0x11e>
 801b0ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801b0d2:	f300 80c8 	bgt.w	801b266 <pbuf_alloc+0x1b6>
 801b0d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801b0da:	d010      	beq.n	801b0fe <pbuf_alloc+0x4e>
 801b0dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801b0e0:	f300 80c1 	bgt.w	801b266 <pbuf_alloc+0x1b6>
 801b0e4:	2b01      	cmp	r3, #1
 801b0e6:	d002      	beq.n	801b0ee <pbuf_alloc+0x3e>
 801b0e8:	2b41      	cmp	r3, #65	; 0x41
 801b0ea:	f040 80bc 	bne.w	801b266 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801b0ee:	887a      	ldrh	r2, [r7, #2]
 801b0f0:	88bb      	ldrh	r3, [r7, #4]
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	2000      	movs	r0, #0
 801b0f6:	f000 f8d1 	bl	801b29c <pbuf_alloc_reference>
 801b0fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801b0fc:	e0bd      	b.n	801b27a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801b0fe:	2300      	movs	r3, #0
 801b100:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801b102:	2300      	movs	r3, #0
 801b104:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801b106:	88bb      	ldrh	r3, [r7, #4]
 801b108:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801b10a:	200c      	movs	r0, #12
 801b10c:	f7ff fbbe 	bl	801a88c <memp_malloc>
 801b110:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801b112:	693b      	ldr	r3, [r7, #16]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d109      	bne.n	801b12c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801b118:	f7ff ff76 	bl	801b008 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d002      	beq.n	801b128 <pbuf_alloc+0x78>
            pbuf_free(p);
 801b122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b124:	f000 faa8 	bl	801b678 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801b128:	2300      	movs	r3, #0
 801b12a:	e0a7      	b.n	801b27c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801b12c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b12e:	3303      	adds	r3, #3
 801b130:	b29b      	uxth	r3, r3
 801b132:	f023 0303 	bic.w	r3, r3, #3
 801b136:	b29b      	uxth	r3, r3
 801b138:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801b13c:	b29b      	uxth	r3, r3
 801b13e:	8b7a      	ldrh	r2, [r7, #26]
 801b140:	4293      	cmp	r3, r2
 801b142:	bf28      	it	cs
 801b144:	4613      	movcs	r3, r2
 801b146:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801b148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b14a:	3310      	adds	r3, #16
 801b14c:	693a      	ldr	r2, [r7, #16]
 801b14e:	4413      	add	r3, r2
 801b150:	3303      	adds	r3, #3
 801b152:	f023 0303 	bic.w	r3, r3, #3
 801b156:	4618      	mov	r0, r3
 801b158:	89f9      	ldrh	r1, [r7, #14]
 801b15a:	8b7a      	ldrh	r2, [r7, #26]
 801b15c:	2300      	movs	r3, #0
 801b15e:	9301      	str	r3, [sp, #4]
 801b160:	887b      	ldrh	r3, [r7, #2]
 801b162:	9300      	str	r3, [sp, #0]
 801b164:	460b      	mov	r3, r1
 801b166:	4601      	mov	r1, r0
 801b168:	6938      	ldr	r0, [r7, #16]
 801b16a:	f7ff ff77 	bl	801b05c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	685b      	ldr	r3, [r3, #4]
 801b172:	f003 0303 	and.w	r3, r3, #3
 801b176:	2b00      	cmp	r3, #0
 801b178:	d006      	beq.n	801b188 <pbuf_alloc+0xd8>
 801b17a:	4b42      	ldr	r3, [pc, #264]	; (801b284 <pbuf_alloc+0x1d4>)
 801b17c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b180:	4941      	ldr	r1, [pc, #260]	; (801b288 <pbuf_alloc+0x1d8>)
 801b182:	4842      	ldr	r0, [pc, #264]	; (801b28c <pbuf_alloc+0x1dc>)
 801b184:	f00a feb4 	bl	8025ef0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801b188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b18a:	3303      	adds	r3, #3
 801b18c:	f023 0303 	bic.w	r3, r3, #3
 801b190:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801b194:	d106      	bne.n	801b1a4 <pbuf_alloc+0xf4>
 801b196:	4b3b      	ldr	r3, [pc, #236]	; (801b284 <pbuf_alloc+0x1d4>)
 801b198:	f44f 7281 	mov.w	r2, #258	; 0x102
 801b19c:	493c      	ldr	r1, [pc, #240]	; (801b290 <pbuf_alloc+0x1e0>)
 801b19e:	483b      	ldr	r0, [pc, #236]	; (801b28c <pbuf_alloc+0x1dc>)
 801b1a0:	f00a fea6 	bl	8025ef0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801b1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d102      	bne.n	801b1b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801b1aa:	693b      	ldr	r3, [r7, #16]
 801b1ac:	627b      	str	r3, [r7, #36]	; 0x24
 801b1ae:	e002      	b.n	801b1b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801b1b0:	69fb      	ldr	r3, [r7, #28]
 801b1b2:	693a      	ldr	r2, [r7, #16]
 801b1b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801b1b6:	693b      	ldr	r3, [r7, #16]
 801b1b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801b1ba:	8b7a      	ldrh	r2, [r7, #26]
 801b1bc:	89fb      	ldrh	r3, [r7, #14]
 801b1be:	1ad3      	subs	r3, r2, r3
 801b1c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801b1c6:	8b7b      	ldrh	r3, [r7, #26]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d19e      	bne.n	801b10a <pbuf_alloc+0x5a>
      break;
 801b1cc:	e055      	b.n	801b27a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801b1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b1d0:	3303      	adds	r3, #3
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	f023 0303 	bic.w	r3, r3, #3
 801b1d8:	b29a      	uxth	r2, r3
 801b1da:	88bb      	ldrh	r3, [r7, #4]
 801b1dc:	3303      	adds	r3, #3
 801b1de:	b29b      	uxth	r3, r3
 801b1e0:	f023 0303 	bic.w	r3, r3, #3
 801b1e4:	b29b      	uxth	r3, r3
 801b1e6:	4413      	add	r3, r2
 801b1e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801b1ea:	8b3b      	ldrh	r3, [r7, #24]
 801b1ec:	3310      	adds	r3, #16
 801b1ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801b1f0:	8b3a      	ldrh	r2, [r7, #24]
 801b1f2:	88bb      	ldrh	r3, [r7, #4]
 801b1f4:	3303      	adds	r3, #3
 801b1f6:	f023 0303 	bic.w	r3, r3, #3
 801b1fa:	429a      	cmp	r2, r3
 801b1fc:	d306      	bcc.n	801b20c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801b1fe:	8afa      	ldrh	r2, [r7, #22]
 801b200:	88bb      	ldrh	r3, [r7, #4]
 801b202:	3303      	adds	r3, #3
 801b204:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801b208:	429a      	cmp	r2, r3
 801b20a:	d201      	bcs.n	801b210 <pbuf_alloc+0x160>
        return NULL;
 801b20c:	2300      	movs	r3, #0
 801b20e:	e035      	b.n	801b27c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801b210:	8afb      	ldrh	r3, [r7, #22]
 801b212:	4618      	mov	r0, r3
 801b214:	f7ff f9b8 	bl	801a588 <mem_malloc>
 801b218:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d101      	bne.n	801b224 <pbuf_alloc+0x174>
        return NULL;
 801b220:	2300      	movs	r3, #0
 801b222:	e02b      	b.n	801b27c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801b224:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b226:	3310      	adds	r3, #16
 801b228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b22a:	4413      	add	r3, r2
 801b22c:	3303      	adds	r3, #3
 801b22e:	f023 0303 	bic.w	r3, r3, #3
 801b232:	4618      	mov	r0, r3
 801b234:	88b9      	ldrh	r1, [r7, #4]
 801b236:	88ba      	ldrh	r2, [r7, #4]
 801b238:	2300      	movs	r3, #0
 801b23a:	9301      	str	r3, [sp, #4]
 801b23c:	887b      	ldrh	r3, [r7, #2]
 801b23e:	9300      	str	r3, [sp, #0]
 801b240:	460b      	mov	r3, r1
 801b242:	4601      	mov	r1, r0
 801b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b246:	f7ff ff09 	bl	801b05c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b24c:	685b      	ldr	r3, [r3, #4]
 801b24e:	f003 0303 	and.w	r3, r3, #3
 801b252:	2b00      	cmp	r3, #0
 801b254:	d010      	beq.n	801b278 <pbuf_alloc+0x1c8>
 801b256:	4b0b      	ldr	r3, [pc, #44]	; (801b284 <pbuf_alloc+0x1d4>)
 801b258:	f44f 7291 	mov.w	r2, #290	; 0x122
 801b25c:	490d      	ldr	r1, [pc, #52]	; (801b294 <pbuf_alloc+0x1e4>)
 801b25e:	480b      	ldr	r0, [pc, #44]	; (801b28c <pbuf_alloc+0x1dc>)
 801b260:	f00a fe46 	bl	8025ef0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801b264:	e008      	b.n	801b278 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801b266:	4b07      	ldr	r3, [pc, #28]	; (801b284 <pbuf_alloc+0x1d4>)
 801b268:	f240 1227 	movw	r2, #295	; 0x127
 801b26c:	490a      	ldr	r1, [pc, #40]	; (801b298 <pbuf_alloc+0x1e8>)
 801b26e:	4807      	ldr	r0, [pc, #28]	; (801b28c <pbuf_alloc+0x1dc>)
 801b270:	f00a fe3e 	bl	8025ef0 <iprintf>
      return NULL;
 801b274:	2300      	movs	r3, #0
 801b276:	e001      	b.n	801b27c <pbuf_alloc+0x1cc>
      break;
 801b278:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b27c:	4618      	mov	r0, r3
 801b27e:	3728      	adds	r7, #40	; 0x28
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}
 801b284:	08027984 	.word	0x08027984
 801b288:	080279b4 	.word	0x080279b4
 801b28c:	080279e4 	.word	0x080279e4
 801b290:	08027a0c 	.word	0x08027a0c
 801b294:	08027a40 	.word	0x08027a40
 801b298:	08027a6c 	.word	0x08027a6c

0801b29c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b086      	sub	sp, #24
 801b2a0:	af02      	add	r7, sp, #8
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	460b      	mov	r3, r1
 801b2a6:	807b      	strh	r3, [r7, #2]
 801b2a8:	4613      	mov	r3, r2
 801b2aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801b2ac:	883b      	ldrh	r3, [r7, #0]
 801b2ae:	2b41      	cmp	r3, #65	; 0x41
 801b2b0:	d009      	beq.n	801b2c6 <pbuf_alloc_reference+0x2a>
 801b2b2:	883b      	ldrh	r3, [r7, #0]
 801b2b4:	2b01      	cmp	r3, #1
 801b2b6:	d006      	beq.n	801b2c6 <pbuf_alloc_reference+0x2a>
 801b2b8:	4b0f      	ldr	r3, [pc, #60]	; (801b2f8 <pbuf_alloc_reference+0x5c>)
 801b2ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801b2be:	490f      	ldr	r1, [pc, #60]	; (801b2fc <pbuf_alloc_reference+0x60>)
 801b2c0:	480f      	ldr	r0, [pc, #60]	; (801b300 <pbuf_alloc_reference+0x64>)
 801b2c2:	f00a fe15 	bl	8025ef0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801b2c6:	200b      	movs	r0, #11
 801b2c8:	f7ff fae0 	bl	801a88c <memp_malloc>
 801b2cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d101      	bne.n	801b2d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801b2d4:	2300      	movs	r3, #0
 801b2d6:	e00b      	b.n	801b2f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801b2d8:	8879      	ldrh	r1, [r7, #2]
 801b2da:	887a      	ldrh	r2, [r7, #2]
 801b2dc:	2300      	movs	r3, #0
 801b2de:	9301      	str	r3, [sp, #4]
 801b2e0:	883b      	ldrh	r3, [r7, #0]
 801b2e2:	9300      	str	r3, [sp, #0]
 801b2e4:	460b      	mov	r3, r1
 801b2e6:	6879      	ldr	r1, [r7, #4]
 801b2e8:	68f8      	ldr	r0, [r7, #12]
 801b2ea:	f7ff feb7 	bl	801b05c <pbuf_init_alloced_pbuf>
  return p;
 801b2ee:	68fb      	ldr	r3, [r7, #12]
}
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	3710      	adds	r7, #16
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}
 801b2f8:	08027984 	.word	0x08027984
 801b2fc:	08027a88 	.word	0x08027a88
 801b300:	080279e4 	.word	0x080279e4

0801b304 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801b304:	b580      	push	{r7, lr}
 801b306:	b088      	sub	sp, #32
 801b308:	af02      	add	r7, sp, #8
 801b30a:	607b      	str	r3, [r7, #4]
 801b30c:	4603      	mov	r3, r0
 801b30e:	73fb      	strb	r3, [r7, #15]
 801b310:	460b      	mov	r3, r1
 801b312:	81bb      	strh	r3, [r7, #12]
 801b314:	4613      	mov	r3, r2
 801b316:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801b318:	7bfb      	ldrb	r3, [r7, #15]
 801b31a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801b31c:	8a7b      	ldrh	r3, [r7, #18]
 801b31e:	3303      	adds	r3, #3
 801b320:	f023 0203 	bic.w	r2, r3, #3
 801b324:	89bb      	ldrh	r3, [r7, #12]
 801b326:	441a      	add	r2, r3
 801b328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b32a:	429a      	cmp	r2, r3
 801b32c:	d901      	bls.n	801b332 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801b32e:	2300      	movs	r3, #0
 801b330:	e018      	b.n	801b364 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801b332:	6a3b      	ldr	r3, [r7, #32]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d007      	beq.n	801b348 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801b338:	8a7b      	ldrh	r3, [r7, #18]
 801b33a:	3303      	adds	r3, #3
 801b33c:	f023 0303 	bic.w	r3, r3, #3
 801b340:	6a3a      	ldr	r2, [r7, #32]
 801b342:	4413      	add	r3, r2
 801b344:	617b      	str	r3, [r7, #20]
 801b346:	e001      	b.n	801b34c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801b348:	2300      	movs	r3, #0
 801b34a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801b34c:	6878      	ldr	r0, [r7, #4]
 801b34e:	89b9      	ldrh	r1, [r7, #12]
 801b350:	89ba      	ldrh	r2, [r7, #12]
 801b352:	2302      	movs	r3, #2
 801b354:	9301      	str	r3, [sp, #4]
 801b356:	897b      	ldrh	r3, [r7, #10]
 801b358:	9300      	str	r3, [sp, #0]
 801b35a:	460b      	mov	r3, r1
 801b35c:	6979      	ldr	r1, [r7, #20]
 801b35e:	f7ff fe7d 	bl	801b05c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801b362:	687b      	ldr	r3, [r7, #4]
}
 801b364:	4618      	mov	r0, r3
 801b366:	3718      	adds	r7, #24
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}

0801b36c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	b084      	sub	sp, #16
 801b370:	af00      	add	r7, sp, #0
 801b372:	6078      	str	r0, [r7, #4]
 801b374:	460b      	mov	r3, r1
 801b376:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d106      	bne.n	801b38c <pbuf_realloc+0x20>
 801b37e:	4b3a      	ldr	r3, [pc, #232]	; (801b468 <pbuf_realloc+0xfc>)
 801b380:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801b384:	4939      	ldr	r1, [pc, #228]	; (801b46c <pbuf_realloc+0x100>)
 801b386:	483a      	ldr	r0, [pc, #232]	; (801b470 <pbuf_realloc+0x104>)
 801b388:	f00a fdb2 	bl	8025ef0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	891b      	ldrh	r3, [r3, #8]
 801b390:	887a      	ldrh	r2, [r7, #2]
 801b392:	429a      	cmp	r2, r3
 801b394:	d263      	bcs.n	801b45e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	891a      	ldrh	r2, [r3, #8]
 801b39a:	887b      	ldrh	r3, [r7, #2]
 801b39c:	1ad3      	subs	r3, r2, r3
 801b39e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801b3a0:	887b      	ldrh	r3, [r7, #2]
 801b3a2:	817b      	strh	r3, [r7, #10]
  q = p;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801b3a8:	e018      	b.n	801b3dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	895b      	ldrh	r3, [r3, #10]
 801b3ae:	897a      	ldrh	r2, [r7, #10]
 801b3b0:	1ad3      	subs	r3, r2, r3
 801b3b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	891a      	ldrh	r2, [r3, #8]
 801b3b8:	893b      	ldrh	r3, [r7, #8]
 801b3ba:	1ad3      	subs	r3, r2, r3
 801b3bc:	b29a      	uxth	r2, r3
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801b3c2:	68fb      	ldr	r3, [r7, #12]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d106      	bne.n	801b3dc <pbuf_realloc+0x70>
 801b3ce:	4b26      	ldr	r3, [pc, #152]	; (801b468 <pbuf_realloc+0xfc>)
 801b3d0:	f240 12af 	movw	r2, #431	; 0x1af
 801b3d4:	4927      	ldr	r1, [pc, #156]	; (801b474 <pbuf_realloc+0x108>)
 801b3d6:	4826      	ldr	r0, [pc, #152]	; (801b470 <pbuf_realloc+0x104>)
 801b3d8:	f00a fd8a 	bl	8025ef0 <iprintf>
  while (rem_len > q->len) {
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	895b      	ldrh	r3, [r3, #10]
 801b3e0:	897a      	ldrh	r2, [r7, #10]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d8e1      	bhi.n	801b3aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	7b1b      	ldrb	r3, [r3, #12]
 801b3ea:	f003 030f 	and.w	r3, r3, #15
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d121      	bne.n	801b436 <pbuf_realloc+0xca>
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	895b      	ldrh	r3, [r3, #10]
 801b3f6:	897a      	ldrh	r2, [r7, #10]
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d01c      	beq.n	801b436 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	7b5b      	ldrb	r3, [r3, #13]
 801b400:	f003 0302 	and.w	r3, r3, #2
 801b404:	2b00      	cmp	r3, #0
 801b406:	d116      	bne.n	801b436 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	685a      	ldr	r2, [r3, #4]
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	1ad3      	subs	r3, r2, r3
 801b410:	b29a      	uxth	r2, r3
 801b412:	897b      	ldrh	r3, [r7, #10]
 801b414:	4413      	add	r3, r2
 801b416:	b29b      	uxth	r3, r3
 801b418:	4619      	mov	r1, r3
 801b41a:	68f8      	ldr	r0, [r7, #12]
 801b41c:	f7fe ffaa 	bl	801a374 <mem_trim>
 801b420:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	2b00      	cmp	r3, #0
 801b426:	d106      	bne.n	801b436 <pbuf_realloc+0xca>
 801b428:	4b0f      	ldr	r3, [pc, #60]	; (801b468 <pbuf_realloc+0xfc>)
 801b42a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801b42e:	4912      	ldr	r1, [pc, #72]	; (801b478 <pbuf_realloc+0x10c>)
 801b430:	480f      	ldr	r0, [pc, #60]	; (801b470 <pbuf_realloc+0x104>)
 801b432:	f00a fd5d 	bl	8025ef0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	897a      	ldrh	r2, [r7, #10]
 801b43a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	895a      	ldrh	r2, [r3, #10]
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d004      	beq.n	801b456 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	4618      	mov	r0, r3
 801b452:	f000 f911 	bl	801b678 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801b456:	68fb      	ldr	r3, [r7, #12]
 801b458:	2200      	movs	r2, #0
 801b45a:	601a      	str	r2, [r3, #0]
 801b45c:	e000      	b.n	801b460 <pbuf_realloc+0xf4>
    return;
 801b45e:	bf00      	nop

}
 801b460:	3710      	adds	r7, #16
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}
 801b466:	bf00      	nop
 801b468:	08027984 	.word	0x08027984
 801b46c:	08027a9c 	.word	0x08027a9c
 801b470:	080279e4 	.word	0x080279e4
 801b474:	08027ab4 	.word	0x08027ab4
 801b478:	08027acc 	.word	0x08027acc

0801b47c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801b47c:	b580      	push	{r7, lr}
 801b47e:	b086      	sub	sp, #24
 801b480:	af00      	add	r7, sp, #0
 801b482:	60f8      	str	r0, [r7, #12]
 801b484:	60b9      	str	r1, [r7, #8]
 801b486:	4613      	mov	r3, r2
 801b488:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d106      	bne.n	801b49e <pbuf_add_header_impl+0x22>
 801b490:	4b2b      	ldr	r3, [pc, #172]	; (801b540 <pbuf_add_header_impl+0xc4>)
 801b492:	f240 12df 	movw	r2, #479	; 0x1df
 801b496:	492b      	ldr	r1, [pc, #172]	; (801b544 <pbuf_add_header_impl+0xc8>)
 801b498:	482b      	ldr	r0, [pc, #172]	; (801b548 <pbuf_add_header_impl+0xcc>)
 801b49a:	f00a fd29 	bl	8025ef0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d003      	beq.n	801b4ac <pbuf_add_header_impl+0x30>
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b4aa:	d301      	bcc.n	801b4b0 <pbuf_add_header_impl+0x34>
    return 1;
 801b4ac:	2301      	movs	r3, #1
 801b4ae:	e043      	b.n	801b538 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d101      	bne.n	801b4ba <pbuf_add_header_impl+0x3e>
    return 0;
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	e03e      	b.n	801b538 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801b4ba:	68bb      	ldr	r3, [r7, #8]
 801b4bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	891a      	ldrh	r2, [r3, #8]
 801b4c2:	8a7b      	ldrh	r3, [r7, #18]
 801b4c4:	4413      	add	r3, r2
 801b4c6:	b29b      	uxth	r3, r3
 801b4c8:	8a7a      	ldrh	r2, [r7, #18]
 801b4ca:	429a      	cmp	r2, r3
 801b4cc:	d901      	bls.n	801b4d2 <pbuf_add_header_impl+0x56>
    return 1;
 801b4ce:	2301      	movs	r3, #1
 801b4d0:	e032      	b.n	801b538 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	7b1b      	ldrb	r3, [r3, #12]
 801b4d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b4d8:	8a3b      	ldrh	r3, [r7, #16]
 801b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d00c      	beq.n	801b4fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	685a      	ldr	r2, [r3, #4]
 801b4e6:	68bb      	ldr	r3, [r7, #8]
 801b4e8:	425b      	negs	r3, r3
 801b4ea:	4413      	add	r3, r2
 801b4ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	3310      	adds	r3, #16
 801b4f2:	697a      	ldr	r2, [r7, #20]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d20d      	bcs.n	801b514 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801b4f8:	2301      	movs	r3, #1
 801b4fa:	e01d      	b.n	801b538 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801b4fc:	79fb      	ldrb	r3, [r7, #7]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d006      	beq.n	801b510 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	685a      	ldr	r2, [r3, #4]
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	425b      	negs	r3, r3
 801b50a:	4413      	add	r3, r2
 801b50c:	617b      	str	r3, [r7, #20]
 801b50e:	e001      	b.n	801b514 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801b510:	2301      	movs	r3, #1
 801b512:	e011      	b.n	801b538 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	697a      	ldr	r2, [r7, #20]
 801b518:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	895a      	ldrh	r2, [r3, #10]
 801b51e:	8a7b      	ldrh	r3, [r7, #18]
 801b520:	4413      	add	r3, r2
 801b522:	b29a      	uxth	r2, r3
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	891a      	ldrh	r2, [r3, #8]
 801b52c:	8a7b      	ldrh	r3, [r7, #18]
 801b52e:	4413      	add	r3, r2
 801b530:	b29a      	uxth	r2, r3
 801b532:	68fb      	ldr	r3, [r7, #12]
 801b534:	811a      	strh	r2, [r3, #8]


  return 0;
 801b536:	2300      	movs	r3, #0
}
 801b538:	4618      	mov	r0, r3
 801b53a:	3718      	adds	r7, #24
 801b53c:	46bd      	mov	sp, r7
 801b53e:	bd80      	pop	{r7, pc}
 801b540:	08027984 	.word	0x08027984
 801b544:	08027ae8 	.word	0x08027ae8
 801b548:	080279e4 	.word	0x080279e4

0801b54c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801b54c:	b580      	push	{r7, lr}
 801b54e:	b082      	sub	sp, #8
 801b550:	af00      	add	r7, sp, #0
 801b552:	6078      	str	r0, [r7, #4]
 801b554:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801b556:	2200      	movs	r2, #0
 801b558:	6839      	ldr	r1, [r7, #0]
 801b55a:	6878      	ldr	r0, [r7, #4]
 801b55c:	f7ff ff8e 	bl	801b47c <pbuf_add_header_impl>
 801b560:	4603      	mov	r3, r0
}
 801b562:	4618      	mov	r0, r3
 801b564:	3708      	adds	r7, #8
 801b566:	46bd      	mov	sp, r7
 801b568:	bd80      	pop	{r7, pc}
	...

0801b56c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d106      	bne.n	801b58a <pbuf_remove_header+0x1e>
 801b57c:	4b20      	ldr	r3, [pc, #128]	; (801b600 <pbuf_remove_header+0x94>)
 801b57e:	f240 224b 	movw	r2, #587	; 0x24b
 801b582:	4920      	ldr	r1, [pc, #128]	; (801b604 <pbuf_remove_header+0x98>)
 801b584:	4820      	ldr	r0, [pc, #128]	; (801b608 <pbuf_remove_header+0x9c>)
 801b586:	f00a fcb3 	bl	8025ef0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d003      	beq.n	801b598 <pbuf_remove_header+0x2c>
 801b590:	683b      	ldr	r3, [r7, #0]
 801b592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b596:	d301      	bcc.n	801b59c <pbuf_remove_header+0x30>
    return 1;
 801b598:	2301      	movs	r3, #1
 801b59a:	e02c      	b.n	801b5f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801b59c:	683b      	ldr	r3, [r7, #0]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d101      	bne.n	801b5a6 <pbuf_remove_header+0x3a>
    return 0;
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	e027      	b.n	801b5f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801b5a6:	683b      	ldr	r3, [r7, #0]
 801b5a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	895b      	ldrh	r3, [r3, #10]
 801b5ae:	89fa      	ldrh	r2, [r7, #14]
 801b5b0:	429a      	cmp	r2, r3
 801b5b2:	d908      	bls.n	801b5c6 <pbuf_remove_header+0x5a>
 801b5b4:	4b12      	ldr	r3, [pc, #72]	; (801b600 <pbuf_remove_header+0x94>)
 801b5b6:	f240 2255 	movw	r2, #597	; 0x255
 801b5ba:	4914      	ldr	r1, [pc, #80]	; (801b60c <pbuf_remove_header+0xa0>)
 801b5bc:	4812      	ldr	r0, [pc, #72]	; (801b608 <pbuf_remove_header+0x9c>)
 801b5be:	f00a fc97 	bl	8025ef0 <iprintf>
 801b5c2:	2301      	movs	r3, #1
 801b5c4:	e017      	b.n	801b5f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	685b      	ldr	r3, [r3, #4]
 801b5ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	685a      	ldr	r2, [r3, #4]
 801b5d0:	683b      	ldr	r3, [r7, #0]
 801b5d2:	441a      	add	r2, r3
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	895a      	ldrh	r2, [r3, #10]
 801b5dc:	89fb      	ldrh	r3, [r7, #14]
 801b5de:	1ad3      	subs	r3, r2, r3
 801b5e0:	b29a      	uxth	r2, r3
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	891a      	ldrh	r2, [r3, #8]
 801b5ea:	89fb      	ldrh	r3, [r7, #14]
 801b5ec:	1ad3      	subs	r3, r2, r3
 801b5ee:	b29a      	uxth	r2, r3
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801b5f4:	2300      	movs	r3, #0
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3710      	adds	r7, #16
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	bf00      	nop
 801b600:	08027984 	.word	0x08027984
 801b604:	08027ae8 	.word	0x08027ae8
 801b608:	080279e4 	.word	0x080279e4
 801b60c:	08027af4 	.word	0x08027af4

0801b610 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b082      	sub	sp, #8
 801b614:	af00      	add	r7, sp, #0
 801b616:	6078      	str	r0, [r7, #4]
 801b618:	460b      	mov	r3, r1
 801b61a:	807b      	strh	r3, [r7, #2]
 801b61c:	4613      	mov	r3, r2
 801b61e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801b620:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b624:	2b00      	cmp	r3, #0
 801b626:	da08      	bge.n	801b63a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801b628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b62c:	425b      	negs	r3, r3
 801b62e:	4619      	mov	r1, r3
 801b630:	6878      	ldr	r0, [r7, #4]
 801b632:	f7ff ff9b 	bl	801b56c <pbuf_remove_header>
 801b636:	4603      	mov	r3, r0
 801b638:	e007      	b.n	801b64a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801b63a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b63e:	787a      	ldrb	r2, [r7, #1]
 801b640:	4619      	mov	r1, r3
 801b642:	6878      	ldr	r0, [r7, #4]
 801b644:	f7ff ff1a 	bl	801b47c <pbuf_add_header_impl>
 801b648:	4603      	mov	r3, r0
  }
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3708      	adds	r7, #8
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}

0801b652 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801b652:	b580      	push	{r7, lr}
 801b654:	b082      	sub	sp, #8
 801b656:	af00      	add	r7, sp, #0
 801b658:	6078      	str	r0, [r7, #4]
 801b65a:	460b      	mov	r3, r1
 801b65c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801b65e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b662:	2201      	movs	r2, #1
 801b664:	4619      	mov	r1, r3
 801b666:	6878      	ldr	r0, [r7, #4]
 801b668:	f7ff ffd2 	bl	801b610 <pbuf_header_impl>
 801b66c:	4603      	mov	r3, r0
}
 801b66e:	4618      	mov	r0, r3
 801b670:	3708      	adds	r7, #8
 801b672:	46bd      	mov	sp, r7
 801b674:	bd80      	pop	{r7, pc}
	...

0801b678 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b088      	sub	sp, #32
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d10b      	bne.n	801b69e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d106      	bne.n	801b69a <pbuf_free+0x22>
 801b68c:	4b3b      	ldr	r3, [pc, #236]	; (801b77c <pbuf_free+0x104>)
 801b68e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801b692:	493b      	ldr	r1, [pc, #236]	; (801b780 <pbuf_free+0x108>)
 801b694:	483b      	ldr	r0, [pc, #236]	; (801b784 <pbuf_free+0x10c>)
 801b696:	f00a fc2b 	bl	8025ef0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801b69a:	2300      	movs	r3, #0
 801b69c:	e069      	b.n	801b772 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801b69e:	2300      	movs	r3, #0
 801b6a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801b6a2:	e062      	b.n	801b76a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801b6a4:	f009 fc02 	bl	8024eac <sys_arch_protect>
 801b6a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	7b9b      	ldrb	r3, [r3, #14]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d106      	bne.n	801b6c0 <pbuf_free+0x48>
 801b6b2:	4b32      	ldr	r3, [pc, #200]	; (801b77c <pbuf_free+0x104>)
 801b6b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 801b6b8:	4933      	ldr	r1, [pc, #204]	; (801b788 <pbuf_free+0x110>)
 801b6ba:	4832      	ldr	r0, [pc, #200]	; (801b784 <pbuf_free+0x10c>)
 801b6bc:	f00a fc18 	bl	8025ef0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	7b9b      	ldrb	r3, [r3, #14]
 801b6c4:	3b01      	subs	r3, #1
 801b6c6:	b2da      	uxtb	r2, r3
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	739a      	strb	r2, [r3, #14]
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	7b9b      	ldrb	r3, [r3, #14]
 801b6d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801b6d2:	69b8      	ldr	r0, [r7, #24]
 801b6d4:	f009 fbf8 	bl	8024ec8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801b6d8:	7dfb      	ldrb	r3, [r7, #23]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	d143      	bne.n	801b766 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	7b1b      	ldrb	r3, [r3, #12]
 801b6e8:	f003 030f 	and.w	r3, r3, #15
 801b6ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	7b5b      	ldrb	r3, [r3, #13]
 801b6f2:	f003 0302 	and.w	r3, r3, #2
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d011      	beq.n	801b71e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	691b      	ldr	r3, [r3, #16]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d106      	bne.n	801b714 <pbuf_free+0x9c>
 801b706:	4b1d      	ldr	r3, [pc, #116]	; (801b77c <pbuf_free+0x104>)
 801b708:	f240 22ff 	movw	r2, #767	; 0x2ff
 801b70c:	491f      	ldr	r1, [pc, #124]	; (801b78c <pbuf_free+0x114>)
 801b70e:	481d      	ldr	r0, [pc, #116]	; (801b784 <pbuf_free+0x10c>)
 801b710:	f00a fbee 	bl	8025ef0 <iprintf>
        pc->custom_free_function(p);
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	691b      	ldr	r3, [r3, #16]
 801b718:	6878      	ldr	r0, [r7, #4]
 801b71a:	4798      	blx	r3
 801b71c:	e01d      	b.n	801b75a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801b71e:	7bfb      	ldrb	r3, [r7, #15]
 801b720:	2b02      	cmp	r3, #2
 801b722:	d104      	bne.n	801b72e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801b724:	6879      	ldr	r1, [r7, #4]
 801b726:	200c      	movs	r0, #12
 801b728:	f7ff f902 	bl	801a930 <memp_free>
 801b72c:	e015      	b.n	801b75a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801b72e:	7bfb      	ldrb	r3, [r7, #15]
 801b730:	2b01      	cmp	r3, #1
 801b732:	d104      	bne.n	801b73e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801b734:	6879      	ldr	r1, [r7, #4]
 801b736:	200b      	movs	r0, #11
 801b738:	f7ff f8fa 	bl	801a930 <memp_free>
 801b73c:	e00d      	b.n	801b75a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801b73e:	7bfb      	ldrb	r3, [r7, #15]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d103      	bne.n	801b74c <pbuf_free+0xd4>
          mem_free(p);
 801b744:	6878      	ldr	r0, [r7, #4]
 801b746:	f7fe fd85 	bl	801a254 <mem_free>
 801b74a:	e006      	b.n	801b75a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801b74c:	4b0b      	ldr	r3, [pc, #44]	; (801b77c <pbuf_free+0x104>)
 801b74e:	f240 320f 	movw	r2, #783	; 0x30f
 801b752:	490f      	ldr	r1, [pc, #60]	; (801b790 <pbuf_free+0x118>)
 801b754:	480b      	ldr	r0, [pc, #44]	; (801b784 <pbuf_free+0x10c>)
 801b756:	f00a fbcb 	bl	8025ef0 <iprintf>
        }
      }
      count++;
 801b75a:	7ffb      	ldrb	r3, [r7, #31]
 801b75c:	3301      	adds	r3, #1
 801b75e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801b760:	693b      	ldr	r3, [r7, #16]
 801b762:	607b      	str	r3, [r7, #4]
 801b764:	e001      	b.n	801b76a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801b766:	2300      	movs	r3, #0
 801b768:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d199      	bne.n	801b6a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801b770:	7ffb      	ldrb	r3, [r7, #31]
}
 801b772:	4618      	mov	r0, r3
 801b774:	3720      	adds	r7, #32
 801b776:	46bd      	mov	sp, r7
 801b778:	bd80      	pop	{r7, pc}
 801b77a:	bf00      	nop
 801b77c:	08027984 	.word	0x08027984
 801b780:	08027ae8 	.word	0x08027ae8
 801b784:	080279e4 	.word	0x080279e4
 801b788:	08027b14 	.word	0x08027b14
 801b78c:	08027b2c 	.word	0x08027b2c
 801b790:	08027b50 	.word	0x08027b50

0801b794 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801b794:	b480      	push	{r7}
 801b796:	b085      	sub	sp, #20
 801b798:	af00      	add	r7, sp, #0
 801b79a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801b79c:	2300      	movs	r3, #0
 801b79e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801b7a0:	e005      	b.n	801b7ae <pbuf_clen+0x1a>
    ++len;
 801b7a2:	89fb      	ldrh	r3, [r7, #14]
 801b7a4:	3301      	adds	r3, #1
 801b7a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d1f6      	bne.n	801b7a2 <pbuf_clen+0xe>
  }
  return len;
 801b7b4:	89fb      	ldrh	r3, [r7, #14]
}
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	3714      	adds	r7, #20
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c0:	4770      	bx	lr
	...

0801b7c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b084      	sub	sp, #16
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d016      	beq.n	801b800 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b7d2:	f009 fb6b 	bl	8024eac <sys_arch_protect>
 801b7d6:	60f8      	str	r0, [r7, #12]
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	7b9b      	ldrb	r3, [r3, #14]
 801b7dc:	3301      	adds	r3, #1
 801b7de:	b2da      	uxtb	r2, r3
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	739a      	strb	r2, [r3, #14]
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	f009 fb6f 	bl	8024ec8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b7ea:	687b      	ldr	r3, [r7, #4]
 801b7ec:	7b9b      	ldrb	r3, [r3, #14]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d106      	bne.n	801b800 <pbuf_ref+0x3c>
 801b7f2:	4b05      	ldr	r3, [pc, #20]	; (801b808 <pbuf_ref+0x44>)
 801b7f4:	f240 3242 	movw	r2, #834	; 0x342
 801b7f8:	4904      	ldr	r1, [pc, #16]	; (801b80c <pbuf_ref+0x48>)
 801b7fa:	4805      	ldr	r0, [pc, #20]	; (801b810 <pbuf_ref+0x4c>)
 801b7fc:	f00a fb78 	bl	8025ef0 <iprintf>
  }
}
 801b800:	bf00      	nop
 801b802:	3710      	adds	r7, #16
 801b804:	46bd      	mov	sp, r7
 801b806:	bd80      	pop	{r7, pc}
 801b808:	08027984 	.word	0x08027984
 801b80c:	08027b64 	.word	0x08027b64
 801b810:	080279e4 	.word	0x080279e4

0801b814 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
 801b81c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d002      	beq.n	801b82a <pbuf_cat+0x16>
 801b824:	683b      	ldr	r3, [r7, #0]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d107      	bne.n	801b83a <pbuf_cat+0x26>
 801b82a:	4b20      	ldr	r3, [pc, #128]	; (801b8ac <pbuf_cat+0x98>)
 801b82c:	f240 3259 	movw	r2, #857	; 0x359
 801b830:	491f      	ldr	r1, [pc, #124]	; (801b8b0 <pbuf_cat+0x9c>)
 801b832:	4820      	ldr	r0, [pc, #128]	; (801b8b4 <pbuf_cat+0xa0>)
 801b834:	f00a fb5c 	bl	8025ef0 <iprintf>
 801b838:	e034      	b.n	801b8a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	60fb      	str	r3, [r7, #12]
 801b83e:	e00a      	b.n	801b856 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	891a      	ldrh	r2, [r3, #8]
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	891b      	ldrh	r3, [r3, #8]
 801b848:	4413      	add	r3, r2
 801b84a:	b29a      	uxth	r2, r3
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801b850:	68fb      	ldr	r3, [r7, #12]
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	60fb      	str	r3, [r7, #12]
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d1f0      	bne.n	801b840 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	891a      	ldrh	r2, [r3, #8]
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	895b      	ldrh	r3, [r3, #10]
 801b866:	429a      	cmp	r2, r3
 801b868:	d006      	beq.n	801b878 <pbuf_cat+0x64>
 801b86a:	4b10      	ldr	r3, [pc, #64]	; (801b8ac <pbuf_cat+0x98>)
 801b86c:	f240 3262 	movw	r2, #866	; 0x362
 801b870:	4911      	ldr	r1, [pc, #68]	; (801b8b8 <pbuf_cat+0xa4>)
 801b872:	4810      	ldr	r0, [pc, #64]	; (801b8b4 <pbuf_cat+0xa0>)
 801b874:	f00a fb3c 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d006      	beq.n	801b88e <pbuf_cat+0x7a>
 801b880:	4b0a      	ldr	r3, [pc, #40]	; (801b8ac <pbuf_cat+0x98>)
 801b882:	f240 3263 	movw	r2, #867	; 0x363
 801b886:	490d      	ldr	r1, [pc, #52]	; (801b8bc <pbuf_cat+0xa8>)
 801b888:	480a      	ldr	r0, [pc, #40]	; (801b8b4 <pbuf_cat+0xa0>)
 801b88a:	f00a fb31 	bl	8025ef0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	891a      	ldrh	r2, [r3, #8]
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	891b      	ldrh	r3, [r3, #8]
 801b896:	4413      	add	r3, r2
 801b898:	b29a      	uxth	r2, r3
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801b89e:	68fb      	ldr	r3, [r7, #12]
 801b8a0:	683a      	ldr	r2, [r7, #0]
 801b8a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801b8a4:	3710      	adds	r7, #16
 801b8a6:	46bd      	mov	sp, r7
 801b8a8:	bd80      	pop	{r7, pc}
 801b8aa:	bf00      	nop
 801b8ac:	08027984 	.word	0x08027984
 801b8b0:	08027b78 	.word	0x08027b78
 801b8b4:	080279e4 	.word	0x080279e4
 801b8b8:	08027bb0 	.word	0x08027bb0
 801b8bc:	08027be0 	.word	0x08027be0

0801b8c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801b8c0:	b580      	push	{r7, lr}
 801b8c2:	b086      	sub	sp, #24
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	617b      	str	r3, [r7, #20]
 801b8ce:	2300      	movs	r3, #0
 801b8d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d008      	beq.n	801b8ea <pbuf_copy+0x2a>
 801b8d8:	683b      	ldr	r3, [r7, #0]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d005      	beq.n	801b8ea <pbuf_copy+0x2a>
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	891a      	ldrh	r2, [r3, #8]
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	891b      	ldrh	r3, [r3, #8]
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d209      	bcs.n	801b8fe <pbuf_copy+0x3e>
 801b8ea:	4b57      	ldr	r3, [pc, #348]	; (801ba48 <pbuf_copy+0x188>)
 801b8ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b8f0:	4956      	ldr	r1, [pc, #344]	; (801ba4c <pbuf_copy+0x18c>)
 801b8f2:	4857      	ldr	r0, [pc, #348]	; (801ba50 <pbuf_copy+0x190>)
 801b8f4:	f00a fafc 	bl	8025ef0 <iprintf>
 801b8f8:	f06f 030f 	mvn.w	r3, #15
 801b8fc:	e09f      	b.n	801ba3e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	895b      	ldrh	r3, [r3, #10]
 801b902:	461a      	mov	r2, r3
 801b904:	697b      	ldr	r3, [r7, #20]
 801b906:	1ad2      	subs	r2, r2, r3
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	895b      	ldrh	r3, [r3, #10]
 801b90c:	4619      	mov	r1, r3
 801b90e:	693b      	ldr	r3, [r7, #16]
 801b910:	1acb      	subs	r3, r1, r3
 801b912:	429a      	cmp	r2, r3
 801b914:	d306      	bcc.n	801b924 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801b916:	683b      	ldr	r3, [r7, #0]
 801b918:	895b      	ldrh	r3, [r3, #10]
 801b91a:	461a      	mov	r2, r3
 801b91c:	693b      	ldr	r3, [r7, #16]
 801b91e:	1ad3      	subs	r3, r2, r3
 801b920:	60fb      	str	r3, [r7, #12]
 801b922:	e005      	b.n	801b930 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	895b      	ldrh	r3, [r3, #10]
 801b928:	461a      	mov	r2, r3
 801b92a:	697b      	ldr	r3, [r7, #20]
 801b92c:	1ad3      	subs	r3, r2, r3
 801b92e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	685a      	ldr	r2, [r3, #4]
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	18d0      	adds	r0, r2, r3
 801b938:	683b      	ldr	r3, [r7, #0]
 801b93a:	685a      	ldr	r2, [r3, #4]
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	4413      	add	r3, r2
 801b940:	68fa      	ldr	r2, [r7, #12]
 801b942:	4619      	mov	r1, r3
 801b944:	f009 ff26 	bl	8025794 <memcpy>
    offset_to += len;
 801b948:	697a      	ldr	r2, [r7, #20]
 801b94a:	68fb      	ldr	r3, [r7, #12]
 801b94c:	4413      	add	r3, r2
 801b94e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801b950:	693a      	ldr	r2, [r7, #16]
 801b952:	68fb      	ldr	r3, [r7, #12]
 801b954:	4413      	add	r3, r2
 801b956:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	895b      	ldrh	r3, [r3, #10]
 801b95c:	461a      	mov	r2, r3
 801b95e:	697b      	ldr	r3, [r7, #20]
 801b960:	4293      	cmp	r3, r2
 801b962:	d906      	bls.n	801b972 <pbuf_copy+0xb2>
 801b964:	4b38      	ldr	r3, [pc, #224]	; (801ba48 <pbuf_copy+0x188>)
 801b966:	f240 32d9 	movw	r2, #985	; 0x3d9
 801b96a:	493a      	ldr	r1, [pc, #232]	; (801ba54 <pbuf_copy+0x194>)
 801b96c:	4838      	ldr	r0, [pc, #224]	; (801ba50 <pbuf_copy+0x190>)
 801b96e:	f00a fabf 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801b972:	683b      	ldr	r3, [r7, #0]
 801b974:	895b      	ldrh	r3, [r3, #10]
 801b976:	461a      	mov	r2, r3
 801b978:	693b      	ldr	r3, [r7, #16]
 801b97a:	4293      	cmp	r3, r2
 801b97c:	d906      	bls.n	801b98c <pbuf_copy+0xcc>
 801b97e:	4b32      	ldr	r3, [pc, #200]	; (801ba48 <pbuf_copy+0x188>)
 801b980:	f240 32da 	movw	r2, #986	; 0x3da
 801b984:	4934      	ldr	r1, [pc, #208]	; (801ba58 <pbuf_copy+0x198>)
 801b986:	4832      	ldr	r0, [pc, #200]	; (801ba50 <pbuf_copy+0x190>)
 801b988:	f00a fab2 	bl	8025ef0 <iprintf>
    if (offset_from >= p_from->len) {
 801b98c:	683b      	ldr	r3, [r7, #0]
 801b98e:	895b      	ldrh	r3, [r3, #10]
 801b990:	461a      	mov	r2, r3
 801b992:	693b      	ldr	r3, [r7, #16]
 801b994:	4293      	cmp	r3, r2
 801b996:	d304      	bcc.n	801b9a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801b998:	2300      	movs	r3, #0
 801b99a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801b99c:	683b      	ldr	r3, [r7, #0]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	895b      	ldrh	r3, [r3, #10]
 801b9a6:	461a      	mov	r2, r3
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	4293      	cmp	r3, r2
 801b9ac:	d114      	bne.n	801b9d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d10c      	bne.n	801b9d8 <pbuf_copy+0x118>
 801b9be:	683b      	ldr	r3, [r7, #0]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d009      	beq.n	801b9d8 <pbuf_copy+0x118>
 801b9c4:	4b20      	ldr	r3, [pc, #128]	; (801ba48 <pbuf_copy+0x188>)
 801b9c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801b9ca:	4924      	ldr	r1, [pc, #144]	; (801ba5c <pbuf_copy+0x19c>)
 801b9cc:	4820      	ldr	r0, [pc, #128]	; (801ba50 <pbuf_copy+0x190>)
 801b9ce:	f00a fa8f 	bl	8025ef0 <iprintf>
 801b9d2:	f06f 030f 	mvn.w	r3, #15
 801b9d6:	e032      	b.n	801ba3e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801b9d8:	683b      	ldr	r3, [r7, #0]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d013      	beq.n	801ba06 <pbuf_copy+0x146>
 801b9de:	683b      	ldr	r3, [r7, #0]
 801b9e0:	895a      	ldrh	r2, [r3, #10]
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	891b      	ldrh	r3, [r3, #8]
 801b9e6:	429a      	cmp	r2, r3
 801b9e8:	d10d      	bne.n	801ba06 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801b9ea:	683b      	ldr	r3, [r7, #0]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d009      	beq.n	801ba06 <pbuf_copy+0x146>
 801b9f2:	4b15      	ldr	r3, [pc, #84]	; (801ba48 <pbuf_copy+0x188>)
 801b9f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801b9f8:	4919      	ldr	r1, [pc, #100]	; (801ba60 <pbuf_copy+0x1a0>)
 801b9fa:	4815      	ldr	r0, [pc, #84]	; (801ba50 <pbuf_copy+0x190>)
 801b9fc:	f00a fa78 	bl	8025ef0 <iprintf>
 801ba00:	f06f 0305 	mvn.w	r3, #5
 801ba04:	e01b      	b.n	801ba3e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d013      	beq.n	801ba34 <pbuf_copy+0x174>
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	895a      	ldrh	r2, [r3, #10]
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	891b      	ldrh	r3, [r3, #8]
 801ba14:	429a      	cmp	r2, r3
 801ba16:	d10d      	bne.n	801ba34 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d009      	beq.n	801ba34 <pbuf_copy+0x174>
 801ba20:	4b09      	ldr	r3, [pc, #36]	; (801ba48 <pbuf_copy+0x188>)
 801ba22:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801ba26:	490e      	ldr	r1, [pc, #56]	; (801ba60 <pbuf_copy+0x1a0>)
 801ba28:	4809      	ldr	r0, [pc, #36]	; (801ba50 <pbuf_copy+0x190>)
 801ba2a:	f00a fa61 	bl	8025ef0 <iprintf>
 801ba2e:	f06f 0305 	mvn.w	r3, #5
 801ba32:	e004      	b.n	801ba3e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	f47f af61 	bne.w	801b8fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801ba3c:	2300      	movs	r3, #0
}
 801ba3e:	4618      	mov	r0, r3
 801ba40:	3718      	adds	r7, #24
 801ba42:	46bd      	mov	sp, r7
 801ba44:	bd80      	pop	{r7, pc}
 801ba46:	bf00      	nop
 801ba48:	08027984 	.word	0x08027984
 801ba4c:	08027c2c 	.word	0x08027c2c
 801ba50:	080279e4 	.word	0x080279e4
 801ba54:	08027c5c 	.word	0x08027c5c
 801ba58:	08027c74 	.word	0x08027c74
 801ba5c:	08027c90 	.word	0x08027c90
 801ba60:	08027ca0 	.word	0x08027ca0

0801ba64 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b088      	sub	sp, #32
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	60f8      	str	r0, [r7, #12]
 801ba6c:	60b9      	str	r1, [r7, #8]
 801ba6e:	4611      	mov	r1, r2
 801ba70:	461a      	mov	r2, r3
 801ba72:	460b      	mov	r3, r1
 801ba74:	80fb      	strh	r3, [r7, #6]
 801ba76:	4613      	mov	r3, r2
 801ba78:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801ba7e:	2300      	movs	r3, #0
 801ba80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d108      	bne.n	801ba9a <pbuf_copy_partial+0x36>
 801ba88:	4b2b      	ldr	r3, [pc, #172]	; (801bb38 <pbuf_copy_partial+0xd4>)
 801ba8a:	f240 420a 	movw	r2, #1034	; 0x40a
 801ba8e:	492b      	ldr	r1, [pc, #172]	; (801bb3c <pbuf_copy_partial+0xd8>)
 801ba90:	482b      	ldr	r0, [pc, #172]	; (801bb40 <pbuf_copy_partial+0xdc>)
 801ba92:	f00a fa2d 	bl	8025ef0 <iprintf>
 801ba96:	2300      	movs	r3, #0
 801ba98:	e04a      	b.n	801bb30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d108      	bne.n	801bab2 <pbuf_copy_partial+0x4e>
 801baa0:	4b25      	ldr	r3, [pc, #148]	; (801bb38 <pbuf_copy_partial+0xd4>)
 801baa2:	f240 420b 	movw	r2, #1035	; 0x40b
 801baa6:	4927      	ldr	r1, [pc, #156]	; (801bb44 <pbuf_copy_partial+0xe0>)
 801baa8:	4825      	ldr	r0, [pc, #148]	; (801bb40 <pbuf_copy_partial+0xdc>)
 801baaa:	f00a fa21 	bl	8025ef0 <iprintf>
 801baae:	2300      	movs	r3, #0
 801bab0:	e03e      	b.n	801bb30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	61fb      	str	r3, [r7, #28]
 801bab6:	e034      	b.n	801bb22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801bab8:	88bb      	ldrh	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d00a      	beq.n	801bad4 <pbuf_copy_partial+0x70>
 801babe:	69fb      	ldr	r3, [r7, #28]
 801bac0:	895b      	ldrh	r3, [r3, #10]
 801bac2:	88ba      	ldrh	r2, [r7, #4]
 801bac4:	429a      	cmp	r2, r3
 801bac6:	d305      	bcc.n	801bad4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801bac8:	69fb      	ldr	r3, [r7, #28]
 801baca:	895b      	ldrh	r3, [r3, #10]
 801bacc:	88ba      	ldrh	r2, [r7, #4]
 801bace:	1ad3      	subs	r3, r2, r3
 801bad0:	80bb      	strh	r3, [r7, #4]
 801bad2:	e023      	b.n	801bb1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801bad4:	69fb      	ldr	r3, [r7, #28]
 801bad6:	895a      	ldrh	r2, [r3, #10]
 801bad8:	88bb      	ldrh	r3, [r7, #4]
 801bada:	1ad3      	subs	r3, r2, r3
 801badc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801bade:	8b3a      	ldrh	r2, [r7, #24]
 801bae0:	88fb      	ldrh	r3, [r7, #6]
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d901      	bls.n	801baea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801bae6:	88fb      	ldrh	r3, [r7, #6]
 801bae8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801baea:	8b7b      	ldrh	r3, [r7, #26]
 801baec:	68ba      	ldr	r2, [r7, #8]
 801baee:	18d0      	adds	r0, r2, r3
 801baf0:	69fb      	ldr	r3, [r7, #28]
 801baf2:	685a      	ldr	r2, [r3, #4]
 801baf4:	88bb      	ldrh	r3, [r7, #4]
 801baf6:	4413      	add	r3, r2
 801baf8:	8b3a      	ldrh	r2, [r7, #24]
 801bafa:	4619      	mov	r1, r3
 801bafc:	f009 fe4a 	bl	8025794 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801bb00:	8afa      	ldrh	r2, [r7, #22]
 801bb02:	8b3b      	ldrh	r3, [r7, #24]
 801bb04:	4413      	add	r3, r2
 801bb06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801bb08:	8b7a      	ldrh	r2, [r7, #26]
 801bb0a:	8b3b      	ldrh	r3, [r7, #24]
 801bb0c:	4413      	add	r3, r2
 801bb0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801bb10:	88fa      	ldrh	r2, [r7, #6]
 801bb12:	8b3b      	ldrh	r3, [r7, #24]
 801bb14:	1ad3      	subs	r3, r2, r3
 801bb16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801bb18:	2300      	movs	r3, #0
 801bb1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801bb1c:	69fb      	ldr	r3, [r7, #28]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	61fb      	str	r3, [r7, #28]
 801bb22:	88fb      	ldrh	r3, [r7, #6]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d002      	beq.n	801bb2e <pbuf_copy_partial+0xca>
 801bb28:	69fb      	ldr	r3, [r7, #28]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d1c4      	bne.n	801bab8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801bb2e:	8afb      	ldrh	r3, [r7, #22]
}
 801bb30:	4618      	mov	r0, r3
 801bb32:	3720      	adds	r7, #32
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bd80      	pop	{r7, pc}
 801bb38:	08027984 	.word	0x08027984
 801bb3c:	08027ccc 	.word	0x08027ccc
 801bb40:	080279e4 	.word	0x080279e4
 801bb44:	08027cec 	.word	0x08027cec

0801bb48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b084      	sub	sp, #16
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	4603      	mov	r3, r0
 801bb50:	603a      	str	r2, [r7, #0]
 801bb52:	71fb      	strb	r3, [r7, #7]
 801bb54:	460b      	mov	r3, r1
 801bb56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	8919      	ldrh	r1, [r3, #8]
 801bb5c:	88ba      	ldrh	r2, [r7, #4]
 801bb5e:	79fb      	ldrb	r3, [r7, #7]
 801bb60:	4618      	mov	r0, r3
 801bb62:	f7ff faa5 	bl	801b0b0 <pbuf_alloc>
 801bb66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801bb68:	68fb      	ldr	r3, [r7, #12]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d101      	bne.n	801bb72 <pbuf_clone+0x2a>
    return NULL;
 801bb6e:	2300      	movs	r3, #0
 801bb70:	e011      	b.n	801bb96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801bb72:	6839      	ldr	r1, [r7, #0]
 801bb74:	68f8      	ldr	r0, [r7, #12]
 801bb76:	f7ff fea3 	bl	801b8c0 <pbuf_copy>
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801bb7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d006      	beq.n	801bb94 <pbuf_clone+0x4c>
 801bb86:	4b06      	ldr	r3, [pc, #24]	; (801bba0 <pbuf_clone+0x58>)
 801bb88:	f240 5224 	movw	r2, #1316	; 0x524
 801bb8c:	4905      	ldr	r1, [pc, #20]	; (801bba4 <pbuf_clone+0x5c>)
 801bb8e:	4806      	ldr	r0, [pc, #24]	; (801bba8 <pbuf_clone+0x60>)
 801bb90:	f00a f9ae 	bl	8025ef0 <iprintf>
  return q;
 801bb94:	68fb      	ldr	r3, [r7, #12]
}
 801bb96:	4618      	mov	r0, r3
 801bb98:	3710      	adds	r7, #16
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	bd80      	pop	{r7, pc}
 801bb9e:	bf00      	nop
 801bba0:	08027984 	.word	0x08027984
 801bba4:	08027df8 	.word	0x08027df8
 801bba8:	080279e4 	.word	0x080279e4

0801bbac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bbb0:	f00a f9b6 	bl	8025f20 <rand>
 801bbb4:	4603      	mov	r3, r0
 801bbb6:	b29b      	uxth	r3, r3
 801bbb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bbbc:	b29b      	uxth	r3, r3
 801bbbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bbc2:	b29a      	uxth	r2, r3
 801bbc4:	4b01      	ldr	r3, [pc, #4]	; (801bbcc <tcp_init+0x20>)
 801bbc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bbc8:	bf00      	nop
 801bbca:	bd80      	pop	{r7, pc}
 801bbcc:	20000064 	.word	0x20000064

0801bbd0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b082      	sub	sp, #8
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	7d1b      	ldrb	r3, [r3, #20]
 801bbdc:	2b01      	cmp	r3, #1
 801bbde:	d105      	bne.n	801bbec <tcp_free+0x1c>
 801bbe0:	4b06      	ldr	r3, [pc, #24]	; (801bbfc <tcp_free+0x2c>)
 801bbe2:	22d4      	movs	r2, #212	; 0xd4
 801bbe4:	4906      	ldr	r1, [pc, #24]	; (801bc00 <tcp_free+0x30>)
 801bbe6:	4807      	ldr	r0, [pc, #28]	; (801bc04 <tcp_free+0x34>)
 801bbe8:	f00a f982 	bl	8025ef0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801bbec:	6879      	ldr	r1, [r7, #4]
 801bbee:	2001      	movs	r0, #1
 801bbf0:	f7fe fe9e 	bl	801a930 <memp_free>
}
 801bbf4:	bf00      	nop
 801bbf6:	3708      	adds	r7, #8
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}
 801bbfc:	08027e84 	.word	0x08027e84
 801bc00:	08027eb4 	.word	0x08027eb4
 801bc04:	08027ec8 	.word	0x08027ec8

0801bc08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b082      	sub	sp, #8
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	7d1b      	ldrb	r3, [r3, #20]
 801bc14:	2b01      	cmp	r3, #1
 801bc16:	d105      	bne.n	801bc24 <tcp_free_listen+0x1c>
 801bc18:	4b06      	ldr	r3, [pc, #24]	; (801bc34 <tcp_free_listen+0x2c>)
 801bc1a:	22df      	movs	r2, #223	; 0xdf
 801bc1c:	4906      	ldr	r1, [pc, #24]	; (801bc38 <tcp_free_listen+0x30>)
 801bc1e:	4807      	ldr	r0, [pc, #28]	; (801bc3c <tcp_free_listen+0x34>)
 801bc20:	f00a f966 	bl	8025ef0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801bc24:	6879      	ldr	r1, [r7, #4]
 801bc26:	2002      	movs	r0, #2
 801bc28:	f7fe fe82 	bl	801a930 <memp_free>
}
 801bc2c:	bf00      	nop
 801bc2e:	3708      	adds	r7, #8
 801bc30:	46bd      	mov	sp, r7
 801bc32:	bd80      	pop	{r7, pc}
 801bc34:	08027e84 	.word	0x08027e84
 801bc38:	08027ef0 	.word	0x08027ef0
 801bc3c:	08027ec8 	.word	0x08027ec8

0801bc40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801bc40:	b580      	push	{r7, lr}
 801bc42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801bc44:	f001 f8a6 	bl	801cd94 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801bc48:	4b07      	ldr	r3, [pc, #28]	; (801bc68 <tcp_tmr+0x28>)
 801bc4a:	781b      	ldrb	r3, [r3, #0]
 801bc4c:	3301      	adds	r3, #1
 801bc4e:	b2da      	uxtb	r2, r3
 801bc50:	4b05      	ldr	r3, [pc, #20]	; (801bc68 <tcp_tmr+0x28>)
 801bc52:	701a      	strb	r2, [r3, #0]
 801bc54:	4b04      	ldr	r3, [pc, #16]	; (801bc68 <tcp_tmr+0x28>)
 801bc56:	781b      	ldrb	r3, [r3, #0]
 801bc58:	f003 0301 	and.w	r3, r3, #1
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d001      	beq.n	801bc64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801bc60:	f000 fd58 	bl	801c714 <tcp_slowtmr>
  }
}
 801bc64:	bf00      	nop
 801bc66:	bd80      	pop	{r7, pc}
 801bc68:	20008735 	.word	0x20008735

0801bc6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b084      	sub	sp, #16
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
 801bc74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d105      	bne.n	801bc88 <tcp_remove_listener+0x1c>
 801bc7c:	4b0d      	ldr	r3, [pc, #52]	; (801bcb4 <tcp_remove_listener+0x48>)
 801bc7e:	22ff      	movs	r2, #255	; 0xff
 801bc80:	490d      	ldr	r1, [pc, #52]	; (801bcb8 <tcp_remove_listener+0x4c>)
 801bc82:	480e      	ldr	r0, [pc, #56]	; (801bcbc <tcp_remove_listener+0x50>)
 801bc84:	f00a f934 	bl	8025ef0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	60fb      	str	r3, [r7, #12]
 801bc8c:	e00a      	b.n	801bca4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bc92:	683a      	ldr	r2, [r7, #0]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d102      	bne.n	801bc9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801bc9e:	68fb      	ldr	r3, [r7, #12]
 801bca0:	68db      	ldr	r3, [r3, #12]
 801bca2:	60fb      	str	r3, [r7, #12]
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d1f1      	bne.n	801bc8e <tcp_remove_listener+0x22>
    }
  }
}
 801bcaa:	bf00      	nop
 801bcac:	bf00      	nop
 801bcae:	3710      	adds	r7, #16
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	bd80      	pop	{r7, pc}
 801bcb4:	08027e84 	.word	0x08027e84
 801bcb8:	08027f0c 	.word	0x08027f0c
 801bcbc:	08027ec8 	.word	0x08027ec8

0801bcc0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801bcc0:	b580      	push	{r7, lr}
 801bcc2:	b084      	sub	sp, #16
 801bcc4:	af00      	add	r7, sp, #0
 801bcc6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d106      	bne.n	801bcdc <tcp_listen_closed+0x1c>
 801bcce:	4b14      	ldr	r3, [pc, #80]	; (801bd20 <tcp_listen_closed+0x60>)
 801bcd0:	f240 1211 	movw	r2, #273	; 0x111
 801bcd4:	4913      	ldr	r1, [pc, #76]	; (801bd24 <tcp_listen_closed+0x64>)
 801bcd6:	4814      	ldr	r0, [pc, #80]	; (801bd28 <tcp_listen_closed+0x68>)
 801bcd8:	f00a f90a 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	7d1b      	ldrb	r3, [r3, #20]
 801bce0:	2b01      	cmp	r3, #1
 801bce2:	d006      	beq.n	801bcf2 <tcp_listen_closed+0x32>
 801bce4:	4b0e      	ldr	r3, [pc, #56]	; (801bd20 <tcp_listen_closed+0x60>)
 801bce6:	f44f 7289 	mov.w	r2, #274	; 0x112
 801bcea:	4910      	ldr	r1, [pc, #64]	; (801bd2c <tcp_listen_closed+0x6c>)
 801bcec:	480e      	ldr	r0, [pc, #56]	; (801bd28 <tcp_listen_closed+0x68>)
 801bcee:	f00a f8ff 	bl	8025ef0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801bcf2:	2301      	movs	r3, #1
 801bcf4:	60fb      	str	r3, [r7, #12]
 801bcf6:	e00b      	b.n	801bd10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801bcf8:	4a0d      	ldr	r2, [pc, #52]	; (801bd30 <tcp_listen_closed+0x70>)
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	6879      	ldr	r1, [r7, #4]
 801bd04:	4618      	mov	r0, r3
 801bd06:	f7ff ffb1 	bl	801bc6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	3301      	adds	r3, #1
 801bd0e:	60fb      	str	r3, [r7, #12]
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	2b03      	cmp	r3, #3
 801bd14:	d9f0      	bls.n	801bcf8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801bd16:	bf00      	nop
 801bd18:	bf00      	nop
 801bd1a:	3710      	adds	r7, #16
 801bd1c:	46bd      	mov	sp, r7
 801bd1e:	bd80      	pop	{r7, pc}
 801bd20:	08027e84 	.word	0x08027e84
 801bd24:	08027f34 	.word	0x08027f34
 801bd28:	08027ec8 	.word	0x08027ec8
 801bd2c:	08027f40 	.word	0x08027f40
 801bd30:	0802b970 	.word	0x0802b970

0801bd34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801bd34:	b5b0      	push	{r4, r5, r7, lr}
 801bd36:	b088      	sub	sp, #32
 801bd38:	af04      	add	r7, sp, #16
 801bd3a:	6078      	str	r0, [r7, #4]
 801bd3c:	460b      	mov	r3, r1
 801bd3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d106      	bne.n	801bd54 <tcp_close_shutdown+0x20>
 801bd46:	4b63      	ldr	r3, [pc, #396]	; (801bed4 <tcp_close_shutdown+0x1a0>)
 801bd48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801bd4c:	4962      	ldr	r1, [pc, #392]	; (801bed8 <tcp_close_shutdown+0x1a4>)
 801bd4e:	4863      	ldr	r0, [pc, #396]	; (801bedc <tcp_close_shutdown+0x1a8>)
 801bd50:	f00a f8ce 	bl	8025ef0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801bd54:	78fb      	ldrb	r3, [r7, #3]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d066      	beq.n	801be28 <tcp_close_shutdown+0xf4>
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	7d1b      	ldrb	r3, [r3, #20]
 801bd5e:	2b04      	cmp	r3, #4
 801bd60:	d003      	beq.n	801bd6a <tcp_close_shutdown+0x36>
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	7d1b      	ldrb	r3, [r3, #20]
 801bd66:	2b07      	cmp	r3, #7
 801bd68:	d15e      	bne.n	801be28 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d104      	bne.n	801bd7c <tcp_close_shutdown+0x48>
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bd76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801bd7a:	d055      	beq.n	801be28 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	8b5b      	ldrh	r3, [r3, #26]
 801bd80:	f003 0310 	and.w	r3, r3, #16
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d106      	bne.n	801bd96 <tcp_close_shutdown+0x62>
 801bd88:	4b52      	ldr	r3, [pc, #328]	; (801bed4 <tcp_close_shutdown+0x1a0>)
 801bd8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801bd8e:	4954      	ldr	r1, [pc, #336]	; (801bee0 <tcp_close_shutdown+0x1ac>)
 801bd90:	4852      	ldr	r0, [pc, #328]	; (801bedc <tcp_close_shutdown+0x1a8>)
 801bd92:	f00a f8ad 	bl	8025ef0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801bd9e:	687d      	ldr	r5, [r7, #4]
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	3304      	adds	r3, #4
 801bda4:	687a      	ldr	r2, [r7, #4]
 801bda6:	8ad2      	ldrh	r2, [r2, #22]
 801bda8:	6879      	ldr	r1, [r7, #4]
 801bdaa:	8b09      	ldrh	r1, [r1, #24]
 801bdac:	9102      	str	r1, [sp, #8]
 801bdae:	9201      	str	r2, [sp, #4]
 801bdb0:	9300      	str	r3, [sp, #0]
 801bdb2:	462b      	mov	r3, r5
 801bdb4:	4622      	mov	r2, r4
 801bdb6:	4601      	mov	r1, r0
 801bdb8:	6878      	ldr	r0, [r7, #4]
 801bdba:	f005 fdb7 	bl	802192c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801bdbe:	6878      	ldr	r0, [r7, #4]
 801bdc0:	f001 fb98 	bl	801d4f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801bdc4:	4b47      	ldr	r3, [pc, #284]	; (801bee4 <tcp_close_shutdown+0x1b0>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	687a      	ldr	r2, [r7, #4]
 801bdca:	429a      	cmp	r2, r3
 801bdcc:	d105      	bne.n	801bdda <tcp_close_shutdown+0xa6>
 801bdce:	4b45      	ldr	r3, [pc, #276]	; (801bee4 <tcp_close_shutdown+0x1b0>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	68db      	ldr	r3, [r3, #12]
 801bdd4:	4a43      	ldr	r2, [pc, #268]	; (801bee4 <tcp_close_shutdown+0x1b0>)
 801bdd6:	6013      	str	r3, [r2, #0]
 801bdd8:	e013      	b.n	801be02 <tcp_close_shutdown+0xce>
 801bdda:	4b42      	ldr	r3, [pc, #264]	; (801bee4 <tcp_close_shutdown+0x1b0>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	60fb      	str	r3, [r7, #12]
 801bde0:	e00c      	b.n	801bdfc <tcp_close_shutdown+0xc8>
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	68db      	ldr	r3, [r3, #12]
 801bde6:	687a      	ldr	r2, [r7, #4]
 801bde8:	429a      	cmp	r2, r3
 801bdea:	d104      	bne.n	801bdf6 <tcp_close_shutdown+0xc2>
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	68da      	ldr	r2, [r3, #12]
 801bdf0:	68fb      	ldr	r3, [r7, #12]
 801bdf2:	60da      	str	r2, [r3, #12]
 801bdf4:	e005      	b.n	801be02 <tcp_close_shutdown+0xce>
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	68db      	ldr	r3, [r3, #12]
 801bdfa:	60fb      	str	r3, [r7, #12]
 801bdfc:	68fb      	ldr	r3, [r7, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d1ef      	bne.n	801bde2 <tcp_close_shutdown+0xae>
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	2200      	movs	r2, #0
 801be06:	60da      	str	r2, [r3, #12]
 801be08:	4b37      	ldr	r3, [pc, #220]	; (801bee8 <tcp_close_shutdown+0x1b4>)
 801be0a:	2201      	movs	r2, #1
 801be0c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801be0e:	4b37      	ldr	r3, [pc, #220]	; (801beec <tcp_close_shutdown+0x1b8>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	687a      	ldr	r2, [r7, #4]
 801be14:	429a      	cmp	r2, r3
 801be16:	d102      	bne.n	801be1e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801be18:	f004 f82c 	bl	801fe74 <tcp_trigger_input_pcb_close>
 801be1c:	e002      	b.n	801be24 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801be1e:	6878      	ldr	r0, [r7, #4]
 801be20:	f7ff fed6 	bl	801bbd0 <tcp_free>
      }
      return ERR_OK;
 801be24:	2300      	movs	r3, #0
 801be26:	e050      	b.n	801beca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	7d1b      	ldrb	r3, [r3, #20]
 801be2c:	2b02      	cmp	r3, #2
 801be2e:	d03b      	beq.n	801bea8 <tcp_close_shutdown+0x174>
 801be30:	2b02      	cmp	r3, #2
 801be32:	dc44      	bgt.n	801bebe <tcp_close_shutdown+0x18a>
 801be34:	2b00      	cmp	r3, #0
 801be36:	d002      	beq.n	801be3e <tcp_close_shutdown+0x10a>
 801be38:	2b01      	cmp	r3, #1
 801be3a:	d02a      	beq.n	801be92 <tcp_close_shutdown+0x15e>
 801be3c:	e03f      	b.n	801bebe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	8adb      	ldrh	r3, [r3, #22]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d021      	beq.n	801be8a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801be46:	4b2a      	ldr	r3, [pc, #168]	; (801bef0 <tcp_close_shutdown+0x1bc>)
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	687a      	ldr	r2, [r7, #4]
 801be4c:	429a      	cmp	r2, r3
 801be4e:	d105      	bne.n	801be5c <tcp_close_shutdown+0x128>
 801be50:	4b27      	ldr	r3, [pc, #156]	; (801bef0 <tcp_close_shutdown+0x1bc>)
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	68db      	ldr	r3, [r3, #12]
 801be56:	4a26      	ldr	r2, [pc, #152]	; (801bef0 <tcp_close_shutdown+0x1bc>)
 801be58:	6013      	str	r3, [r2, #0]
 801be5a:	e013      	b.n	801be84 <tcp_close_shutdown+0x150>
 801be5c:	4b24      	ldr	r3, [pc, #144]	; (801bef0 <tcp_close_shutdown+0x1bc>)
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	60bb      	str	r3, [r7, #8]
 801be62:	e00c      	b.n	801be7e <tcp_close_shutdown+0x14a>
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	68db      	ldr	r3, [r3, #12]
 801be68:	687a      	ldr	r2, [r7, #4]
 801be6a:	429a      	cmp	r2, r3
 801be6c:	d104      	bne.n	801be78 <tcp_close_shutdown+0x144>
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	68da      	ldr	r2, [r3, #12]
 801be72:	68bb      	ldr	r3, [r7, #8]
 801be74:	60da      	str	r2, [r3, #12]
 801be76:	e005      	b.n	801be84 <tcp_close_shutdown+0x150>
 801be78:	68bb      	ldr	r3, [r7, #8]
 801be7a:	68db      	ldr	r3, [r3, #12]
 801be7c:	60bb      	str	r3, [r7, #8]
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d1ef      	bne.n	801be64 <tcp_close_shutdown+0x130>
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	2200      	movs	r2, #0
 801be88:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f7ff fea0 	bl	801bbd0 <tcp_free>
      break;
 801be90:	e01a      	b.n	801bec8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801be92:	6878      	ldr	r0, [r7, #4]
 801be94:	f7ff ff14 	bl	801bcc0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801be98:	6879      	ldr	r1, [r7, #4]
 801be9a:	4816      	ldr	r0, [pc, #88]	; (801bef4 <tcp_close_shutdown+0x1c0>)
 801be9c:	f001 fb7a 	bl	801d594 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801bea0:	6878      	ldr	r0, [r7, #4]
 801bea2:	f7ff feb1 	bl	801bc08 <tcp_free_listen>
      break;
 801bea6:	e00f      	b.n	801bec8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801bea8:	6879      	ldr	r1, [r7, #4]
 801beaa:	480e      	ldr	r0, [pc, #56]	; (801bee4 <tcp_close_shutdown+0x1b0>)
 801beac:	f001 fb72 	bl	801d594 <tcp_pcb_remove>
 801beb0:	4b0d      	ldr	r3, [pc, #52]	; (801bee8 <tcp_close_shutdown+0x1b4>)
 801beb2:	2201      	movs	r2, #1
 801beb4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801beb6:	6878      	ldr	r0, [r7, #4]
 801beb8:	f7ff fe8a 	bl	801bbd0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801bebc:	e004      	b.n	801bec8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801bebe:	6878      	ldr	r0, [r7, #4]
 801bec0:	f000 f81a 	bl	801bef8 <tcp_close_shutdown_fin>
 801bec4:	4603      	mov	r3, r0
 801bec6:	e000      	b.n	801beca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801bec8:	2300      	movs	r3, #0
}
 801beca:	4618      	mov	r0, r3
 801becc:	3710      	adds	r7, #16
 801bece:	46bd      	mov	sp, r7
 801bed0:	bdb0      	pop	{r4, r5, r7, pc}
 801bed2:	bf00      	nop
 801bed4:	08027e84 	.word	0x08027e84
 801bed8:	08027f58 	.word	0x08027f58
 801bedc:	08027ec8 	.word	0x08027ec8
 801bee0:	08027f78 	.word	0x08027f78
 801bee4:	200102b4 	.word	0x200102b4
 801bee8:	200102b0 	.word	0x200102b0
 801beec:	200102c8 	.word	0x200102c8
 801bef0:	200102c0 	.word	0x200102c0
 801bef4:	200102bc 	.word	0x200102bc

0801bef8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b084      	sub	sp, #16
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d106      	bne.n	801bf14 <tcp_close_shutdown_fin+0x1c>
 801bf06:	4b2e      	ldr	r3, [pc, #184]	; (801bfc0 <tcp_close_shutdown_fin+0xc8>)
 801bf08:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801bf0c:	492d      	ldr	r1, [pc, #180]	; (801bfc4 <tcp_close_shutdown_fin+0xcc>)
 801bf0e:	482e      	ldr	r0, [pc, #184]	; (801bfc8 <tcp_close_shutdown_fin+0xd0>)
 801bf10:	f009 ffee 	bl	8025ef0 <iprintf>

  switch (pcb->state) {
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	7d1b      	ldrb	r3, [r3, #20]
 801bf18:	2b07      	cmp	r3, #7
 801bf1a:	d020      	beq.n	801bf5e <tcp_close_shutdown_fin+0x66>
 801bf1c:	2b07      	cmp	r3, #7
 801bf1e:	dc2b      	bgt.n	801bf78 <tcp_close_shutdown_fin+0x80>
 801bf20:	2b03      	cmp	r3, #3
 801bf22:	d002      	beq.n	801bf2a <tcp_close_shutdown_fin+0x32>
 801bf24:	2b04      	cmp	r3, #4
 801bf26:	d00d      	beq.n	801bf44 <tcp_close_shutdown_fin+0x4c>
 801bf28:	e026      	b.n	801bf78 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801bf2a:	6878      	ldr	r0, [r7, #4]
 801bf2c:	f004 fe0c 	bl	8020b48 <tcp_send_fin>
 801bf30:	4603      	mov	r3, r0
 801bf32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bf34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d11f      	bne.n	801bf7c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	2205      	movs	r2, #5
 801bf40:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bf42:	e01b      	b.n	801bf7c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801bf44:	6878      	ldr	r0, [r7, #4]
 801bf46:	f004 fdff 	bl	8020b48 <tcp_send_fin>
 801bf4a:	4603      	mov	r3, r0
 801bf4c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bf4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d114      	bne.n	801bf80 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2205      	movs	r2, #5
 801bf5a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bf5c:	e010      	b.n	801bf80 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801bf5e:	6878      	ldr	r0, [r7, #4]
 801bf60:	f004 fdf2 	bl	8020b48 <tcp_send_fin>
 801bf64:	4603      	mov	r3, r0
 801bf66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801bf68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d109      	bne.n	801bf84 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	2209      	movs	r2, #9
 801bf74:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bf76:	e005      	b.n	801bf84 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801bf78:	2300      	movs	r3, #0
 801bf7a:	e01c      	b.n	801bfb6 <tcp_close_shutdown_fin+0xbe>
      break;
 801bf7c:	bf00      	nop
 801bf7e:	e002      	b.n	801bf86 <tcp_close_shutdown_fin+0x8e>
      break;
 801bf80:	bf00      	nop
 801bf82:	e000      	b.n	801bf86 <tcp_close_shutdown_fin+0x8e>
      break;
 801bf84:	bf00      	nop
  }

  if (err == ERR_OK) {
 801bf86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d103      	bne.n	801bf96 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f004 ff18 	bl	8020dc4 <tcp_output>
 801bf94:	e00d      	b.n	801bfb2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801bf96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf9e:	d108      	bne.n	801bfb2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	8b5b      	ldrh	r3, [r3, #26]
 801bfa4:	f043 0308 	orr.w	r3, r3, #8
 801bfa8:	b29a      	uxth	r2, r3
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	e001      	b.n	801bfb6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801bfb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfb6:	4618      	mov	r0, r3
 801bfb8:	3710      	adds	r7, #16
 801bfba:	46bd      	mov	sp, r7
 801bfbc:	bd80      	pop	{r7, pc}
 801bfbe:	bf00      	nop
 801bfc0:	08027e84 	.word	0x08027e84
 801bfc4:	08027f34 	.word	0x08027f34
 801bfc8:	08027ec8 	.word	0x08027ec8

0801bfcc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801bfcc:	b580      	push	{r7, lr}
 801bfce:	b082      	sub	sp, #8
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d109      	bne.n	801bfee <tcp_close+0x22>
 801bfda:	4b0f      	ldr	r3, [pc, #60]	; (801c018 <tcp_close+0x4c>)
 801bfdc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801bfe0:	490e      	ldr	r1, [pc, #56]	; (801c01c <tcp_close+0x50>)
 801bfe2:	480f      	ldr	r0, [pc, #60]	; (801c020 <tcp_close+0x54>)
 801bfe4:	f009 ff84 	bl	8025ef0 <iprintf>
 801bfe8:	f06f 030f 	mvn.w	r3, #15
 801bfec:	e00f      	b.n	801c00e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	7d1b      	ldrb	r3, [r3, #20]
 801bff2:	2b01      	cmp	r3, #1
 801bff4:	d006      	beq.n	801c004 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	8b5b      	ldrh	r3, [r3, #26]
 801bffa:	f043 0310 	orr.w	r3, r3, #16
 801bffe:	b29a      	uxth	r2, r3
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801c004:	2101      	movs	r1, #1
 801c006:	6878      	ldr	r0, [r7, #4]
 801c008:	f7ff fe94 	bl	801bd34 <tcp_close_shutdown>
 801c00c:	4603      	mov	r3, r0
}
 801c00e:	4618      	mov	r0, r3
 801c010:	3708      	adds	r7, #8
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}
 801c016:	bf00      	nop
 801c018:	08027e84 	.word	0x08027e84
 801c01c:	08027f94 	.word	0x08027f94
 801c020:	08027ec8 	.word	0x08027ec8

0801c024 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801c024:	b580      	push	{r7, lr}
 801c026:	b084      	sub	sp, #16
 801c028:	af00      	add	r7, sp, #0
 801c02a:	60f8      	str	r0, [r7, #12]
 801c02c:	60b9      	str	r1, [r7, #8]
 801c02e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d109      	bne.n	801c04a <tcp_shutdown+0x26>
 801c036:	4b26      	ldr	r3, [pc, #152]	; (801c0d0 <tcp_shutdown+0xac>)
 801c038:	f240 2207 	movw	r2, #519	; 0x207
 801c03c:	4925      	ldr	r1, [pc, #148]	; (801c0d4 <tcp_shutdown+0xb0>)
 801c03e:	4826      	ldr	r0, [pc, #152]	; (801c0d8 <tcp_shutdown+0xb4>)
 801c040:	f009 ff56 	bl	8025ef0 <iprintf>
 801c044:	f06f 030f 	mvn.w	r3, #15
 801c048:	e03d      	b.n	801c0c6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	7d1b      	ldrb	r3, [r3, #20]
 801c04e:	2b01      	cmp	r3, #1
 801c050:	d102      	bne.n	801c058 <tcp_shutdown+0x34>
    return ERR_CONN;
 801c052:	f06f 030a 	mvn.w	r3, #10
 801c056:	e036      	b.n	801c0c6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d01b      	beq.n	801c096 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c05e:	68fb      	ldr	r3, [r7, #12]
 801c060:	8b5b      	ldrh	r3, [r3, #26]
 801c062:	f043 0310 	orr.w	r3, r3, #16
 801c066:	b29a      	uxth	r2, r3
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d005      	beq.n	801c07e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801c072:	2101      	movs	r1, #1
 801c074:	68f8      	ldr	r0, [r7, #12]
 801c076:	f7ff fe5d 	bl	801bd34 <tcp_close_shutdown>
 801c07a:	4603      	mov	r3, r0
 801c07c:	e023      	b.n	801c0c6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c082:	2b00      	cmp	r3, #0
 801c084:	d007      	beq.n	801c096 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7ff faf4 	bl	801b678 <pbuf_free>
      pcb->refused_data = NULL;
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	2200      	movs	r2, #0
 801c094:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d013      	beq.n	801c0c4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	7d1b      	ldrb	r3, [r3, #20]
 801c0a0:	2b04      	cmp	r3, #4
 801c0a2:	dc02      	bgt.n	801c0aa <tcp_shutdown+0x86>
 801c0a4:	2b03      	cmp	r3, #3
 801c0a6:	da02      	bge.n	801c0ae <tcp_shutdown+0x8a>
 801c0a8:	e009      	b.n	801c0be <tcp_shutdown+0x9a>
 801c0aa:	2b07      	cmp	r3, #7
 801c0ac:	d107      	bne.n	801c0be <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801c0ae:	68bb      	ldr	r3, [r7, #8]
 801c0b0:	b2db      	uxtb	r3, r3
 801c0b2:	4619      	mov	r1, r3
 801c0b4:	68f8      	ldr	r0, [r7, #12]
 801c0b6:	f7ff fe3d 	bl	801bd34 <tcp_close_shutdown>
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	e003      	b.n	801c0c6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801c0be:	f06f 030a 	mvn.w	r3, #10
 801c0c2:	e000      	b.n	801c0c6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801c0c4:	2300      	movs	r3, #0
}
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	3710      	adds	r7, #16
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bd80      	pop	{r7, pc}
 801c0ce:	bf00      	nop
 801c0d0:	08027e84 	.word	0x08027e84
 801c0d4:	08027fac 	.word	0x08027fac
 801c0d8:	08027ec8 	.word	0x08027ec8

0801c0dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b08e      	sub	sp, #56	; 0x38
 801c0e0:	af04      	add	r7, sp, #16
 801c0e2:	6078      	str	r0, [r7, #4]
 801c0e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d107      	bne.n	801c0fc <tcp_abandon+0x20>
 801c0ec:	4b52      	ldr	r3, [pc, #328]	; (801c238 <tcp_abandon+0x15c>)
 801c0ee:	f240 223d 	movw	r2, #573	; 0x23d
 801c0f2:	4952      	ldr	r1, [pc, #328]	; (801c23c <tcp_abandon+0x160>)
 801c0f4:	4852      	ldr	r0, [pc, #328]	; (801c240 <tcp_abandon+0x164>)
 801c0f6:	f009 fefb 	bl	8025ef0 <iprintf>
 801c0fa:	e099      	b.n	801c230 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	7d1b      	ldrb	r3, [r3, #20]
 801c100:	2b01      	cmp	r3, #1
 801c102:	d106      	bne.n	801c112 <tcp_abandon+0x36>
 801c104:	4b4c      	ldr	r3, [pc, #304]	; (801c238 <tcp_abandon+0x15c>)
 801c106:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c10a:	494e      	ldr	r1, [pc, #312]	; (801c244 <tcp_abandon+0x168>)
 801c10c:	484c      	ldr	r0, [pc, #304]	; (801c240 <tcp_abandon+0x164>)
 801c10e:	f009 feef 	bl	8025ef0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	7d1b      	ldrb	r3, [r3, #20]
 801c116:	2b0a      	cmp	r3, #10
 801c118:	d107      	bne.n	801c12a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c11a:	6879      	ldr	r1, [r7, #4]
 801c11c:	484a      	ldr	r0, [pc, #296]	; (801c248 <tcp_abandon+0x16c>)
 801c11e:	f001 fa39 	bl	801d594 <tcp_pcb_remove>
    tcp_free(pcb);
 801c122:	6878      	ldr	r0, [r7, #4]
 801c124:	f7ff fd54 	bl	801bbd0 <tcp_free>
 801c128:	e082      	b.n	801c230 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801c12a:	2300      	movs	r3, #0
 801c12c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801c12e:	2300      	movs	r3, #0
 801c130:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c136:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c13c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c144:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	691b      	ldr	r3, [r3, #16]
 801c14a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	7d1b      	ldrb	r3, [r3, #20]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d126      	bne.n	801c1a2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	8adb      	ldrh	r3, [r3, #22]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d02e      	beq.n	801c1ba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c15c:	4b3b      	ldr	r3, [pc, #236]	; (801c24c <tcp_abandon+0x170>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	687a      	ldr	r2, [r7, #4]
 801c162:	429a      	cmp	r2, r3
 801c164:	d105      	bne.n	801c172 <tcp_abandon+0x96>
 801c166:	4b39      	ldr	r3, [pc, #228]	; (801c24c <tcp_abandon+0x170>)
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	68db      	ldr	r3, [r3, #12]
 801c16c:	4a37      	ldr	r2, [pc, #220]	; (801c24c <tcp_abandon+0x170>)
 801c16e:	6013      	str	r3, [r2, #0]
 801c170:	e013      	b.n	801c19a <tcp_abandon+0xbe>
 801c172:	4b36      	ldr	r3, [pc, #216]	; (801c24c <tcp_abandon+0x170>)
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	61fb      	str	r3, [r7, #28]
 801c178:	e00c      	b.n	801c194 <tcp_abandon+0xb8>
 801c17a:	69fb      	ldr	r3, [r7, #28]
 801c17c:	68db      	ldr	r3, [r3, #12]
 801c17e:	687a      	ldr	r2, [r7, #4]
 801c180:	429a      	cmp	r2, r3
 801c182:	d104      	bne.n	801c18e <tcp_abandon+0xb2>
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	68da      	ldr	r2, [r3, #12]
 801c188:	69fb      	ldr	r3, [r7, #28]
 801c18a:	60da      	str	r2, [r3, #12]
 801c18c:	e005      	b.n	801c19a <tcp_abandon+0xbe>
 801c18e:	69fb      	ldr	r3, [r7, #28]
 801c190:	68db      	ldr	r3, [r3, #12]
 801c192:	61fb      	str	r3, [r7, #28]
 801c194:	69fb      	ldr	r3, [r7, #28]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d1ef      	bne.n	801c17a <tcp_abandon+0x9e>
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	2200      	movs	r2, #0
 801c19e:	60da      	str	r2, [r3, #12]
 801c1a0:	e00b      	b.n	801c1ba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	8adb      	ldrh	r3, [r3, #22]
 801c1aa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c1ac:	6879      	ldr	r1, [r7, #4]
 801c1ae:	4828      	ldr	r0, [pc, #160]	; (801c250 <tcp_abandon+0x174>)
 801c1b0:	f001 f9f0 	bl	801d594 <tcp_pcb_remove>
 801c1b4:	4b27      	ldr	r3, [pc, #156]	; (801c254 <tcp_abandon+0x178>)
 801c1b6:	2201      	movs	r2, #1
 801c1b8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d004      	beq.n	801c1cc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	f000 fec4 	bl	801cf54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d004      	beq.n	801c1de <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c1d8:	4618      	mov	r0, r3
 801c1da:	f000 febb 	bl	801cf54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d004      	beq.n	801c1f0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f000 feb2 	bl	801cf54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1f2:	2b00      	cmp	r3, #0
 801c1f4:	d00e      	beq.n	801c214 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c1f6:	6879      	ldr	r1, [r7, #4]
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	3304      	adds	r3, #4
 801c1fc:	687a      	ldr	r2, [r7, #4]
 801c1fe:	8b12      	ldrh	r2, [r2, #24]
 801c200:	9202      	str	r2, [sp, #8]
 801c202:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c204:	9201      	str	r2, [sp, #4]
 801c206:	9300      	str	r3, [sp, #0]
 801c208:	460b      	mov	r3, r1
 801c20a:	697a      	ldr	r2, [r7, #20]
 801c20c:	69b9      	ldr	r1, [r7, #24]
 801c20e:	6878      	ldr	r0, [r7, #4]
 801c210:	f005 fb8c 	bl	802192c <tcp_rst>
    }
    last_state = pcb->state;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	7d1b      	ldrb	r3, [r3, #20]
 801c218:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7ff fcd8 	bl	801bbd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c220:	693b      	ldr	r3, [r7, #16]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d004      	beq.n	801c230 <tcp_abandon+0x154>
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	f06f 010c 	mvn.w	r1, #12
 801c22c:	68f8      	ldr	r0, [r7, #12]
 801c22e:	4798      	blx	r3
  }
}
 801c230:	3728      	adds	r7, #40	; 0x28
 801c232:	46bd      	mov	sp, r7
 801c234:	bd80      	pop	{r7, pc}
 801c236:	bf00      	nop
 801c238:	08027e84 	.word	0x08027e84
 801c23c:	08027fc8 	.word	0x08027fc8
 801c240:	08027ec8 	.word	0x08027ec8
 801c244:	08027fe4 	.word	0x08027fe4
 801c248:	200102c4 	.word	0x200102c4
 801c24c:	200102c0 	.word	0x200102c0
 801c250:	200102b4 	.word	0x200102b4
 801c254:	200102b0 	.word	0x200102b0

0801c258 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b082      	sub	sp, #8
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801c260:	2101      	movs	r1, #1
 801c262:	6878      	ldr	r0, [r7, #4]
 801c264:	f7ff ff3a 	bl	801c0dc <tcp_abandon>
}
 801c268:	bf00      	nop
 801c26a:	3708      	adds	r7, #8
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c270:	b580      	push	{r7, lr}
 801c272:	b088      	sub	sp, #32
 801c274:	af00      	add	r7, sp, #0
 801c276:	60f8      	str	r0, [r7, #12]
 801c278:	60b9      	str	r1, [r7, #8]
 801c27a:	4613      	mov	r3, r2
 801c27c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801c27e:	2304      	movs	r3, #4
 801c280:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c282:	68bb      	ldr	r3, [r7, #8]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d101      	bne.n	801c28c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801c288:	4b3e      	ldr	r3, [pc, #248]	; (801c384 <tcp_bind+0x114>)
 801c28a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d109      	bne.n	801c2a6 <tcp_bind+0x36>
 801c292:	4b3d      	ldr	r3, [pc, #244]	; (801c388 <tcp_bind+0x118>)
 801c294:	f240 22a9 	movw	r2, #681	; 0x2a9
 801c298:	493c      	ldr	r1, [pc, #240]	; (801c38c <tcp_bind+0x11c>)
 801c29a:	483d      	ldr	r0, [pc, #244]	; (801c390 <tcp_bind+0x120>)
 801c29c:	f009 fe28 	bl	8025ef0 <iprintf>
 801c2a0:	f06f 030f 	mvn.w	r3, #15
 801c2a4:	e06a      	b.n	801c37c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	7d1b      	ldrb	r3, [r3, #20]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d009      	beq.n	801c2c2 <tcp_bind+0x52>
 801c2ae:	4b36      	ldr	r3, [pc, #216]	; (801c388 <tcp_bind+0x118>)
 801c2b0:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c2b4:	4937      	ldr	r1, [pc, #220]	; (801c394 <tcp_bind+0x124>)
 801c2b6:	4836      	ldr	r0, [pc, #216]	; (801c390 <tcp_bind+0x120>)
 801c2b8:	f009 fe1a 	bl	8025ef0 <iprintf>
 801c2bc:	f06f 0305 	mvn.w	r3, #5
 801c2c0:	e05c      	b.n	801c37c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801c2c2:	88fb      	ldrh	r3, [r7, #6]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d109      	bne.n	801c2dc <tcp_bind+0x6c>
    port = tcp_new_port();
 801c2c8:	f000 f9de 	bl	801c688 <tcp_new_port>
 801c2cc:	4603      	mov	r3, r0
 801c2ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c2d0:	88fb      	ldrh	r3, [r7, #6]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d135      	bne.n	801c342 <tcp_bind+0xd2>
      return ERR_BUF;
 801c2d6:	f06f 0301 	mvn.w	r3, #1
 801c2da:	e04f      	b.n	801c37c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801c2dc:	2300      	movs	r3, #0
 801c2de:	61fb      	str	r3, [r7, #28]
 801c2e0:	e02b      	b.n	801c33a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801c2e2:	4a2d      	ldr	r2, [pc, #180]	; (801c398 <tcp_bind+0x128>)
 801c2e4:	69fb      	ldr	r3, [r7, #28]
 801c2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	61bb      	str	r3, [r7, #24]
 801c2ee:	e01e      	b.n	801c32e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801c2f0:	69bb      	ldr	r3, [r7, #24]
 801c2f2:	8adb      	ldrh	r3, [r3, #22]
 801c2f4:	88fa      	ldrh	r2, [r7, #6]
 801c2f6:	429a      	cmp	r2, r3
 801c2f8:	d116      	bne.n	801c328 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801c2fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d010      	beq.n	801c322 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801c300:	69bb      	ldr	r3, [r7, #24]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d00c      	beq.n	801c322 <tcp_bind+0xb2>
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d009      	beq.n	801c322 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801c30e:	68bb      	ldr	r3, [r7, #8]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d005      	beq.n	801c322 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801c316:	69bb      	ldr	r3, [r7, #24]
 801c318:	681a      	ldr	r2, [r3, #0]
 801c31a:	68bb      	ldr	r3, [r7, #8]
 801c31c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801c31e:	429a      	cmp	r2, r3
 801c320:	d102      	bne.n	801c328 <tcp_bind+0xb8>
              return ERR_USE;
 801c322:	f06f 0307 	mvn.w	r3, #7
 801c326:	e029      	b.n	801c37c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801c328:	69bb      	ldr	r3, [r7, #24]
 801c32a:	68db      	ldr	r3, [r3, #12]
 801c32c:	61bb      	str	r3, [r7, #24]
 801c32e:	69bb      	ldr	r3, [r7, #24]
 801c330:	2b00      	cmp	r3, #0
 801c332:	d1dd      	bne.n	801c2f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801c334:	69fb      	ldr	r3, [r7, #28]
 801c336:	3301      	adds	r3, #1
 801c338:	61fb      	str	r3, [r7, #28]
 801c33a:	69fa      	ldr	r2, [r7, #28]
 801c33c:	697b      	ldr	r3, [r7, #20]
 801c33e:	429a      	cmp	r2, r3
 801c340:	dbcf      	blt.n	801c2e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801c342:	68bb      	ldr	r3, [r7, #8]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d00c      	beq.n	801c362 <tcp_bind+0xf2>
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	2b00      	cmp	r3, #0
 801c34e:	d008      	beq.n	801c362 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d002      	beq.n	801c35c <tcp_bind+0xec>
 801c356:	68bb      	ldr	r3, [r7, #8]
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	e000      	b.n	801c35e <tcp_bind+0xee>
 801c35c:	2300      	movs	r3, #0
 801c35e:	68fa      	ldr	r2, [r7, #12]
 801c360:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	88fa      	ldrh	r2, [r7, #6]
 801c366:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801c368:	4b0c      	ldr	r3, [pc, #48]	; (801c39c <tcp_bind+0x12c>)
 801c36a:	681a      	ldr	r2, [r3, #0]
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	60da      	str	r2, [r3, #12]
 801c370:	4a0a      	ldr	r2, [pc, #40]	; (801c39c <tcp_bind+0x12c>)
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	6013      	str	r3, [r2, #0]
 801c376:	f005 fc9b 	bl	8021cb0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801c37a:	2300      	movs	r3, #0
}
 801c37c:	4618      	mov	r0, r3
 801c37e:	3720      	adds	r7, #32
 801c380:	46bd      	mov	sp, r7
 801c382:	bd80      	pop	{r7, pc}
 801c384:	0802b998 	.word	0x0802b998
 801c388:	08027e84 	.word	0x08027e84
 801c38c:	08028018 	.word	0x08028018
 801c390:	08027ec8 	.word	0x08027ec8
 801c394:	08028030 	.word	0x08028030
 801c398:	0802b970 	.word	0x0802b970
 801c39c:	200102c0 	.word	0x200102c0

0801c3a0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b084      	sub	sp, #16
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	60f8      	str	r0, [r7, #12]
 801c3a8:	60b9      	str	r1, [r7, #8]
 801c3aa:	4613      	mov	r3, r2
 801c3ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c3ae:	68bb      	ldr	r3, [r7, #8]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d106      	bne.n	801c3c2 <tcp_accept_null+0x22>
 801c3b4:	4b07      	ldr	r3, [pc, #28]	; (801c3d4 <tcp_accept_null+0x34>)
 801c3b6:	f240 320f 	movw	r2, #783	; 0x30f
 801c3ba:	4907      	ldr	r1, [pc, #28]	; (801c3d8 <tcp_accept_null+0x38>)
 801c3bc:	4807      	ldr	r0, [pc, #28]	; (801c3dc <tcp_accept_null+0x3c>)
 801c3be:	f009 fd97 	bl	8025ef0 <iprintf>

  tcp_abort(pcb);
 801c3c2:	68b8      	ldr	r0, [r7, #8]
 801c3c4:	f7ff ff48 	bl	801c258 <tcp_abort>

  return ERR_ABRT;
 801c3c8:	f06f 030c 	mvn.w	r3, #12
}
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	3710      	adds	r7, #16
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	bd80      	pop	{r7, pc}
 801c3d4:	08027e84 	.word	0x08027e84
 801c3d8:	08028058 	.word	0x08028058
 801c3dc:	08027ec8 	.word	0x08027ec8

0801c3e0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801c3e0:	b580      	push	{r7, lr}
 801c3e2:	b088      	sub	sp, #32
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	460b      	mov	r3, r1
 801c3ea:	607a      	str	r2, [r7, #4]
 801c3ec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d109      	bne.n	801c40c <tcp_listen_with_backlog_and_err+0x2c>
 801c3f8:	4b47      	ldr	r3, [pc, #284]	; (801c518 <tcp_listen_with_backlog_and_err+0x138>)
 801c3fa:	f240 3259 	movw	r2, #857	; 0x359
 801c3fe:	4947      	ldr	r1, [pc, #284]	; (801c51c <tcp_listen_with_backlog_and_err+0x13c>)
 801c400:	4847      	ldr	r0, [pc, #284]	; (801c520 <tcp_listen_with_backlog_and_err+0x140>)
 801c402:	f009 fd75 	bl	8025ef0 <iprintf>
 801c406:	23f0      	movs	r3, #240	; 0xf0
 801c408:	76fb      	strb	r3, [r7, #27]
 801c40a:	e079      	b.n	801c500 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801c40c:	68fb      	ldr	r3, [r7, #12]
 801c40e:	7d1b      	ldrb	r3, [r3, #20]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d009      	beq.n	801c428 <tcp_listen_with_backlog_and_err+0x48>
 801c414:	4b40      	ldr	r3, [pc, #256]	; (801c518 <tcp_listen_with_backlog_and_err+0x138>)
 801c416:	f240 325a 	movw	r2, #858	; 0x35a
 801c41a:	4942      	ldr	r1, [pc, #264]	; (801c524 <tcp_listen_with_backlog_and_err+0x144>)
 801c41c:	4840      	ldr	r0, [pc, #256]	; (801c520 <tcp_listen_with_backlog_and_err+0x140>)
 801c41e:	f009 fd67 	bl	8025ef0 <iprintf>
 801c422:	23f1      	movs	r3, #241	; 0xf1
 801c424:	76fb      	strb	r3, [r7, #27]
 801c426:	e06b      	b.n	801c500 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	7d1b      	ldrb	r3, [r3, #20]
 801c42c:	2b01      	cmp	r3, #1
 801c42e:	d104      	bne.n	801c43a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801c434:	23f7      	movs	r3, #247	; 0xf7
 801c436:	76fb      	strb	r3, [r7, #27]
    goto done;
 801c438:	e062      	b.n	801c500 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801c43a:	2002      	movs	r0, #2
 801c43c:	f7fe fa26 	bl	801a88c <memp_malloc>
 801c440:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801c442:	69fb      	ldr	r3, [r7, #28]
 801c444:	2b00      	cmp	r3, #0
 801c446:	d102      	bne.n	801c44e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801c448:	23ff      	movs	r3, #255	; 0xff
 801c44a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801c44c:	e058      	b.n	801c500 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801c44e:	68fb      	ldr	r3, [r7, #12]
 801c450:	691a      	ldr	r2, [r3, #16]
 801c452:	69fb      	ldr	r3, [r7, #28]
 801c454:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801c456:	68fb      	ldr	r3, [r7, #12]
 801c458:	8ada      	ldrh	r2, [r3, #22]
 801c45a:	69fb      	ldr	r3, [r7, #28]
 801c45c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801c45e:	69fb      	ldr	r3, [r7, #28]
 801c460:	2201      	movs	r2, #1
 801c462:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	7d5a      	ldrb	r2, [r3, #21]
 801c468:	69fb      	ldr	r3, [r7, #28]
 801c46a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	7a5a      	ldrb	r2, [r3, #9]
 801c470:	69fb      	ldr	r3, [r7, #28]
 801c472:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801c474:	69fb      	ldr	r3, [r7, #28]
 801c476:	2200      	movs	r2, #0
 801c478:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	7ada      	ldrb	r2, [r3, #11]
 801c47e:	69fb      	ldr	r3, [r7, #28]
 801c480:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	7a9a      	ldrb	r2, [r3, #10]
 801c486:	69fb      	ldr	r3, [r7, #28]
 801c488:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	681a      	ldr	r2, [r3, #0]
 801c48e:	69fb      	ldr	r3, [r7, #28]
 801c490:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	8adb      	ldrh	r3, [r3, #22]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d021      	beq.n	801c4de <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801c49a:	4b23      	ldr	r3, [pc, #140]	; (801c528 <tcp_listen_with_backlog_and_err+0x148>)
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	68fa      	ldr	r2, [r7, #12]
 801c4a0:	429a      	cmp	r2, r3
 801c4a2:	d105      	bne.n	801c4b0 <tcp_listen_with_backlog_and_err+0xd0>
 801c4a4:	4b20      	ldr	r3, [pc, #128]	; (801c528 <tcp_listen_with_backlog_and_err+0x148>)
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	68db      	ldr	r3, [r3, #12]
 801c4aa:	4a1f      	ldr	r2, [pc, #124]	; (801c528 <tcp_listen_with_backlog_and_err+0x148>)
 801c4ac:	6013      	str	r3, [r2, #0]
 801c4ae:	e013      	b.n	801c4d8 <tcp_listen_with_backlog_and_err+0xf8>
 801c4b0:	4b1d      	ldr	r3, [pc, #116]	; (801c528 <tcp_listen_with_backlog_and_err+0x148>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	617b      	str	r3, [r7, #20]
 801c4b6:	e00c      	b.n	801c4d2 <tcp_listen_with_backlog_and_err+0xf2>
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	68db      	ldr	r3, [r3, #12]
 801c4bc:	68fa      	ldr	r2, [r7, #12]
 801c4be:	429a      	cmp	r2, r3
 801c4c0:	d104      	bne.n	801c4cc <tcp_listen_with_backlog_and_err+0xec>
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	68da      	ldr	r2, [r3, #12]
 801c4c6:	697b      	ldr	r3, [r7, #20]
 801c4c8:	60da      	str	r2, [r3, #12]
 801c4ca:	e005      	b.n	801c4d8 <tcp_listen_with_backlog_and_err+0xf8>
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	68db      	ldr	r3, [r3, #12]
 801c4d0:	617b      	str	r3, [r7, #20]
 801c4d2:	697b      	ldr	r3, [r7, #20]
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d1ef      	bne.n	801c4b8 <tcp_listen_with_backlog_and_err+0xd8>
 801c4d8:	68fb      	ldr	r3, [r7, #12]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801c4de:	68f8      	ldr	r0, [r7, #12]
 801c4e0:	f7ff fb76 	bl	801bbd0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801c4e4:	69fb      	ldr	r3, [r7, #28]
 801c4e6:	4a11      	ldr	r2, [pc, #68]	; (801c52c <tcp_listen_with_backlog_and_err+0x14c>)
 801c4e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801c4ea:	4b11      	ldr	r3, [pc, #68]	; (801c530 <tcp_listen_with_backlog_and_err+0x150>)
 801c4ec:	681a      	ldr	r2, [r3, #0]
 801c4ee:	69fb      	ldr	r3, [r7, #28]
 801c4f0:	60da      	str	r2, [r3, #12]
 801c4f2:	4a0f      	ldr	r2, [pc, #60]	; (801c530 <tcp_listen_with_backlog_and_err+0x150>)
 801c4f4:	69fb      	ldr	r3, [r7, #28]
 801c4f6:	6013      	str	r3, [r2, #0]
 801c4f8:	f005 fbda 	bl	8021cb0 <tcp_timer_needed>
  res = ERR_OK;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d002      	beq.n	801c50c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	7efa      	ldrb	r2, [r7, #27]
 801c50a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801c50c:	69fb      	ldr	r3, [r7, #28]
}
 801c50e:	4618      	mov	r0, r3
 801c510:	3720      	adds	r7, #32
 801c512:	46bd      	mov	sp, r7
 801c514:	bd80      	pop	{r7, pc}
 801c516:	bf00      	nop
 801c518:	08027e84 	.word	0x08027e84
 801c51c:	08028078 	.word	0x08028078
 801c520:	08027ec8 	.word	0x08027ec8
 801c524:	080280a8 	.word	0x080280a8
 801c528:	200102c0 	.word	0x200102c0
 801c52c:	0801c3a1 	.word	0x0801c3a1
 801c530:	200102bc 	.word	0x200102bc

0801c534 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801c534:	b580      	push	{r7, lr}
 801c536:	b084      	sub	sp, #16
 801c538:	af00      	add	r7, sp, #0
 801c53a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	d106      	bne.n	801c550 <tcp_update_rcv_ann_wnd+0x1c>
 801c542:	4b25      	ldr	r3, [pc, #148]	; (801c5d8 <tcp_update_rcv_ann_wnd+0xa4>)
 801c544:	f240 32a6 	movw	r2, #934	; 0x3a6
 801c548:	4924      	ldr	r1, [pc, #144]	; (801c5dc <tcp_update_rcv_ann_wnd+0xa8>)
 801c54a:	4825      	ldr	r0, [pc, #148]	; (801c5e0 <tcp_update_rcv_ann_wnd+0xac>)
 801c54c:	f009 fcd0 	bl	8025ef0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c554:	687a      	ldr	r2, [r7, #4]
 801c556:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801c558:	4413      	add	r3, r2
 801c55a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c560:	687a      	ldr	r2, [r7, #4]
 801c562:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801c564:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801c568:	bf28      	it	cs
 801c56a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801c56e:	b292      	uxth	r2, r2
 801c570:	4413      	add	r3, r2
 801c572:	68fa      	ldr	r2, [r7, #12]
 801c574:	1ad3      	subs	r3, r2, r3
 801c576:	2b00      	cmp	r3, #0
 801c578:	db08      	blt.n	801c58c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c586:	68fa      	ldr	r2, [r7, #12]
 801c588:	1ad3      	subs	r3, r2, r3
 801c58a:	e020      	b.n	801c5ce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c594:	1ad3      	subs	r3, r2, r3
 801c596:	2b00      	cmp	r3, #0
 801c598:	dd03      	ble.n	801c5a2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	2200      	movs	r2, #0
 801c59e:	855a      	strh	r2, [r3, #42]	; 0x2a
 801c5a0:	e014      	b.n	801c5cc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5aa:	1ad3      	subs	r3, r2, r3
 801c5ac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801c5ae:	68bb      	ldr	r3, [r7, #8]
 801c5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c5b4:	d306      	bcc.n	801c5c4 <tcp_update_rcv_ann_wnd+0x90>
 801c5b6:	4b08      	ldr	r3, [pc, #32]	; (801c5d8 <tcp_update_rcv_ann_wnd+0xa4>)
 801c5b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 801c5bc:	4909      	ldr	r1, [pc, #36]	; (801c5e4 <tcp_update_rcv_ann_wnd+0xb0>)
 801c5be:	4808      	ldr	r0, [pc, #32]	; (801c5e0 <tcp_update_rcv_ann_wnd+0xac>)
 801c5c0:	f009 fc96 	bl	8025ef0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801c5c4:	68bb      	ldr	r3, [r7, #8]
 801c5c6:	b29a      	uxth	r2, r3
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801c5cc:	2300      	movs	r3, #0
  }
}
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	3710      	adds	r7, #16
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	bd80      	pop	{r7, pc}
 801c5d6:	bf00      	nop
 801c5d8:	08027e84 	.word	0x08027e84
 801c5dc:	080280e0 	.word	0x080280e0
 801c5e0:	08027ec8 	.word	0x08027ec8
 801c5e4:	08028104 	.word	0x08028104

0801c5e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b084      	sub	sp, #16
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
 801c5f0:	460b      	mov	r3, r1
 801c5f2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d107      	bne.n	801c60a <tcp_recved+0x22>
 801c5fa:	4b1f      	ldr	r3, [pc, #124]	; (801c678 <tcp_recved+0x90>)
 801c5fc:	f240 32cf 	movw	r2, #975	; 0x3cf
 801c600:	491e      	ldr	r1, [pc, #120]	; (801c67c <tcp_recved+0x94>)
 801c602:	481f      	ldr	r0, [pc, #124]	; (801c680 <tcp_recved+0x98>)
 801c604:	f009 fc74 	bl	8025ef0 <iprintf>
 801c608:	e032      	b.n	801c670 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	7d1b      	ldrb	r3, [r3, #20]
 801c60e:	2b01      	cmp	r3, #1
 801c610:	d106      	bne.n	801c620 <tcp_recved+0x38>
 801c612:	4b19      	ldr	r3, [pc, #100]	; (801c678 <tcp_recved+0x90>)
 801c614:	f240 32d2 	movw	r2, #978	; 0x3d2
 801c618:	491a      	ldr	r1, [pc, #104]	; (801c684 <tcp_recved+0x9c>)
 801c61a:	4819      	ldr	r0, [pc, #100]	; (801c680 <tcp_recved+0x98>)
 801c61c:	f009 fc68 	bl	8025ef0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c624:	887b      	ldrh	r3, [r7, #2]
 801c626:	4413      	add	r3, r2
 801c628:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801c62a:	89fb      	ldrh	r3, [r7, #14]
 801c62c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c630:	d804      	bhi.n	801c63c <tcp_recved+0x54>
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c636:	89fa      	ldrh	r2, [r7, #14]
 801c638:	429a      	cmp	r2, r3
 801c63a:	d204      	bcs.n	801c646 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801c642:	851a      	strh	r2, [r3, #40]	; 0x28
 801c644:	e002      	b.n	801c64c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801c646:	687b      	ldr	r3, [r7, #4]
 801c648:	89fa      	ldrh	r2, [r7, #14]
 801c64a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801c64c:	6878      	ldr	r0, [r7, #4]
 801c64e:	f7ff ff71 	bl	801c534 <tcp_update_rcv_ann_wnd>
 801c652:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801c65a:	d309      	bcc.n	801c670 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	8b5b      	ldrh	r3, [r3, #26]
 801c660:	f043 0302 	orr.w	r3, r3, #2
 801c664:	b29a      	uxth	r2, r3
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c66a:	6878      	ldr	r0, [r7, #4]
 801c66c:	f004 fbaa 	bl	8020dc4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801c670:	3710      	adds	r7, #16
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	08027e84 	.word	0x08027e84
 801c67c:	08028120 	.word	0x08028120
 801c680:	08027ec8 	.word	0x08027ec8
 801c684:	08028138 	.word	0x08028138

0801c688 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801c688:	b480      	push	{r7}
 801c68a:	b083      	sub	sp, #12
 801c68c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801c68e:	2300      	movs	r3, #0
 801c690:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801c692:	4b1e      	ldr	r3, [pc, #120]	; (801c70c <tcp_new_port+0x84>)
 801c694:	881b      	ldrh	r3, [r3, #0]
 801c696:	3301      	adds	r3, #1
 801c698:	b29a      	uxth	r2, r3
 801c69a:	4b1c      	ldr	r3, [pc, #112]	; (801c70c <tcp_new_port+0x84>)
 801c69c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801c69e:	4b1b      	ldr	r3, [pc, #108]	; (801c70c <tcp_new_port+0x84>)
 801c6a0:	881b      	ldrh	r3, [r3, #0]
 801c6a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6a6:	4293      	cmp	r3, r2
 801c6a8:	d103      	bne.n	801c6b2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801c6aa:	4b18      	ldr	r3, [pc, #96]	; (801c70c <tcp_new_port+0x84>)
 801c6ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c6b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	71fb      	strb	r3, [r7, #7]
 801c6b6:	e01e      	b.n	801c6f6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c6b8:	79fb      	ldrb	r3, [r7, #7]
 801c6ba:	4a15      	ldr	r2, [pc, #84]	; (801c710 <tcp_new_port+0x88>)
 801c6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	603b      	str	r3, [r7, #0]
 801c6c4:	e011      	b.n	801c6ea <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801c6c6:	683b      	ldr	r3, [r7, #0]
 801c6c8:	8ada      	ldrh	r2, [r3, #22]
 801c6ca:	4b10      	ldr	r3, [pc, #64]	; (801c70c <tcp_new_port+0x84>)
 801c6cc:	881b      	ldrh	r3, [r3, #0]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d108      	bne.n	801c6e4 <tcp_new_port+0x5c>
        n++;
 801c6d2:	88bb      	ldrh	r3, [r7, #4]
 801c6d4:	3301      	adds	r3, #1
 801c6d6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801c6d8:	88bb      	ldrh	r3, [r7, #4]
 801c6da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c6de:	d3d8      	bcc.n	801c692 <tcp_new_port+0xa>
          return 0;
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	e00d      	b.n	801c700 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801c6e4:	683b      	ldr	r3, [r7, #0]
 801c6e6:	68db      	ldr	r3, [r3, #12]
 801c6e8:	603b      	str	r3, [r7, #0]
 801c6ea:	683b      	ldr	r3, [r7, #0]
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d1ea      	bne.n	801c6c6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801c6f0:	79fb      	ldrb	r3, [r7, #7]
 801c6f2:	3301      	adds	r3, #1
 801c6f4:	71fb      	strb	r3, [r7, #7]
 801c6f6:	79fb      	ldrb	r3, [r7, #7]
 801c6f8:	2b03      	cmp	r3, #3
 801c6fa:	d9dd      	bls.n	801c6b8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801c6fc:	4b03      	ldr	r3, [pc, #12]	; (801c70c <tcp_new_port+0x84>)
 801c6fe:	881b      	ldrh	r3, [r3, #0]
}
 801c700:	4618      	mov	r0, r3
 801c702:	370c      	adds	r7, #12
 801c704:	46bd      	mov	sp, r7
 801c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c70a:	4770      	bx	lr
 801c70c:	20000064 	.word	0x20000064
 801c710:	0802b970 	.word	0x0802b970

0801c714 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801c714:	b5b0      	push	{r4, r5, r7, lr}
 801c716:	b090      	sub	sp, #64	; 0x40
 801c718:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801c71a:	2300      	movs	r3, #0
 801c71c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801c720:	4b94      	ldr	r3, [pc, #592]	; (801c974 <tcp_slowtmr+0x260>)
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	3301      	adds	r3, #1
 801c726:	4a93      	ldr	r2, [pc, #588]	; (801c974 <tcp_slowtmr+0x260>)
 801c728:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801c72a:	4b93      	ldr	r3, [pc, #588]	; (801c978 <tcp_slowtmr+0x264>)
 801c72c:	781b      	ldrb	r3, [r3, #0]
 801c72e:	3301      	adds	r3, #1
 801c730:	b2da      	uxtb	r2, r3
 801c732:	4b91      	ldr	r3, [pc, #580]	; (801c978 <tcp_slowtmr+0x264>)
 801c734:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801c736:	2300      	movs	r3, #0
 801c738:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801c73a:	4b90      	ldr	r3, [pc, #576]	; (801c97c <tcp_slowtmr+0x268>)
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801c740:	e29d      	b.n	801cc7e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c744:	7d1b      	ldrb	r3, [r3, #20]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d106      	bne.n	801c758 <tcp_slowtmr+0x44>
 801c74a:	4b8d      	ldr	r3, [pc, #564]	; (801c980 <tcp_slowtmr+0x26c>)
 801c74c:	f240 42be 	movw	r2, #1214	; 0x4be
 801c750:	498c      	ldr	r1, [pc, #560]	; (801c984 <tcp_slowtmr+0x270>)
 801c752:	488d      	ldr	r0, [pc, #564]	; (801c988 <tcp_slowtmr+0x274>)
 801c754:	f009 fbcc 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c75a:	7d1b      	ldrb	r3, [r3, #20]
 801c75c:	2b01      	cmp	r3, #1
 801c75e:	d106      	bne.n	801c76e <tcp_slowtmr+0x5a>
 801c760:	4b87      	ldr	r3, [pc, #540]	; (801c980 <tcp_slowtmr+0x26c>)
 801c762:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801c766:	4989      	ldr	r1, [pc, #548]	; (801c98c <tcp_slowtmr+0x278>)
 801c768:	4887      	ldr	r0, [pc, #540]	; (801c988 <tcp_slowtmr+0x274>)
 801c76a:	f009 fbc1 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c770:	7d1b      	ldrb	r3, [r3, #20]
 801c772:	2b0a      	cmp	r3, #10
 801c774:	d106      	bne.n	801c784 <tcp_slowtmr+0x70>
 801c776:	4b82      	ldr	r3, [pc, #520]	; (801c980 <tcp_slowtmr+0x26c>)
 801c778:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801c77c:	4984      	ldr	r1, [pc, #528]	; (801c990 <tcp_slowtmr+0x27c>)
 801c77e:	4882      	ldr	r0, [pc, #520]	; (801c988 <tcp_slowtmr+0x274>)
 801c780:	f009 fbb6 	bl	8025ef0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c786:	7f9a      	ldrb	r2, [r3, #30]
 801c788:	4b7b      	ldr	r3, [pc, #492]	; (801c978 <tcp_slowtmr+0x264>)
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	429a      	cmp	r2, r3
 801c78e:	d105      	bne.n	801c79c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801c790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c792:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c796:	68db      	ldr	r3, [r3, #12]
 801c798:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801c79a:	e270      	b.n	801cc7e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801c79c:	4b76      	ldr	r3, [pc, #472]	; (801c978 <tcp_slowtmr+0x264>)
 801c79e:	781a      	ldrb	r2, [r3, #0]
 801c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7a2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7b2:	7d1b      	ldrb	r3, [r3, #20]
 801c7b4:	2b02      	cmp	r3, #2
 801c7b6:	d10a      	bne.n	801c7ce <tcp_slowtmr+0xba>
 801c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c7be:	2b05      	cmp	r3, #5
 801c7c0:	d905      	bls.n	801c7ce <tcp_slowtmr+0xba>
      ++pcb_remove;
 801c7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7c6:	3301      	adds	r3, #1
 801c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c7cc:	e11e      	b.n	801ca0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c7d4:	2b0b      	cmp	r3, #11
 801c7d6:	d905      	bls.n	801c7e4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801c7d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c7dc:	3301      	adds	r3, #1
 801c7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c7e2:	e113      	b.n	801ca0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	d075      	beq.n	801c8da <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d006      	beq.n	801c804 <tcp_slowtmr+0xf0>
 801c7f6:	4b62      	ldr	r3, [pc, #392]	; (801c980 <tcp_slowtmr+0x26c>)
 801c7f8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801c7fc:	4965      	ldr	r1, [pc, #404]	; (801c994 <tcp_slowtmr+0x280>)
 801c7fe:	4862      	ldr	r0, [pc, #392]	; (801c988 <tcp_slowtmr+0x274>)
 801c800:	f009 fb76 	bl	8025ef0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d106      	bne.n	801c81a <tcp_slowtmr+0x106>
 801c80c:	4b5c      	ldr	r3, [pc, #368]	; (801c980 <tcp_slowtmr+0x26c>)
 801c80e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801c812:	4961      	ldr	r1, [pc, #388]	; (801c998 <tcp_slowtmr+0x284>)
 801c814:	485c      	ldr	r0, [pc, #368]	; (801c988 <tcp_slowtmr+0x274>)
 801c816:	f009 fb6b 	bl	8025ef0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c81c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c820:	2b0b      	cmp	r3, #11
 801c822:	d905      	bls.n	801c830 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801c824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c828:	3301      	adds	r3, #1
 801c82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c82e:	e0ed      	b.n	801ca0c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c832:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c836:	3b01      	subs	r3, #1
 801c838:	4a58      	ldr	r2, [pc, #352]	; (801c99c <tcp_slowtmr+0x288>)
 801c83a:	5cd3      	ldrb	r3, [r2, r3]
 801c83c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c840:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c844:	7c7a      	ldrb	r2, [r7, #17]
 801c846:	429a      	cmp	r2, r3
 801c848:	d907      	bls.n	801c85a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c84c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c850:	3301      	adds	r3, #1
 801c852:	b2da      	uxtb	r2, r3
 801c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c856:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c85c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801c860:	7c7a      	ldrb	r2, [r7, #17]
 801c862:	429a      	cmp	r2, r3
 801c864:	f200 80d2 	bhi.w	801ca0c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801c868:	2301      	movs	r3, #1
 801c86a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c86e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c872:	2b00      	cmp	r3, #0
 801c874:	d108      	bne.n	801c888 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801c876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c878:	f005 f94c 	bl	8021b14 <tcp_zero_window_probe>
 801c87c:	4603      	mov	r3, r0
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d014      	beq.n	801c8ac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801c882:	2300      	movs	r3, #0
 801c884:	623b      	str	r3, [r7, #32]
 801c886:	e011      	b.n	801c8ac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c88a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c88e:	4619      	mov	r1, r3
 801c890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c892:	f004 f811 	bl	80208b8 <tcp_split_unsent_seg>
 801c896:	4603      	mov	r3, r0
 801c898:	2b00      	cmp	r3, #0
 801c89a:	d107      	bne.n	801c8ac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801c89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c89e:	f004 fa91 	bl	8020dc4 <tcp_output>
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d101      	bne.n	801c8ac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801c8ac:	6a3b      	ldr	r3, [r7, #32]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	f000 80ac 	beq.w	801ca0c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801c8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c8c2:	2b06      	cmp	r3, #6
 801c8c4:	f200 80a2 	bhi.w	801ca0c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801c8ce:	3301      	adds	r3, #1
 801c8d0:	b2da      	uxtb	r2, r3
 801c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801c8d8:	e098      	b.n	801ca0c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801c8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	db0f      	blt.n	801c904 <tcp_slowtmr+0x1f0>
 801c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c8ea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c8ee:	4293      	cmp	r3, r2
 801c8f0:	d008      	beq.n	801c904 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c8f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	3301      	adds	r3, #1
 801c8fc:	b29b      	uxth	r3, r3
 801c8fe:	b21a      	sxth	r2, r3
 801c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c902:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c906:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c90c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801c910:	429a      	cmp	r2, r3
 801c912:	db7b      	blt.n	801ca0c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c916:	f004 fd47 	bl	80213a8 <tcp_rexmit_rto_prepare>
 801c91a:	4603      	mov	r3, r0
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d007      	beq.n	801c930 <tcp_slowtmr+0x21c>
 801c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c924:	2b00      	cmp	r3, #0
 801c926:	d171      	bne.n	801ca0c <tcp_slowtmr+0x2f8>
 801c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d06d      	beq.n	801ca0c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c932:	7d1b      	ldrb	r3, [r3, #20]
 801c934:	2b02      	cmp	r3, #2
 801c936:	d03a      	beq.n	801c9ae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c93a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c93e:	2b0c      	cmp	r3, #12
 801c940:	bf28      	it	cs
 801c942:	230c      	movcs	r3, #12
 801c944:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c948:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c94c:	10db      	asrs	r3, r3, #3
 801c94e:	b21b      	sxth	r3, r3
 801c950:	461a      	mov	r2, r3
 801c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c954:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c958:	4413      	add	r3, r2
 801c95a:	7efa      	ldrb	r2, [r7, #27]
 801c95c:	4910      	ldr	r1, [pc, #64]	; (801c9a0 <tcp_slowtmr+0x28c>)
 801c95e:	5c8a      	ldrb	r2, [r1, r2]
 801c960:	4093      	lsls	r3, r2
 801c962:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801c964:	697b      	ldr	r3, [r7, #20]
 801c966:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801c96a:	4293      	cmp	r3, r2
 801c96c:	dc1a      	bgt.n	801c9a4 <tcp_slowtmr+0x290>
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	b21a      	sxth	r2, r3
 801c972:	e019      	b.n	801c9a8 <tcp_slowtmr+0x294>
 801c974:	200102b8 	.word	0x200102b8
 801c978:	20008736 	.word	0x20008736
 801c97c:	200102b4 	.word	0x200102b4
 801c980:	08027e84 	.word	0x08027e84
 801c984:	080281c8 	.word	0x080281c8
 801c988:	08027ec8 	.word	0x08027ec8
 801c98c:	080281f4 	.word	0x080281f4
 801c990:	08028220 	.word	0x08028220
 801c994:	08028250 	.word	0x08028250
 801c998:	08028284 	.word	0x08028284
 801c99c:	0802b968 	.word	0x0802b968
 801c9a0:	0802b958 	.word	0x0802b958
 801c9a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c9c0:	4293      	cmp	r3, r2
 801c9c2:	bf28      	it	cs
 801c9c4:	4613      	movcs	r3, r2
 801c9c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801c9c8:	8a7b      	ldrh	r3, [r7, #18]
 801c9ca:	085b      	lsrs	r3, r3, #1
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c9de:	005b      	lsls	r3, r3, #1
 801c9e0:	b29b      	uxth	r3, r3
 801c9e2:	429a      	cmp	r2, r3
 801c9e4:	d206      	bcs.n	801c9f4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c9ea:	005b      	lsls	r3, r3, #1
 801c9ec:	b29a      	uxth	r2, r3
 801c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801c9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9f6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca00:	2200      	movs	r2, #0
 801ca02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801ca06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ca08:	f004 fd3e 	bl	8021488 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca0e:	7d1b      	ldrb	r3, [r3, #20]
 801ca10:	2b06      	cmp	r3, #6
 801ca12:	d111      	bne.n	801ca38 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca16:	8b5b      	ldrh	r3, [r3, #26]
 801ca18:	f003 0310 	and.w	r3, r3, #16
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d00b      	beq.n	801ca38 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ca20:	4b9c      	ldr	r3, [pc, #624]	; (801cc94 <tcp_slowtmr+0x580>)
 801ca22:	681a      	ldr	r2, [r3, #0]
 801ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca26:	6a1b      	ldr	r3, [r3, #32]
 801ca28:	1ad3      	subs	r3, r2, r3
 801ca2a:	2b28      	cmp	r3, #40	; 0x28
 801ca2c:	d904      	bls.n	801ca38 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801ca2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca32:	3301      	adds	r3, #1
 801ca34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ca38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca3a:	7a5b      	ldrb	r3, [r3, #9]
 801ca3c:	f003 0308 	and.w	r3, r3, #8
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d04a      	beq.n	801cada <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca46:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ca48:	2b04      	cmp	r3, #4
 801ca4a:	d003      	beq.n	801ca54 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca4e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801ca50:	2b07      	cmp	r3, #7
 801ca52:	d142      	bne.n	801cada <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ca54:	4b8f      	ldr	r3, [pc, #572]	; (801cc94 <tcp_slowtmr+0x580>)
 801ca56:	681a      	ldr	r2, [r3, #0]
 801ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca5a:	6a1b      	ldr	r3, [r3, #32]
 801ca5c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca60:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801ca64:	4b8c      	ldr	r3, [pc, #560]	; (801cc98 <tcp_slowtmr+0x584>)
 801ca66:	440b      	add	r3, r1
 801ca68:	498c      	ldr	r1, [pc, #560]	; (801cc9c <tcp_slowtmr+0x588>)
 801ca6a:	fba1 1303 	umull	r1, r3, r1, r3
 801ca6e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ca70:	429a      	cmp	r2, r3
 801ca72:	d90a      	bls.n	801ca8a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca78:	3301      	adds	r3, #1
 801ca7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801ca7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ca82:	3301      	adds	r3, #1
 801ca84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801ca88:	e027      	b.n	801cada <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ca8a:	4b82      	ldr	r3, [pc, #520]	; (801cc94 <tcp_slowtmr+0x580>)
 801ca8c:	681a      	ldr	r2, [r3, #0]
 801ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca90:	6a1b      	ldr	r3, [r3, #32]
 801ca92:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801ca94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca96:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801caa0:	4618      	mov	r0, r3
 801caa2:	4b7f      	ldr	r3, [pc, #508]	; (801cca0 <tcp_slowtmr+0x58c>)
 801caa4:	fb03 f300 	mul.w	r3, r3, r0
 801caa8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801caaa:	497c      	ldr	r1, [pc, #496]	; (801cc9c <tcp_slowtmr+0x588>)
 801caac:	fba1 1303 	umull	r1, r3, r1, r3
 801cab0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cab2:	429a      	cmp	r2, r3
 801cab4:	d911      	bls.n	801cada <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801cab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cab8:	f004 ffec 	bl	8021a94 <tcp_keepalive>
 801cabc:	4603      	mov	r3, r0
 801cabe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801cac2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d107      	bne.n	801cada <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cacc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801cad0:	3301      	adds	r3, #1
 801cad2:	b2da      	uxtb	r2, r3
 801cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cad6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d011      	beq.n	801cb06 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801cae2:	4b6c      	ldr	r3, [pc, #432]	; (801cc94 <tcp_slowtmr+0x580>)
 801cae4:	681a      	ldr	r2, [r3, #0]
 801cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cae8:	6a1b      	ldr	r3, [r3, #32]
 801caea:	1ad2      	subs	r2, r2, r3
 801caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801caf2:	4619      	mov	r1, r3
 801caf4:	460b      	mov	r3, r1
 801caf6:	005b      	lsls	r3, r3, #1
 801caf8:	440b      	add	r3, r1
 801cafa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801cafc:	429a      	cmp	r2, r3
 801cafe:	d302      	bcc.n	801cb06 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801cb00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb02:	f000 feab 	bl	801d85c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb08:	7d1b      	ldrb	r3, [r3, #20]
 801cb0a:	2b03      	cmp	r3, #3
 801cb0c:	d10b      	bne.n	801cb26 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801cb0e:	4b61      	ldr	r3, [pc, #388]	; (801cc94 <tcp_slowtmr+0x580>)
 801cb10:	681a      	ldr	r2, [r3, #0]
 801cb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb14:	6a1b      	ldr	r3, [r3, #32]
 801cb16:	1ad3      	subs	r3, r2, r3
 801cb18:	2b28      	cmp	r3, #40	; 0x28
 801cb1a:	d904      	bls.n	801cb26 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801cb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb20:	3301      	adds	r3, #1
 801cb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb28:	7d1b      	ldrb	r3, [r3, #20]
 801cb2a:	2b09      	cmp	r3, #9
 801cb2c:	d10b      	bne.n	801cb46 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801cb2e:	4b59      	ldr	r3, [pc, #356]	; (801cc94 <tcp_slowtmr+0x580>)
 801cb30:	681a      	ldr	r2, [r3, #0]
 801cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb34:	6a1b      	ldr	r3, [r3, #32]
 801cb36:	1ad3      	subs	r3, r2, r3
 801cb38:	2bf0      	cmp	r3, #240	; 0xf0
 801cb3a:	d904      	bls.n	801cb46 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801cb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb40:	3301      	adds	r3, #1
 801cb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801cb46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d060      	beq.n	801cc10 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801cb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb54:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801cb56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cb58:	f000 fccc 	bl	801d4f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb5e:	2b00      	cmp	r3, #0
 801cb60:	d010      	beq.n	801cb84 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801cb62:	4b50      	ldr	r3, [pc, #320]	; (801cca4 <tcp_slowtmr+0x590>)
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb68:	429a      	cmp	r2, r3
 801cb6a:	d106      	bne.n	801cb7a <tcp_slowtmr+0x466>
 801cb6c:	4b4e      	ldr	r3, [pc, #312]	; (801cca8 <tcp_slowtmr+0x594>)
 801cb6e:	f240 526d 	movw	r2, #1389	; 0x56d
 801cb72:	494e      	ldr	r1, [pc, #312]	; (801ccac <tcp_slowtmr+0x598>)
 801cb74:	484e      	ldr	r0, [pc, #312]	; (801ccb0 <tcp_slowtmr+0x59c>)
 801cb76:	f009 f9bb 	bl	8025ef0 <iprintf>
        prev->next = pcb->next;
 801cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb7c:	68da      	ldr	r2, [r3, #12]
 801cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb80:	60da      	str	r2, [r3, #12]
 801cb82:	e00f      	b.n	801cba4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801cb84:	4b47      	ldr	r3, [pc, #284]	; (801cca4 <tcp_slowtmr+0x590>)
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cb8a:	429a      	cmp	r2, r3
 801cb8c:	d006      	beq.n	801cb9c <tcp_slowtmr+0x488>
 801cb8e:	4b46      	ldr	r3, [pc, #280]	; (801cca8 <tcp_slowtmr+0x594>)
 801cb90:	f240 5271 	movw	r2, #1393	; 0x571
 801cb94:	4947      	ldr	r1, [pc, #284]	; (801ccb4 <tcp_slowtmr+0x5a0>)
 801cb96:	4846      	ldr	r0, [pc, #280]	; (801ccb0 <tcp_slowtmr+0x59c>)
 801cb98:	f009 f9aa 	bl	8025ef0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cb9e:	68db      	ldr	r3, [r3, #12]
 801cba0:	4a40      	ldr	r2, [pc, #256]	; (801cca4 <tcp_slowtmr+0x590>)
 801cba2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801cba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d013      	beq.n	801cbd4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801cbb4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbb8:	3304      	adds	r3, #4
 801cbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cbbc:	8ad2      	ldrh	r2, [r2, #22]
 801cbbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801cbc0:	8b09      	ldrh	r1, [r1, #24]
 801cbc2:	9102      	str	r1, [sp, #8]
 801cbc4:	9201      	str	r2, [sp, #4]
 801cbc6:	9300      	str	r3, [sp, #0]
 801cbc8:	462b      	mov	r3, r5
 801cbca:	4622      	mov	r2, r4
 801cbcc:	4601      	mov	r1, r0
 801cbce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cbd0:	f004 feac 	bl	802192c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbd6:	691b      	ldr	r3, [r3, #16]
 801cbd8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801cbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbdc:	7d1b      	ldrb	r3, [r3, #20]
 801cbde:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbe2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cbe6:	68db      	ldr	r3, [r3, #12]
 801cbe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801cbea:	6838      	ldr	r0, [r7, #0]
 801cbec:	f7fe fff0 	bl	801bbd0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801cbf0:	4b31      	ldr	r3, [pc, #196]	; (801ccb8 <tcp_slowtmr+0x5a4>)
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801cbf6:	68fb      	ldr	r3, [r7, #12]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d004      	beq.n	801cc06 <tcp_slowtmr+0x4f2>
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	f06f 010c 	mvn.w	r1, #12
 801cc02:	68b8      	ldr	r0, [r7, #8]
 801cc04:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801cc06:	4b2c      	ldr	r3, [pc, #176]	; (801ccb8 <tcp_slowtmr+0x5a4>)
 801cc08:	781b      	ldrb	r3, [r3, #0]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d037      	beq.n	801cc7e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801cc0e:	e592      	b.n	801c736 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc16:	68db      	ldr	r3, [r3, #12]
 801cc18:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc1c:	7f1b      	ldrb	r3, [r3, #28]
 801cc1e:	3301      	adds	r3, #1
 801cc20:	b2da      	uxtb	r2, r3
 801cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc24:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801cc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc28:	7f1a      	ldrb	r2, [r3, #28]
 801cc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc2c:	7f5b      	ldrb	r3, [r3, #29]
 801cc2e:	429a      	cmp	r2, r3
 801cc30:	d325      	bcc.n	801cc7e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801cc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc34:	2200      	movs	r2, #0
 801cc36:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801cc38:	4b1f      	ldr	r3, [pc, #124]	; (801ccb8 <tcp_slowtmr+0x5a4>)
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d00b      	beq.n	801cc60 <tcp_slowtmr+0x54c>
 801cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cc4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cc50:	6912      	ldr	r2, [r2, #16]
 801cc52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cc54:	4610      	mov	r0, r2
 801cc56:	4798      	blx	r3
 801cc58:	4603      	mov	r3, r0
 801cc5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801cc5e:	e002      	b.n	801cc66 <tcp_slowtmr+0x552>
 801cc60:	2300      	movs	r3, #0
 801cc62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801cc66:	4b14      	ldr	r3, [pc, #80]	; (801ccb8 <tcp_slowtmr+0x5a4>)
 801cc68:	781b      	ldrb	r3, [r3, #0]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d000      	beq.n	801cc70 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801cc6e:	e562      	b.n	801c736 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801cc70:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d102      	bne.n	801cc7e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801cc78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801cc7a:	f004 f8a3 	bl	8020dc4 <tcp_output>
  while (pcb != NULL) {
 801cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	f47f ad5e 	bne.w	801c742 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801cc86:	2300      	movs	r3, #0
 801cc88:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801cc8a:	4b0c      	ldr	r3, [pc, #48]	; (801ccbc <tcp_slowtmr+0x5a8>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801cc90:	e069      	b.n	801cd66 <tcp_slowtmr+0x652>
 801cc92:	bf00      	nop
 801cc94:	200102b8 	.word	0x200102b8
 801cc98:	000a4cb8 	.word	0x000a4cb8
 801cc9c:	10624dd3 	.word	0x10624dd3
 801cca0:	000124f8 	.word	0x000124f8
 801cca4:	200102b4 	.word	0x200102b4
 801cca8:	08027e84 	.word	0x08027e84
 801ccac:	080282bc 	.word	0x080282bc
 801ccb0:	08027ec8 	.word	0x08027ec8
 801ccb4:	080282e8 	.word	0x080282e8
 801ccb8:	200102b0 	.word	0x200102b0
 801ccbc:	200102c4 	.word	0x200102c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ccc2:	7d1b      	ldrb	r3, [r3, #20]
 801ccc4:	2b0a      	cmp	r3, #10
 801ccc6:	d006      	beq.n	801ccd6 <tcp_slowtmr+0x5c2>
 801ccc8:	4b2b      	ldr	r3, [pc, #172]	; (801cd78 <tcp_slowtmr+0x664>)
 801ccca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801ccce:	492b      	ldr	r1, [pc, #172]	; (801cd7c <tcp_slowtmr+0x668>)
 801ccd0:	482b      	ldr	r0, [pc, #172]	; (801cd80 <tcp_slowtmr+0x66c>)
 801ccd2:	f009 f90d 	bl	8025ef0 <iprintf>
    pcb_remove = 0;
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801ccdc:	4b29      	ldr	r3, [pc, #164]	; (801cd84 <tcp_slowtmr+0x670>)
 801ccde:	681a      	ldr	r2, [r3, #0]
 801cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cce2:	6a1b      	ldr	r3, [r3, #32]
 801cce4:	1ad3      	subs	r3, r2, r3
 801cce6:	2bf0      	cmp	r3, #240	; 0xf0
 801cce8:	d904      	bls.n	801ccf4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801ccea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ccee:	3301      	adds	r3, #1
 801ccf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801ccf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d02f      	beq.n	801cd5c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801ccfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801ccfe:	f000 fbf9 	bl	801d4f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d010      	beq.n	801cd2a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801cd08:	4b1f      	ldr	r3, [pc, #124]	; (801cd88 <tcp_slowtmr+0x674>)
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd0e:	429a      	cmp	r2, r3
 801cd10:	d106      	bne.n	801cd20 <tcp_slowtmr+0x60c>
 801cd12:	4b19      	ldr	r3, [pc, #100]	; (801cd78 <tcp_slowtmr+0x664>)
 801cd14:	f240 52af 	movw	r2, #1455	; 0x5af
 801cd18:	491c      	ldr	r1, [pc, #112]	; (801cd8c <tcp_slowtmr+0x678>)
 801cd1a:	4819      	ldr	r0, [pc, #100]	; (801cd80 <tcp_slowtmr+0x66c>)
 801cd1c:	f009 f8e8 	bl	8025ef0 <iprintf>
        prev->next = pcb->next;
 801cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd22:	68da      	ldr	r2, [r3, #12]
 801cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd26:	60da      	str	r2, [r3, #12]
 801cd28:	e00f      	b.n	801cd4a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801cd2a:	4b17      	ldr	r3, [pc, #92]	; (801cd88 <tcp_slowtmr+0x674>)
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cd30:	429a      	cmp	r2, r3
 801cd32:	d006      	beq.n	801cd42 <tcp_slowtmr+0x62e>
 801cd34:	4b10      	ldr	r3, [pc, #64]	; (801cd78 <tcp_slowtmr+0x664>)
 801cd36:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801cd3a:	4915      	ldr	r1, [pc, #84]	; (801cd90 <tcp_slowtmr+0x67c>)
 801cd3c:	4810      	ldr	r0, [pc, #64]	; (801cd80 <tcp_slowtmr+0x66c>)
 801cd3e:	f009 f8d7 	bl	8025ef0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801cd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd44:	68db      	ldr	r3, [r3, #12]
 801cd46:	4a10      	ldr	r2, [pc, #64]	; (801cd88 <tcp_slowtmr+0x674>)
 801cd48:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd4c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd50:	68db      	ldr	r3, [r3, #12]
 801cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801cd54:	69f8      	ldr	r0, [r7, #28]
 801cd56:	f7fe ff3b 	bl	801bbd0 <tcp_free>
 801cd5a:	e004      	b.n	801cd66 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd62:	68db      	ldr	r3, [r3, #12]
 801cd64:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d1a9      	bne.n	801ccc0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801cd6c:	bf00      	nop
 801cd6e:	bf00      	nop
 801cd70:	3730      	adds	r7, #48	; 0x30
 801cd72:	46bd      	mov	sp, r7
 801cd74:	bdb0      	pop	{r4, r5, r7, pc}
 801cd76:	bf00      	nop
 801cd78:	08027e84 	.word	0x08027e84
 801cd7c:	08028314 	.word	0x08028314
 801cd80:	08027ec8 	.word	0x08027ec8
 801cd84:	200102b8 	.word	0x200102b8
 801cd88:	200102c4 	.word	0x200102c4
 801cd8c:	08028344 	.word	0x08028344
 801cd90:	0802836c 	.word	0x0802836c

0801cd94 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801cd9a:	4b2d      	ldr	r3, [pc, #180]	; (801ce50 <tcp_fasttmr+0xbc>)
 801cd9c:	781b      	ldrb	r3, [r3, #0]
 801cd9e:	3301      	adds	r3, #1
 801cda0:	b2da      	uxtb	r2, r3
 801cda2:	4b2b      	ldr	r3, [pc, #172]	; (801ce50 <tcp_fasttmr+0xbc>)
 801cda4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801cda6:	4b2b      	ldr	r3, [pc, #172]	; (801ce54 <tcp_fasttmr+0xc0>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801cdac:	e048      	b.n	801ce40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	7f9a      	ldrb	r2, [r3, #30]
 801cdb2:	4b27      	ldr	r3, [pc, #156]	; (801ce50 <tcp_fasttmr+0xbc>)
 801cdb4:	781b      	ldrb	r3, [r3, #0]
 801cdb6:	429a      	cmp	r2, r3
 801cdb8:	d03f      	beq.n	801ce3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801cdba:	4b25      	ldr	r3, [pc, #148]	; (801ce50 <tcp_fasttmr+0xbc>)
 801cdbc:	781a      	ldrb	r2, [r3, #0]
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	8b5b      	ldrh	r3, [r3, #26]
 801cdc6:	f003 0301 	and.w	r3, r3, #1
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d010      	beq.n	801cdf0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	8b5b      	ldrh	r3, [r3, #26]
 801cdd2:	f043 0302 	orr.w	r3, r3, #2
 801cdd6:	b29a      	uxth	r2, r3
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f003 fff1 	bl	8020dc4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	8b5b      	ldrh	r3, [r3, #26]
 801cde6:	f023 0303 	bic.w	r3, r3, #3
 801cdea:	b29a      	uxth	r2, r3
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	8b5b      	ldrh	r3, [r3, #26]
 801cdf4:	f003 0308 	and.w	r3, r3, #8
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d009      	beq.n	801ce10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cdfc:	687b      	ldr	r3, [r7, #4]
 801cdfe:	8b5b      	ldrh	r3, [r3, #26]
 801ce00:	f023 0308 	bic.w	r3, r3, #8
 801ce04:	b29a      	uxth	r2, r3
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801ce0a:	6878      	ldr	r0, [r7, #4]
 801ce0c:	f7ff f874 	bl	801bef8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	68db      	ldr	r3, [r3, #12]
 801ce14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d00a      	beq.n	801ce34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801ce1e:	4b0e      	ldr	r3, [pc, #56]	; (801ce58 <tcp_fasttmr+0xc4>)
 801ce20:	2200      	movs	r2, #0
 801ce22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801ce24:	6878      	ldr	r0, [r7, #4]
 801ce26:	f000 f819 	bl	801ce5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801ce2a:	4b0b      	ldr	r3, [pc, #44]	; (801ce58 <tcp_fasttmr+0xc4>)
 801ce2c:	781b      	ldrb	r3, [r3, #0]
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d000      	beq.n	801ce34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801ce32:	e7b8      	b.n	801cda6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801ce34:	683b      	ldr	r3, [r7, #0]
 801ce36:	607b      	str	r3, [r7, #4]
 801ce38:	e002      	b.n	801ce40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801ce3a:	687b      	ldr	r3, [r7, #4]
 801ce3c:	68db      	ldr	r3, [r3, #12]
 801ce3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d1b3      	bne.n	801cdae <tcp_fasttmr+0x1a>
    }
  }
}
 801ce46:	bf00      	nop
 801ce48:	bf00      	nop
 801ce4a:	3708      	adds	r7, #8
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	bd80      	pop	{r7, pc}
 801ce50:	20008736 	.word	0x20008736
 801ce54:	200102b4 	.word	0x200102b4
 801ce58:	200102b0 	.word	0x200102b0

0801ce5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801ce5c:	b590      	push	{r4, r7, lr}
 801ce5e:	b085      	sub	sp, #20
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d109      	bne.n	801ce7e <tcp_process_refused_data+0x22>
 801ce6a:	4b37      	ldr	r3, [pc, #220]	; (801cf48 <tcp_process_refused_data+0xec>)
 801ce6c:	f240 6209 	movw	r2, #1545	; 0x609
 801ce70:	4936      	ldr	r1, [pc, #216]	; (801cf4c <tcp_process_refused_data+0xf0>)
 801ce72:	4837      	ldr	r0, [pc, #220]	; (801cf50 <tcp_process_refused_data+0xf4>)
 801ce74:	f009 f83c 	bl	8025ef0 <iprintf>
 801ce78:	f06f 030f 	mvn.w	r3, #15
 801ce7c:	e060      	b.n	801cf40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce82:	7b5b      	ldrb	r3, [r3, #13]
 801ce84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	2200      	movs	r2, #0
 801ce90:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d00b      	beq.n	801ceb4 <tcp_process_refused_data+0x58>
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	6918      	ldr	r0, [r3, #16]
 801cea6:	2300      	movs	r3, #0
 801cea8:	68ba      	ldr	r2, [r7, #8]
 801ceaa:	6879      	ldr	r1, [r7, #4]
 801ceac:	47a0      	blx	r4
 801ceae:	4603      	mov	r3, r0
 801ceb0:	73fb      	strb	r3, [r7, #15]
 801ceb2:	e007      	b.n	801cec4 <tcp_process_refused_data+0x68>
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	68ba      	ldr	r2, [r7, #8]
 801ceb8:	6879      	ldr	r1, [r7, #4]
 801ceba:	2000      	movs	r0, #0
 801cebc:	f000 f8a4 	bl	801d008 <tcp_recv_null>
 801cec0:	4603      	mov	r3, r0
 801cec2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801cec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d12a      	bne.n	801cf22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801cecc:	7bbb      	ldrb	r3, [r7, #14]
 801cece:	f003 0320 	and.w	r3, r3, #32
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d033      	beq.n	801cf3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ceda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cede:	d005      	beq.n	801ceec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cee4:	3301      	adds	r3, #1
 801cee6:	b29a      	uxth	r2, r3
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d00b      	beq.n	801cf0e <tcp_process_refused_data+0xb2>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	6918      	ldr	r0, [r3, #16]
 801cf00:	2300      	movs	r3, #0
 801cf02:	2200      	movs	r2, #0
 801cf04:	6879      	ldr	r1, [r7, #4]
 801cf06:	47a0      	blx	r4
 801cf08:	4603      	mov	r3, r0
 801cf0a:	73fb      	strb	r3, [r7, #15]
 801cf0c:	e001      	b.n	801cf12 <tcp_process_refused_data+0xb6>
 801cf0e:	2300      	movs	r3, #0
 801cf10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801cf12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf16:	f113 0f0d 	cmn.w	r3, #13
 801cf1a:	d110      	bne.n	801cf3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801cf1c:	f06f 030c 	mvn.w	r3, #12
 801cf20:	e00e      	b.n	801cf40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801cf22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf26:	f113 0f0d 	cmn.w	r3, #13
 801cf2a:	d102      	bne.n	801cf32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801cf2c:	f06f 030c 	mvn.w	r3, #12
 801cf30:	e006      	b.n	801cf40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	68ba      	ldr	r2, [r7, #8]
 801cf36:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801cf38:	f06f 0304 	mvn.w	r3, #4
 801cf3c:	e000      	b.n	801cf40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801cf3e:	2300      	movs	r3, #0
}
 801cf40:	4618      	mov	r0, r3
 801cf42:	3714      	adds	r7, #20
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd90      	pop	{r4, r7, pc}
 801cf48:	08027e84 	.word	0x08027e84
 801cf4c:	08028394 	.word	0x08028394
 801cf50:	08027ec8 	.word	0x08027ec8

0801cf54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b084      	sub	sp, #16
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801cf5c:	e007      	b.n	801cf6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801cf64:	6878      	ldr	r0, [r7, #4]
 801cf66:	f000 f80a 	bl	801cf7e <tcp_seg_free>
    seg = next;
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d1f4      	bne.n	801cf5e <tcp_segs_free+0xa>
  }
}
 801cf74:	bf00      	nop
 801cf76:	bf00      	nop
 801cf78:	3710      	adds	r7, #16
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}

0801cf7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801cf7e:	b580      	push	{r7, lr}
 801cf80:	b082      	sub	sp, #8
 801cf82:	af00      	add	r7, sp, #0
 801cf84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d00c      	beq.n	801cfa6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	685b      	ldr	r3, [r3, #4]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d004      	beq.n	801cf9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	685b      	ldr	r3, [r3, #4]
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7fe fb6d 	bl	801b678 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801cf9e:	6879      	ldr	r1, [r7, #4]
 801cfa0:	2003      	movs	r0, #3
 801cfa2:	f7fd fcc5 	bl	801a930 <memp_free>
  }
}
 801cfa6:	bf00      	nop
 801cfa8:	3708      	adds	r7, #8
 801cfaa:	46bd      	mov	sp, r7
 801cfac:	bd80      	pop	{r7, pc}
	...

0801cfb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b084      	sub	sp, #16
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d106      	bne.n	801cfcc <tcp_seg_copy+0x1c>
 801cfbe:	4b0f      	ldr	r3, [pc, #60]	; (801cffc <tcp_seg_copy+0x4c>)
 801cfc0:	f240 6282 	movw	r2, #1666	; 0x682
 801cfc4:	490e      	ldr	r1, [pc, #56]	; (801d000 <tcp_seg_copy+0x50>)
 801cfc6:	480f      	ldr	r0, [pc, #60]	; (801d004 <tcp_seg_copy+0x54>)
 801cfc8:	f008 ff92 	bl	8025ef0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801cfcc:	2003      	movs	r0, #3
 801cfce:	f7fd fc5d 	bl	801a88c <memp_malloc>
 801cfd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d101      	bne.n	801cfde <tcp_seg_copy+0x2e>
    return NULL;
 801cfda:	2300      	movs	r3, #0
 801cfdc:	e00a      	b.n	801cff4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801cfde:	2210      	movs	r2, #16
 801cfe0:	6879      	ldr	r1, [r7, #4]
 801cfe2:	68f8      	ldr	r0, [r7, #12]
 801cfe4:	f008 fbd6 	bl	8025794 <memcpy>
  pbuf_ref(cseg->p);
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	685b      	ldr	r3, [r3, #4]
 801cfec:	4618      	mov	r0, r3
 801cfee:	f7fe fbe9 	bl	801b7c4 <pbuf_ref>
  return cseg;
 801cff2:	68fb      	ldr	r3, [r7, #12]
}
 801cff4:	4618      	mov	r0, r3
 801cff6:	3710      	adds	r7, #16
 801cff8:	46bd      	mov	sp, r7
 801cffa:	bd80      	pop	{r7, pc}
 801cffc:	08027e84 	.word	0x08027e84
 801d000:	080283d8 	.word	0x080283d8
 801d004:	08027ec8 	.word	0x08027ec8

0801d008 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801d008:	b580      	push	{r7, lr}
 801d00a:	b084      	sub	sp, #16
 801d00c:	af00      	add	r7, sp, #0
 801d00e:	60f8      	str	r0, [r7, #12]
 801d010:	60b9      	str	r1, [r7, #8]
 801d012:	607a      	str	r2, [r7, #4]
 801d014:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801d016:	68bb      	ldr	r3, [r7, #8]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d109      	bne.n	801d030 <tcp_recv_null+0x28>
 801d01c:	4b12      	ldr	r3, [pc, #72]	; (801d068 <tcp_recv_null+0x60>)
 801d01e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d022:	4912      	ldr	r1, [pc, #72]	; (801d06c <tcp_recv_null+0x64>)
 801d024:	4812      	ldr	r0, [pc, #72]	; (801d070 <tcp_recv_null+0x68>)
 801d026:	f008 ff63 	bl	8025ef0 <iprintf>
 801d02a:	f06f 030f 	mvn.w	r3, #15
 801d02e:	e016      	b.n	801d05e <tcp_recv_null+0x56>

  if (p != NULL) {
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	2b00      	cmp	r3, #0
 801d034:	d009      	beq.n	801d04a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801d036:	687b      	ldr	r3, [r7, #4]
 801d038:	891b      	ldrh	r3, [r3, #8]
 801d03a:	4619      	mov	r1, r3
 801d03c:	68b8      	ldr	r0, [r7, #8]
 801d03e:	f7ff fad3 	bl	801c5e8 <tcp_recved>
    pbuf_free(p);
 801d042:	6878      	ldr	r0, [r7, #4]
 801d044:	f7fe fb18 	bl	801b678 <pbuf_free>
 801d048:	e008      	b.n	801d05c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801d04a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d104      	bne.n	801d05c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801d052:	68b8      	ldr	r0, [r7, #8]
 801d054:	f7fe ffba 	bl	801bfcc <tcp_close>
 801d058:	4603      	mov	r3, r0
 801d05a:	e000      	b.n	801d05e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801d05c:	2300      	movs	r3, #0
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3710      	adds	r7, #16
 801d062:	46bd      	mov	sp, r7
 801d064:	bd80      	pop	{r7, pc}
 801d066:	bf00      	nop
 801d068:	08027e84 	.word	0x08027e84
 801d06c:	080283f4 	.word	0x080283f4
 801d070:	08027ec8 	.word	0x08027ec8

0801d074 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b086      	sub	sp, #24
 801d078:	af00      	add	r7, sp, #0
 801d07a:	4603      	mov	r3, r0
 801d07c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801d07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d082:	2b00      	cmp	r3, #0
 801d084:	db01      	blt.n	801d08a <tcp_kill_prio+0x16>
 801d086:	79fb      	ldrb	r3, [r7, #7]
 801d088:	e000      	b.n	801d08c <tcp_kill_prio+0x18>
 801d08a:	237f      	movs	r3, #127	; 0x7f
 801d08c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801d08e:	7afb      	ldrb	r3, [r7, #11]
 801d090:	2b00      	cmp	r3, #0
 801d092:	d034      	beq.n	801d0fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801d094:	7afb      	ldrb	r3, [r7, #11]
 801d096:	3b01      	subs	r3, #1
 801d098:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801d09a:	2300      	movs	r3, #0
 801d09c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801d09e:	2300      	movs	r3, #0
 801d0a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d0a2:	4b19      	ldr	r3, [pc, #100]	; (801d108 <tcp_kill_prio+0x94>)
 801d0a4:	681b      	ldr	r3, [r3, #0]
 801d0a6:	617b      	str	r3, [r7, #20]
 801d0a8:	e01f      	b.n	801d0ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801d0aa:	697b      	ldr	r3, [r7, #20]
 801d0ac:	7d5b      	ldrb	r3, [r3, #21]
 801d0ae:	7afa      	ldrb	r2, [r7, #11]
 801d0b0:	429a      	cmp	r2, r3
 801d0b2:	d80c      	bhi.n	801d0ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d0b4:	697b      	ldr	r3, [r7, #20]
 801d0b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801d0b8:	7afa      	ldrb	r2, [r7, #11]
 801d0ba:	429a      	cmp	r2, r3
 801d0bc:	d112      	bne.n	801d0e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801d0be:	4b13      	ldr	r3, [pc, #76]	; (801d10c <tcp_kill_prio+0x98>)
 801d0c0:	681a      	ldr	r2, [r3, #0]
 801d0c2:	697b      	ldr	r3, [r7, #20]
 801d0c4:	6a1b      	ldr	r3, [r3, #32]
 801d0c6:	1ad3      	subs	r3, r2, r3
 801d0c8:	68fa      	ldr	r2, [r7, #12]
 801d0ca:	429a      	cmp	r2, r3
 801d0cc:	d80a      	bhi.n	801d0e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801d0ce:	4b0f      	ldr	r3, [pc, #60]	; (801d10c <tcp_kill_prio+0x98>)
 801d0d0:	681a      	ldr	r2, [r3, #0]
 801d0d2:	697b      	ldr	r3, [r7, #20]
 801d0d4:	6a1b      	ldr	r3, [r3, #32]
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801d0da:	697b      	ldr	r3, [r7, #20]
 801d0dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801d0de:	697b      	ldr	r3, [r7, #20]
 801d0e0:	7d5b      	ldrb	r3, [r3, #21]
 801d0e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d0e4:	697b      	ldr	r3, [r7, #20]
 801d0e6:	68db      	ldr	r3, [r3, #12]
 801d0e8:	617b      	str	r3, [r7, #20]
 801d0ea:	697b      	ldr	r3, [r7, #20]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d1dc      	bne.n	801d0aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801d0f0:	693b      	ldr	r3, [r7, #16]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d004      	beq.n	801d100 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801d0f6:	6938      	ldr	r0, [r7, #16]
 801d0f8:	f7ff f8ae 	bl	801c258 <tcp_abort>
 801d0fc:	e000      	b.n	801d100 <tcp_kill_prio+0x8c>
    return;
 801d0fe:	bf00      	nop
  }
}
 801d100:	3718      	adds	r7, #24
 801d102:	46bd      	mov	sp, r7
 801d104:	bd80      	pop	{r7, pc}
 801d106:	bf00      	nop
 801d108:	200102b4 	.word	0x200102b4
 801d10c:	200102b8 	.word	0x200102b8

0801d110 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b086      	sub	sp, #24
 801d114:	af00      	add	r7, sp, #0
 801d116:	4603      	mov	r3, r0
 801d118:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801d11a:	79fb      	ldrb	r3, [r7, #7]
 801d11c:	2b08      	cmp	r3, #8
 801d11e:	d009      	beq.n	801d134 <tcp_kill_state+0x24>
 801d120:	79fb      	ldrb	r3, [r7, #7]
 801d122:	2b09      	cmp	r3, #9
 801d124:	d006      	beq.n	801d134 <tcp_kill_state+0x24>
 801d126:	4b1a      	ldr	r3, [pc, #104]	; (801d190 <tcp_kill_state+0x80>)
 801d128:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801d12c:	4919      	ldr	r1, [pc, #100]	; (801d194 <tcp_kill_state+0x84>)
 801d12e:	481a      	ldr	r0, [pc, #104]	; (801d198 <tcp_kill_state+0x88>)
 801d130:	f008 fede 	bl	8025ef0 <iprintf>

  inactivity = 0;
 801d134:	2300      	movs	r3, #0
 801d136:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801d138:	2300      	movs	r3, #0
 801d13a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d13c:	4b17      	ldr	r3, [pc, #92]	; (801d19c <tcp_kill_state+0x8c>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	617b      	str	r3, [r7, #20]
 801d142:	e017      	b.n	801d174 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	7d1b      	ldrb	r3, [r3, #20]
 801d148:	79fa      	ldrb	r2, [r7, #7]
 801d14a:	429a      	cmp	r2, r3
 801d14c:	d10f      	bne.n	801d16e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d14e:	4b14      	ldr	r3, [pc, #80]	; (801d1a0 <tcp_kill_state+0x90>)
 801d150:	681a      	ldr	r2, [r3, #0]
 801d152:	697b      	ldr	r3, [r7, #20]
 801d154:	6a1b      	ldr	r3, [r3, #32]
 801d156:	1ad3      	subs	r3, r2, r3
 801d158:	68fa      	ldr	r2, [r7, #12]
 801d15a:	429a      	cmp	r2, r3
 801d15c:	d807      	bhi.n	801d16e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801d15e:	4b10      	ldr	r3, [pc, #64]	; (801d1a0 <tcp_kill_state+0x90>)
 801d160:	681a      	ldr	r2, [r3, #0]
 801d162:	697b      	ldr	r3, [r7, #20]
 801d164:	6a1b      	ldr	r3, [r3, #32]
 801d166:	1ad3      	subs	r3, r2, r3
 801d168:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801d16a:	697b      	ldr	r3, [r7, #20]
 801d16c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d16e:	697b      	ldr	r3, [r7, #20]
 801d170:	68db      	ldr	r3, [r3, #12]
 801d172:	617b      	str	r3, [r7, #20]
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	2b00      	cmp	r3, #0
 801d178:	d1e4      	bne.n	801d144 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801d17a:	693b      	ldr	r3, [r7, #16]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d003      	beq.n	801d188 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801d180:	2100      	movs	r1, #0
 801d182:	6938      	ldr	r0, [r7, #16]
 801d184:	f7fe ffaa 	bl	801c0dc <tcp_abandon>
  }
}
 801d188:	bf00      	nop
 801d18a:	3718      	adds	r7, #24
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bd80      	pop	{r7, pc}
 801d190:	08027e84 	.word	0x08027e84
 801d194:	08028410 	.word	0x08028410
 801d198:	08027ec8 	.word	0x08027ec8
 801d19c:	200102b4 	.word	0x200102b4
 801d1a0:	200102b8 	.word	0x200102b8

0801d1a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801d1a4:	b580      	push	{r7, lr}
 801d1a6:	b084      	sub	sp, #16
 801d1a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1b2:	4b12      	ldr	r3, [pc, #72]	; (801d1fc <tcp_kill_timewait+0x58>)
 801d1b4:	681b      	ldr	r3, [r3, #0]
 801d1b6:	60fb      	str	r3, [r7, #12]
 801d1b8:	e012      	b.n	801d1e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801d1ba:	4b11      	ldr	r3, [pc, #68]	; (801d200 <tcp_kill_timewait+0x5c>)
 801d1bc:	681a      	ldr	r2, [r3, #0]
 801d1be:	68fb      	ldr	r3, [r7, #12]
 801d1c0:	6a1b      	ldr	r3, [r3, #32]
 801d1c2:	1ad3      	subs	r3, r2, r3
 801d1c4:	687a      	ldr	r2, [r7, #4]
 801d1c6:	429a      	cmp	r2, r3
 801d1c8:	d807      	bhi.n	801d1da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801d1ca:	4b0d      	ldr	r3, [pc, #52]	; (801d200 <tcp_kill_timewait+0x5c>)
 801d1cc:	681a      	ldr	r2, [r3, #0]
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	6a1b      	ldr	r3, [r3, #32]
 801d1d2:	1ad3      	subs	r3, r2, r3
 801d1d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d1da:	68fb      	ldr	r3, [r7, #12]
 801d1dc:	68db      	ldr	r3, [r3, #12]
 801d1de:	60fb      	str	r3, [r7, #12]
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d1e9      	bne.n	801d1ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801d1e6:	68bb      	ldr	r3, [r7, #8]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d002      	beq.n	801d1f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801d1ec:	68b8      	ldr	r0, [r7, #8]
 801d1ee:	f7ff f833 	bl	801c258 <tcp_abort>
  }
}
 801d1f2:	bf00      	nop
 801d1f4:	3710      	adds	r7, #16
 801d1f6:	46bd      	mov	sp, r7
 801d1f8:	bd80      	pop	{r7, pc}
 801d1fa:	bf00      	nop
 801d1fc:	200102c4 	.word	0x200102c4
 801d200:	200102b8 	.word	0x200102b8

0801d204 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801d20a:	4b10      	ldr	r3, [pc, #64]	; (801d24c <tcp_handle_closepend+0x48>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801d210:	e014      	b.n	801d23c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	68db      	ldr	r3, [r3, #12]
 801d216:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	8b5b      	ldrh	r3, [r3, #26]
 801d21c:	f003 0308 	and.w	r3, r3, #8
 801d220:	2b00      	cmp	r3, #0
 801d222:	d009      	beq.n	801d238 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	8b5b      	ldrh	r3, [r3, #26]
 801d228:	f023 0308 	bic.w	r3, r3, #8
 801d22c:	b29a      	uxth	r2, r3
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801d232:	6878      	ldr	r0, [r7, #4]
 801d234:	f7fe fe60 	bl	801bef8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801d238:	683b      	ldr	r3, [r7, #0]
 801d23a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d1e7      	bne.n	801d212 <tcp_handle_closepend+0xe>
  }
}
 801d242:	bf00      	nop
 801d244:	bf00      	nop
 801d246:	3708      	adds	r7, #8
 801d248:	46bd      	mov	sp, r7
 801d24a:	bd80      	pop	{r7, pc}
 801d24c:	200102b4 	.word	0x200102b4

0801d250 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801d250:	b580      	push	{r7, lr}
 801d252:	b084      	sub	sp, #16
 801d254:	af00      	add	r7, sp, #0
 801d256:	4603      	mov	r3, r0
 801d258:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d25a:	2001      	movs	r0, #1
 801d25c:	f7fd fb16 	bl	801a88c <memp_malloc>
 801d260:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d126      	bne.n	801d2b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801d268:	f7ff ffcc 	bl	801d204 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801d26c:	f7ff ff9a 	bl	801d1a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d270:	2001      	movs	r0, #1
 801d272:	f7fd fb0b 	bl	801a88c <memp_malloc>
 801d276:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801d278:	68fb      	ldr	r3, [r7, #12]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d11b      	bne.n	801d2b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801d27e:	2009      	movs	r0, #9
 801d280:	f7ff ff46 	bl	801d110 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d284:	2001      	movs	r0, #1
 801d286:	f7fd fb01 	bl	801a88c <memp_malloc>
 801d28a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801d28c:	68fb      	ldr	r3, [r7, #12]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d111      	bne.n	801d2b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801d292:	2008      	movs	r0, #8
 801d294:	f7ff ff3c 	bl	801d110 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d298:	2001      	movs	r0, #1
 801d29a:	f7fd faf7 	bl	801a88c <memp_malloc>
 801d29e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801d2a0:	68fb      	ldr	r3, [r7, #12]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d107      	bne.n	801d2b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801d2a6:	79fb      	ldrb	r3, [r7, #7]
 801d2a8:	4618      	mov	r0, r3
 801d2aa:	f7ff fee3 	bl	801d074 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801d2ae:	2001      	movs	r0, #1
 801d2b0:	f7fd faec 	bl	801a88c <memp_malloc>
 801d2b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d03f      	beq.n	801d33c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801d2bc:	229c      	movs	r2, #156	; 0x9c
 801d2be:	2100      	movs	r1, #0
 801d2c0:	68f8      	ldr	r0, [r7, #12]
 801d2c2:	f008 fa75 	bl	80257b0 <memset>
    pcb->prio = prio;
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	79fa      	ldrb	r2, [r7, #7]
 801d2ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801d2d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801d2d6:	68fb      	ldr	r3, [r7, #12]
 801d2d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801d2dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d2e2:	68fb      	ldr	r3, [r7, #12]
 801d2e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801d2e6:	68fb      	ldr	r3, [r7, #12]
 801d2e8:	22ff      	movs	r2, #255	; 0xff
 801d2ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801d2ec:	68fb      	ldr	r3, [r7, #12]
 801d2ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d2f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801d2f4:	68fb      	ldr	r3, [r7, #12]
 801d2f6:	2206      	movs	r2, #6
 801d2f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	2206      	movs	r2, #6
 801d300:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801d302:	68fb      	ldr	r3, [r7, #12]
 801d304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d308:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	2201      	movs	r2, #1
 801d30e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801d312:	4b0d      	ldr	r3, [pc, #52]	; (801d348 <tcp_alloc+0xf8>)
 801d314:	681a      	ldr	r2, [r3, #0]
 801d316:	68fb      	ldr	r3, [r7, #12]
 801d318:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801d31a:	4b0c      	ldr	r3, [pc, #48]	; (801d34c <tcp_alloc+0xfc>)
 801d31c:	781a      	ldrb	r2, [r3, #0]
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801d328:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	4a08      	ldr	r2, [pc, #32]	; (801d350 <tcp_alloc+0x100>)
 801d330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	4a07      	ldr	r2, [pc, #28]	; (801d354 <tcp_alloc+0x104>)
 801d338:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801d33c:	68fb      	ldr	r3, [r7, #12]
}
 801d33e:	4618      	mov	r0, r3
 801d340:	3710      	adds	r7, #16
 801d342:	46bd      	mov	sp, r7
 801d344:	bd80      	pop	{r7, pc}
 801d346:	bf00      	nop
 801d348:	200102b8 	.word	0x200102b8
 801d34c:	20008736 	.word	0x20008736
 801d350:	0801d009 	.word	0x0801d009
 801d354:	006ddd00 	.word	0x006ddd00

0801d358 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b084      	sub	sp, #16
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	4603      	mov	r3, r0
 801d360:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801d362:	2040      	movs	r0, #64	; 0x40
 801d364:	f7ff ff74 	bl	801d250 <tcp_alloc>
 801d368:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d36a:	68fb      	ldr	r3, [r7, #12]
}
 801d36c:	4618      	mov	r0, r3
 801d36e:	3710      	adds	r7, #16
 801d370:	46bd      	mov	sp, r7
 801d372:	bd80      	pop	{r7, pc}

0801d374 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801d374:	b480      	push	{r7}
 801d376:	b083      	sub	sp, #12
 801d378:	af00      	add	r7, sp, #0
 801d37a:	6078      	str	r0, [r7, #4]
 801d37c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d002      	beq.n	801d38a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	683a      	ldr	r2, [r7, #0]
 801d388:	611a      	str	r2, [r3, #16]
  }
}
 801d38a:	bf00      	nop
 801d38c:	370c      	adds	r7, #12
 801d38e:	46bd      	mov	sp, r7
 801d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d394:	4770      	bx	lr
	...

0801d398 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801d398:	b580      	push	{r7, lr}
 801d39a:	b082      	sub	sp, #8
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
 801d3a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d00e      	beq.n	801d3c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	7d1b      	ldrb	r3, [r3, #20]
 801d3ac:	2b01      	cmp	r3, #1
 801d3ae:	d106      	bne.n	801d3be <tcp_recv+0x26>
 801d3b0:	4b07      	ldr	r3, [pc, #28]	; (801d3d0 <tcp_recv+0x38>)
 801d3b2:	f240 72df 	movw	r2, #2015	; 0x7df
 801d3b6:	4907      	ldr	r1, [pc, #28]	; (801d3d4 <tcp_recv+0x3c>)
 801d3b8:	4807      	ldr	r0, [pc, #28]	; (801d3d8 <tcp_recv+0x40>)
 801d3ba:	f008 fd99 	bl	8025ef0 <iprintf>
    pcb->recv = recv;
 801d3be:	687b      	ldr	r3, [r7, #4]
 801d3c0:	683a      	ldr	r2, [r7, #0]
 801d3c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801d3c6:	bf00      	nop
 801d3c8:	3708      	adds	r7, #8
 801d3ca:	46bd      	mov	sp, r7
 801d3cc:	bd80      	pop	{r7, pc}
 801d3ce:	bf00      	nop
 801d3d0:	08027e84 	.word	0x08027e84
 801d3d4:	08028420 	.word	0x08028420
 801d3d8:	08027ec8 	.word	0x08027ec8

0801d3dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b082      	sub	sp, #8
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
 801d3e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d00e      	beq.n	801d40a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	7d1b      	ldrb	r3, [r3, #20]
 801d3f0:	2b01      	cmp	r3, #1
 801d3f2:	d106      	bne.n	801d402 <tcp_sent+0x26>
 801d3f4:	4b07      	ldr	r3, [pc, #28]	; (801d414 <tcp_sent+0x38>)
 801d3f6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801d3fa:	4907      	ldr	r1, [pc, #28]	; (801d418 <tcp_sent+0x3c>)
 801d3fc:	4807      	ldr	r0, [pc, #28]	; (801d41c <tcp_sent+0x40>)
 801d3fe:	f008 fd77 	bl	8025ef0 <iprintf>
    pcb->sent = sent;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	683a      	ldr	r2, [r7, #0]
 801d406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801d40a:	bf00      	nop
 801d40c:	3708      	adds	r7, #8
 801d40e:	46bd      	mov	sp, r7
 801d410:	bd80      	pop	{r7, pc}
 801d412:	bf00      	nop
 801d414:	08027e84 	.word	0x08027e84
 801d418:	08028448 	.word	0x08028448
 801d41c:	08027ec8 	.word	0x08027ec8

0801d420 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801d420:	b580      	push	{r7, lr}
 801d422:	b082      	sub	sp, #8
 801d424:	af00      	add	r7, sp, #0
 801d426:	6078      	str	r0, [r7, #4]
 801d428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	d00e      	beq.n	801d44e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	7d1b      	ldrb	r3, [r3, #20]
 801d434:	2b01      	cmp	r3, #1
 801d436:	d106      	bne.n	801d446 <tcp_err+0x26>
 801d438:	4b07      	ldr	r3, [pc, #28]	; (801d458 <tcp_err+0x38>)
 801d43a:	f640 020d 	movw	r2, #2061	; 0x80d
 801d43e:	4907      	ldr	r1, [pc, #28]	; (801d45c <tcp_err+0x3c>)
 801d440:	4807      	ldr	r0, [pc, #28]	; (801d460 <tcp_err+0x40>)
 801d442:	f008 fd55 	bl	8025ef0 <iprintf>
    pcb->errf = err;
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	683a      	ldr	r2, [r7, #0]
 801d44a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801d44e:	bf00      	nop
 801d450:	3708      	adds	r7, #8
 801d452:	46bd      	mov	sp, r7
 801d454:	bd80      	pop	{r7, pc}
 801d456:	bf00      	nop
 801d458:	08027e84 	.word	0x08027e84
 801d45c:	08028470 	.word	0x08028470
 801d460:	08027ec8 	.word	0x08027ec8

0801d464 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801d464:	b480      	push	{r7}
 801d466:	b085      	sub	sp, #20
 801d468:	af00      	add	r7, sp, #0
 801d46a:	6078      	str	r0, [r7, #4]
 801d46c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d008      	beq.n	801d486 <tcp_accept+0x22>
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	7d1b      	ldrb	r3, [r3, #20]
 801d478:	2b01      	cmp	r3, #1
 801d47a:	d104      	bne.n	801d486 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	683a      	ldr	r2, [r7, #0]
 801d484:	619a      	str	r2, [r3, #24]
  }
}
 801d486:	bf00      	nop
 801d488:	3714      	adds	r7, #20
 801d48a:	46bd      	mov	sp, r7
 801d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d490:	4770      	bx	lr
	...

0801d494 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801d494:	b580      	push	{r7, lr}
 801d496:	b084      	sub	sp, #16
 801d498:	af00      	add	r7, sp, #0
 801d49a:	60f8      	str	r0, [r7, #12]
 801d49c:	60b9      	str	r1, [r7, #8]
 801d49e:	4613      	mov	r3, r2
 801d4a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d107      	bne.n	801d4b8 <tcp_poll+0x24>
 801d4a8:	4b0e      	ldr	r3, [pc, #56]	; (801d4e4 <tcp_poll+0x50>)
 801d4aa:	f640 023d 	movw	r2, #2109	; 0x83d
 801d4ae:	490e      	ldr	r1, [pc, #56]	; (801d4e8 <tcp_poll+0x54>)
 801d4b0:	480e      	ldr	r0, [pc, #56]	; (801d4ec <tcp_poll+0x58>)
 801d4b2:	f008 fd1d 	bl	8025ef0 <iprintf>
 801d4b6:	e011      	b.n	801d4dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	7d1b      	ldrb	r3, [r3, #20]
 801d4bc:	2b01      	cmp	r3, #1
 801d4be:	d106      	bne.n	801d4ce <tcp_poll+0x3a>
 801d4c0:	4b08      	ldr	r3, [pc, #32]	; (801d4e4 <tcp_poll+0x50>)
 801d4c2:	f640 023e 	movw	r2, #2110	; 0x83e
 801d4c6:	490a      	ldr	r1, [pc, #40]	; (801d4f0 <tcp_poll+0x5c>)
 801d4c8:	4808      	ldr	r0, [pc, #32]	; (801d4ec <tcp_poll+0x58>)
 801d4ca:	f008 fd11 	bl	8025ef0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	68ba      	ldr	r2, [r7, #8]
 801d4d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	79fa      	ldrb	r2, [r7, #7]
 801d4da:	775a      	strb	r2, [r3, #29]
}
 801d4dc:	3710      	adds	r7, #16
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd80      	pop	{r7, pc}
 801d4e2:	bf00      	nop
 801d4e4:	08027e84 	.word	0x08027e84
 801d4e8:	08028498 	.word	0x08028498
 801d4ec:	08027ec8 	.word	0x08027ec8
 801d4f0:	080284b0 	.word	0x080284b0

0801d4f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801d4f4:	b580      	push	{r7, lr}
 801d4f6:	b082      	sub	sp, #8
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	2b00      	cmp	r3, #0
 801d500:	d107      	bne.n	801d512 <tcp_pcb_purge+0x1e>
 801d502:	4b21      	ldr	r3, [pc, #132]	; (801d588 <tcp_pcb_purge+0x94>)
 801d504:	f640 0251 	movw	r2, #2129	; 0x851
 801d508:	4920      	ldr	r1, [pc, #128]	; (801d58c <tcp_pcb_purge+0x98>)
 801d50a:	4821      	ldr	r0, [pc, #132]	; (801d590 <tcp_pcb_purge+0x9c>)
 801d50c:	f008 fcf0 	bl	8025ef0 <iprintf>
 801d510:	e037      	b.n	801d582 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	7d1b      	ldrb	r3, [r3, #20]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d033      	beq.n	801d582 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801d51e:	2b0a      	cmp	r3, #10
 801d520:	d02f      	beq.n	801d582 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801d526:	2b01      	cmp	r3, #1
 801d528:	d02b      	beq.n	801d582 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d007      	beq.n	801d542 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d536:	4618      	mov	r0, r3
 801d538:	f7fe f89e 	bl	801b678 <pbuf_free>
      pcb->refused_data = NULL;
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	2200      	movs	r2, #0
 801d540:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d546:	2b00      	cmp	r3, #0
 801d548:	d002      	beq.n	801d550 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801d54a:	6878      	ldr	r0, [r7, #4]
 801d54c:	f000 f986 	bl	801d85c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d556:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d55c:	4618      	mov	r0, r3
 801d55e:	f7ff fcf9 	bl	801cf54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d566:	4618      	mov	r0, r3
 801d568:	f7ff fcf4 	bl	801cf54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	2200      	movs	r2, #0
 801d570:	66da      	str	r2, [r3, #108]	; 0x6c
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d576:	687b      	ldr	r3, [r7, #4]
 801d578:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	2200      	movs	r2, #0
 801d57e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801d582:	3708      	adds	r7, #8
 801d584:	46bd      	mov	sp, r7
 801d586:	bd80      	pop	{r7, pc}
 801d588:	08027e84 	.word	0x08027e84
 801d58c:	080284d0 	.word	0x080284d0
 801d590:	08027ec8 	.word	0x08027ec8

0801d594 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b084      	sub	sp, #16
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
 801d59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801d59e:	683b      	ldr	r3, [r7, #0]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d106      	bne.n	801d5b2 <tcp_pcb_remove+0x1e>
 801d5a4:	4b3e      	ldr	r3, [pc, #248]	; (801d6a0 <tcp_pcb_remove+0x10c>)
 801d5a6:	f640 0283 	movw	r2, #2179	; 0x883
 801d5aa:	493e      	ldr	r1, [pc, #248]	; (801d6a4 <tcp_pcb_remove+0x110>)
 801d5ac:	483e      	ldr	r0, [pc, #248]	; (801d6a8 <tcp_pcb_remove+0x114>)
 801d5ae:	f008 fc9f 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d106      	bne.n	801d5c6 <tcp_pcb_remove+0x32>
 801d5b8:	4b39      	ldr	r3, [pc, #228]	; (801d6a0 <tcp_pcb_remove+0x10c>)
 801d5ba:	f640 0284 	movw	r2, #2180	; 0x884
 801d5be:	493b      	ldr	r1, [pc, #236]	; (801d6ac <tcp_pcb_remove+0x118>)
 801d5c0:	4839      	ldr	r0, [pc, #228]	; (801d6a8 <tcp_pcb_remove+0x114>)
 801d5c2:	f008 fc95 	bl	8025ef0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	681b      	ldr	r3, [r3, #0]
 801d5ca:	683a      	ldr	r2, [r7, #0]
 801d5cc:	429a      	cmp	r2, r3
 801d5ce:	d105      	bne.n	801d5dc <tcp_pcb_remove+0x48>
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	68da      	ldr	r2, [r3, #12]
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	601a      	str	r2, [r3, #0]
 801d5da:	e013      	b.n	801d604 <tcp_pcb_remove+0x70>
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	60fb      	str	r3, [r7, #12]
 801d5e2:	e00c      	b.n	801d5fe <tcp_pcb_remove+0x6a>
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	68db      	ldr	r3, [r3, #12]
 801d5e8:	683a      	ldr	r2, [r7, #0]
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d104      	bne.n	801d5f8 <tcp_pcb_remove+0x64>
 801d5ee:	683b      	ldr	r3, [r7, #0]
 801d5f0:	68da      	ldr	r2, [r3, #12]
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	60da      	str	r2, [r3, #12]
 801d5f6:	e005      	b.n	801d604 <tcp_pcb_remove+0x70>
 801d5f8:	68fb      	ldr	r3, [r7, #12]
 801d5fa:	68db      	ldr	r3, [r3, #12]
 801d5fc:	60fb      	str	r3, [r7, #12]
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d1ef      	bne.n	801d5e4 <tcp_pcb_remove+0x50>
 801d604:	683b      	ldr	r3, [r7, #0]
 801d606:	2200      	movs	r2, #0
 801d608:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801d60a:	6838      	ldr	r0, [r7, #0]
 801d60c:	f7ff ff72 	bl	801d4f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801d610:	683b      	ldr	r3, [r7, #0]
 801d612:	7d1b      	ldrb	r3, [r3, #20]
 801d614:	2b0a      	cmp	r3, #10
 801d616:	d013      	beq.n	801d640 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801d618:	683b      	ldr	r3, [r7, #0]
 801d61a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801d61c:	2b01      	cmp	r3, #1
 801d61e:	d00f      	beq.n	801d640 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801d620:	683b      	ldr	r3, [r7, #0]
 801d622:	8b5b      	ldrh	r3, [r3, #26]
 801d624:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d009      	beq.n	801d640 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801d62c:	683b      	ldr	r3, [r7, #0]
 801d62e:	8b5b      	ldrh	r3, [r3, #26]
 801d630:	f043 0302 	orr.w	r3, r3, #2
 801d634:	b29a      	uxth	r2, r3
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d63a:	6838      	ldr	r0, [r7, #0]
 801d63c:	f003 fbc2 	bl	8020dc4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801d640:	683b      	ldr	r3, [r7, #0]
 801d642:	7d1b      	ldrb	r3, [r3, #20]
 801d644:	2b01      	cmp	r3, #1
 801d646:	d020      	beq.n	801d68a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801d648:	683b      	ldr	r3, [r7, #0]
 801d64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d006      	beq.n	801d65e <tcp_pcb_remove+0xca>
 801d650:	4b13      	ldr	r3, [pc, #76]	; (801d6a0 <tcp_pcb_remove+0x10c>)
 801d652:	f640 0293 	movw	r2, #2195	; 0x893
 801d656:	4916      	ldr	r1, [pc, #88]	; (801d6b0 <tcp_pcb_remove+0x11c>)
 801d658:	4813      	ldr	r0, [pc, #76]	; (801d6a8 <tcp_pcb_remove+0x114>)
 801d65a:	f008 fc49 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801d65e:	683b      	ldr	r3, [r7, #0]
 801d660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d662:	2b00      	cmp	r3, #0
 801d664:	d006      	beq.n	801d674 <tcp_pcb_remove+0xe0>
 801d666:	4b0e      	ldr	r3, [pc, #56]	; (801d6a0 <tcp_pcb_remove+0x10c>)
 801d668:	f640 0294 	movw	r2, #2196	; 0x894
 801d66c:	4911      	ldr	r1, [pc, #68]	; (801d6b4 <tcp_pcb_remove+0x120>)
 801d66e:	480e      	ldr	r0, [pc, #56]	; (801d6a8 <tcp_pcb_remove+0x114>)
 801d670:	f008 fc3e 	bl	8025ef0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801d674:	683b      	ldr	r3, [r7, #0]
 801d676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d006      	beq.n	801d68a <tcp_pcb_remove+0xf6>
 801d67c:	4b08      	ldr	r3, [pc, #32]	; (801d6a0 <tcp_pcb_remove+0x10c>)
 801d67e:	f640 0296 	movw	r2, #2198	; 0x896
 801d682:	490d      	ldr	r1, [pc, #52]	; (801d6b8 <tcp_pcb_remove+0x124>)
 801d684:	4808      	ldr	r0, [pc, #32]	; (801d6a8 <tcp_pcb_remove+0x114>)
 801d686:	f008 fc33 	bl	8025ef0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801d68a:	683b      	ldr	r3, [r7, #0]
 801d68c:	2200      	movs	r2, #0
 801d68e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801d690:	683b      	ldr	r3, [r7, #0]
 801d692:	2200      	movs	r2, #0
 801d694:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801d696:	bf00      	nop
 801d698:	3710      	adds	r7, #16
 801d69a:	46bd      	mov	sp, r7
 801d69c:	bd80      	pop	{r7, pc}
 801d69e:	bf00      	nop
 801d6a0:	08027e84 	.word	0x08027e84
 801d6a4:	080284ec 	.word	0x080284ec
 801d6a8:	08027ec8 	.word	0x08027ec8
 801d6ac:	08028508 	.word	0x08028508
 801d6b0:	08028528 	.word	0x08028528
 801d6b4:	08028540 	.word	0x08028540
 801d6b8:	0802855c 	.word	0x0802855c

0801d6bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b082      	sub	sp, #8
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d106      	bne.n	801d6d8 <tcp_next_iss+0x1c>
 801d6ca:	4b0a      	ldr	r3, [pc, #40]	; (801d6f4 <tcp_next_iss+0x38>)
 801d6cc:	f640 02af 	movw	r2, #2223	; 0x8af
 801d6d0:	4909      	ldr	r1, [pc, #36]	; (801d6f8 <tcp_next_iss+0x3c>)
 801d6d2:	480a      	ldr	r0, [pc, #40]	; (801d6fc <tcp_next_iss+0x40>)
 801d6d4:	f008 fc0c 	bl	8025ef0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801d6d8:	4b09      	ldr	r3, [pc, #36]	; (801d700 <tcp_next_iss+0x44>)
 801d6da:	681a      	ldr	r2, [r3, #0]
 801d6dc:	4b09      	ldr	r3, [pc, #36]	; (801d704 <tcp_next_iss+0x48>)
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	4413      	add	r3, r2
 801d6e2:	4a07      	ldr	r2, [pc, #28]	; (801d700 <tcp_next_iss+0x44>)
 801d6e4:	6013      	str	r3, [r2, #0]
  return iss;
 801d6e6:	4b06      	ldr	r3, [pc, #24]	; (801d700 <tcp_next_iss+0x44>)
 801d6e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3708      	adds	r7, #8
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}
 801d6f2:	bf00      	nop
 801d6f4:	08027e84 	.word	0x08027e84
 801d6f8:	08028574 	.word	0x08028574
 801d6fc:	08027ec8 	.word	0x08027ec8
 801d700:	20000068 	.word	0x20000068
 801d704:	200102b8 	.word	0x200102b8

0801d708 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801d708:	b580      	push	{r7, lr}
 801d70a:	b086      	sub	sp, #24
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	4603      	mov	r3, r0
 801d710:	60b9      	str	r1, [r7, #8]
 801d712:	607a      	str	r2, [r7, #4]
 801d714:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d106      	bne.n	801d72a <tcp_eff_send_mss_netif+0x22>
 801d71c:	4b14      	ldr	r3, [pc, #80]	; (801d770 <tcp_eff_send_mss_netif+0x68>)
 801d71e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801d722:	4914      	ldr	r1, [pc, #80]	; (801d774 <tcp_eff_send_mss_netif+0x6c>)
 801d724:	4814      	ldr	r0, [pc, #80]	; (801d778 <tcp_eff_send_mss_netif+0x70>)
 801d726:	f008 fbe3 	bl	8025ef0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801d72a:	68bb      	ldr	r3, [r7, #8]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d101      	bne.n	801d734 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801d730:	89fb      	ldrh	r3, [r7, #14]
 801d732:	e019      	b.n	801d768 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d738:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801d73a:	8afb      	ldrh	r3, [r7, #22]
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d012      	beq.n	801d766 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801d740:	2328      	movs	r3, #40	; 0x28
 801d742:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801d744:	8afa      	ldrh	r2, [r7, #22]
 801d746:	8abb      	ldrh	r3, [r7, #20]
 801d748:	429a      	cmp	r2, r3
 801d74a:	d904      	bls.n	801d756 <tcp_eff_send_mss_netif+0x4e>
 801d74c:	8afa      	ldrh	r2, [r7, #22]
 801d74e:	8abb      	ldrh	r3, [r7, #20]
 801d750:	1ad3      	subs	r3, r2, r3
 801d752:	b29b      	uxth	r3, r3
 801d754:	e000      	b.n	801d758 <tcp_eff_send_mss_netif+0x50>
 801d756:	2300      	movs	r3, #0
 801d758:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801d75a:	8a7a      	ldrh	r2, [r7, #18]
 801d75c:	89fb      	ldrh	r3, [r7, #14]
 801d75e:	4293      	cmp	r3, r2
 801d760:	bf28      	it	cs
 801d762:	4613      	movcs	r3, r2
 801d764:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801d766:	89fb      	ldrh	r3, [r7, #14]
}
 801d768:	4618      	mov	r0, r3
 801d76a:	3718      	adds	r7, #24
 801d76c:	46bd      	mov	sp, r7
 801d76e:	bd80      	pop	{r7, pc}
 801d770:	08027e84 	.word	0x08027e84
 801d774:	08028590 	.word	0x08028590
 801d778:	08027ec8 	.word	0x08027ec8

0801d77c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b084      	sub	sp, #16
 801d780:	af00      	add	r7, sp, #0
 801d782:	6078      	str	r0, [r7, #4]
 801d784:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d119      	bne.n	801d7c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801d790:	4b10      	ldr	r3, [pc, #64]	; (801d7d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801d792:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801d796:	4910      	ldr	r1, [pc, #64]	; (801d7d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801d798:	4810      	ldr	r0, [pc, #64]	; (801d7dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801d79a:	f008 fba9 	bl	8025ef0 <iprintf>

  while (pcb != NULL) {
 801d79e:	e011      	b.n	801d7c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	681a      	ldr	r2, [r3, #0]
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	429a      	cmp	r2, r3
 801d7aa:	d108      	bne.n	801d7be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801d7ac:	68fb      	ldr	r3, [r7, #12]
 801d7ae:	68db      	ldr	r3, [r3, #12]
 801d7b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801d7b2:	68f8      	ldr	r0, [r7, #12]
 801d7b4:	f7fe fd50 	bl	801c258 <tcp_abort>
      pcb = next;
 801d7b8:	68bb      	ldr	r3, [r7, #8]
 801d7ba:	60fb      	str	r3, [r7, #12]
 801d7bc:	e002      	b.n	801d7c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801d7be:	68fb      	ldr	r3, [r7, #12]
 801d7c0:	68db      	ldr	r3, [r3, #12]
 801d7c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d1ea      	bne.n	801d7a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801d7ca:	bf00      	nop
 801d7cc:	bf00      	nop
 801d7ce:	3710      	adds	r7, #16
 801d7d0:	46bd      	mov	sp, r7
 801d7d2:	bd80      	pop	{r7, pc}
 801d7d4:	08027e84 	.word	0x08027e84
 801d7d8:	080285b8 	.word	0x080285b8
 801d7dc:	08027ec8 	.word	0x08027ec8

0801d7e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d7e0:	b580      	push	{r7, lr}
 801d7e2:	b084      	sub	sp, #16
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	6078      	str	r0, [r7, #4]
 801d7e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d02a      	beq.n	801d846 <tcp_netif_ip_addr_changed+0x66>
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	2b00      	cmp	r3, #0
 801d7f6:	d026      	beq.n	801d846 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801d7f8:	4b15      	ldr	r3, [pc, #84]	; (801d850 <tcp_netif_ip_addr_changed+0x70>)
 801d7fa:	681b      	ldr	r3, [r3, #0]
 801d7fc:	4619      	mov	r1, r3
 801d7fe:	6878      	ldr	r0, [r7, #4]
 801d800:	f7ff ffbc 	bl	801d77c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801d804:	4b13      	ldr	r3, [pc, #76]	; (801d854 <tcp_netif_ip_addr_changed+0x74>)
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	4619      	mov	r1, r3
 801d80a:	6878      	ldr	r0, [r7, #4]
 801d80c:	f7ff ffb6 	bl	801d77c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801d810:	683b      	ldr	r3, [r7, #0]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d017      	beq.n	801d846 <tcp_netif_ip_addr_changed+0x66>
 801d816:	683b      	ldr	r3, [r7, #0]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d013      	beq.n	801d846 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d81e:	4b0e      	ldr	r3, [pc, #56]	; (801d858 <tcp_netif_ip_addr_changed+0x78>)
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	60fb      	str	r3, [r7, #12]
 801d824:	e00c      	b.n	801d840 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681a      	ldr	r2, [r3, #0]
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	429a      	cmp	r2, r3
 801d830:	d103      	bne.n	801d83a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801d832:	683b      	ldr	r3, [r7, #0]
 801d834:	681a      	ldr	r2, [r3, #0]
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	68db      	ldr	r3, [r3, #12]
 801d83e:	60fb      	str	r3, [r7, #12]
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d1ef      	bne.n	801d826 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801d846:	bf00      	nop
 801d848:	3710      	adds	r7, #16
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
 801d84e:	bf00      	nop
 801d850:	200102b4 	.word	0x200102b4
 801d854:	200102c0 	.word	0x200102c0
 801d858:	200102bc 	.word	0x200102bc

0801d85c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b082      	sub	sp, #8
 801d860:	af00      	add	r7, sp, #0
 801d862:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d007      	beq.n	801d87c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d870:	4618      	mov	r0, r3
 801d872:	f7ff fb6f 	bl	801cf54 <tcp_segs_free>
    pcb->ooseq = NULL;
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	2200      	movs	r2, #0
 801d87a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801d87c:	bf00      	nop
 801d87e:	3708      	adds	r7, #8
 801d880:	46bd      	mov	sp, r7
 801d882:	bd80      	pop	{r7, pc}

0801d884 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801d884:	b590      	push	{r4, r7, lr}
 801d886:	b08d      	sub	sp, #52	; 0x34
 801d888:	af04      	add	r7, sp, #16
 801d88a:	6078      	str	r0, [r7, #4]
 801d88c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2b00      	cmp	r3, #0
 801d892:	d105      	bne.n	801d8a0 <tcp_input+0x1c>
 801d894:	4b9b      	ldr	r3, [pc, #620]	; (801db04 <tcp_input+0x280>)
 801d896:	2283      	movs	r2, #131	; 0x83
 801d898:	499b      	ldr	r1, [pc, #620]	; (801db08 <tcp_input+0x284>)
 801d89a:	489c      	ldr	r0, [pc, #624]	; (801db0c <tcp_input+0x288>)
 801d89c:	f008 fb28 	bl	8025ef0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	685b      	ldr	r3, [r3, #4]
 801d8a4:	4a9a      	ldr	r2, [pc, #616]	; (801db10 <tcp_input+0x28c>)
 801d8a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	895b      	ldrh	r3, [r3, #10]
 801d8ac:	2b13      	cmp	r3, #19
 801d8ae:	f240 83c4 	bls.w	801e03a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d8b2:	4b98      	ldr	r3, [pc, #608]	; (801db14 <tcp_input+0x290>)
 801d8b4:	695b      	ldr	r3, [r3, #20]
 801d8b6:	4a97      	ldr	r2, [pc, #604]	; (801db14 <tcp_input+0x290>)
 801d8b8:	6812      	ldr	r2, [r2, #0]
 801d8ba:	4611      	mov	r1, r2
 801d8bc:	4618      	mov	r0, r3
 801d8be:	f006 f9e1 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 801d8c2:	4603      	mov	r3, r0
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	f040 83ba 	bne.w	801e03e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d8ca:	4b92      	ldr	r3, [pc, #584]	; (801db14 <tcp_input+0x290>)
 801d8cc:	695b      	ldr	r3, [r3, #20]
 801d8ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d8d2:	2be0      	cmp	r3, #224	; 0xe0
 801d8d4:	f000 83b3 	beq.w	801e03e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d8d8:	4b8d      	ldr	r3, [pc, #564]	; (801db10 <tcp_input+0x28c>)
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	899b      	ldrh	r3, [r3, #12]
 801d8de:	b29b      	uxth	r3, r3
 801d8e0:	4618      	mov	r0, r3
 801d8e2:	f7fc fb1d 	bl	8019f20 <lwip_htons>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	0b1b      	lsrs	r3, r3, #12
 801d8ea:	b29b      	uxth	r3, r3
 801d8ec:	b2db      	uxtb	r3, r3
 801d8ee:	009b      	lsls	r3, r3, #2
 801d8f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d8f2:	7cbb      	ldrb	r3, [r7, #18]
 801d8f4:	2b13      	cmp	r3, #19
 801d8f6:	f240 83a4 	bls.w	801e042 <tcp_input+0x7be>
 801d8fa:	7cbb      	ldrb	r3, [r7, #18]
 801d8fc:	b29a      	uxth	r2, r3
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	891b      	ldrh	r3, [r3, #8]
 801d902:	429a      	cmp	r2, r3
 801d904:	f200 839d 	bhi.w	801e042 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d908:	7cbb      	ldrb	r3, [r7, #18]
 801d90a:	b29b      	uxth	r3, r3
 801d90c:	3b14      	subs	r3, #20
 801d90e:	b29a      	uxth	r2, r3
 801d910:	4b81      	ldr	r3, [pc, #516]	; (801db18 <tcp_input+0x294>)
 801d912:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801d914:	4b81      	ldr	r3, [pc, #516]	; (801db1c <tcp_input+0x298>)
 801d916:	2200      	movs	r2, #0
 801d918:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	895a      	ldrh	r2, [r3, #10]
 801d91e:	7cbb      	ldrb	r3, [r7, #18]
 801d920:	b29b      	uxth	r3, r3
 801d922:	429a      	cmp	r2, r3
 801d924:	d309      	bcc.n	801d93a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801d926:	4b7c      	ldr	r3, [pc, #496]	; (801db18 <tcp_input+0x294>)
 801d928:	881a      	ldrh	r2, [r3, #0]
 801d92a:	4b7d      	ldr	r3, [pc, #500]	; (801db20 <tcp_input+0x29c>)
 801d92c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d92e:	7cbb      	ldrb	r3, [r7, #18]
 801d930:	4619      	mov	r1, r3
 801d932:	6878      	ldr	r0, [r7, #4]
 801d934:	f7fd fe1a 	bl	801b56c <pbuf_remove_header>
 801d938:	e04e      	b.n	801d9d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d105      	bne.n	801d94e <tcp_input+0xca>
 801d942:	4b70      	ldr	r3, [pc, #448]	; (801db04 <tcp_input+0x280>)
 801d944:	22c2      	movs	r2, #194	; 0xc2
 801d946:	4977      	ldr	r1, [pc, #476]	; (801db24 <tcp_input+0x2a0>)
 801d948:	4870      	ldr	r0, [pc, #448]	; (801db0c <tcp_input+0x288>)
 801d94a:	f008 fad1 	bl	8025ef0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801d94e:	2114      	movs	r1, #20
 801d950:	6878      	ldr	r0, [r7, #4]
 801d952:	f7fd fe0b 	bl	801b56c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	895a      	ldrh	r2, [r3, #10]
 801d95a:	4b71      	ldr	r3, [pc, #452]	; (801db20 <tcp_input+0x29c>)
 801d95c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d95e:	4b6e      	ldr	r3, [pc, #440]	; (801db18 <tcp_input+0x294>)
 801d960:	881a      	ldrh	r2, [r3, #0]
 801d962:	4b6f      	ldr	r3, [pc, #444]	; (801db20 <tcp_input+0x29c>)
 801d964:	881b      	ldrh	r3, [r3, #0]
 801d966:	1ad3      	subs	r3, r2, r3
 801d968:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801d96a:	4b6d      	ldr	r3, [pc, #436]	; (801db20 <tcp_input+0x29c>)
 801d96c:	881b      	ldrh	r3, [r3, #0]
 801d96e:	4619      	mov	r1, r3
 801d970:	6878      	ldr	r0, [r7, #4]
 801d972:	f7fd fdfb 	bl	801b56c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	681b      	ldr	r3, [r3, #0]
 801d97a:	895b      	ldrh	r3, [r3, #10]
 801d97c:	8a3a      	ldrh	r2, [r7, #16]
 801d97e:	429a      	cmp	r2, r3
 801d980:	f200 8361 	bhi.w	801e046 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	685b      	ldr	r3, [r3, #4]
 801d98a:	4a64      	ldr	r2, [pc, #400]	; (801db1c <tcp_input+0x298>)
 801d98c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801d98e:	687b      	ldr	r3, [r7, #4]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	8a3a      	ldrh	r2, [r7, #16]
 801d994:	4611      	mov	r1, r2
 801d996:	4618      	mov	r0, r3
 801d998:	f7fd fde8 	bl	801b56c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	891a      	ldrh	r2, [r3, #8]
 801d9a0:	8a3b      	ldrh	r3, [r7, #16]
 801d9a2:	1ad3      	subs	r3, r2, r3
 801d9a4:	b29a      	uxth	r2, r3
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	895b      	ldrh	r3, [r3, #10]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d005      	beq.n	801d9be <tcp_input+0x13a>
 801d9b2:	4b54      	ldr	r3, [pc, #336]	; (801db04 <tcp_input+0x280>)
 801d9b4:	22df      	movs	r2, #223	; 0xdf
 801d9b6:	495c      	ldr	r1, [pc, #368]	; (801db28 <tcp_input+0x2a4>)
 801d9b8:	4854      	ldr	r0, [pc, #336]	; (801db0c <tcp_input+0x288>)
 801d9ba:	f008 fa99 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	891a      	ldrh	r2, [r3, #8]
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	891b      	ldrh	r3, [r3, #8]
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	d005      	beq.n	801d9d8 <tcp_input+0x154>
 801d9cc:	4b4d      	ldr	r3, [pc, #308]	; (801db04 <tcp_input+0x280>)
 801d9ce:	22e0      	movs	r2, #224	; 0xe0
 801d9d0:	4956      	ldr	r1, [pc, #344]	; (801db2c <tcp_input+0x2a8>)
 801d9d2:	484e      	ldr	r0, [pc, #312]	; (801db0c <tcp_input+0x288>)
 801d9d4:	f008 fa8c 	bl	8025ef0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d9d8:	4b4d      	ldr	r3, [pc, #308]	; (801db10 <tcp_input+0x28c>)
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	881b      	ldrh	r3, [r3, #0]
 801d9de:	b29b      	uxth	r3, r3
 801d9e0:	4a4b      	ldr	r2, [pc, #300]	; (801db10 <tcp_input+0x28c>)
 801d9e2:	6814      	ldr	r4, [r2, #0]
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	f7fc fa9b 	bl	8019f20 <lwip_htons>
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d9ee:	4b48      	ldr	r3, [pc, #288]	; (801db10 <tcp_input+0x28c>)
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	885b      	ldrh	r3, [r3, #2]
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	4a46      	ldr	r2, [pc, #280]	; (801db10 <tcp_input+0x28c>)
 801d9f8:	6814      	ldr	r4, [r2, #0]
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	f7fc fa90 	bl	8019f20 <lwip_htons>
 801da00:	4603      	mov	r3, r0
 801da02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801da04:	4b42      	ldr	r3, [pc, #264]	; (801db10 <tcp_input+0x28c>)
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	685b      	ldr	r3, [r3, #4]
 801da0a:	4a41      	ldr	r2, [pc, #260]	; (801db10 <tcp_input+0x28c>)
 801da0c:	6814      	ldr	r4, [r2, #0]
 801da0e:	4618      	mov	r0, r3
 801da10:	f7fc fa9b 	bl	8019f4a <lwip_htonl>
 801da14:	4603      	mov	r3, r0
 801da16:	6063      	str	r3, [r4, #4]
 801da18:	6863      	ldr	r3, [r4, #4]
 801da1a:	4a45      	ldr	r2, [pc, #276]	; (801db30 <tcp_input+0x2ac>)
 801da1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801da1e:	4b3c      	ldr	r3, [pc, #240]	; (801db10 <tcp_input+0x28c>)
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	689b      	ldr	r3, [r3, #8]
 801da24:	4a3a      	ldr	r2, [pc, #232]	; (801db10 <tcp_input+0x28c>)
 801da26:	6814      	ldr	r4, [r2, #0]
 801da28:	4618      	mov	r0, r3
 801da2a:	f7fc fa8e 	bl	8019f4a <lwip_htonl>
 801da2e:	4603      	mov	r3, r0
 801da30:	60a3      	str	r3, [r4, #8]
 801da32:	68a3      	ldr	r3, [r4, #8]
 801da34:	4a3f      	ldr	r2, [pc, #252]	; (801db34 <tcp_input+0x2b0>)
 801da36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801da38:	4b35      	ldr	r3, [pc, #212]	; (801db10 <tcp_input+0x28c>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	89db      	ldrh	r3, [r3, #14]
 801da3e:	b29b      	uxth	r3, r3
 801da40:	4a33      	ldr	r2, [pc, #204]	; (801db10 <tcp_input+0x28c>)
 801da42:	6814      	ldr	r4, [r2, #0]
 801da44:	4618      	mov	r0, r3
 801da46:	f7fc fa6b 	bl	8019f20 <lwip_htons>
 801da4a:	4603      	mov	r3, r0
 801da4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801da4e:	4b30      	ldr	r3, [pc, #192]	; (801db10 <tcp_input+0x28c>)
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	899b      	ldrh	r3, [r3, #12]
 801da54:	b29b      	uxth	r3, r3
 801da56:	4618      	mov	r0, r3
 801da58:	f7fc fa62 	bl	8019f20 <lwip_htons>
 801da5c:	4603      	mov	r3, r0
 801da5e:	b2db      	uxtb	r3, r3
 801da60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801da64:	b2da      	uxtb	r2, r3
 801da66:	4b34      	ldr	r3, [pc, #208]	; (801db38 <tcp_input+0x2b4>)
 801da68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	891a      	ldrh	r2, [r3, #8]
 801da6e:	4b33      	ldr	r3, [pc, #204]	; (801db3c <tcp_input+0x2b8>)
 801da70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801da72:	4b31      	ldr	r3, [pc, #196]	; (801db38 <tcp_input+0x2b4>)
 801da74:	781b      	ldrb	r3, [r3, #0]
 801da76:	f003 0303 	and.w	r3, r3, #3
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d00c      	beq.n	801da98 <tcp_input+0x214>
    tcplen++;
 801da7e:	4b2f      	ldr	r3, [pc, #188]	; (801db3c <tcp_input+0x2b8>)
 801da80:	881b      	ldrh	r3, [r3, #0]
 801da82:	3301      	adds	r3, #1
 801da84:	b29a      	uxth	r2, r3
 801da86:	4b2d      	ldr	r3, [pc, #180]	; (801db3c <tcp_input+0x2b8>)
 801da88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	891a      	ldrh	r2, [r3, #8]
 801da8e:	4b2b      	ldr	r3, [pc, #172]	; (801db3c <tcp_input+0x2b8>)
 801da90:	881b      	ldrh	r3, [r3, #0]
 801da92:	429a      	cmp	r2, r3
 801da94:	f200 82d9 	bhi.w	801e04a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801da98:	2300      	movs	r3, #0
 801da9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801da9c:	4b28      	ldr	r3, [pc, #160]	; (801db40 <tcp_input+0x2bc>)
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	61fb      	str	r3, [r7, #28]
 801daa2:	e09d      	b.n	801dbe0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801daa4:	69fb      	ldr	r3, [r7, #28]
 801daa6:	7d1b      	ldrb	r3, [r3, #20]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d105      	bne.n	801dab8 <tcp_input+0x234>
 801daac:	4b15      	ldr	r3, [pc, #84]	; (801db04 <tcp_input+0x280>)
 801daae:	22fb      	movs	r2, #251	; 0xfb
 801dab0:	4924      	ldr	r1, [pc, #144]	; (801db44 <tcp_input+0x2c0>)
 801dab2:	4816      	ldr	r0, [pc, #88]	; (801db0c <tcp_input+0x288>)
 801dab4:	f008 fa1c 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dab8:	69fb      	ldr	r3, [r7, #28]
 801daba:	7d1b      	ldrb	r3, [r3, #20]
 801dabc:	2b0a      	cmp	r3, #10
 801dabe:	d105      	bne.n	801dacc <tcp_input+0x248>
 801dac0:	4b10      	ldr	r3, [pc, #64]	; (801db04 <tcp_input+0x280>)
 801dac2:	22fc      	movs	r2, #252	; 0xfc
 801dac4:	4920      	ldr	r1, [pc, #128]	; (801db48 <tcp_input+0x2c4>)
 801dac6:	4811      	ldr	r0, [pc, #68]	; (801db0c <tcp_input+0x288>)
 801dac8:	f008 fa12 	bl	8025ef0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dacc:	69fb      	ldr	r3, [r7, #28]
 801dace:	7d1b      	ldrb	r3, [r3, #20]
 801dad0:	2b01      	cmp	r3, #1
 801dad2:	d105      	bne.n	801dae0 <tcp_input+0x25c>
 801dad4:	4b0b      	ldr	r3, [pc, #44]	; (801db04 <tcp_input+0x280>)
 801dad6:	22fd      	movs	r2, #253	; 0xfd
 801dad8:	491c      	ldr	r1, [pc, #112]	; (801db4c <tcp_input+0x2c8>)
 801dada:	480c      	ldr	r0, [pc, #48]	; (801db0c <tcp_input+0x288>)
 801dadc:	f008 fa08 	bl	8025ef0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dae0:	69fb      	ldr	r3, [r7, #28]
 801dae2:	7a1b      	ldrb	r3, [r3, #8]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d033      	beq.n	801db50 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dae8:	69fb      	ldr	r3, [r7, #28]
 801daea:	7a1a      	ldrb	r2, [r3, #8]
 801daec:	4b09      	ldr	r3, [pc, #36]	; (801db14 <tcp_input+0x290>)
 801daee:	685b      	ldr	r3, [r3, #4]
 801daf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801daf4:	3301      	adds	r3, #1
 801daf6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801daf8:	429a      	cmp	r2, r3
 801dafa:	d029      	beq.n	801db50 <tcp_input+0x2cc>
      prev = pcb;
 801dafc:	69fb      	ldr	r3, [r7, #28]
 801dafe:	61bb      	str	r3, [r7, #24]
      continue;
 801db00:	e06b      	b.n	801dbda <tcp_input+0x356>
 801db02:	bf00      	nop
 801db04:	080285ec 	.word	0x080285ec
 801db08:	08028620 	.word	0x08028620
 801db0c:	08028638 	.word	0x08028638
 801db10:	20008748 	.word	0x20008748
 801db14:	2000cba0 	.word	0x2000cba0
 801db18:	2000874c 	.word	0x2000874c
 801db1c:	20008750 	.word	0x20008750
 801db20:	2000874e 	.word	0x2000874e
 801db24:	08028660 	.word	0x08028660
 801db28:	08028670 	.word	0x08028670
 801db2c:	0802867c 	.word	0x0802867c
 801db30:	20008758 	.word	0x20008758
 801db34:	2000875c 	.word	0x2000875c
 801db38:	20008764 	.word	0x20008764
 801db3c:	20008762 	.word	0x20008762
 801db40:	200102b4 	.word	0x200102b4
 801db44:	0802869c 	.word	0x0802869c
 801db48:	080286c4 	.word	0x080286c4
 801db4c:	080286f0 	.word	0x080286f0
    }

    if (pcb->remote_port == tcphdr->src &&
 801db50:	69fb      	ldr	r3, [r7, #28]
 801db52:	8b1a      	ldrh	r2, [r3, #24]
 801db54:	4b94      	ldr	r3, [pc, #592]	; (801dda8 <tcp_input+0x524>)
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	881b      	ldrh	r3, [r3, #0]
 801db5a:	b29b      	uxth	r3, r3
 801db5c:	429a      	cmp	r2, r3
 801db5e:	d13a      	bne.n	801dbd6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801db60:	69fb      	ldr	r3, [r7, #28]
 801db62:	8ada      	ldrh	r2, [r3, #22]
 801db64:	4b90      	ldr	r3, [pc, #576]	; (801dda8 <tcp_input+0x524>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	885b      	ldrh	r3, [r3, #2]
 801db6a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801db6c:	429a      	cmp	r2, r3
 801db6e:	d132      	bne.n	801dbd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801db70:	69fb      	ldr	r3, [r7, #28]
 801db72:	685a      	ldr	r2, [r3, #4]
 801db74:	4b8d      	ldr	r3, [pc, #564]	; (801ddac <tcp_input+0x528>)
 801db76:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801db78:	429a      	cmp	r2, r3
 801db7a:	d12c      	bne.n	801dbd6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801db7c:	69fb      	ldr	r3, [r7, #28]
 801db7e:	681a      	ldr	r2, [r3, #0]
 801db80:	4b8a      	ldr	r3, [pc, #552]	; (801ddac <tcp_input+0x528>)
 801db82:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801db84:	429a      	cmp	r2, r3
 801db86:	d126      	bne.n	801dbd6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801db88:	69fb      	ldr	r3, [r7, #28]
 801db8a:	68db      	ldr	r3, [r3, #12]
 801db8c:	69fa      	ldr	r2, [r7, #28]
 801db8e:	429a      	cmp	r2, r3
 801db90:	d106      	bne.n	801dba0 <tcp_input+0x31c>
 801db92:	4b87      	ldr	r3, [pc, #540]	; (801ddb0 <tcp_input+0x52c>)
 801db94:	f240 120d 	movw	r2, #269	; 0x10d
 801db98:	4986      	ldr	r1, [pc, #536]	; (801ddb4 <tcp_input+0x530>)
 801db9a:	4887      	ldr	r0, [pc, #540]	; (801ddb8 <tcp_input+0x534>)
 801db9c:	f008 f9a8 	bl	8025ef0 <iprintf>
      if (prev != NULL) {
 801dba0:	69bb      	ldr	r3, [r7, #24]
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d00a      	beq.n	801dbbc <tcp_input+0x338>
        prev->next = pcb->next;
 801dba6:	69fb      	ldr	r3, [r7, #28]
 801dba8:	68da      	ldr	r2, [r3, #12]
 801dbaa:	69bb      	ldr	r3, [r7, #24]
 801dbac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801dbae:	4b83      	ldr	r3, [pc, #524]	; (801ddbc <tcp_input+0x538>)
 801dbb0:	681a      	ldr	r2, [r3, #0]
 801dbb2:	69fb      	ldr	r3, [r7, #28]
 801dbb4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801dbb6:	4a81      	ldr	r2, [pc, #516]	; (801ddbc <tcp_input+0x538>)
 801dbb8:	69fb      	ldr	r3, [r7, #28]
 801dbba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801dbbc:	69fb      	ldr	r3, [r7, #28]
 801dbbe:	68db      	ldr	r3, [r3, #12]
 801dbc0:	69fa      	ldr	r2, [r7, #28]
 801dbc2:	429a      	cmp	r2, r3
 801dbc4:	d111      	bne.n	801dbea <tcp_input+0x366>
 801dbc6:	4b7a      	ldr	r3, [pc, #488]	; (801ddb0 <tcp_input+0x52c>)
 801dbc8:	f240 1215 	movw	r2, #277	; 0x115
 801dbcc:	497c      	ldr	r1, [pc, #496]	; (801ddc0 <tcp_input+0x53c>)
 801dbce:	487a      	ldr	r0, [pc, #488]	; (801ddb8 <tcp_input+0x534>)
 801dbd0:	f008 f98e 	bl	8025ef0 <iprintf>
      break;
 801dbd4:	e009      	b.n	801dbea <tcp_input+0x366>
    }
    prev = pcb;
 801dbd6:	69fb      	ldr	r3, [r7, #28]
 801dbd8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbda:	69fb      	ldr	r3, [r7, #28]
 801dbdc:	68db      	ldr	r3, [r3, #12]
 801dbde:	61fb      	str	r3, [r7, #28]
 801dbe0:	69fb      	ldr	r3, [r7, #28]
 801dbe2:	2b00      	cmp	r3, #0
 801dbe4:	f47f af5e 	bne.w	801daa4 <tcp_input+0x220>
 801dbe8:	e000      	b.n	801dbec <tcp_input+0x368>
      break;
 801dbea:	bf00      	nop
  }

  if (pcb == NULL) {
 801dbec:	69fb      	ldr	r3, [r7, #28]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	f040 8095 	bne.w	801dd1e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbf4:	4b73      	ldr	r3, [pc, #460]	; (801ddc4 <tcp_input+0x540>)
 801dbf6:	681b      	ldr	r3, [r3, #0]
 801dbf8:	61fb      	str	r3, [r7, #28]
 801dbfa:	e03f      	b.n	801dc7c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dbfc:	69fb      	ldr	r3, [r7, #28]
 801dbfe:	7d1b      	ldrb	r3, [r3, #20]
 801dc00:	2b0a      	cmp	r3, #10
 801dc02:	d006      	beq.n	801dc12 <tcp_input+0x38e>
 801dc04:	4b6a      	ldr	r3, [pc, #424]	; (801ddb0 <tcp_input+0x52c>)
 801dc06:	f240 121f 	movw	r2, #287	; 0x11f
 801dc0a:	496f      	ldr	r1, [pc, #444]	; (801ddc8 <tcp_input+0x544>)
 801dc0c:	486a      	ldr	r0, [pc, #424]	; (801ddb8 <tcp_input+0x534>)
 801dc0e:	f008 f96f 	bl	8025ef0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dc12:	69fb      	ldr	r3, [r7, #28]
 801dc14:	7a1b      	ldrb	r3, [r3, #8]
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d009      	beq.n	801dc2e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dc1a:	69fb      	ldr	r3, [r7, #28]
 801dc1c:	7a1a      	ldrb	r2, [r3, #8]
 801dc1e:	4b63      	ldr	r3, [pc, #396]	; (801ddac <tcp_input+0x528>)
 801dc20:	685b      	ldr	r3, [r3, #4]
 801dc22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dc26:	3301      	adds	r3, #1
 801dc28:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dc2a:	429a      	cmp	r2, r3
 801dc2c:	d122      	bne.n	801dc74 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801dc2e:	69fb      	ldr	r3, [r7, #28]
 801dc30:	8b1a      	ldrh	r2, [r3, #24]
 801dc32:	4b5d      	ldr	r3, [pc, #372]	; (801dda8 <tcp_input+0x524>)
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	881b      	ldrh	r3, [r3, #0]
 801dc38:	b29b      	uxth	r3, r3
 801dc3a:	429a      	cmp	r2, r3
 801dc3c:	d11b      	bne.n	801dc76 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801dc3e:	69fb      	ldr	r3, [r7, #28]
 801dc40:	8ada      	ldrh	r2, [r3, #22]
 801dc42:	4b59      	ldr	r3, [pc, #356]	; (801dda8 <tcp_input+0x524>)
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	885b      	ldrh	r3, [r3, #2]
 801dc48:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801dc4a:	429a      	cmp	r2, r3
 801dc4c:	d113      	bne.n	801dc76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801dc4e:	69fb      	ldr	r3, [r7, #28]
 801dc50:	685a      	ldr	r2, [r3, #4]
 801dc52:	4b56      	ldr	r3, [pc, #344]	; (801ddac <tcp_input+0x528>)
 801dc54:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801dc56:	429a      	cmp	r2, r3
 801dc58:	d10d      	bne.n	801dc76 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801dc5a:	69fb      	ldr	r3, [r7, #28]
 801dc5c:	681a      	ldr	r2, [r3, #0]
 801dc5e:	4b53      	ldr	r3, [pc, #332]	; (801ddac <tcp_input+0x528>)
 801dc60:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801dc62:	429a      	cmp	r2, r3
 801dc64:	d107      	bne.n	801dc76 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801dc66:	69f8      	ldr	r0, [r7, #28]
 801dc68:	f000 fb54 	bl	801e314 <tcp_timewait_input>
        }
        pbuf_free(p);
 801dc6c:	6878      	ldr	r0, [r7, #4]
 801dc6e:	f7fd fd03 	bl	801b678 <pbuf_free>
        return;
 801dc72:	e1f0      	b.n	801e056 <tcp_input+0x7d2>
        continue;
 801dc74:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dc76:	69fb      	ldr	r3, [r7, #28]
 801dc78:	68db      	ldr	r3, [r3, #12]
 801dc7a:	61fb      	str	r3, [r7, #28]
 801dc7c:	69fb      	ldr	r3, [r7, #28]
 801dc7e:	2b00      	cmp	r3, #0
 801dc80:	d1bc      	bne.n	801dbfc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801dc82:	2300      	movs	r3, #0
 801dc84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801dc86:	4b51      	ldr	r3, [pc, #324]	; (801ddcc <tcp_input+0x548>)
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	617b      	str	r3, [r7, #20]
 801dc8c:	e02a      	b.n	801dce4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801dc8e:	697b      	ldr	r3, [r7, #20]
 801dc90:	7a1b      	ldrb	r3, [r3, #8]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d00c      	beq.n	801dcb0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dc96:	697b      	ldr	r3, [r7, #20]
 801dc98:	7a1a      	ldrb	r2, [r3, #8]
 801dc9a:	4b44      	ldr	r3, [pc, #272]	; (801ddac <tcp_input+0x528>)
 801dc9c:	685b      	ldr	r3, [r3, #4]
 801dc9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dca2:	3301      	adds	r3, #1
 801dca4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801dca6:	429a      	cmp	r2, r3
 801dca8:	d002      	beq.n	801dcb0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801dcaa:	697b      	ldr	r3, [r7, #20]
 801dcac:	61bb      	str	r3, [r7, #24]
        continue;
 801dcae:	e016      	b.n	801dcde <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801dcb0:	697b      	ldr	r3, [r7, #20]
 801dcb2:	8ada      	ldrh	r2, [r3, #22]
 801dcb4:	4b3c      	ldr	r3, [pc, #240]	; (801dda8 <tcp_input+0x524>)
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	885b      	ldrh	r3, [r3, #2]
 801dcba:	b29b      	uxth	r3, r3
 801dcbc:	429a      	cmp	r2, r3
 801dcbe:	d10c      	bne.n	801dcda <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801dcc0:	697b      	ldr	r3, [r7, #20]
 801dcc2:	681a      	ldr	r2, [r3, #0]
 801dcc4:	4b39      	ldr	r3, [pc, #228]	; (801ddac <tcp_input+0x528>)
 801dcc6:	695b      	ldr	r3, [r3, #20]
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	d00f      	beq.n	801dcec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801dccc:	697b      	ldr	r3, [r7, #20]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d00d      	beq.n	801dcee <tcp_input+0x46a>
 801dcd2:	697b      	ldr	r3, [r7, #20]
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d009      	beq.n	801dcee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801dcda:	697b      	ldr	r3, [r7, #20]
 801dcdc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801dcde:	697b      	ldr	r3, [r7, #20]
 801dce0:	68db      	ldr	r3, [r3, #12]
 801dce2:	617b      	str	r3, [r7, #20]
 801dce4:	697b      	ldr	r3, [r7, #20]
 801dce6:	2b00      	cmp	r3, #0
 801dce8:	d1d1      	bne.n	801dc8e <tcp_input+0x40a>
 801dcea:	e000      	b.n	801dcee <tcp_input+0x46a>
            break;
 801dcec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801dcee:	697b      	ldr	r3, [r7, #20]
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d014      	beq.n	801dd1e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801dcf4:	69bb      	ldr	r3, [r7, #24]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d00a      	beq.n	801dd10 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801dcfa:	697b      	ldr	r3, [r7, #20]
 801dcfc:	68da      	ldr	r2, [r3, #12]
 801dcfe:	69bb      	ldr	r3, [r7, #24]
 801dd00:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801dd02:	4b32      	ldr	r3, [pc, #200]	; (801ddcc <tcp_input+0x548>)
 801dd04:	681a      	ldr	r2, [r3, #0]
 801dd06:	697b      	ldr	r3, [r7, #20]
 801dd08:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801dd0a:	4a30      	ldr	r2, [pc, #192]	; (801ddcc <tcp_input+0x548>)
 801dd0c:	697b      	ldr	r3, [r7, #20]
 801dd0e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801dd10:	6978      	ldr	r0, [r7, #20]
 801dd12:	f000 fa01 	bl	801e118 <tcp_listen_input>
      }
      pbuf_free(p);
 801dd16:	6878      	ldr	r0, [r7, #4]
 801dd18:	f7fd fcae 	bl	801b678 <pbuf_free>
      return;
 801dd1c:	e19b      	b.n	801e056 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801dd1e:	69fb      	ldr	r3, [r7, #28]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	f000 8160 	beq.w	801dfe6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801dd26:	4b2a      	ldr	r3, [pc, #168]	; (801ddd0 <tcp_input+0x54c>)
 801dd28:	2200      	movs	r2, #0
 801dd2a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	891a      	ldrh	r2, [r3, #8]
 801dd30:	4b27      	ldr	r3, [pc, #156]	; (801ddd0 <tcp_input+0x54c>)
 801dd32:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801dd34:	4a26      	ldr	r2, [pc, #152]	; (801ddd0 <tcp_input+0x54c>)
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801dd3a:	4b1b      	ldr	r3, [pc, #108]	; (801dda8 <tcp_input+0x524>)
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	4a24      	ldr	r2, [pc, #144]	; (801ddd0 <tcp_input+0x54c>)
 801dd40:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801dd42:	4b24      	ldr	r3, [pc, #144]	; (801ddd4 <tcp_input+0x550>)
 801dd44:	2200      	movs	r2, #0
 801dd46:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801dd48:	4b23      	ldr	r3, [pc, #140]	; (801ddd8 <tcp_input+0x554>)
 801dd4a:	2200      	movs	r2, #0
 801dd4c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801dd4e:	4b23      	ldr	r3, [pc, #140]	; (801dddc <tcp_input+0x558>)
 801dd50:	2200      	movs	r2, #0
 801dd52:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801dd54:	4b22      	ldr	r3, [pc, #136]	; (801dde0 <tcp_input+0x55c>)
 801dd56:	781b      	ldrb	r3, [r3, #0]
 801dd58:	f003 0308 	and.w	r3, r3, #8
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d006      	beq.n	801dd6e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801dd60:	687b      	ldr	r3, [r7, #4]
 801dd62:	7b5b      	ldrb	r3, [r3, #13]
 801dd64:	f043 0301 	orr.w	r3, r3, #1
 801dd68:	b2da      	uxtb	r2, r3
 801dd6a:	687b      	ldr	r3, [r7, #4]
 801dd6c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801dd6e:	69fb      	ldr	r3, [r7, #28]
 801dd70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d038      	beq.n	801dde8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dd76:	69f8      	ldr	r0, [r7, #28]
 801dd78:	f7ff f870 	bl	801ce5c <tcp_process_refused_data>
 801dd7c:	4603      	mov	r3, r0
 801dd7e:	f113 0f0d 	cmn.w	r3, #13
 801dd82:	d007      	beq.n	801dd94 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dd84:	69fb      	ldr	r3, [r7, #28]
 801dd86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d02d      	beq.n	801dde8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dd8c:	4b15      	ldr	r3, [pc, #84]	; (801dde4 <tcp_input+0x560>)
 801dd8e:	881b      	ldrh	r3, [r3, #0]
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d029      	beq.n	801dde8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801dd94:	69fb      	ldr	r3, [r7, #28]
 801dd96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	f040 8104 	bne.w	801dfa6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801dd9e:	69f8      	ldr	r0, [r7, #28]
 801dda0:	f003 fe16 	bl	80219d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801dda4:	e0ff      	b.n	801dfa6 <tcp_input+0x722>
 801dda6:	bf00      	nop
 801dda8:	20008748 	.word	0x20008748
 801ddac:	2000cba0 	.word	0x2000cba0
 801ddb0:	080285ec 	.word	0x080285ec
 801ddb4:	08028718 	.word	0x08028718
 801ddb8:	08028638 	.word	0x08028638
 801ddbc:	200102b4 	.word	0x200102b4
 801ddc0:	08028744 	.word	0x08028744
 801ddc4:	200102c4 	.word	0x200102c4
 801ddc8:	08028770 	.word	0x08028770
 801ddcc:	200102bc 	.word	0x200102bc
 801ddd0:	20008738 	.word	0x20008738
 801ddd4:	20008768 	.word	0x20008768
 801ddd8:	20008765 	.word	0x20008765
 801dddc:	20008760 	.word	0x20008760
 801dde0:	20008764 	.word	0x20008764
 801dde4:	20008762 	.word	0x20008762
      }
    }
    tcp_input_pcb = pcb;
 801dde8:	4a9c      	ldr	r2, [pc, #624]	; (801e05c <tcp_input+0x7d8>)
 801ddea:	69fb      	ldr	r3, [r7, #28]
 801ddec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801ddee:	69f8      	ldr	r0, [r7, #28]
 801ddf0:	f000 fb0a 	bl	801e408 <tcp_process>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801ddf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ddfc:	f113 0f0d 	cmn.w	r3, #13
 801de00:	f000 80d3 	beq.w	801dfaa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801de04:	4b96      	ldr	r3, [pc, #600]	; (801e060 <tcp_input+0x7dc>)
 801de06:	781b      	ldrb	r3, [r3, #0]
 801de08:	f003 0308 	and.w	r3, r3, #8
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d015      	beq.n	801de3c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801de10:	69fb      	ldr	r3, [r7, #28]
 801de12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de16:	2b00      	cmp	r3, #0
 801de18:	d008      	beq.n	801de2c <tcp_input+0x5a8>
 801de1a:	69fb      	ldr	r3, [r7, #28]
 801de1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801de20:	69fa      	ldr	r2, [r7, #28]
 801de22:	6912      	ldr	r2, [r2, #16]
 801de24:	f06f 010d 	mvn.w	r1, #13
 801de28:	4610      	mov	r0, r2
 801de2a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801de2c:	69f9      	ldr	r1, [r7, #28]
 801de2e:	488d      	ldr	r0, [pc, #564]	; (801e064 <tcp_input+0x7e0>)
 801de30:	f7ff fbb0 	bl	801d594 <tcp_pcb_remove>
        tcp_free(pcb);
 801de34:	69f8      	ldr	r0, [r7, #28]
 801de36:	f7fd fecb 	bl	801bbd0 <tcp_free>
 801de3a:	e0c1      	b.n	801dfc0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801de3c:	2300      	movs	r3, #0
 801de3e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801de40:	4b89      	ldr	r3, [pc, #548]	; (801e068 <tcp_input+0x7e4>)
 801de42:	881b      	ldrh	r3, [r3, #0]
 801de44:	2b00      	cmp	r3, #0
 801de46:	d01d      	beq.n	801de84 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801de48:	4b87      	ldr	r3, [pc, #540]	; (801e068 <tcp_input+0x7e4>)
 801de4a:	881b      	ldrh	r3, [r3, #0]
 801de4c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801de4e:	69fb      	ldr	r3, [r7, #28]
 801de50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801de54:	2b00      	cmp	r3, #0
 801de56:	d00a      	beq.n	801de6e <tcp_input+0x5ea>
 801de58:	69fb      	ldr	r3, [r7, #28]
 801de5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801de5e:	69fa      	ldr	r2, [r7, #28]
 801de60:	6910      	ldr	r0, [r2, #16]
 801de62:	89fa      	ldrh	r2, [r7, #14]
 801de64:	69f9      	ldr	r1, [r7, #28]
 801de66:	4798      	blx	r3
 801de68:	4603      	mov	r3, r0
 801de6a:	74fb      	strb	r3, [r7, #19]
 801de6c:	e001      	b.n	801de72 <tcp_input+0x5ee>
 801de6e:	2300      	movs	r3, #0
 801de70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801de72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801de76:	f113 0f0d 	cmn.w	r3, #13
 801de7a:	f000 8098 	beq.w	801dfae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801de7e:	4b7a      	ldr	r3, [pc, #488]	; (801e068 <tcp_input+0x7e4>)
 801de80:	2200      	movs	r2, #0
 801de82:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801de84:	69f8      	ldr	r0, [r7, #28]
 801de86:	f000 f907 	bl	801e098 <tcp_input_delayed_close>
 801de8a:	4603      	mov	r3, r0
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	f040 8090 	bne.w	801dfb2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801de92:	4b76      	ldr	r3, [pc, #472]	; (801e06c <tcp_input+0x7e8>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	2b00      	cmp	r3, #0
 801de98:	d041      	beq.n	801df1e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801de9a:	69fb      	ldr	r3, [r7, #28]
 801de9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d006      	beq.n	801deb0 <tcp_input+0x62c>
 801dea2:	4b73      	ldr	r3, [pc, #460]	; (801e070 <tcp_input+0x7ec>)
 801dea4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dea8:	4972      	ldr	r1, [pc, #456]	; (801e074 <tcp_input+0x7f0>)
 801deaa:	4873      	ldr	r0, [pc, #460]	; (801e078 <tcp_input+0x7f4>)
 801deac:	f008 f820 	bl	8025ef0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801deb0:	69fb      	ldr	r3, [r7, #28]
 801deb2:	8b5b      	ldrh	r3, [r3, #26]
 801deb4:	f003 0310 	and.w	r3, r3, #16
 801deb8:	2b00      	cmp	r3, #0
 801deba:	d008      	beq.n	801dece <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801debc:	4b6b      	ldr	r3, [pc, #428]	; (801e06c <tcp_input+0x7e8>)
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	4618      	mov	r0, r3
 801dec2:	f7fd fbd9 	bl	801b678 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801dec6:	69f8      	ldr	r0, [r7, #28]
 801dec8:	f7fe f9c6 	bl	801c258 <tcp_abort>
            goto aborted;
 801decc:	e078      	b.n	801dfc0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801dece:	69fb      	ldr	r3, [r7, #28]
 801ded0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d00c      	beq.n	801def2 <tcp_input+0x66e>
 801ded8:	69fb      	ldr	r3, [r7, #28]
 801deda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801dede:	69fb      	ldr	r3, [r7, #28]
 801dee0:	6918      	ldr	r0, [r3, #16]
 801dee2:	4b62      	ldr	r3, [pc, #392]	; (801e06c <tcp_input+0x7e8>)
 801dee4:	681a      	ldr	r2, [r3, #0]
 801dee6:	2300      	movs	r3, #0
 801dee8:	69f9      	ldr	r1, [r7, #28]
 801deea:	47a0      	blx	r4
 801deec:	4603      	mov	r3, r0
 801deee:	74fb      	strb	r3, [r7, #19]
 801def0:	e008      	b.n	801df04 <tcp_input+0x680>
 801def2:	4b5e      	ldr	r3, [pc, #376]	; (801e06c <tcp_input+0x7e8>)
 801def4:	681a      	ldr	r2, [r3, #0]
 801def6:	2300      	movs	r3, #0
 801def8:	69f9      	ldr	r1, [r7, #28]
 801defa:	2000      	movs	r0, #0
 801defc:	f7ff f884 	bl	801d008 <tcp_recv_null>
 801df00:	4603      	mov	r3, r0
 801df02:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801df04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801df08:	f113 0f0d 	cmn.w	r3, #13
 801df0c:	d053      	beq.n	801dfb6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801df0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801df12:	2b00      	cmp	r3, #0
 801df14:	d003      	beq.n	801df1e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801df16:	4b55      	ldr	r3, [pc, #340]	; (801e06c <tcp_input+0x7e8>)
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	69fb      	ldr	r3, [r7, #28]
 801df1c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801df1e:	4b50      	ldr	r3, [pc, #320]	; (801e060 <tcp_input+0x7dc>)
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	f003 0320 	and.w	r3, r3, #32
 801df26:	2b00      	cmp	r3, #0
 801df28:	d030      	beq.n	801df8c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801df2a:	69fb      	ldr	r3, [r7, #28]
 801df2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801df2e:	2b00      	cmp	r3, #0
 801df30:	d009      	beq.n	801df46 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801df32:	69fb      	ldr	r3, [r7, #28]
 801df34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801df36:	7b5a      	ldrb	r2, [r3, #13]
 801df38:	69fb      	ldr	r3, [r7, #28]
 801df3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801df3c:	f042 0220 	orr.w	r2, r2, #32
 801df40:	b2d2      	uxtb	r2, r2
 801df42:	735a      	strb	r2, [r3, #13]
 801df44:	e022      	b.n	801df8c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801df46:	69fb      	ldr	r3, [r7, #28]
 801df48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801df4e:	d005      	beq.n	801df5c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801df50:	69fb      	ldr	r3, [r7, #28]
 801df52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801df54:	3301      	adds	r3, #1
 801df56:	b29a      	uxth	r2, r3
 801df58:	69fb      	ldr	r3, [r7, #28]
 801df5a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801df5c:	69fb      	ldr	r3, [r7, #28]
 801df5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801df62:	2b00      	cmp	r3, #0
 801df64:	d00b      	beq.n	801df7e <tcp_input+0x6fa>
 801df66:	69fb      	ldr	r3, [r7, #28]
 801df68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801df6c:	69fb      	ldr	r3, [r7, #28]
 801df6e:	6918      	ldr	r0, [r3, #16]
 801df70:	2300      	movs	r3, #0
 801df72:	2200      	movs	r2, #0
 801df74:	69f9      	ldr	r1, [r7, #28]
 801df76:	47a0      	blx	r4
 801df78:	4603      	mov	r3, r0
 801df7a:	74fb      	strb	r3, [r7, #19]
 801df7c:	e001      	b.n	801df82 <tcp_input+0x6fe>
 801df7e:	2300      	movs	r3, #0
 801df80:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801df82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801df86:	f113 0f0d 	cmn.w	r3, #13
 801df8a:	d016      	beq.n	801dfba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801df8c:	4b33      	ldr	r3, [pc, #204]	; (801e05c <tcp_input+0x7d8>)
 801df8e:	2200      	movs	r2, #0
 801df90:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801df92:	69f8      	ldr	r0, [r7, #28]
 801df94:	f000 f880 	bl	801e098 <tcp_input_delayed_close>
 801df98:	4603      	mov	r3, r0
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d10f      	bne.n	801dfbe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801df9e:	69f8      	ldr	r0, [r7, #28]
 801dfa0:	f002 ff10 	bl	8020dc4 <tcp_output>
 801dfa4:	e00c      	b.n	801dfc0 <tcp_input+0x73c>
        goto aborted;
 801dfa6:	bf00      	nop
 801dfa8:	e00a      	b.n	801dfc0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801dfaa:	bf00      	nop
 801dfac:	e008      	b.n	801dfc0 <tcp_input+0x73c>
              goto aborted;
 801dfae:	bf00      	nop
 801dfb0:	e006      	b.n	801dfc0 <tcp_input+0x73c>
          goto aborted;
 801dfb2:	bf00      	nop
 801dfb4:	e004      	b.n	801dfc0 <tcp_input+0x73c>
            goto aborted;
 801dfb6:	bf00      	nop
 801dfb8:	e002      	b.n	801dfc0 <tcp_input+0x73c>
              goto aborted;
 801dfba:	bf00      	nop
 801dfbc:	e000      	b.n	801dfc0 <tcp_input+0x73c>
          goto aborted;
 801dfbe:	bf00      	nop
    tcp_input_pcb = NULL;
 801dfc0:	4b26      	ldr	r3, [pc, #152]	; (801e05c <tcp_input+0x7d8>)
 801dfc2:	2200      	movs	r2, #0
 801dfc4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801dfc6:	4b29      	ldr	r3, [pc, #164]	; (801e06c <tcp_input+0x7e8>)
 801dfc8:	2200      	movs	r2, #0
 801dfca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801dfcc:	4b2b      	ldr	r3, [pc, #172]	; (801e07c <tcp_input+0x7f8>)
 801dfce:	685b      	ldr	r3, [r3, #4]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d03f      	beq.n	801e054 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801dfd4:	4b29      	ldr	r3, [pc, #164]	; (801e07c <tcp_input+0x7f8>)
 801dfd6:	685b      	ldr	r3, [r3, #4]
 801dfd8:	4618      	mov	r0, r3
 801dfda:	f7fd fb4d 	bl	801b678 <pbuf_free>
      inseg.p = NULL;
 801dfde:	4b27      	ldr	r3, [pc, #156]	; (801e07c <tcp_input+0x7f8>)
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801dfe4:	e036      	b.n	801e054 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801dfe6:	4b26      	ldr	r3, [pc, #152]	; (801e080 <tcp_input+0x7fc>)
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	899b      	ldrh	r3, [r3, #12]
 801dfec:	b29b      	uxth	r3, r3
 801dfee:	4618      	mov	r0, r3
 801dff0:	f7fb ff96 	bl	8019f20 <lwip_htons>
 801dff4:	4603      	mov	r3, r0
 801dff6:	b2db      	uxtb	r3, r3
 801dff8:	f003 0304 	and.w	r3, r3, #4
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d118      	bne.n	801e032 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e000:	4b20      	ldr	r3, [pc, #128]	; (801e084 <tcp_input+0x800>)
 801e002:	6819      	ldr	r1, [r3, #0]
 801e004:	4b20      	ldr	r3, [pc, #128]	; (801e088 <tcp_input+0x804>)
 801e006:	881b      	ldrh	r3, [r3, #0]
 801e008:	461a      	mov	r2, r3
 801e00a:	4b20      	ldr	r3, [pc, #128]	; (801e08c <tcp_input+0x808>)
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e010:	4b1b      	ldr	r3, [pc, #108]	; (801e080 <tcp_input+0x7fc>)
 801e012:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e014:	885b      	ldrh	r3, [r3, #2]
 801e016:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e018:	4a19      	ldr	r2, [pc, #100]	; (801e080 <tcp_input+0x7fc>)
 801e01a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e01c:	8812      	ldrh	r2, [r2, #0]
 801e01e:	b292      	uxth	r2, r2
 801e020:	9202      	str	r2, [sp, #8]
 801e022:	9301      	str	r3, [sp, #4]
 801e024:	4b1a      	ldr	r3, [pc, #104]	; (801e090 <tcp_input+0x80c>)
 801e026:	9300      	str	r3, [sp, #0]
 801e028:	4b1a      	ldr	r3, [pc, #104]	; (801e094 <tcp_input+0x810>)
 801e02a:	4602      	mov	r2, r0
 801e02c:	2000      	movs	r0, #0
 801e02e:	f003 fc7d 	bl	802192c <tcp_rst>
    pbuf_free(p);
 801e032:	6878      	ldr	r0, [r7, #4]
 801e034:	f7fd fb20 	bl	801b678 <pbuf_free>
  return;
 801e038:	e00c      	b.n	801e054 <tcp_input+0x7d0>
    goto dropped;
 801e03a:	bf00      	nop
 801e03c:	e006      	b.n	801e04c <tcp_input+0x7c8>
    goto dropped;
 801e03e:	bf00      	nop
 801e040:	e004      	b.n	801e04c <tcp_input+0x7c8>
    goto dropped;
 801e042:	bf00      	nop
 801e044:	e002      	b.n	801e04c <tcp_input+0x7c8>
      goto dropped;
 801e046:	bf00      	nop
 801e048:	e000      	b.n	801e04c <tcp_input+0x7c8>
      goto dropped;
 801e04a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801e04c:	6878      	ldr	r0, [r7, #4]
 801e04e:	f7fd fb13 	bl	801b678 <pbuf_free>
 801e052:	e000      	b.n	801e056 <tcp_input+0x7d2>
  return;
 801e054:	bf00      	nop
}
 801e056:	3724      	adds	r7, #36	; 0x24
 801e058:	46bd      	mov	sp, r7
 801e05a:	bd90      	pop	{r4, r7, pc}
 801e05c:	200102c8 	.word	0x200102c8
 801e060:	20008765 	.word	0x20008765
 801e064:	200102b4 	.word	0x200102b4
 801e068:	20008760 	.word	0x20008760
 801e06c:	20008768 	.word	0x20008768
 801e070:	080285ec 	.word	0x080285ec
 801e074:	080287a0 	.word	0x080287a0
 801e078:	08028638 	.word	0x08028638
 801e07c:	20008738 	.word	0x20008738
 801e080:	20008748 	.word	0x20008748
 801e084:	2000875c 	.word	0x2000875c
 801e088:	20008762 	.word	0x20008762
 801e08c:	20008758 	.word	0x20008758
 801e090:	2000cbb0 	.word	0x2000cbb0
 801e094:	2000cbb4 	.word	0x2000cbb4

0801e098 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b082      	sub	sp, #8
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	d106      	bne.n	801e0b4 <tcp_input_delayed_close+0x1c>
 801e0a6:	4b17      	ldr	r3, [pc, #92]	; (801e104 <tcp_input_delayed_close+0x6c>)
 801e0a8:	f240 225a 	movw	r2, #602	; 0x25a
 801e0ac:	4916      	ldr	r1, [pc, #88]	; (801e108 <tcp_input_delayed_close+0x70>)
 801e0ae:	4817      	ldr	r0, [pc, #92]	; (801e10c <tcp_input_delayed_close+0x74>)
 801e0b0:	f007 ff1e 	bl	8025ef0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801e0b4:	4b16      	ldr	r3, [pc, #88]	; (801e110 <tcp_input_delayed_close+0x78>)
 801e0b6:	781b      	ldrb	r3, [r3, #0]
 801e0b8:	f003 0310 	and.w	r3, r3, #16
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d01c      	beq.n	801e0fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	8b5b      	ldrh	r3, [r3, #26]
 801e0c4:	f003 0310 	and.w	r3, r3, #16
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d10d      	bne.n	801e0e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d008      	beq.n	801e0e8 <tcp_input_delayed_close+0x50>
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801e0dc:	687a      	ldr	r2, [r7, #4]
 801e0de:	6912      	ldr	r2, [r2, #16]
 801e0e0:	f06f 010e 	mvn.w	r1, #14
 801e0e4:	4610      	mov	r0, r2
 801e0e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801e0e8:	6879      	ldr	r1, [r7, #4]
 801e0ea:	480a      	ldr	r0, [pc, #40]	; (801e114 <tcp_input_delayed_close+0x7c>)
 801e0ec:	f7ff fa52 	bl	801d594 <tcp_pcb_remove>
    tcp_free(pcb);
 801e0f0:	6878      	ldr	r0, [r7, #4]
 801e0f2:	f7fd fd6d 	bl	801bbd0 <tcp_free>
    return 1;
 801e0f6:	2301      	movs	r3, #1
 801e0f8:	e000      	b.n	801e0fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 801e0fa:	2300      	movs	r3, #0
}
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	3708      	adds	r7, #8
 801e100:	46bd      	mov	sp, r7
 801e102:	bd80      	pop	{r7, pc}
 801e104:	080285ec 	.word	0x080285ec
 801e108:	080287bc 	.word	0x080287bc
 801e10c:	08028638 	.word	0x08028638
 801e110:	20008765 	.word	0x20008765
 801e114:	200102b4 	.word	0x200102b4

0801e118 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801e118:	b590      	push	{r4, r7, lr}
 801e11a:	b08b      	sub	sp, #44	; 0x2c
 801e11c:	af04      	add	r7, sp, #16
 801e11e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801e120:	4b6f      	ldr	r3, [pc, #444]	; (801e2e0 <tcp_listen_input+0x1c8>)
 801e122:	781b      	ldrb	r3, [r3, #0]
 801e124:	f003 0304 	and.w	r3, r3, #4
 801e128:	2b00      	cmp	r3, #0
 801e12a:	f040 80d2 	bne.w	801e2d2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	2b00      	cmp	r3, #0
 801e132:	d106      	bne.n	801e142 <tcp_listen_input+0x2a>
 801e134:	4b6b      	ldr	r3, [pc, #428]	; (801e2e4 <tcp_listen_input+0x1cc>)
 801e136:	f240 2281 	movw	r2, #641	; 0x281
 801e13a:	496b      	ldr	r1, [pc, #428]	; (801e2e8 <tcp_listen_input+0x1d0>)
 801e13c:	486b      	ldr	r0, [pc, #428]	; (801e2ec <tcp_listen_input+0x1d4>)
 801e13e:	f007 fed7 	bl	8025ef0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801e142:	4b67      	ldr	r3, [pc, #412]	; (801e2e0 <tcp_listen_input+0x1c8>)
 801e144:	781b      	ldrb	r3, [r3, #0]
 801e146:	f003 0310 	and.w	r3, r3, #16
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	d019      	beq.n	801e182 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e14e:	4b68      	ldr	r3, [pc, #416]	; (801e2f0 <tcp_listen_input+0x1d8>)
 801e150:	6819      	ldr	r1, [r3, #0]
 801e152:	4b68      	ldr	r3, [pc, #416]	; (801e2f4 <tcp_listen_input+0x1dc>)
 801e154:	881b      	ldrh	r3, [r3, #0]
 801e156:	461a      	mov	r2, r3
 801e158:	4b67      	ldr	r3, [pc, #412]	; (801e2f8 <tcp_listen_input+0x1e0>)
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e15e:	4b67      	ldr	r3, [pc, #412]	; (801e2fc <tcp_listen_input+0x1e4>)
 801e160:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e162:	885b      	ldrh	r3, [r3, #2]
 801e164:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e166:	4a65      	ldr	r2, [pc, #404]	; (801e2fc <tcp_listen_input+0x1e4>)
 801e168:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e16a:	8812      	ldrh	r2, [r2, #0]
 801e16c:	b292      	uxth	r2, r2
 801e16e:	9202      	str	r2, [sp, #8]
 801e170:	9301      	str	r3, [sp, #4]
 801e172:	4b63      	ldr	r3, [pc, #396]	; (801e300 <tcp_listen_input+0x1e8>)
 801e174:	9300      	str	r3, [sp, #0]
 801e176:	4b63      	ldr	r3, [pc, #396]	; (801e304 <tcp_listen_input+0x1ec>)
 801e178:	4602      	mov	r2, r0
 801e17a:	6878      	ldr	r0, [r7, #4]
 801e17c:	f003 fbd6 	bl	802192c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801e180:	e0a9      	b.n	801e2d6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801e182:	4b57      	ldr	r3, [pc, #348]	; (801e2e0 <tcp_listen_input+0x1c8>)
 801e184:	781b      	ldrb	r3, [r3, #0]
 801e186:	f003 0302 	and.w	r3, r3, #2
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	f000 80a3 	beq.w	801e2d6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	7d5b      	ldrb	r3, [r3, #21]
 801e194:	4618      	mov	r0, r3
 801e196:	f7ff f85b 	bl	801d250 <tcp_alloc>
 801e19a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801e19c:	697b      	ldr	r3, [r7, #20]
 801e19e:	2b00      	cmp	r3, #0
 801e1a0:	d111      	bne.n	801e1c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	699b      	ldr	r3, [r3, #24]
 801e1a6:	2b00      	cmp	r3, #0
 801e1a8:	d00a      	beq.n	801e1c0 <tcp_listen_input+0xa8>
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	699b      	ldr	r3, [r3, #24]
 801e1ae:	687a      	ldr	r2, [r7, #4]
 801e1b0:	6910      	ldr	r0, [r2, #16]
 801e1b2:	f04f 32ff 	mov.w	r2, #4294967295
 801e1b6:	2100      	movs	r1, #0
 801e1b8:	4798      	blx	r3
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	73bb      	strb	r3, [r7, #14]
      return;
 801e1be:	e08b      	b.n	801e2d8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e1c0:	23f0      	movs	r3, #240	; 0xf0
 801e1c2:	73bb      	strb	r3, [r7, #14]
      return;
 801e1c4:	e088      	b.n	801e2d8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801e1c6:	4b50      	ldr	r3, [pc, #320]	; (801e308 <tcp_listen_input+0x1f0>)
 801e1c8:	695a      	ldr	r2, [r3, #20]
 801e1ca:	697b      	ldr	r3, [r7, #20]
 801e1cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801e1ce:	4b4e      	ldr	r3, [pc, #312]	; (801e308 <tcp_listen_input+0x1f0>)
 801e1d0:	691a      	ldr	r2, [r3, #16]
 801e1d2:	697b      	ldr	r3, [r7, #20]
 801e1d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	8ada      	ldrh	r2, [r3, #22]
 801e1da:	697b      	ldr	r3, [r7, #20]
 801e1dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801e1de:	4b47      	ldr	r3, [pc, #284]	; (801e2fc <tcp_listen_input+0x1e4>)
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	881b      	ldrh	r3, [r3, #0]
 801e1e4:	b29a      	uxth	r2, r3
 801e1e6:	697b      	ldr	r3, [r7, #20]
 801e1e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801e1ea:	697b      	ldr	r3, [r7, #20]
 801e1ec:	2203      	movs	r2, #3
 801e1ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801e1f0:	4b41      	ldr	r3, [pc, #260]	; (801e2f8 <tcp_listen_input+0x1e0>)
 801e1f2:	681b      	ldr	r3, [r3, #0]
 801e1f4:	1c5a      	adds	r2, r3, #1
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801e1fa:	697b      	ldr	r3, [r7, #20]
 801e1fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e1fe:	697b      	ldr	r3, [r7, #20]
 801e200:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801e202:	6978      	ldr	r0, [r7, #20]
 801e204:	f7ff fa5a 	bl	801d6bc <tcp_next_iss>
 801e208:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801e20a:	697b      	ldr	r3, [r7, #20]
 801e20c:	693a      	ldr	r2, [r7, #16]
 801e20e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801e210:	697b      	ldr	r3, [r7, #20]
 801e212:	693a      	ldr	r2, [r7, #16]
 801e214:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801e216:	697b      	ldr	r3, [r7, #20]
 801e218:	693a      	ldr	r2, [r7, #16]
 801e21a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801e21c:	697b      	ldr	r3, [r7, #20]
 801e21e:	693a      	ldr	r2, [r7, #16]
 801e220:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801e222:	4b35      	ldr	r3, [pc, #212]	; (801e2f8 <tcp_listen_input+0x1e0>)
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	1e5a      	subs	r2, r3, #1
 801e228:	697b      	ldr	r3, [r7, #20]
 801e22a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	691a      	ldr	r2, [r3, #16]
 801e230:	697b      	ldr	r3, [r7, #20]
 801e232:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801e234:	697b      	ldr	r3, [r7, #20]
 801e236:	687a      	ldr	r2, [r7, #4]
 801e238:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	7a5b      	ldrb	r3, [r3, #9]
 801e23e:	f003 030c 	and.w	r3, r3, #12
 801e242:	b2da      	uxtb	r2, r3
 801e244:	697b      	ldr	r3, [r7, #20]
 801e246:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	7a1a      	ldrb	r2, [r3, #8]
 801e24c:	697b      	ldr	r3, [r7, #20]
 801e24e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801e250:	4b2e      	ldr	r3, [pc, #184]	; (801e30c <tcp_listen_input+0x1f4>)
 801e252:	681a      	ldr	r2, [r3, #0]
 801e254:	697b      	ldr	r3, [r7, #20]
 801e256:	60da      	str	r2, [r3, #12]
 801e258:	4a2c      	ldr	r2, [pc, #176]	; (801e30c <tcp_listen_input+0x1f4>)
 801e25a:	697b      	ldr	r3, [r7, #20]
 801e25c:	6013      	str	r3, [r2, #0]
 801e25e:	f003 fd27 	bl	8021cb0 <tcp_timer_needed>
 801e262:	4b2b      	ldr	r3, [pc, #172]	; (801e310 <tcp_listen_input+0x1f8>)
 801e264:	2201      	movs	r2, #1
 801e266:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801e268:	6978      	ldr	r0, [r7, #20]
 801e26a:	f001 fd8d 	bl	801fd88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801e26e:	4b23      	ldr	r3, [pc, #140]	; (801e2fc <tcp_listen_input+0x1e4>)
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	89db      	ldrh	r3, [r3, #14]
 801e274:	b29a      	uxth	r2, r3
 801e276:	697b      	ldr	r3, [r7, #20]
 801e278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801e27c:	697b      	ldr	r3, [r7, #20]
 801e27e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e282:	697b      	ldr	r3, [r7, #20]
 801e284:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801e288:	697b      	ldr	r3, [r7, #20]
 801e28a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801e28c:	697b      	ldr	r3, [r7, #20]
 801e28e:	3304      	adds	r3, #4
 801e290:	4618      	mov	r0, r3
 801e292:	f005 fa61 	bl	8023758 <ip4_route>
 801e296:	4601      	mov	r1, r0
 801e298:	697b      	ldr	r3, [r7, #20]
 801e29a:	3304      	adds	r3, #4
 801e29c:	461a      	mov	r2, r3
 801e29e:	4620      	mov	r0, r4
 801e2a0:	f7ff fa32 	bl	801d708 <tcp_eff_send_mss_netif>
 801e2a4:	4603      	mov	r3, r0
 801e2a6:	461a      	mov	r2, r3
 801e2a8:	697b      	ldr	r3, [r7, #20]
 801e2aa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801e2ac:	2112      	movs	r1, #18
 801e2ae:	6978      	ldr	r0, [r7, #20]
 801e2b0:	f002 fc9a 	bl	8020be8 <tcp_enqueue_flags>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801e2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d004      	beq.n	801e2ca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801e2c0:	2100      	movs	r1, #0
 801e2c2:	6978      	ldr	r0, [r7, #20]
 801e2c4:	f7fd ff0a 	bl	801c0dc <tcp_abandon>
      return;
 801e2c8:	e006      	b.n	801e2d8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801e2ca:	6978      	ldr	r0, [r7, #20]
 801e2cc:	f002 fd7a 	bl	8020dc4 <tcp_output>
  return;
 801e2d0:	e001      	b.n	801e2d6 <tcp_listen_input+0x1be>
    return;
 801e2d2:	bf00      	nop
 801e2d4:	e000      	b.n	801e2d8 <tcp_listen_input+0x1c0>
  return;
 801e2d6:	bf00      	nop
}
 801e2d8:	371c      	adds	r7, #28
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd90      	pop	{r4, r7, pc}
 801e2de:	bf00      	nop
 801e2e0:	20008764 	.word	0x20008764
 801e2e4:	080285ec 	.word	0x080285ec
 801e2e8:	080287e4 	.word	0x080287e4
 801e2ec:	08028638 	.word	0x08028638
 801e2f0:	2000875c 	.word	0x2000875c
 801e2f4:	20008762 	.word	0x20008762
 801e2f8:	20008758 	.word	0x20008758
 801e2fc:	20008748 	.word	0x20008748
 801e300:	2000cbb0 	.word	0x2000cbb0
 801e304:	2000cbb4 	.word	0x2000cbb4
 801e308:	2000cba0 	.word	0x2000cba0
 801e30c:	200102b4 	.word	0x200102b4
 801e310:	200102b0 	.word	0x200102b0

0801e314 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801e314:	b580      	push	{r7, lr}
 801e316:	b086      	sub	sp, #24
 801e318:	af04      	add	r7, sp, #16
 801e31a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801e31c:	4b2f      	ldr	r3, [pc, #188]	; (801e3dc <tcp_timewait_input+0xc8>)
 801e31e:	781b      	ldrb	r3, [r3, #0]
 801e320:	f003 0304 	and.w	r3, r3, #4
 801e324:	2b00      	cmp	r3, #0
 801e326:	d153      	bne.n	801e3d0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d106      	bne.n	801e33c <tcp_timewait_input+0x28>
 801e32e:	4b2c      	ldr	r3, [pc, #176]	; (801e3e0 <tcp_timewait_input+0xcc>)
 801e330:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e334:	492b      	ldr	r1, [pc, #172]	; (801e3e4 <tcp_timewait_input+0xd0>)
 801e336:	482c      	ldr	r0, [pc, #176]	; (801e3e8 <tcp_timewait_input+0xd4>)
 801e338:	f007 fdda 	bl	8025ef0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801e33c:	4b27      	ldr	r3, [pc, #156]	; (801e3dc <tcp_timewait_input+0xc8>)
 801e33e:	781b      	ldrb	r3, [r3, #0]
 801e340:	f003 0302 	and.w	r3, r3, #2
 801e344:	2b00      	cmp	r3, #0
 801e346:	d02a      	beq.n	801e39e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801e348:	4b28      	ldr	r3, [pc, #160]	; (801e3ec <tcp_timewait_input+0xd8>)
 801e34a:	681a      	ldr	r2, [r3, #0]
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e350:	1ad3      	subs	r3, r2, r3
 801e352:	2b00      	cmp	r3, #0
 801e354:	db2d      	blt.n	801e3b2 <tcp_timewait_input+0x9e>
 801e356:	4b25      	ldr	r3, [pc, #148]	; (801e3ec <tcp_timewait_input+0xd8>)
 801e358:	681a      	ldr	r2, [r3, #0]
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e35e:	6879      	ldr	r1, [r7, #4]
 801e360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e362:	440b      	add	r3, r1
 801e364:	1ad3      	subs	r3, r2, r3
 801e366:	2b00      	cmp	r3, #0
 801e368:	dc23      	bgt.n	801e3b2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e36a:	4b21      	ldr	r3, [pc, #132]	; (801e3f0 <tcp_timewait_input+0xdc>)
 801e36c:	6819      	ldr	r1, [r3, #0]
 801e36e:	4b21      	ldr	r3, [pc, #132]	; (801e3f4 <tcp_timewait_input+0xe0>)
 801e370:	881b      	ldrh	r3, [r3, #0]
 801e372:	461a      	mov	r2, r3
 801e374:	4b1d      	ldr	r3, [pc, #116]	; (801e3ec <tcp_timewait_input+0xd8>)
 801e376:	681b      	ldr	r3, [r3, #0]
 801e378:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e37a:	4b1f      	ldr	r3, [pc, #124]	; (801e3f8 <tcp_timewait_input+0xe4>)
 801e37c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e37e:	885b      	ldrh	r3, [r3, #2]
 801e380:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e382:	4a1d      	ldr	r2, [pc, #116]	; (801e3f8 <tcp_timewait_input+0xe4>)
 801e384:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e386:	8812      	ldrh	r2, [r2, #0]
 801e388:	b292      	uxth	r2, r2
 801e38a:	9202      	str	r2, [sp, #8]
 801e38c:	9301      	str	r3, [sp, #4]
 801e38e:	4b1b      	ldr	r3, [pc, #108]	; (801e3fc <tcp_timewait_input+0xe8>)
 801e390:	9300      	str	r3, [sp, #0]
 801e392:	4b1b      	ldr	r3, [pc, #108]	; (801e400 <tcp_timewait_input+0xec>)
 801e394:	4602      	mov	r2, r0
 801e396:	6878      	ldr	r0, [r7, #4]
 801e398:	f003 fac8 	bl	802192c <tcp_rst>
      return;
 801e39c:	e01b      	b.n	801e3d6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801e39e:	4b0f      	ldr	r3, [pc, #60]	; (801e3dc <tcp_timewait_input+0xc8>)
 801e3a0:	781b      	ldrb	r3, [r3, #0]
 801e3a2:	f003 0301 	and.w	r3, r3, #1
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d003      	beq.n	801e3b2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801e3aa:	4b16      	ldr	r3, [pc, #88]	; (801e404 <tcp_timewait_input+0xf0>)
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801e3b2:	4b10      	ldr	r3, [pc, #64]	; (801e3f4 <tcp_timewait_input+0xe0>)
 801e3b4:	881b      	ldrh	r3, [r3, #0]
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d00c      	beq.n	801e3d4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	8b5b      	ldrh	r3, [r3, #26]
 801e3be:	f043 0302 	orr.w	r3, r3, #2
 801e3c2:	b29a      	uxth	r2, r3
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801e3c8:	6878      	ldr	r0, [r7, #4]
 801e3ca:	f002 fcfb 	bl	8020dc4 <tcp_output>
  }
  return;
 801e3ce:	e001      	b.n	801e3d4 <tcp_timewait_input+0xc0>
    return;
 801e3d0:	bf00      	nop
 801e3d2:	e000      	b.n	801e3d6 <tcp_timewait_input+0xc2>
  return;
 801e3d4:	bf00      	nop
}
 801e3d6:	3708      	adds	r7, #8
 801e3d8:	46bd      	mov	sp, r7
 801e3da:	bd80      	pop	{r7, pc}
 801e3dc:	20008764 	.word	0x20008764
 801e3e0:	080285ec 	.word	0x080285ec
 801e3e4:	08028804 	.word	0x08028804
 801e3e8:	08028638 	.word	0x08028638
 801e3ec:	20008758 	.word	0x20008758
 801e3f0:	2000875c 	.word	0x2000875c
 801e3f4:	20008762 	.word	0x20008762
 801e3f8:	20008748 	.word	0x20008748
 801e3fc:	2000cbb0 	.word	0x2000cbb0
 801e400:	2000cbb4 	.word	0x2000cbb4
 801e404:	200102b8 	.word	0x200102b8

0801e408 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801e408:	b590      	push	{r4, r7, lr}
 801e40a:	b08d      	sub	sp, #52	; 0x34
 801e40c:	af04      	add	r7, sp, #16
 801e40e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801e410:	2300      	movs	r3, #0
 801e412:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801e414:	2300      	movs	r3, #0
 801e416:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d106      	bne.n	801e42c <tcp_process+0x24>
 801e41e:	4ba5      	ldr	r3, [pc, #660]	; (801e6b4 <tcp_process+0x2ac>)
 801e420:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801e424:	49a4      	ldr	r1, [pc, #656]	; (801e6b8 <tcp_process+0x2b0>)
 801e426:	48a5      	ldr	r0, [pc, #660]	; (801e6bc <tcp_process+0x2b4>)
 801e428:	f007 fd62 	bl	8025ef0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801e42c:	4ba4      	ldr	r3, [pc, #656]	; (801e6c0 <tcp_process+0x2b8>)
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	f003 0304 	and.w	r3, r3, #4
 801e434:	2b00      	cmp	r3, #0
 801e436:	d04e      	beq.n	801e4d6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	7d1b      	ldrb	r3, [r3, #20]
 801e43c:	2b02      	cmp	r3, #2
 801e43e:	d108      	bne.n	801e452 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e444:	4b9f      	ldr	r3, [pc, #636]	; (801e6c4 <tcp_process+0x2bc>)
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	429a      	cmp	r2, r3
 801e44a:	d123      	bne.n	801e494 <tcp_process+0x8c>
        acceptable = 1;
 801e44c:	2301      	movs	r3, #1
 801e44e:	76fb      	strb	r3, [r7, #27]
 801e450:	e020      	b.n	801e494 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e456:	4b9c      	ldr	r3, [pc, #624]	; (801e6c8 <tcp_process+0x2c0>)
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	429a      	cmp	r2, r3
 801e45c:	d102      	bne.n	801e464 <tcp_process+0x5c>
        acceptable = 1;
 801e45e:	2301      	movs	r3, #1
 801e460:	76fb      	strb	r3, [r7, #27]
 801e462:	e017      	b.n	801e494 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e464:	4b98      	ldr	r3, [pc, #608]	; (801e6c8 <tcp_process+0x2c0>)
 801e466:	681a      	ldr	r2, [r3, #0]
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e46c:	1ad3      	subs	r3, r2, r3
 801e46e:	2b00      	cmp	r3, #0
 801e470:	db10      	blt.n	801e494 <tcp_process+0x8c>
 801e472:	4b95      	ldr	r3, [pc, #596]	; (801e6c8 <tcp_process+0x2c0>)
 801e474:	681a      	ldr	r2, [r3, #0]
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e47a:	6879      	ldr	r1, [r7, #4]
 801e47c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e47e:	440b      	add	r3, r1
 801e480:	1ad3      	subs	r3, r2, r3
 801e482:	2b00      	cmp	r3, #0
 801e484:	dc06      	bgt.n	801e494 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	8b5b      	ldrh	r3, [r3, #26]
 801e48a:	f043 0302 	orr.w	r3, r3, #2
 801e48e:	b29a      	uxth	r2, r3
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801e494:	7efb      	ldrb	r3, [r7, #27]
 801e496:	2b00      	cmp	r3, #0
 801e498:	d01b      	beq.n	801e4d2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	7d1b      	ldrb	r3, [r3, #20]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d106      	bne.n	801e4b0 <tcp_process+0xa8>
 801e4a2:	4b84      	ldr	r3, [pc, #528]	; (801e6b4 <tcp_process+0x2ac>)
 801e4a4:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e4a8:	4988      	ldr	r1, [pc, #544]	; (801e6cc <tcp_process+0x2c4>)
 801e4aa:	4884      	ldr	r0, [pc, #528]	; (801e6bc <tcp_process+0x2b4>)
 801e4ac:	f007 fd20 	bl	8025ef0 <iprintf>
      recv_flags |= TF_RESET;
 801e4b0:	4b87      	ldr	r3, [pc, #540]	; (801e6d0 <tcp_process+0x2c8>)
 801e4b2:	781b      	ldrb	r3, [r3, #0]
 801e4b4:	f043 0308 	orr.w	r3, r3, #8
 801e4b8:	b2da      	uxtb	r2, r3
 801e4ba:	4b85      	ldr	r3, [pc, #532]	; (801e6d0 <tcp_process+0x2c8>)
 801e4bc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801e4be:	687b      	ldr	r3, [r7, #4]
 801e4c0:	8b5b      	ldrh	r3, [r3, #26]
 801e4c2:	f023 0301 	bic.w	r3, r3, #1
 801e4c6:	b29a      	uxth	r2, r3
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801e4cc:	f06f 030d 	mvn.w	r3, #13
 801e4d0:	e37a      	b.n	801ebc8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801e4d2:	2300      	movs	r3, #0
 801e4d4:	e378      	b.n	801ebc8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801e4d6:	4b7a      	ldr	r3, [pc, #488]	; (801e6c0 <tcp_process+0x2b8>)
 801e4d8:	781b      	ldrb	r3, [r3, #0]
 801e4da:	f003 0302 	and.w	r3, r3, #2
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d010      	beq.n	801e504 <tcp_process+0xfc>
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	7d1b      	ldrb	r3, [r3, #20]
 801e4e6:	2b02      	cmp	r3, #2
 801e4e8:	d00c      	beq.n	801e504 <tcp_process+0xfc>
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	7d1b      	ldrb	r3, [r3, #20]
 801e4ee:	2b03      	cmp	r3, #3
 801e4f0:	d008      	beq.n	801e504 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	8b5b      	ldrh	r3, [r3, #26]
 801e4f6:	f043 0302 	orr.w	r3, r3, #2
 801e4fa:	b29a      	uxth	r2, r3
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801e500:	2300      	movs	r3, #0
 801e502:	e361      	b.n	801ebc8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	8b5b      	ldrh	r3, [r3, #26]
 801e508:	f003 0310 	and.w	r3, r3, #16
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d103      	bne.n	801e518 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801e510:	4b70      	ldr	r3, [pc, #448]	; (801e6d4 <tcp_process+0x2cc>)
 801e512:	681a      	ldr	r2, [r3, #0]
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	2200      	movs	r2, #0
 801e51c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	2200      	movs	r2, #0
 801e524:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801e528:	6878      	ldr	r0, [r7, #4]
 801e52a:	f001 fc2d 	bl	801fd88 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	7d1b      	ldrb	r3, [r3, #20]
 801e532:	3b02      	subs	r3, #2
 801e534:	2b07      	cmp	r3, #7
 801e536:	f200 8337 	bhi.w	801eba8 <tcp_process+0x7a0>
 801e53a:	a201      	add	r2, pc, #4	; (adr r2, 801e540 <tcp_process+0x138>)
 801e53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e540:	0801e561 	.word	0x0801e561
 801e544:	0801e791 	.word	0x0801e791
 801e548:	0801e909 	.word	0x0801e909
 801e54c:	0801e933 	.word	0x0801e933
 801e550:	0801ea57 	.word	0x0801ea57
 801e554:	0801e909 	.word	0x0801e909
 801e558:	0801eae3 	.word	0x0801eae3
 801e55c:	0801eb73 	.word	0x0801eb73
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801e560:	4b57      	ldr	r3, [pc, #348]	; (801e6c0 <tcp_process+0x2b8>)
 801e562:	781b      	ldrb	r3, [r3, #0]
 801e564:	f003 0310 	and.w	r3, r3, #16
 801e568:	2b00      	cmp	r3, #0
 801e56a:	f000 80e4 	beq.w	801e736 <tcp_process+0x32e>
 801e56e:	4b54      	ldr	r3, [pc, #336]	; (801e6c0 <tcp_process+0x2b8>)
 801e570:	781b      	ldrb	r3, [r3, #0]
 801e572:	f003 0302 	and.w	r3, r3, #2
 801e576:	2b00      	cmp	r3, #0
 801e578:	f000 80dd 	beq.w	801e736 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e580:	1c5a      	adds	r2, r3, #1
 801e582:	4b50      	ldr	r3, [pc, #320]	; (801e6c4 <tcp_process+0x2bc>)
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	429a      	cmp	r2, r3
 801e588:	f040 80d5 	bne.w	801e736 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801e58c:	4b4e      	ldr	r3, [pc, #312]	; (801e6c8 <tcp_process+0x2c0>)
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	1c5a      	adds	r2, r3, #1
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801e59e:	4b49      	ldr	r3, [pc, #292]	; (801e6c4 <tcp_process+0x2bc>)
 801e5a0:	681a      	ldr	r2, [r3, #0]
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801e5a6:	4b4c      	ldr	r3, [pc, #304]	; (801e6d8 <tcp_process+0x2d0>)
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	89db      	ldrh	r3, [r3, #14]
 801e5ac:	b29a      	uxth	r2, r3
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e5c0:	4b41      	ldr	r3, [pc, #260]	; (801e6c8 <tcp_process+0x2c0>)
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	1e5a      	subs	r2, r3, #1
 801e5c6:	687b      	ldr	r3, [r7, #4]
 801e5c8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801e5ca:	687b      	ldr	r3, [r7, #4]
 801e5cc:	2204      	movs	r2, #4
 801e5ce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	3304      	adds	r3, #4
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f005 f8bd 	bl	8023758 <ip4_route>
 801e5de:	4601      	mov	r1, r0
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	3304      	adds	r3, #4
 801e5e4:	461a      	mov	r2, r3
 801e5e6:	4620      	mov	r0, r4
 801e5e8:	f7ff f88e 	bl	801d708 <tcp_eff_send_mss_netif>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	461a      	mov	r2, r3
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e5f8:	009a      	lsls	r2, r3, #2
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e5fe:	005b      	lsls	r3, r3, #1
 801e600:	f241 111c 	movw	r1, #4380	; 0x111c
 801e604:	428b      	cmp	r3, r1
 801e606:	bf38      	it	cc
 801e608:	460b      	movcc	r3, r1
 801e60a:	429a      	cmp	r2, r3
 801e60c:	d204      	bcs.n	801e618 <tcp_process+0x210>
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e612:	009b      	lsls	r3, r3, #2
 801e614:	b29b      	uxth	r3, r3
 801e616:	e00d      	b.n	801e634 <tcp_process+0x22c>
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e61c:	005b      	lsls	r3, r3, #1
 801e61e:	f241 121c 	movw	r2, #4380	; 0x111c
 801e622:	4293      	cmp	r3, r2
 801e624:	d904      	bls.n	801e630 <tcp_process+0x228>
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e62a:	005b      	lsls	r3, r3, #1
 801e62c:	b29b      	uxth	r3, r3
 801e62e:	e001      	b.n	801e634 <tcp_process+0x22c>
 801e630:	f241 131c 	movw	r3, #4380	; 0x111c
 801e634:	687a      	ldr	r2, [r7, #4]
 801e636:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e640:	2b00      	cmp	r3, #0
 801e642:	d106      	bne.n	801e652 <tcp_process+0x24a>
 801e644:	4b1b      	ldr	r3, [pc, #108]	; (801e6b4 <tcp_process+0x2ac>)
 801e646:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e64a:	4924      	ldr	r1, [pc, #144]	; (801e6dc <tcp_process+0x2d4>)
 801e64c:	481b      	ldr	r0, [pc, #108]	; (801e6bc <tcp_process+0x2b4>)
 801e64e:	f007 fc4f 	bl	8025ef0 <iprintf>
        --pcb->snd_queuelen;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e658:	3b01      	subs	r3, #1
 801e65a:	b29a      	uxth	r2, r3
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e666:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801e668:	69fb      	ldr	r3, [r7, #28]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d111      	bne.n	801e692 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e672:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e674:	69fb      	ldr	r3, [r7, #28]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d106      	bne.n	801e688 <tcp_process+0x280>
 801e67a:	4b0e      	ldr	r3, [pc, #56]	; (801e6b4 <tcp_process+0x2ac>)
 801e67c:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e680:	4917      	ldr	r1, [pc, #92]	; (801e6e0 <tcp_process+0x2d8>)
 801e682:	480e      	ldr	r0, [pc, #56]	; (801e6bc <tcp_process+0x2b4>)
 801e684:	f007 fc34 	bl	8025ef0 <iprintf>
          pcb->unsent = rseg->next;
 801e688:	69fb      	ldr	r3, [r7, #28]
 801e68a:	681a      	ldr	r2, [r3, #0]
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	66da      	str	r2, [r3, #108]	; 0x6c
 801e690:	e003      	b.n	801e69a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801e692:	69fb      	ldr	r3, [r7, #28]
 801e694:	681a      	ldr	r2, [r3, #0]
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801e69a:	69f8      	ldr	r0, [r7, #28]
 801e69c:	f7fe fc6f 	bl	801cf7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d11d      	bne.n	801e6e4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e6ae:	861a      	strh	r2, [r3, #48]	; 0x30
 801e6b0:	e01f      	b.n	801e6f2 <tcp_process+0x2ea>
 801e6b2:	bf00      	nop
 801e6b4:	080285ec 	.word	0x080285ec
 801e6b8:	08028824 	.word	0x08028824
 801e6bc:	08028638 	.word	0x08028638
 801e6c0:	20008764 	.word	0x20008764
 801e6c4:	2000875c 	.word	0x2000875c
 801e6c8:	20008758 	.word	0x20008758
 801e6cc:	08028840 	.word	0x08028840
 801e6d0:	20008765 	.word	0x20008765
 801e6d4:	200102b8 	.word	0x200102b8
 801e6d8:	20008748 	.word	0x20008748
 801e6dc:	08028860 	.word	0x08028860
 801e6e0:	08028878 	.word	0x08028878
        } else {
          pcb->rtime = 0;
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	2200      	movs	r2, #0
 801e6e8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	2200      	movs	r2, #0
 801e6ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d00a      	beq.n	801e712 <tcp_process+0x30a>
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e702:	687a      	ldr	r2, [r7, #4]
 801e704:	6910      	ldr	r0, [r2, #16]
 801e706:	2200      	movs	r2, #0
 801e708:	6879      	ldr	r1, [r7, #4]
 801e70a:	4798      	blx	r3
 801e70c:	4603      	mov	r3, r0
 801e70e:	76bb      	strb	r3, [r7, #26]
 801e710:	e001      	b.n	801e716 <tcp_process+0x30e>
 801e712:	2300      	movs	r3, #0
 801e714:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801e716:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e71a:	f113 0f0d 	cmn.w	r3, #13
 801e71e:	d102      	bne.n	801e726 <tcp_process+0x31e>
          return ERR_ABRT;
 801e720:	f06f 030c 	mvn.w	r3, #12
 801e724:	e250      	b.n	801ebc8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	8b5b      	ldrh	r3, [r3, #26]
 801e72a:	f043 0302 	orr.w	r3, r3, #2
 801e72e:	b29a      	uxth	r2, r3
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801e734:	e23a      	b.n	801ebac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801e736:	4b9d      	ldr	r3, [pc, #628]	; (801e9ac <tcp_process+0x5a4>)
 801e738:	781b      	ldrb	r3, [r3, #0]
 801e73a:	f003 0310 	and.w	r3, r3, #16
 801e73e:	2b00      	cmp	r3, #0
 801e740:	f000 8234 	beq.w	801ebac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e744:	4b9a      	ldr	r3, [pc, #616]	; (801e9b0 <tcp_process+0x5a8>)
 801e746:	6819      	ldr	r1, [r3, #0]
 801e748:	4b9a      	ldr	r3, [pc, #616]	; (801e9b4 <tcp_process+0x5ac>)
 801e74a:	881b      	ldrh	r3, [r3, #0]
 801e74c:	461a      	mov	r2, r3
 801e74e:	4b9a      	ldr	r3, [pc, #616]	; (801e9b8 <tcp_process+0x5b0>)
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e754:	4b99      	ldr	r3, [pc, #612]	; (801e9bc <tcp_process+0x5b4>)
 801e756:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e758:	885b      	ldrh	r3, [r3, #2]
 801e75a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e75c:	4a97      	ldr	r2, [pc, #604]	; (801e9bc <tcp_process+0x5b4>)
 801e75e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e760:	8812      	ldrh	r2, [r2, #0]
 801e762:	b292      	uxth	r2, r2
 801e764:	9202      	str	r2, [sp, #8]
 801e766:	9301      	str	r3, [sp, #4]
 801e768:	4b95      	ldr	r3, [pc, #596]	; (801e9c0 <tcp_process+0x5b8>)
 801e76a:	9300      	str	r3, [sp, #0]
 801e76c:	4b95      	ldr	r3, [pc, #596]	; (801e9c4 <tcp_process+0x5bc>)
 801e76e:	4602      	mov	r2, r0
 801e770:	6878      	ldr	r0, [r7, #4]
 801e772:	f003 f8db 	bl	802192c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e77c:	2b05      	cmp	r3, #5
 801e77e:	f200 8215 	bhi.w	801ebac <tcp_process+0x7a4>
          pcb->rtime = 0;
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	2200      	movs	r2, #0
 801e786:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801e788:	6878      	ldr	r0, [r7, #4]
 801e78a:	f002 fea5 	bl	80214d8 <tcp_rexmit_rto>
      break;
 801e78e:	e20d      	b.n	801ebac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801e790:	4b86      	ldr	r3, [pc, #536]	; (801e9ac <tcp_process+0x5a4>)
 801e792:	781b      	ldrb	r3, [r3, #0]
 801e794:	f003 0310 	and.w	r3, r3, #16
 801e798:	2b00      	cmp	r3, #0
 801e79a:	f000 80a1 	beq.w	801e8e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e79e:	4b84      	ldr	r3, [pc, #528]	; (801e9b0 <tcp_process+0x5a8>)
 801e7a0:	681a      	ldr	r2, [r3, #0]
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e7a6:	1ad3      	subs	r3, r2, r3
 801e7a8:	3b01      	subs	r3, #1
 801e7aa:	2b00      	cmp	r3, #0
 801e7ac:	db7e      	blt.n	801e8ac <tcp_process+0x4a4>
 801e7ae:	4b80      	ldr	r3, [pc, #512]	; (801e9b0 <tcp_process+0x5a8>)
 801e7b0:	681a      	ldr	r2, [r3, #0]
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e7b6:	1ad3      	subs	r3, r2, r3
 801e7b8:	2b00      	cmp	r3, #0
 801e7ba:	dc77      	bgt.n	801e8ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	2204      	movs	r2, #4
 801e7c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e7c6:	2b00      	cmp	r3, #0
 801e7c8:	d102      	bne.n	801e7d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801e7ca:	23fa      	movs	r3, #250	; 0xfa
 801e7cc:	76bb      	strb	r3, [r7, #26]
 801e7ce:	e01d      	b.n	801e80c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e7d0:	687b      	ldr	r3, [r7, #4]
 801e7d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e7d4:	699b      	ldr	r3, [r3, #24]
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d106      	bne.n	801e7e8 <tcp_process+0x3e0>
 801e7da:	4b7b      	ldr	r3, [pc, #492]	; (801e9c8 <tcp_process+0x5c0>)
 801e7dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e7e0:	497a      	ldr	r1, [pc, #488]	; (801e9cc <tcp_process+0x5c4>)
 801e7e2:	487b      	ldr	r0, [pc, #492]	; (801e9d0 <tcp_process+0x5c8>)
 801e7e4:	f007 fb84 	bl	8025ef0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e7e8:	687b      	ldr	r3, [r7, #4]
 801e7ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e7ec:	699b      	ldr	r3, [r3, #24]
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d00a      	beq.n	801e808 <tcp_process+0x400>
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e7f6:	699b      	ldr	r3, [r3, #24]
 801e7f8:	687a      	ldr	r2, [r7, #4]
 801e7fa:	6910      	ldr	r0, [r2, #16]
 801e7fc:	2200      	movs	r2, #0
 801e7fe:	6879      	ldr	r1, [r7, #4]
 801e800:	4798      	blx	r3
 801e802:	4603      	mov	r3, r0
 801e804:	76bb      	strb	r3, [r7, #26]
 801e806:	e001      	b.n	801e80c <tcp_process+0x404>
 801e808:	23f0      	movs	r3, #240	; 0xf0
 801e80a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801e80c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e810:	2b00      	cmp	r3, #0
 801e812:	d00a      	beq.n	801e82a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801e814:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801e818:	f113 0f0d 	cmn.w	r3, #13
 801e81c:	d002      	beq.n	801e824 <tcp_process+0x41c>
              tcp_abort(pcb);
 801e81e:	6878      	ldr	r0, [r7, #4]
 801e820:	f7fd fd1a 	bl	801c258 <tcp_abort>
            }
            return ERR_ABRT;
 801e824:	f06f 030c 	mvn.w	r3, #12
 801e828:	e1ce      	b.n	801ebc8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801e82a:	6878      	ldr	r0, [r7, #4]
 801e82c:	f000 fae0 	bl	801edf0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801e830:	4b68      	ldr	r3, [pc, #416]	; (801e9d4 <tcp_process+0x5cc>)
 801e832:	881b      	ldrh	r3, [r3, #0]
 801e834:	2b00      	cmp	r3, #0
 801e836:	d005      	beq.n	801e844 <tcp_process+0x43c>
            recv_acked--;
 801e838:	4b66      	ldr	r3, [pc, #408]	; (801e9d4 <tcp_process+0x5cc>)
 801e83a:	881b      	ldrh	r3, [r3, #0]
 801e83c:	3b01      	subs	r3, #1
 801e83e:	b29a      	uxth	r2, r3
 801e840:	4b64      	ldr	r3, [pc, #400]	; (801e9d4 <tcp_process+0x5cc>)
 801e842:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e848:	009a      	lsls	r2, r3, #2
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e84e:	005b      	lsls	r3, r3, #1
 801e850:	f241 111c 	movw	r1, #4380	; 0x111c
 801e854:	428b      	cmp	r3, r1
 801e856:	bf38      	it	cc
 801e858:	460b      	movcc	r3, r1
 801e85a:	429a      	cmp	r2, r3
 801e85c:	d204      	bcs.n	801e868 <tcp_process+0x460>
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e862:	009b      	lsls	r3, r3, #2
 801e864:	b29b      	uxth	r3, r3
 801e866:	e00d      	b.n	801e884 <tcp_process+0x47c>
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e86c:	005b      	lsls	r3, r3, #1
 801e86e:	f241 121c 	movw	r2, #4380	; 0x111c
 801e872:	4293      	cmp	r3, r2
 801e874:	d904      	bls.n	801e880 <tcp_process+0x478>
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e87a:	005b      	lsls	r3, r3, #1
 801e87c:	b29b      	uxth	r3, r3
 801e87e:	e001      	b.n	801e884 <tcp_process+0x47c>
 801e880:	f241 131c 	movw	r3, #4380	; 0x111c
 801e884:	687a      	ldr	r2, [r7, #4]
 801e886:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801e88a:	4b53      	ldr	r3, [pc, #332]	; (801e9d8 <tcp_process+0x5d0>)
 801e88c:	781b      	ldrb	r3, [r3, #0]
 801e88e:	f003 0320 	and.w	r3, r3, #32
 801e892:	2b00      	cmp	r3, #0
 801e894:	d037      	beq.n	801e906 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	8b5b      	ldrh	r3, [r3, #26]
 801e89a:	f043 0302 	orr.w	r3, r3, #2
 801e89e:	b29a      	uxth	r2, r3
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	2207      	movs	r2, #7
 801e8a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801e8aa:	e02c      	b.n	801e906 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e8ac:	4b40      	ldr	r3, [pc, #256]	; (801e9b0 <tcp_process+0x5a8>)
 801e8ae:	6819      	ldr	r1, [r3, #0]
 801e8b0:	4b40      	ldr	r3, [pc, #256]	; (801e9b4 <tcp_process+0x5ac>)
 801e8b2:	881b      	ldrh	r3, [r3, #0]
 801e8b4:	461a      	mov	r2, r3
 801e8b6:	4b40      	ldr	r3, [pc, #256]	; (801e9b8 <tcp_process+0x5b0>)
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e8bc:	4b3f      	ldr	r3, [pc, #252]	; (801e9bc <tcp_process+0x5b4>)
 801e8be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e8c0:	885b      	ldrh	r3, [r3, #2]
 801e8c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e8c4:	4a3d      	ldr	r2, [pc, #244]	; (801e9bc <tcp_process+0x5b4>)
 801e8c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e8c8:	8812      	ldrh	r2, [r2, #0]
 801e8ca:	b292      	uxth	r2, r2
 801e8cc:	9202      	str	r2, [sp, #8]
 801e8ce:	9301      	str	r3, [sp, #4]
 801e8d0:	4b3b      	ldr	r3, [pc, #236]	; (801e9c0 <tcp_process+0x5b8>)
 801e8d2:	9300      	str	r3, [sp, #0]
 801e8d4:	4b3b      	ldr	r3, [pc, #236]	; (801e9c4 <tcp_process+0x5bc>)
 801e8d6:	4602      	mov	r2, r0
 801e8d8:	6878      	ldr	r0, [r7, #4]
 801e8da:	f003 f827 	bl	802192c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801e8de:	e167      	b.n	801ebb0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e8e0:	4b32      	ldr	r3, [pc, #200]	; (801e9ac <tcp_process+0x5a4>)
 801e8e2:	781b      	ldrb	r3, [r3, #0]
 801e8e4:	f003 0302 	and.w	r3, r3, #2
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	f000 8161 	beq.w	801ebb0 <tcp_process+0x7a8>
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8f2:	1e5a      	subs	r2, r3, #1
 801e8f4:	4b30      	ldr	r3, [pc, #192]	; (801e9b8 <tcp_process+0x5b0>)
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	429a      	cmp	r2, r3
 801e8fa:	f040 8159 	bne.w	801ebb0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801e8fe:	6878      	ldr	r0, [r7, #4]
 801e900:	f002 fe0c 	bl	802151c <tcp_rexmit>
      break;
 801e904:	e154      	b.n	801ebb0 <tcp_process+0x7a8>
 801e906:	e153      	b.n	801ebb0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801e908:	6878      	ldr	r0, [r7, #4]
 801e90a:	f000 fa71 	bl	801edf0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801e90e:	4b32      	ldr	r3, [pc, #200]	; (801e9d8 <tcp_process+0x5d0>)
 801e910:	781b      	ldrb	r3, [r3, #0]
 801e912:	f003 0320 	and.w	r3, r3, #32
 801e916:	2b00      	cmp	r3, #0
 801e918:	f000 814c 	beq.w	801ebb4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	8b5b      	ldrh	r3, [r3, #26]
 801e920:	f043 0302 	orr.w	r3, r3, #2
 801e924:	b29a      	uxth	r2, r3
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	2207      	movs	r2, #7
 801e92e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801e930:	e140      	b.n	801ebb4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801e932:	6878      	ldr	r0, [r7, #4]
 801e934:	f000 fa5c 	bl	801edf0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e938:	4b27      	ldr	r3, [pc, #156]	; (801e9d8 <tcp_process+0x5d0>)
 801e93a:	781b      	ldrb	r3, [r3, #0]
 801e93c:	f003 0320 	and.w	r3, r3, #32
 801e940:	2b00      	cmp	r3, #0
 801e942:	d071      	beq.n	801ea28 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e944:	4b19      	ldr	r3, [pc, #100]	; (801e9ac <tcp_process+0x5a4>)
 801e946:	781b      	ldrb	r3, [r3, #0]
 801e948:	f003 0310 	and.w	r3, r3, #16
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d060      	beq.n	801ea12 <tcp_process+0x60a>
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e954:	4b16      	ldr	r3, [pc, #88]	; (801e9b0 <tcp_process+0x5a8>)
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	429a      	cmp	r2, r3
 801e95a:	d15a      	bne.n	801ea12 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e960:	2b00      	cmp	r3, #0
 801e962:	d156      	bne.n	801ea12 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	8b5b      	ldrh	r3, [r3, #26]
 801e968:	f043 0302 	orr.w	r3, r3, #2
 801e96c:	b29a      	uxth	r2, r3
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801e972:	6878      	ldr	r0, [r7, #4]
 801e974:	f7fe fdbe 	bl	801d4f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801e978:	4b18      	ldr	r3, [pc, #96]	; (801e9dc <tcp_process+0x5d4>)
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	687a      	ldr	r2, [r7, #4]
 801e97e:	429a      	cmp	r2, r3
 801e980:	d105      	bne.n	801e98e <tcp_process+0x586>
 801e982:	4b16      	ldr	r3, [pc, #88]	; (801e9dc <tcp_process+0x5d4>)
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	68db      	ldr	r3, [r3, #12]
 801e988:	4a14      	ldr	r2, [pc, #80]	; (801e9dc <tcp_process+0x5d4>)
 801e98a:	6013      	str	r3, [r2, #0]
 801e98c:	e02e      	b.n	801e9ec <tcp_process+0x5e4>
 801e98e:	4b13      	ldr	r3, [pc, #76]	; (801e9dc <tcp_process+0x5d4>)
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	617b      	str	r3, [r7, #20]
 801e994:	e027      	b.n	801e9e6 <tcp_process+0x5de>
 801e996:	697b      	ldr	r3, [r7, #20]
 801e998:	68db      	ldr	r3, [r3, #12]
 801e99a:	687a      	ldr	r2, [r7, #4]
 801e99c:	429a      	cmp	r2, r3
 801e99e:	d11f      	bne.n	801e9e0 <tcp_process+0x5d8>
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	68da      	ldr	r2, [r3, #12]
 801e9a4:	697b      	ldr	r3, [r7, #20]
 801e9a6:	60da      	str	r2, [r3, #12]
 801e9a8:	e020      	b.n	801e9ec <tcp_process+0x5e4>
 801e9aa:	bf00      	nop
 801e9ac:	20008764 	.word	0x20008764
 801e9b0:	2000875c 	.word	0x2000875c
 801e9b4:	20008762 	.word	0x20008762
 801e9b8:	20008758 	.word	0x20008758
 801e9bc:	20008748 	.word	0x20008748
 801e9c0:	2000cbb0 	.word	0x2000cbb0
 801e9c4:	2000cbb4 	.word	0x2000cbb4
 801e9c8:	080285ec 	.word	0x080285ec
 801e9cc:	0802888c 	.word	0x0802888c
 801e9d0:	08028638 	.word	0x08028638
 801e9d4:	20008760 	.word	0x20008760
 801e9d8:	20008765 	.word	0x20008765
 801e9dc:	200102b4 	.word	0x200102b4
 801e9e0:	697b      	ldr	r3, [r7, #20]
 801e9e2:	68db      	ldr	r3, [r3, #12]
 801e9e4:	617b      	str	r3, [r7, #20]
 801e9e6:	697b      	ldr	r3, [r7, #20]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d1d4      	bne.n	801e996 <tcp_process+0x58e>
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	2200      	movs	r2, #0
 801e9f0:	60da      	str	r2, [r3, #12]
 801e9f2:	4b77      	ldr	r3, [pc, #476]	; (801ebd0 <tcp_process+0x7c8>)
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	220a      	movs	r2, #10
 801e9fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801e9fe:	4b75      	ldr	r3, [pc, #468]	; (801ebd4 <tcp_process+0x7cc>)
 801ea00:	681a      	ldr	r2, [r3, #0]
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	60da      	str	r2, [r3, #12]
 801ea06:	4a73      	ldr	r2, [pc, #460]	; (801ebd4 <tcp_process+0x7cc>)
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	6013      	str	r3, [r2, #0]
 801ea0c:	f003 f950 	bl	8021cb0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801ea10:	e0d2      	b.n	801ebb8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	8b5b      	ldrh	r3, [r3, #26]
 801ea16:	f043 0302 	orr.w	r3, r3, #2
 801ea1a:	b29a      	uxth	r2, r3
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2208      	movs	r2, #8
 801ea24:	751a      	strb	r2, [r3, #20]
      break;
 801ea26:	e0c7      	b.n	801ebb8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ea28:	4b6b      	ldr	r3, [pc, #428]	; (801ebd8 <tcp_process+0x7d0>)
 801ea2a:	781b      	ldrb	r3, [r3, #0]
 801ea2c:	f003 0310 	and.w	r3, r3, #16
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	f000 80c1 	beq.w	801ebb8 <tcp_process+0x7b0>
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea3a:	4b68      	ldr	r3, [pc, #416]	; (801ebdc <tcp_process+0x7d4>)
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	429a      	cmp	r2, r3
 801ea40:	f040 80ba 	bne.w	801ebb8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f040 80b5 	bne.w	801ebb8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	2206      	movs	r2, #6
 801ea52:	751a      	strb	r2, [r3, #20]
      break;
 801ea54:	e0b0      	b.n	801ebb8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801ea56:	6878      	ldr	r0, [r7, #4]
 801ea58:	f000 f9ca 	bl	801edf0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801ea5c:	4b60      	ldr	r3, [pc, #384]	; (801ebe0 <tcp_process+0x7d8>)
 801ea5e:	781b      	ldrb	r3, [r3, #0]
 801ea60:	f003 0320 	and.w	r3, r3, #32
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	f000 80a9 	beq.w	801ebbc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	8b5b      	ldrh	r3, [r3, #26]
 801ea6e:	f043 0302 	orr.w	r3, r3, #2
 801ea72:	b29a      	uxth	r2, r3
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801ea78:	6878      	ldr	r0, [r7, #4]
 801ea7a:	f7fe fd3b 	bl	801d4f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801ea7e:	4b59      	ldr	r3, [pc, #356]	; (801ebe4 <tcp_process+0x7dc>)
 801ea80:	681b      	ldr	r3, [r3, #0]
 801ea82:	687a      	ldr	r2, [r7, #4]
 801ea84:	429a      	cmp	r2, r3
 801ea86:	d105      	bne.n	801ea94 <tcp_process+0x68c>
 801ea88:	4b56      	ldr	r3, [pc, #344]	; (801ebe4 <tcp_process+0x7dc>)
 801ea8a:	681b      	ldr	r3, [r3, #0]
 801ea8c:	68db      	ldr	r3, [r3, #12]
 801ea8e:	4a55      	ldr	r2, [pc, #340]	; (801ebe4 <tcp_process+0x7dc>)
 801ea90:	6013      	str	r3, [r2, #0]
 801ea92:	e013      	b.n	801eabc <tcp_process+0x6b4>
 801ea94:	4b53      	ldr	r3, [pc, #332]	; (801ebe4 <tcp_process+0x7dc>)
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	613b      	str	r3, [r7, #16]
 801ea9a:	e00c      	b.n	801eab6 <tcp_process+0x6ae>
 801ea9c:	693b      	ldr	r3, [r7, #16]
 801ea9e:	68db      	ldr	r3, [r3, #12]
 801eaa0:	687a      	ldr	r2, [r7, #4]
 801eaa2:	429a      	cmp	r2, r3
 801eaa4:	d104      	bne.n	801eab0 <tcp_process+0x6a8>
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	68da      	ldr	r2, [r3, #12]
 801eaaa:	693b      	ldr	r3, [r7, #16]
 801eaac:	60da      	str	r2, [r3, #12]
 801eaae:	e005      	b.n	801eabc <tcp_process+0x6b4>
 801eab0:	693b      	ldr	r3, [r7, #16]
 801eab2:	68db      	ldr	r3, [r3, #12]
 801eab4:	613b      	str	r3, [r7, #16]
 801eab6:	693b      	ldr	r3, [r7, #16]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d1ef      	bne.n	801ea9c <tcp_process+0x694>
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	2200      	movs	r2, #0
 801eac0:	60da      	str	r2, [r3, #12]
 801eac2:	4b43      	ldr	r3, [pc, #268]	; (801ebd0 <tcp_process+0x7c8>)
 801eac4:	2201      	movs	r2, #1
 801eac6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	220a      	movs	r2, #10
 801eacc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801eace:	4b41      	ldr	r3, [pc, #260]	; (801ebd4 <tcp_process+0x7cc>)
 801ead0:	681a      	ldr	r2, [r3, #0]
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	60da      	str	r2, [r3, #12]
 801ead6:	4a3f      	ldr	r2, [pc, #252]	; (801ebd4 <tcp_process+0x7cc>)
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	6013      	str	r3, [r2, #0]
 801eadc:	f003 f8e8 	bl	8021cb0 <tcp_timer_needed>
      }
      break;
 801eae0:	e06c      	b.n	801ebbc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801eae2:	6878      	ldr	r0, [r7, #4]
 801eae4:	f000 f984 	bl	801edf0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801eae8:	4b3b      	ldr	r3, [pc, #236]	; (801ebd8 <tcp_process+0x7d0>)
 801eaea:	781b      	ldrb	r3, [r3, #0]
 801eaec:	f003 0310 	and.w	r3, r3, #16
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d065      	beq.n	801ebc0 <tcp_process+0x7b8>
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801eaf8:	4b38      	ldr	r3, [pc, #224]	; (801ebdc <tcp_process+0x7d4>)
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	429a      	cmp	r2, r3
 801eafe:	d15f      	bne.n	801ebc0 <tcp_process+0x7b8>
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d15b      	bne.n	801ebc0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801eb08:	6878      	ldr	r0, [r7, #4]
 801eb0a:	f7fe fcf3 	bl	801d4f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801eb0e:	4b35      	ldr	r3, [pc, #212]	; (801ebe4 <tcp_process+0x7dc>)
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	687a      	ldr	r2, [r7, #4]
 801eb14:	429a      	cmp	r2, r3
 801eb16:	d105      	bne.n	801eb24 <tcp_process+0x71c>
 801eb18:	4b32      	ldr	r3, [pc, #200]	; (801ebe4 <tcp_process+0x7dc>)
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	68db      	ldr	r3, [r3, #12]
 801eb1e:	4a31      	ldr	r2, [pc, #196]	; (801ebe4 <tcp_process+0x7dc>)
 801eb20:	6013      	str	r3, [r2, #0]
 801eb22:	e013      	b.n	801eb4c <tcp_process+0x744>
 801eb24:	4b2f      	ldr	r3, [pc, #188]	; (801ebe4 <tcp_process+0x7dc>)
 801eb26:	681b      	ldr	r3, [r3, #0]
 801eb28:	60fb      	str	r3, [r7, #12]
 801eb2a:	e00c      	b.n	801eb46 <tcp_process+0x73e>
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	68db      	ldr	r3, [r3, #12]
 801eb30:	687a      	ldr	r2, [r7, #4]
 801eb32:	429a      	cmp	r2, r3
 801eb34:	d104      	bne.n	801eb40 <tcp_process+0x738>
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	68da      	ldr	r2, [r3, #12]
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	60da      	str	r2, [r3, #12]
 801eb3e:	e005      	b.n	801eb4c <tcp_process+0x744>
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	68db      	ldr	r3, [r3, #12]
 801eb44:	60fb      	str	r3, [r7, #12]
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d1ef      	bne.n	801eb2c <tcp_process+0x724>
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	2200      	movs	r2, #0
 801eb50:	60da      	str	r2, [r3, #12]
 801eb52:	4b1f      	ldr	r3, [pc, #124]	; (801ebd0 <tcp_process+0x7c8>)
 801eb54:	2201      	movs	r2, #1
 801eb56:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801eb58:	687b      	ldr	r3, [r7, #4]
 801eb5a:	220a      	movs	r2, #10
 801eb5c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801eb5e:	4b1d      	ldr	r3, [pc, #116]	; (801ebd4 <tcp_process+0x7cc>)
 801eb60:	681a      	ldr	r2, [r3, #0]
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	60da      	str	r2, [r3, #12]
 801eb66:	4a1b      	ldr	r2, [pc, #108]	; (801ebd4 <tcp_process+0x7cc>)
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	6013      	str	r3, [r2, #0]
 801eb6c:	f003 f8a0 	bl	8021cb0 <tcp_timer_needed>
      }
      break;
 801eb70:	e026      	b.n	801ebc0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801eb72:	6878      	ldr	r0, [r7, #4]
 801eb74:	f000 f93c 	bl	801edf0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801eb78:	4b17      	ldr	r3, [pc, #92]	; (801ebd8 <tcp_process+0x7d0>)
 801eb7a:	781b      	ldrb	r3, [r3, #0]
 801eb7c:	f003 0310 	and.w	r3, r3, #16
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d01f      	beq.n	801ebc4 <tcp_process+0x7bc>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801eb88:	4b14      	ldr	r3, [pc, #80]	; (801ebdc <tcp_process+0x7d4>)
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	429a      	cmp	r2, r3
 801eb8e:	d119      	bne.n	801ebc4 <tcp_process+0x7bc>
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb94:	2b00      	cmp	r3, #0
 801eb96:	d115      	bne.n	801ebc4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801eb98:	4b11      	ldr	r3, [pc, #68]	; (801ebe0 <tcp_process+0x7d8>)
 801eb9a:	781b      	ldrb	r3, [r3, #0]
 801eb9c:	f043 0310 	orr.w	r3, r3, #16
 801eba0:	b2da      	uxtb	r2, r3
 801eba2:	4b0f      	ldr	r3, [pc, #60]	; (801ebe0 <tcp_process+0x7d8>)
 801eba4:	701a      	strb	r2, [r3, #0]
      }
      break;
 801eba6:	e00d      	b.n	801ebc4 <tcp_process+0x7bc>
    default:
      break;
 801eba8:	bf00      	nop
 801ebaa:	e00c      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebac:	bf00      	nop
 801ebae:	e00a      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebb0:	bf00      	nop
 801ebb2:	e008      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebb4:	bf00      	nop
 801ebb6:	e006      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebb8:	bf00      	nop
 801ebba:	e004      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebbc:	bf00      	nop
 801ebbe:	e002      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebc0:	bf00      	nop
 801ebc2:	e000      	b.n	801ebc6 <tcp_process+0x7be>
      break;
 801ebc4:	bf00      	nop
  }
  return ERR_OK;
 801ebc6:	2300      	movs	r3, #0
}
 801ebc8:	4618      	mov	r0, r3
 801ebca:	3724      	adds	r7, #36	; 0x24
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	bd90      	pop	{r4, r7, pc}
 801ebd0:	200102b0 	.word	0x200102b0
 801ebd4:	200102c4 	.word	0x200102c4
 801ebd8:	20008764 	.word	0x20008764
 801ebdc:	2000875c 	.word	0x2000875c
 801ebe0:	20008765 	.word	0x20008765
 801ebe4:	200102b4 	.word	0x200102b4

0801ebe8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801ebe8:	b590      	push	{r4, r7, lr}
 801ebea:	b085      	sub	sp, #20
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	6078      	str	r0, [r7, #4]
 801ebf0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	d106      	bne.n	801ec06 <tcp_oos_insert_segment+0x1e>
 801ebf8:	4b3b      	ldr	r3, [pc, #236]	; (801ece8 <tcp_oos_insert_segment+0x100>)
 801ebfa:	f240 421f 	movw	r2, #1055	; 0x41f
 801ebfe:	493b      	ldr	r1, [pc, #236]	; (801ecec <tcp_oos_insert_segment+0x104>)
 801ec00:	483b      	ldr	r0, [pc, #236]	; (801ecf0 <tcp_oos_insert_segment+0x108>)
 801ec02:	f007 f975 	bl	8025ef0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	68db      	ldr	r3, [r3, #12]
 801ec0a:	899b      	ldrh	r3, [r3, #12]
 801ec0c:	b29b      	uxth	r3, r3
 801ec0e:	4618      	mov	r0, r3
 801ec10:	f7fb f986 	bl	8019f20 <lwip_htons>
 801ec14:	4603      	mov	r3, r0
 801ec16:	b2db      	uxtb	r3, r3
 801ec18:	f003 0301 	and.w	r3, r3, #1
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d028      	beq.n	801ec72 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801ec20:	6838      	ldr	r0, [r7, #0]
 801ec22:	f7fe f997 	bl	801cf54 <tcp_segs_free>
    next = NULL;
 801ec26:	2300      	movs	r3, #0
 801ec28:	603b      	str	r3, [r7, #0]
 801ec2a:	e056      	b.n	801ecda <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ec2c:	683b      	ldr	r3, [r7, #0]
 801ec2e:	68db      	ldr	r3, [r3, #12]
 801ec30:	899b      	ldrh	r3, [r3, #12]
 801ec32:	b29b      	uxth	r3, r3
 801ec34:	4618      	mov	r0, r3
 801ec36:	f7fb f973 	bl	8019f20 <lwip_htons>
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	b2db      	uxtb	r3, r3
 801ec3e:	f003 0301 	and.w	r3, r3, #1
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d00d      	beq.n	801ec62 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ec46:	687b      	ldr	r3, [r7, #4]
 801ec48:	68db      	ldr	r3, [r3, #12]
 801ec4a:	899b      	ldrh	r3, [r3, #12]
 801ec4c:	b29c      	uxth	r4, r3
 801ec4e:	2001      	movs	r0, #1
 801ec50:	f7fb f966 	bl	8019f20 <lwip_htons>
 801ec54:	4603      	mov	r3, r0
 801ec56:	461a      	mov	r2, r3
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	68db      	ldr	r3, [r3, #12]
 801ec5c:	4322      	orrs	r2, r4
 801ec5e:	b292      	uxth	r2, r2
 801ec60:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801ec62:	683b      	ldr	r3, [r7, #0]
 801ec64:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801ec6c:	68f8      	ldr	r0, [r7, #12]
 801ec6e:	f7fe f986 	bl	801cf7e <tcp_seg_free>
    while (next &&
 801ec72:	683b      	ldr	r3, [r7, #0]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d00e      	beq.n	801ec96 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	891b      	ldrh	r3, [r3, #8]
 801ec7c:	461a      	mov	r2, r3
 801ec7e:	4b1d      	ldr	r3, [pc, #116]	; (801ecf4 <tcp_oos_insert_segment+0x10c>)
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	441a      	add	r2, r3
 801ec84:	683b      	ldr	r3, [r7, #0]
 801ec86:	68db      	ldr	r3, [r3, #12]
 801ec88:	685b      	ldr	r3, [r3, #4]
 801ec8a:	6839      	ldr	r1, [r7, #0]
 801ec8c:	8909      	ldrh	r1, [r1, #8]
 801ec8e:	440b      	add	r3, r1
 801ec90:	1ad3      	subs	r3, r2, r3
    while (next &&
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	daca      	bge.n	801ec2c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d01e      	beq.n	801ecda <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	891b      	ldrh	r3, [r3, #8]
 801eca0:	461a      	mov	r2, r3
 801eca2:	4b14      	ldr	r3, [pc, #80]	; (801ecf4 <tcp_oos_insert_segment+0x10c>)
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	441a      	add	r2, r3
 801eca8:	683b      	ldr	r3, [r7, #0]
 801ecaa:	68db      	ldr	r3, [r3, #12]
 801ecac:	685b      	ldr	r3, [r3, #4]
 801ecae:	1ad3      	subs	r3, r2, r3
    if (next &&
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	dd12      	ble.n	801ecda <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	68db      	ldr	r3, [r3, #12]
 801ecb8:	685b      	ldr	r3, [r3, #4]
 801ecba:	b29a      	uxth	r2, r3
 801ecbc:	4b0d      	ldr	r3, [pc, #52]	; (801ecf4 <tcp_oos_insert_segment+0x10c>)
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	b29b      	uxth	r3, r3
 801ecc2:	1ad3      	subs	r3, r2, r3
 801ecc4:	b29a      	uxth	r2, r3
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ecca:	687b      	ldr	r3, [r7, #4]
 801eccc:	685a      	ldr	r2, [r3, #4]
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	891b      	ldrh	r3, [r3, #8]
 801ecd2:	4619      	mov	r1, r3
 801ecd4:	4610      	mov	r0, r2
 801ecd6:	f7fc fb49 	bl	801b36c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	683a      	ldr	r2, [r7, #0]
 801ecde:	601a      	str	r2, [r3, #0]
}
 801ece0:	bf00      	nop
 801ece2:	3714      	adds	r7, #20
 801ece4:	46bd      	mov	sp, r7
 801ece6:	bd90      	pop	{r4, r7, pc}
 801ece8:	080285ec 	.word	0x080285ec
 801ecec:	080288ac 	.word	0x080288ac
 801ecf0:	08028638 	.word	0x08028638
 801ecf4:	20008758 	.word	0x20008758

0801ecf8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801ecf8:	b5b0      	push	{r4, r5, r7, lr}
 801ecfa:	b086      	sub	sp, #24
 801ecfc:	af00      	add	r7, sp, #0
 801ecfe:	60f8      	str	r0, [r7, #12]
 801ed00:	60b9      	str	r1, [r7, #8]
 801ed02:	607a      	str	r2, [r7, #4]
 801ed04:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ed06:	e03e      	b.n	801ed86 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ed08:	68bb      	ldr	r3, [r7, #8]
 801ed0a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ed0c:	68bb      	ldr	r3, [r7, #8]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ed12:	697b      	ldr	r3, [r7, #20]
 801ed14:	685b      	ldr	r3, [r3, #4]
 801ed16:	4618      	mov	r0, r3
 801ed18:	f7fc fd3c 	bl	801b794 <pbuf_clen>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801ed20:	68fb      	ldr	r3, [r7, #12]
 801ed22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed26:	8a7a      	ldrh	r2, [r7, #18]
 801ed28:	429a      	cmp	r2, r3
 801ed2a:	d906      	bls.n	801ed3a <tcp_free_acked_segments+0x42>
 801ed2c:	4b2a      	ldr	r3, [pc, #168]	; (801edd8 <tcp_free_acked_segments+0xe0>)
 801ed2e:	f240 4257 	movw	r2, #1111	; 0x457
 801ed32:	492a      	ldr	r1, [pc, #168]	; (801eddc <tcp_free_acked_segments+0xe4>)
 801ed34:	482a      	ldr	r0, [pc, #168]	; (801ede0 <tcp_free_acked_segments+0xe8>)
 801ed36:	f007 f8db 	bl	8025ef0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ed3a:	68fb      	ldr	r3, [r7, #12]
 801ed3c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801ed40:	8a7b      	ldrh	r3, [r7, #18]
 801ed42:	1ad3      	subs	r3, r2, r3
 801ed44:	b29a      	uxth	r2, r3
 801ed46:	68fb      	ldr	r3, [r7, #12]
 801ed48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	891a      	ldrh	r2, [r3, #8]
 801ed50:	4b24      	ldr	r3, [pc, #144]	; (801ede4 <tcp_free_acked_segments+0xec>)
 801ed52:	881b      	ldrh	r3, [r3, #0]
 801ed54:	4413      	add	r3, r2
 801ed56:	b29a      	uxth	r2, r3
 801ed58:	4b22      	ldr	r3, [pc, #136]	; (801ede4 <tcp_free_acked_segments+0xec>)
 801ed5a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ed5c:	6978      	ldr	r0, [r7, #20]
 801ed5e:	f7fe f90e 	bl	801cf7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d00c      	beq.n	801ed86 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ed6c:	68bb      	ldr	r3, [r7, #8]
 801ed6e:	2b00      	cmp	r3, #0
 801ed70:	d109      	bne.n	801ed86 <tcp_free_acked_segments+0x8e>
 801ed72:	683b      	ldr	r3, [r7, #0]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d106      	bne.n	801ed86 <tcp_free_acked_segments+0x8e>
 801ed78:	4b17      	ldr	r3, [pc, #92]	; (801edd8 <tcp_free_acked_segments+0xe0>)
 801ed7a:	f240 4261 	movw	r2, #1121	; 0x461
 801ed7e:	491a      	ldr	r1, [pc, #104]	; (801ede8 <tcp_free_acked_segments+0xf0>)
 801ed80:	4817      	ldr	r0, [pc, #92]	; (801ede0 <tcp_free_acked_segments+0xe8>)
 801ed82:	f007 f8b5 	bl	8025ef0 <iprintf>
  while (seg_list != NULL &&
 801ed86:	68bb      	ldr	r3, [r7, #8]
 801ed88:	2b00      	cmp	r3, #0
 801ed8a:	d020      	beq.n	801edce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ed8c:	68bb      	ldr	r3, [r7, #8]
 801ed8e:	68db      	ldr	r3, [r3, #12]
 801ed90:	685b      	ldr	r3, [r3, #4]
 801ed92:	4618      	mov	r0, r3
 801ed94:	f7fb f8d9 	bl	8019f4a <lwip_htonl>
 801ed98:	4604      	mov	r4, r0
 801ed9a:	68bb      	ldr	r3, [r7, #8]
 801ed9c:	891b      	ldrh	r3, [r3, #8]
 801ed9e:	461d      	mov	r5, r3
 801eda0:	68bb      	ldr	r3, [r7, #8]
 801eda2:	68db      	ldr	r3, [r3, #12]
 801eda4:	899b      	ldrh	r3, [r3, #12]
 801eda6:	b29b      	uxth	r3, r3
 801eda8:	4618      	mov	r0, r3
 801edaa:	f7fb f8b9 	bl	8019f20 <lwip_htons>
 801edae:	4603      	mov	r3, r0
 801edb0:	b2db      	uxtb	r3, r3
 801edb2:	f003 0303 	and.w	r3, r3, #3
 801edb6:	2b00      	cmp	r3, #0
 801edb8:	d001      	beq.n	801edbe <tcp_free_acked_segments+0xc6>
 801edba:	2301      	movs	r3, #1
 801edbc:	e000      	b.n	801edc0 <tcp_free_acked_segments+0xc8>
 801edbe:	2300      	movs	r3, #0
 801edc0:	442b      	add	r3, r5
 801edc2:	18e2      	adds	r2, r4, r3
 801edc4:	4b09      	ldr	r3, [pc, #36]	; (801edec <tcp_free_acked_segments+0xf4>)
 801edc6:	681b      	ldr	r3, [r3, #0]
 801edc8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801edca:	2b00      	cmp	r3, #0
 801edcc:	dd9c      	ble.n	801ed08 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801edce:	68bb      	ldr	r3, [r7, #8]
}
 801edd0:	4618      	mov	r0, r3
 801edd2:	3718      	adds	r7, #24
 801edd4:	46bd      	mov	sp, r7
 801edd6:	bdb0      	pop	{r4, r5, r7, pc}
 801edd8:	080285ec 	.word	0x080285ec
 801eddc:	080288d4 	.word	0x080288d4
 801ede0:	08028638 	.word	0x08028638
 801ede4:	20008760 	.word	0x20008760
 801ede8:	080288fc 	.word	0x080288fc
 801edec:	2000875c 	.word	0x2000875c

0801edf0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801edf0:	b5b0      	push	{r4, r5, r7, lr}
 801edf2:	b094      	sub	sp, #80	; 0x50
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801edf8:	2300      	movs	r3, #0
 801edfa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	2b00      	cmp	r3, #0
 801ee00:	d106      	bne.n	801ee10 <tcp_receive+0x20>
 801ee02:	4ba6      	ldr	r3, [pc, #664]	; (801f09c <tcp_receive+0x2ac>)
 801ee04:	f240 427b 	movw	r2, #1147	; 0x47b
 801ee08:	49a5      	ldr	r1, [pc, #660]	; (801f0a0 <tcp_receive+0x2b0>)
 801ee0a:	48a6      	ldr	r0, [pc, #664]	; (801f0a4 <tcp_receive+0x2b4>)
 801ee0c:	f007 f870 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	7d1b      	ldrb	r3, [r3, #20]
 801ee14:	2b03      	cmp	r3, #3
 801ee16:	d806      	bhi.n	801ee26 <tcp_receive+0x36>
 801ee18:	4ba0      	ldr	r3, [pc, #640]	; (801f09c <tcp_receive+0x2ac>)
 801ee1a:	f240 427c 	movw	r2, #1148	; 0x47c
 801ee1e:	49a2      	ldr	r1, [pc, #648]	; (801f0a8 <tcp_receive+0x2b8>)
 801ee20:	48a0      	ldr	r0, [pc, #640]	; (801f0a4 <tcp_receive+0x2b4>)
 801ee22:	f007 f865 	bl	8025ef0 <iprintf>

  if (flags & TCP_ACK) {
 801ee26:	4ba1      	ldr	r3, [pc, #644]	; (801f0ac <tcp_receive+0x2bc>)
 801ee28:	781b      	ldrb	r3, [r3, #0]
 801ee2a:	f003 0310 	and.w	r3, r3, #16
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	f000 8263 	beq.w	801f2fa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ee3a:	461a      	mov	r2, r3
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ee40:	4413      	add	r3, r2
 801ee42:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ee48:	4b99      	ldr	r3, [pc, #612]	; (801f0b0 <tcp_receive+0x2c0>)
 801ee4a:	681b      	ldr	r3, [r3, #0]
 801ee4c:	1ad3      	subs	r3, r2, r3
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	db1b      	blt.n	801ee8a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ee56:	4b96      	ldr	r3, [pc, #600]	; (801f0b0 <tcp_receive+0x2c0>)
 801ee58:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ee5a:	429a      	cmp	r2, r3
 801ee5c:	d106      	bne.n	801ee6c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ee5e:	687b      	ldr	r3, [r7, #4]
 801ee60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee62:	4b94      	ldr	r3, [pc, #592]	; (801f0b4 <tcp_receive+0x2c4>)
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	1ad3      	subs	r3, r2, r3
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	db0e      	blt.n	801ee8a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801ee70:	4b90      	ldr	r3, [pc, #576]	; (801f0b4 <tcp_receive+0x2c4>)
 801ee72:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ee74:	429a      	cmp	r2, r3
 801ee76:	d125      	bne.n	801eec4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ee78:	4b8f      	ldr	r3, [pc, #572]	; (801f0b8 <tcp_receive+0x2c8>)
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	89db      	ldrh	r3, [r3, #14]
 801ee7e:	b29a      	uxth	r2, r3
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ee86:	429a      	cmp	r2, r3
 801ee88:	d91c      	bls.n	801eec4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ee8a:	4b8b      	ldr	r3, [pc, #556]	; (801f0b8 <tcp_receive+0x2c8>)
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	89db      	ldrh	r3, [r3, #14]
 801ee90:	b29a      	uxth	r2, r3
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d205      	bcs.n	801eeb4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801eeb4:	4b7e      	ldr	r3, [pc, #504]	; (801f0b0 <tcp_receive+0x2c0>)
 801eeb6:	681a      	ldr	r2, [r3, #0]
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801eebc:	4b7d      	ldr	r3, [pc, #500]	; (801f0b4 <tcp_receive+0x2c4>)
 801eebe:	681a      	ldr	r2, [r3, #0]
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801eec4:	4b7b      	ldr	r3, [pc, #492]	; (801f0b4 <tcp_receive+0x2c4>)
 801eec6:	681a      	ldr	r2, [r3, #0]
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eecc:	1ad3      	subs	r3, r2, r3
 801eece:	2b00      	cmp	r3, #0
 801eed0:	dc58      	bgt.n	801ef84 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801eed2:	4b7a      	ldr	r3, [pc, #488]	; (801f0bc <tcp_receive+0x2cc>)
 801eed4:	881b      	ldrh	r3, [r3, #0]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	d14b      	bne.n	801ef72 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801eede:	687a      	ldr	r2, [r7, #4]
 801eee0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801eee4:	4413      	add	r3, r2
 801eee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801eee8:	429a      	cmp	r2, r3
 801eeea:	d142      	bne.n	801ef72 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	db3d      	blt.n	801ef72 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eefa:	4b6e      	ldr	r3, [pc, #440]	; (801f0b4 <tcp_receive+0x2c4>)
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	429a      	cmp	r2, r3
 801ef00:	d137      	bne.n	801ef72 <tcp_receive+0x182>
              found_dupack = 1;
 801ef02:	2301      	movs	r3, #1
 801ef04:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ef0c:	2bff      	cmp	r3, #255	; 0xff
 801ef0e:	d007      	beq.n	801ef20 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ef16:	3301      	adds	r3, #1
 801ef18:	b2da      	uxtb	r2, r3
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ef26:	2b03      	cmp	r3, #3
 801ef28:	d91b      	bls.n	801ef62 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ef34:	4413      	add	r3, r2
 801ef36:	b29a      	uxth	r2, r3
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ef3e:	429a      	cmp	r2, r3
 801ef40:	d30a      	bcc.n	801ef58 <tcp_receive+0x168>
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ef4c:	4413      	add	r3, r2
 801ef4e:	b29a      	uxth	r2, r3
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801ef56:	e004      	b.n	801ef62 <tcp_receive+0x172>
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ef5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ef68:	2b02      	cmp	r3, #2
 801ef6a:	d902      	bls.n	801ef72 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801ef6c:	6878      	ldr	r0, [r7, #4]
 801ef6e:	f002 fb41 	bl	80215f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801ef72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	f040 8160 	bne.w	801f23a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	2200      	movs	r2, #0
 801ef7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801ef82:	e15a      	b.n	801f23a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ef84:	4b4b      	ldr	r3, [pc, #300]	; (801f0b4 <tcp_receive+0x2c4>)
 801ef86:	681a      	ldr	r2, [r3, #0]
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ef8c:	1ad3      	subs	r3, r2, r3
 801ef8e:	3b01      	subs	r3, #1
 801ef90:	2b00      	cmp	r3, #0
 801ef92:	f2c0 814d 	blt.w	801f230 <tcp_receive+0x440>
 801ef96:	4b47      	ldr	r3, [pc, #284]	; (801f0b4 <tcp_receive+0x2c4>)
 801ef98:	681a      	ldr	r2, [r3, #0]
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef9e:	1ad3      	subs	r3, r2, r3
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	f300 8145 	bgt.w	801f230 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	8b5b      	ldrh	r3, [r3, #26]
 801efaa:	f003 0304 	and.w	r3, r3, #4
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d010      	beq.n	801efd4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	8b5b      	ldrh	r3, [r3, #26]
 801efb6:	f023 0304 	bic.w	r3, r3, #4
 801efba:	b29a      	uxth	r2, r3
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	2200      	movs	r2, #0
 801efd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	2200      	movs	r2, #0
 801efd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801efe2:	10db      	asrs	r3, r3, #3
 801efe4:	b21b      	sxth	r3, r3
 801efe6:	b29a      	uxth	r2, r3
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801efee:	b29b      	uxth	r3, r3
 801eff0:	4413      	add	r3, r2
 801eff2:	b29b      	uxth	r3, r3
 801eff4:	b21a      	sxth	r2, r3
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801effc:	4b2d      	ldr	r3, [pc, #180]	; (801f0b4 <tcp_receive+0x2c4>)
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	b29a      	uxth	r2, r3
 801f002:	687b      	ldr	r3, [r7, #4]
 801f004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f006:	b29b      	uxth	r3, r3
 801f008:	1ad3      	subs	r3, r2, r3
 801f00a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	2200      	movs	r2, #0
 801f010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801f014:	4b27      	ldr	r3, [pc, #156]	; (801f0b4 <tcp_receive+0x2c4>)
 801f016:	681a      	ldr	r2, [r3, #0]
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	7d1b      	ldrb	r3, [r3, #20]
 801f020:	2b03      	cmp	r3, #3
 801f022:	f240 8096 	bls.w	801f152 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f032:	429a      	cmp	r2, r3
 801f034:	d244      	bcs.n	801f0c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	8b5b      	ldrh	r3, [r3, #26]
 801f03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f03e:	2b00      	cmp	r3, #0
 801f040:	d001      	beq.n	801f046 <tcp_receive+0x256>
 801f042:	2301      	movs	r3, #1
 801f044:	e000      	b.n	801f048 <tcp_receive+0x258>
 801f046:	2302      	movs	r3, #2
 801f048:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801f04c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801f050:	b29a      	uxth	r2, r3
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f056:	fb12 f303 	smulbb	r3, r2, r3
 801f05a:	b29b      	uxth	r3, r3
 801f05c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801f05e:	4293      	cmp	r3, r2
 801f060:	bf28      	it	cs
 801f062:	4613      	movcs	r3, r2
 801f064:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801f06c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f06e:	4413      	add	r3, r2
 801f070:	b29a      	uxth	r2, r3
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f078:	429a      	cmp	r2, r3
 801f07a:	d309      	bcc.n	801f090 <tcp_receive+0x2a0>
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801f082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f084:	4413      	add	r3, r2
 801f086:	b29a      	uxth	r2, r3
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801f08e:	e060      	b.n	801f152 <tcp_receive+0x362>
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801f09a:	e05a      	b.n	801f152 <tcp_receive+0x362>
 801f09c:	080285ec 	.word	0x080285ec
 801f0a0:	0802891c 	.word	0x0802891c
 801f0a4:	08028638 	.word	0x08028638
 801f0a8:	08028938 	.word	0x08028938
 801f0ac:	20008764 	.word	0x20008764
 801f0b0:	20008758 	.word	0x20008758
 801f0b4:	2000875c 	.word	0x2000875c
 801f0b8:	20008748 	.word	0x20008748
 801f0bc:	20008762 	.word	0x20008762
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801f0c0:	687b      	ldr	r3, [r7, #4]
 801f0c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801f0c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f0c8:	4413      	add	r3, r2
 801f0ca:	b29a      	uxth	r2, r3
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801f0d2:	429a      	cmp	r2, r3
 801f0d4:	d309      	bcc.n	801f0ea <tcp_receive+0x2fa>
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801f0dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f0de:	4413      	add	r3, r2
 801f0e0:	b29a      	uxth	r2, r3
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801f0e8:	e004      	b.n	801f0f4 <tcp_receive+0x304>
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f100:	429a      	cmp	r2, r3
 801f102:	d326      	bcc.n	801f152 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f110:	1ad3      	subs	r3, r2, r3
 801f112:	b29a      	uxth	r2, r3
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f124:	4413      	add	r3, r2
 801f126:	b29a      	uxth	r2, r3
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f12e:	429a      	cmp	r2, r3
 801f130:	d30a      	bcc.n	801f148 <tcp_receive+0x358>
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f13c:	4413      	add	r3, r2
 801f13e:	b29a      	uxth	r2, r3
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801f146:	e004      	b.n	801f152 <tcp_receive+0x362>
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f14e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f15a:	4a98      	ldr	r2, [pc, #608]	; (801f3bc <tcp_receive+0x5cc>)
 801f15c:	6878      	ldr	r0, [r7, #4]
 801f15e:	f7ff fdcb 	bl	801ecf8 <tcp_free_acked_segments>
 801f162:	4602      	mov	r2, r0
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f170:	4a93      	ldr	r2, [pc, #588]	; (801f3c0 <tcp_receive+0x5d0>)
 801f172:	6878      	ldr	r0, [r7, #4]
 801f174:	f7ff fdc0 	bl	801ecf8 <tcp_free_acked_segments>
 801f178:	4602      	mov	r2, r0
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f182:	2b00      	cmp	r3, #0
 801f184:	d104      	bne.n	801f190 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f18c:	861a      	strh	r2, [r3, #48]	; 0x30
 801f18e:	e002      	b.n	801f196 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	2200      	movs	r2, #0
 801f194:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	2200      	movs	r2, #0
 801f19a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1a0:	2b00      	cmp	r3, #0
 801f1a2:	d103      	bne.n	801f1ac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	2200      	movs	r2, #0
 801f1a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801f1b2:	4b84      	ldr	r3, [pc, #528]	; (801f3c4 <tcp_receive+0x5d4>)
 801f1b4:	881b      	ldrh	r3, [r3, #0]
 801f1b6:	4413      	add	r3, r2
 801f1b8:	b29a      	uxth	r2, r3
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	8b5b      	ldrh	r3, [r3, #26]
 801f1c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	d035      	beq.n	801f238 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d118      	bne.n	801f206 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d00c      	beq.n	801f1f6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1e4:	68db      	ldr	r3, [r3, #12]
 801f1e6:	685b      	ldr	r3, [r3, #4]
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	f7fa feae 	bl	8019f4a <lwip_htonl>
 801f1ee:	4603      	mov	r3, r0
 801f1f0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	dc20      	bgt.n	801f238 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801f1f6:	687b      	ldr	r3, [r7, #4]
 801f1f8:	8b5b      	ldrh	r3, [r3, #26]
 801f1fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f1fe:	b29a      	uxth	r2, r3
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f204:	e018      	b.n	801f238 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801f206:	687b      	ldr	r3, [r7, #4]
 801f208:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f20e:	68db      	ldr	r3, [r3, #12]
 801f210:	685b      	ldr	r3, [r3, #4]
 801f212:	4618      	mov	r0, r3
 801f214:	f7fa fe99 	bl	8019f4a <lwip_htonl>
 801f218:	4603      	mov	r3, r0
 801f21a:	1ae3      	subs	r3, r4, r3
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	dc0b      	bgt.n	801f238 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	8b5b      	ldrh	r3, [r3, #26]
 801f224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f228:	b29a      	uxth	r2, r3
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f22e:	e003      	b.n	801f238 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801f230:	6878      	ldr	r0, [r7, #4]
 801f232:	f002 fbcd 	bl	80219d0 <tcp_send_empty_ack>
 801f236:	e000      	b.n	801f23a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801f238:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d05b      	beq.n	801f2fa <tcp_receive+0x50a>
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f246:	4b60      	ldr	r3, [pc, #384]	; (801f3c8 <tcp_receive+0x5d8>)
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	1ad3      	subs	r3, r2, r3
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	da54      	bge.n	801f2fa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801f250:	4b5e      	ldr	r3, [pc, #376]	; (801f3cc <tcp_receive+0x5dc>)
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	b29a      	uxth	r2, r3
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	1ad3      	subs	r3, r2, r3
 801f25e:	b29b      	uxth	r3, r3
 801f260:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801f264:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f26e:	10db      	asrs	r3, r3, #3
 801f270:	b21b      	sxth	r3, r3
 801f272:	b29b      	uxth	r3, r3
 801f274:	1ad3      	subs	r3, r2, r3
 801f276:	b29b      	uxth	r3, r3
 801f278:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f282:	b29a      	uxth	r2, r3
 801f284:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f288:	4413      	add	r3, r2
 801f28a:	b29b      	uxth	r3, r3
 801f28c:	b21a      	sxth	r2, r3
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801f292:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801f296:	2b00      	cmp	r3, #0
 801f298:	da05      	bge.n	801f2a6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801f29a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f29e:	425b      	negs	r3, r3
 801f2a0:	b29b      	uxth	r3, r3
 801f2a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801f2a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f2b0:	109b      	asrs	r3, r3, #2
 801f2b2:	b21b      	sxth	r3, r3
 801f2b4:	b29b      	uxth	r3, r3
 801f2b6:	1ad3      	subs	r3, r2, r3
 801f2b8:	b29b      	uxth	r3, r3
 801f2ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801f2be:	687b      	ldr	r3, [r7, #4]
 801f2c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f2c4:	b29a      	uxth	r2, r3
 801f2c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801f2ca:	4413      	add	r3, r2
 801f2cc:	b29b      	uxth	r3, r3
 801f2ce:	b21a      	sxth	r2, r3
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801f2da:	10db      	asrs	r3, r3, #3
 801f2dc:	b21b      	sxth	r3, r3
 801f2de:	b29a      	uxth	r2, r3
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801f2e6:	b29b      	uxth	r3, r3
 801f2e8:	4413      	add	r3, r2
 801f2ea:	b29b      	uxth	r3, r3
 801f2ec:	b21a      	sxth	r2, r3
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	2200      	movs	r2, #0
 801f2f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801f2fa:	4b35      	ldr	r3, [pc, #212]	; (801f3d0 <tcp_receive+0x5e0>)
 801f2fc:	881b      	ldrh	r3, [r3, #0]
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	f000 84e1 	beq.w	801fcc6 <tcp_receive+0xed6>
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	7d1b      	ldrb	r3, [r3, #20]
 801f308:	2b06      	cmp	r3, #6
 801f30a:	f200 84dc 	bhi.w	801fcc6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f30e:	687b      	ldr	r3, [r7, #4]
 801f310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f312:	4b30      	ldr	r3, [pc, #192]	; (801f3d4 <tcp_receive+0x5e4>)
 801f314:	681b      	ldr	r3, [r3, #0]
 801f316:	1ad3      	subs	r3, r2, r3
 801f318:	3b01      	subs	r3, #1
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	f2c0 808e 	blt.w	801f43c <tcp_receive+0x64c>
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f324:	4b2a      	ldr	r3, [pc, #168]	; (801f3d0 <tcp_receive+0x5e0>)
 801f326:	881b      	ldrh	r3, [r3, #0]
 801f328:	4619      	mov	r1, r3
 801f32a:	4b2a      	ldr	r3, [pc, #168]	; (801f3d4 <tcp_receive+0x5e4>)
 801f32c:	681b      	ldr	r3, [r3, #0]
 801f32e:	440b      	add	r3, r1
 801f330:	1ad3      	subs	r3, r2, r3
 801f332:	3301      	adds	r3, #1
 801f334:	2b00      	cmp	r3, #0
 801f336:	f300 8081 	bgt.w	801f43c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801f33a:	4b27      	ldr	r3, [pc, #156]	; (801f3d8 <tcp_receive+0x5e8>)
 801f33c:	685b      	ldr	r3, [r3, #4]
 801f33e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f344:	4b23      	ldr	r3, [pc, #140]	; (801f3d4 <tcp_receive+0x5e4>)
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	1ad3      	subs	r3, r2, r3
 801f34a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801f34c:	4b22      	ldr	r3, [pc, #136]	; (801f3d8 <tcp_receive+0x5e8>)
 801f34e:	685b      	ldr	r3, [r3, #4]
 801f350:	2b00      	cmp	r3, #0
 801f352:	d106      	bne.n	801f362 <tcp_receive+0x572>
 801f354:	4b21      	ldr	r3, [pc, #132]	; (801f3dc <tcp_receive+0x5ec>)
 801f356:	f240 5294 	movw	r2, #1428	; 0x594
 801f35a:	4921      	ldr	r1, [pc, #132]	; (801f3e0 <tcp_receive+0x5f0>)
 801f35c:	4821      	ldr	r0, [pc, #132]	; (801f3e4 <tcp_receive+0x5f4>)
 801f35e:	f006 fdc7 	bl	8025ef0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f364:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f368:	4293      	cmp	r3, r2
 801f36a:	d906      	bls.n	801f37a <tcp_receive+0x58a>
 801f36c:	4b1b      	ldr	r3, [pc, #108]	; (801f3dc <tcp_receive+0x5ec>)
 801f36e:	f240 5295 	movw	r2, #1429	; 0x595
 801f372:	491d      	ldr	r1, [pc, #116]	; (801f3e8 <tcp_receive+0x5f8>)
 801f374:	481b      	ldr	r0, [pc, #108]	; (801f3e4 <tcp_receive+0x5f4>)
 801f376:	f006 fdbb 	bl	8025ef0 <iprintf>
      off = (u16_t)off32;
 801f37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f37c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801f380:	4b15      	ldr	r3, [pc, #84]	; (801f3d8 <tcp_receive+0x5e8>)
 801f382:	685b      	ldr	r3, [r3, #4]
 801f384:	891b      	ldrh	r3, [r3, #8]
 801f386:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f38a:	429a      	cmp	r2, r3
 801f38c:	d906      	bls.n	801f39c <tcp_receive+0x5ac>
 801f38e:	4b13      	ldr	r3, [pc, #76]	; (801f3dc <tcp_receive+0x5ec>)
 801f390:	f240 5297 	movw	r2, #1431	; 0x597
 801f394:	4915      	ldr	r1, [pc, #84]	; (801f3ec <tcp_receive+0x5fc>)
 801f396:	4813      	ldr	r0, [pc, #76]	; (801f3e4 <tcp_receive+0x5f4>)
 801f398:	f006 fdaa 	bl	8025ef0 <iprintf>
      inseg.len -= off;
 801f39c:	4b0e      	ldr	r3, [pc, #56]	; (801f3d8 <tcp_receive+0x5e8>)
 801f39e:	891a      	ldrh	r2, [r3, #8]
 801f3a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f3a4:	1ad3      	subs	r3, r2, r3
 801f3a6:	b29a      	uxth	r2, r3
 801f3a8:	4b0b      	ldr	r3, [pc, #44]	; (801f3d8 <tcp_receive+0x5e8>)
 801f3aa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801f3ac:	4b0a      	ldr	r3, [pc, #40]	; (801f3d8 <tcp_receive+0x5e8>)
 801f3ae:	685b      	ldr	r3, [r3, #4]
 801f3b0:	891a      	ldrh	r2, [r3, #8]
 801f3b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f3b6:	1ad3      	subs	r3, r2, r3
 801f3b8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801f3ba:	e029      	b.n	801f410 <tcp_receive+0x620>
 801f3bc:	08028954 	.word	0x08028954
 801f3c0:	0802895c 	.word	0x0802895c
 801f3c4:	20008760 	.word	0x20008760
 801f3c8:	2000875c 	.word	0x2000875c
 801f3cc:	200102b8 	.word	0x200102b8
 801f3d0:	20008762 	.word	0x20008762
 801f3d4:	20008758 	.word	0x20008758
 801f3d8:	20008738 	.word	0x20008738
 801f3dc:	080285ec 	.word	0x080285ec
 801f3e0:	08028964 	.word	0x08028964
 801f3e4:	08028638 	.word	0x08028638
 801f3e8:	08028974 	.word	0x08028974
 801f3ec:	08028984 	.word	0x08028984
        off -= p->len;
 801f3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f3f2:	895b      	ldrh	r3, [r3, #10]
 801f3f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f3f8:	1ad3      	subs	r3, r2, r3
 801f3fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801f3fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f400:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f402:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801f404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f406:	2200      	movs	r2, #0
 801f408:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801f40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801f410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f412:	895b      	ldrh	r3, [r3, #10]
 801f414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f418:	429a      	cmp	r2, r3
 801f41a:	d8e9      	bhi.n	801f3f0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801f41c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f420:	4619      	mov	r1, r3
 801f422:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f424:	f7fc f8a2 	bl	801b56c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f42c:	4a91      	ldr	r2, [pc, #580]	; (801f674 <tcp_receive+0x884>)
 801f42e:	6013      	str	r3, [r2, #0]
 801f430:	4b91      	ldr	r3, [pc, #580]	; (801f678 <tcp_receive+0x888>)
 801f432:	68db      	ldr	r3, [r3, #12]
 801f434:	4a8f      	ldr	r2, [pc, #572]	; (801f674 <tcp_receive+0x884>)
 801f436:	6812      	ldr	r2, [r2, #0]
 801f438:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801f43a:	e00d      	b.n	801f458 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801f43c:	4b8d      	ldr	r3, [pc, #564]	; (801f674 <tcp_receive+0x884>)
 801f43e:	681a      	ldr	r2, [r3, #0]
 801f440:	687b      	ldr	r3, [r7, #4]
 801f442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f444:	1ad3      	subs	r3, r2, r3
 801f446:	2b00      	cmp	r3, #0
 801f448:	da06      	bge.n	801f458 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	8b5b      	ldrh	r3, [r3, #26]
 801f44e:	f043 0302 	orr.w	r3, r3, #2
 801f452:	b29a      	uxth	r2, r3
 801f454:	687b      	ldr	r3, [r7, #4]
 801f456:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801f458:	4b86      	ldr	r3, [pc, #536]	; (801f674 <tcp_receive+0x884>)
 801f45a:	681a      	ldr	r2, [r3, #0]
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f460:	1ad3      	subs	r3, r2, r3
 801f462:	2b00      	cmp	r3, #0
 801f464:	f2c0 842a 	blt.w	801fcbc <tcp_receive+0xecc>
 801f468:	4b82      	ldr	r3, [pc, #520]	; (801f674 <tcp_receive+0x884>)
 801f46a:	681a      	ldr	r2, [r3, #0]
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f470:	6879      	ldr	r1, [r7, #4]
 801f472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f474:	440b      	add	r3, r1
 801f476:	1ad3      	subs	r3, r2, r3
 801f478:	3301      	adds	r3, #1
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	f300 841e 	bgt.w	801fcbc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f484:	4b7b      	ldr	r3, [pc, #492]	; (801f674 <tcp_receive+0x884>)
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	429a      	cmp	r2, r3
 801f48a:	f040 829a 	bne.w	801f9c2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801f48e:	4b7a      	ldr	r3, [pc, #488]	; (801f678 <tcp_receive+0x888>)
 801f490:	891c      	ldrh	r4, [r3, #8]
 801f492:	4b79      	ldr	r3, [pc, #484]	; (801f678 <tcp_receive+0x888>)
 801f494:	68db      	ldr	r3, [r3, #12]
 801f496:	899b      	ldrh	r3, [r3, #12]
 801f498:	b29b      	uxth	r3, r3
 801f49a:	4618      	mov	r0, r3
 801f49c:	f7fa fd40 	bl	8019f20 <lwip_htons>
 801f4a0:	4603      	mov	r3, r0
 801f4a2:	b2db      	uxtb	r3, r3
 801f4a4:	f003 0303 	and.w	r3, r3, #3
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d001      	beq.n	801f4b0 <tcp_receive+0x6c0>
 801f4ac:	2301      	movs	r3, #1
 801f4ae:	e000      	b.n	801f4b2 <tcp_receive+0x6c2>
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	4423      	add	r3, r4
 801f4b4:	b29a      	uxth	r2, r3
 801f4b6:	4b71      	ldr	r3, [pc, #452]	; (801f67c <tcp_receive+0x88c>)
 801f4b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f4be:	4b6f      	ldr	r3, [pc, #444]	; (801f67c <tcp_receive+0x88c>)
 801f4c0:	881b      	ldrh	r3, [r3, #0]
 801f4c2:	429a      	cmp	r2, r3
 801f4c4:	d275      	bcs.n	801f5b2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f4c6:	4b6c      	ldr	r3, [pc, #432]	; (801f678 <tcp_receive+0x888>)
 801f4c8:	68db      	ldr	r3, [r3, #12]
 801f4ca:	899b      	ldrh	r3, [r3, #12]
 801f4cc:	b29b      	uxth	r3, r3
 801f4ce:	4618      	mov	r0, r3
 801f4d0:	f7fa fd26 	bl	8019f20 <lwip_htons>
 801f4d4:	4603      	mov	r3, r0
 801f4d6:	b2db      	uxtb	r3, r3
 801f4d8:	f003 0301 	and.w	r3, r3, #1
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d01f      	beq.n	801f520 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801f4e0:	4b65      	ldr	r3, [pc, #404]	; (801f678 <tcp_receive+0x888>)
 801f4e2:	68db      	ldr	r3, [r3, #12]
 801f4e4:	899b      	ldrh	r3, [r3, #12]
 801f4e6:	b29b      	uxth	r3, r3
 801f4e8:	b21b      	sxth	r3, r3
 801f4ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f4ee:	b21c      	sxth	r4, r3
 801f4f0:	4b61      	ldr	r3, [pc, #388]	; (801f678 <tcp_receive+0x888>)
 801f4f2:	68db      	ldr	r3, [r3, #12]
 801f4f4:	899b      	ldrh	r3, [r3, #12]
 801f4f6:	b29b      	uxth	r3, r3
 801f4f8:	4618      	mov	r0, r3
 801f4fa:	f7fa fd11 	bl	8019f20 <lwip_htons>
 801f4fe:	4603      	mov	r3, r0
 801f500:	b2db      	uxtb	r3, r3
 801f502:	b29b      	uxth	r3, r3
 801f504:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801f508:	b29b      	uxth	r3, r3
 801f50a:	4618      	mov	r0, r3
 801f50c:	f7fa fd08 	bl	8019f20 <lwip_htons>
 801f510:	4603      	mov	r3, r0
 801f512:	b21b      	sxth	r3, r3
 801f514:	4323      	orrs	r3, r4
 801f516:	b21a      	sxth	r2, r3
 801f518:	4b57      	ldr	r3, [pc, #348]	; (801f678 <tcp_receive+0x888>)
 801f51a:	68db      	ldr	r3, [r3, #12]
 801f51c:	b292      	uxth	r2, r2
 801f51e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f524:	4b54      	ldr	r3, [pc, #336]	; (801f678 <tcp_receive+0x888>)
 801f526:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f528:	4b53      	ldr	r3, [pc, #332]	; (801f678 <tcp_receive+0x888>)
 801f52a:	68db      	ldr	r3, [r3, #12]
 801f52c:	899b      	ldrh	r3, [r3, #12]
 801f52e:	b29b      	uxth	r3, r3
 801f530:	4618      	mov	r0, r3
 801f532:	f7fa fcf5 	bl	8019f20 <lwip_htons>
 801f536:	4603      	mov	r3, r0
 801f538:	b2db      	uxtb	r3, r3
 801f53a:	f003 0302 	and.w	r3, r3, #2
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d005      	beq.n	801f54e <tcp_receive+0x75e>
            inseg.len -= 1;
 801f542:	4b4d      	ldr	r3, [pc, #308]	; (801f678 <tcp_receive+0x888>)
 801f544:	891b      	ldrh	r3, [r3, #8]
 801f546:	3b01      	subs	r3, #1
 801f548:	b29a      	uxth	r2, r3
 801f54a:	4b4b      	ldr	r3, [pc, #300]	; (801f678 <tcp_receive+0x888>)
 801f54c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801f54e:	4b4a      	ldr	r3, [pc, #296]	; (801f678 <tcp_receive+0x888>)
 801f550:	685b      	ldr	r3, [r3, #4]
 801f552:	4a49      	ldr	r2, [pc, #292]	; (801f678 <tcp_receive+0x888>)
 801f554:	8912      	ldrh	r2, [r2, #8]
 801f556:	4611      	mov	r1, r2
 801f558:	4618      	mov	r0, r3
 801f55a:	f7fb ff07 	bl	801b36c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801f55e:	4b46      	ldr	r3, [pc, #280]	; (801f678 <tcp_receive+0x888>)
 801f560:	891c      	ldrh	r4, [r3, #8]
 801f562:	4b45      	ldr	r3, [pc, #276]	; (801f678 <tcp_receive+0x888>)
 801f564:	68db      	ldr	r3, [r3, #12]
 801f566:	899b      	ldrh	r3, [r3, #12]
 801f568:	b29b      	uxth	r3, r3
 801f56a:	4618      	mov	r0, r3
 801f56c:	f7fa fcd8 	bl	8019f20 <lwip_htons>
 801f570:	4603      	mov	r3, r0
 801f572:	b2db      	uxtb	r3, r3
 801f574:	f003 0303 	and.w	r3, r3, #3
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d001      	beq.n	801f580 <tcp_receive+0x790>
 801f57c:	2301      	movs	r3, #1
 801f57e:	e000      	b.n	801f582 <tcp_receive+0x792>
 801f580:	2300      	movs	r3, #0
 801f582:	4423      	add	r3, r4
 801f584:	b29a      	uxth	r2, r3
 801f586:	4b3d      	ldr	r3, [pc, #244]	; (801f67c <tcp_receive+0x88c>)
 801f588:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801f58a:	4b3c      	ldr	r3, [pc, #240]	; (801f67c <tcp_receive+0x88c>)
 801f58c:	881b      	ldrh	r3, [r3, #0]
 801f58e:	461a      	mov	r2, r3
 801f590:	4b38      	ldr	r3, [pc, #224]	; (801f674 <tcp_receive+0x884>)
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	441a      	add	r2, r3
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f59a:	6879      	ldr	r1, [r7, #4]
 801f59c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801f59e:	440b      	add	r3, r1
 801f5a0:	429a      	cmp	r2, r3
 801f5a2:	d006      	beq.n	801f5b2 <tcp_receive+0x7c2>
 801f5a4:	4b36      	ldr	r3, [pc, #216]	; (801f680 <tcp_receive+0x890>)
 801f5a6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801f5aa:	4936      	ldr	r1, [pc, #216]	; (801f684 <tcp_receive+0x894>)
 801f5ac:	4836      	ldr	r0, [pc, #216]	; (801f688 <tcp_receive+0x898>)
 801f5ae:	f006 fc9f 	bl	8025ef0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	f000 80e7 	beq.w	801f78a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f5bc:	4b2e      	ldr	r3, [pc, #184]	; (801f678 <tcp_receive+0x888>)
 801f5be:	68db      	ldr	r3, [r3, #12]
 801f5c0:	899b      	ldrh	r3, [r3, #12]
 801f5c2:	b29b      	uxth	r3, r3
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	f7fa fcab 	bl	8019f20 <lwip_htons>
 801f5ca:	4603      	mov	r3, r0
 801f5cc:	b2db      	uxtb	r3, r3
 801f5ce:	f003 0301 	and.w	r3, r3, #1
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d010      	beq.n	801f5f8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801f5d6:	e00a      	b.n	801f5ee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801f5d8:	687b      	ldr	r3, [r7, #4]
 801f5da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5dc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5e2:	681a      	ldr	r2, [r3, #0]
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801f5e8:	68f8      	ldr	r0, [r7, #12]
 801f5ea:	f7fd fcc8 	bl	801cf7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d1f0      	bne.n	801f5d8 <tcp_receive+0x7e8>
 801f5f6:	e0c8      	b.n	801f78a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801f5fe:	e052      	b.n	801f6a6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f602:	68db      	ldr	r3, [r3, #12]
 801f604:	899b      	ldrh	r3, [r3, #12]
 801f606:	b29b      	uxth	r3, r3
 801f608:	4618      	mov	r0, r3
 801f60a:	f7fa fc89 	bl	8019f20 <lwip_htons>
 801f60e:	4603      	mov	r3, r0
 801f610:	b2db      	uxtb	r3, r3
 801f612:	f003 0301 	and.w	r3, r3, #1
 801f616:	2b00      	cmp	r3, #0
 801f618:	d03d      	beq.n	801f696 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801f61a:	4b17      	ldr	r3, [pc, #92]	; (801f678 <tcp_receive+0x888>)
 801f61c:	68db      	ldr	r3, [r3, #12]
 801f61e:	899b      	ldrh	r3, [r3, #12]
 801f620:	b29b      	uxth	r3, r3
 801f622:	4618      	mov	r0, r3
 801f624:	f7fa fc7c 	bl	8019f20 <lwip_htons>
 801f628:	4603      	mov	r3, r0
 801f62a:	b2db      	uxtb	r3, r3
 801f62c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801f630:	2b00      	cmp	r3, #0
 801f632:	d130      	bne.n	801f696 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801f634:	4b10      	ldr	r3, [pc, #64]	; (801f678 <tcp_receive+0x888>)
 801f636:	68db      	ldr	r3, [r3, #12]
 801f638:	899b      	ldrh	r3, [r3, #12]
 801f63a:	b29c      	uxth	r4, r3
 801f63c:	2001      	movs	r0, #1
 801f63e:	f7fa fc6f 	bl	8019f20 <lwip_htons>
 801f642:	4603      	mov	r3, r0
 801f644:	461a      	mov	r2, r3
 801f646:	4b0c      	ldr	r3, [pc, #48]	; (801f678 <tcp_receive+0x888>)
 801f648:	68db      	ldr	r3, [r3, #12]
 801f64a:	4322      	orrs	r2, r4
 801f64c:	b292      	uxth	r2, r2
 801f64e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801f650:	4b09      	ldr	r3, [pc, #36]	; (801f678 <tcp_receive+0x888>)
 801f652:	891c      	ldrh	r4, [r3, #8]
 801f654:	4b08      	ldr	r3, [pc, #32]	; (801f678 <tcp_receive+0x888>)
 801f656:	68db      	ldr	r3, [r3, #12]
 801f658:	899b      	ldrh	r3, [r3, #12]
 801f65a:	b29b      	uxth	r3, r3
 801f65c:	4618      	mov	r0, r3
 801f65e:	f7fa fc5f 	bl	8019f20 <lwip_htons>
 801f662:	4603      	mov	r3, r0
 801f664:	b2db      	uxtb	r3, r3
 801f666:	f003 0303 	and.w	r3, r3, #3
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d00e      	beq.n	801f68c <tcp_receive+0x89c>
 801f66e:	2301      	movs	r3, #1
 801f670:	e00d      	b.n	801f68e <tcp_receive+0x89e>
 801f672:	bf00      	nop
 801f674:	20008758 	.word	0x20008758
 801f678:	20008738 	.word	0x20008738
 801f67c:	20008762 	.word	0x20008762
 801f680:	080285ec 	.word	0x080285ec
 801f684:	08028994 	.word	0x08028994
 801f688:	08028638 	.word	0x08028638
 801f68c:	2300      	movs	r3, #0
 801f68e:	4423      	add	r3, r4
 801f690:	b29a      	uxth	r2, r3
 801f692:	4b98      	ldr	r3, [pc, #608]	; (801f8f4 <tcp_receive+0xb04>)
 801f694:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801f696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f698:	613b      	str	r3, [r7, #16]
              next = next->next;
 801f69a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801f6a0:	6938      	ldr	r0, [r7, #16]
 801f6a2:	f7fd fc6c 	bl	801cf7e <tcp_seg_free>
            while (next &&
 801f6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d00e      	beq.n	801f6ca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801f6ac:	4b91      	ldr	r3, [pc, #580]	; (801f8f4 <tcp_receive+0xb04>)
 801f6ae:	881b      	ldrh	r3, [r3, #0]
 801f6b0:	461a      	mov	r2, r3
 801f6b2:	4b91      	ldr	r3, [pc, #580]	; (801f8f8 <tcp_receive+0xb08>)
 801f6b4:	681b      	ldr	r3, [r3, #0]
 801f6b6:	441a      	add	r2, r3
 801f6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6ba:	68db      	ldr	r3, [r3, #12]
 801f6bc:	685b      	ldr	r3, [r3, #4]
 801f6be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f6c0:	8909      	ldrh	r1, [r1, #8]
 801f6c2:	440b      	add	r3, r1
 801f6c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	da9a      	bge.n	801f600 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801f6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d059      	beq.n	801f784 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801f6d0:	4b88      	ldr	r3, [pc, #544]	; (801f8f4 <tcp_receive+0xb04>)
 801f6d2:	881b      	ldrh	r3, [r3, #0]
 801f6d4:	461a      	mov	r2, r3
 801f6d6:	4b88      	ldr	r3, [pc, #544]	; (801f8f8 <tcp_receive+0xb08>)
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	441a      	add	r2, r3
 801f6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6de:	68db      	ldr	r3, [r3, #12]
 801f6e0:	685b      	ldr	r3, [r3, #4]
 801f6e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	dd4d      	ble.n	801f784 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801f6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6ea:	68db      	ldr	r3, [r3, #12]
 801f6ec:	685b      	ldr	r3, [r3, #4]
 801f6ee:	b29a      	uxth	r2, r3
 801f6f0:	4b81      	ldr	r3, [pc, #516]	; (801f8f8 <tcp_receive+0xb08>)
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	b29b      	uxth	r3, r3
 801f6f6:	1ad3      	subs	r3, r2, r3
 801f6f8:	b29a      	uxth	r2, r3
 801f6fa:	4b80      	ldr	r3, [pc, #512]	; (801f8fc <tcp_receive+0xb0c>)
 801f6fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801f6fe:	4b7f      	ldr	r3, [pc, #508]	; (801f8fc <tcp_receive+0xb0c>)
 801f700:	68db      	ldr	r3, [r3, #12]
 801f702:	899b      	ldrh	r3, [r3, #12]
 801f704:	b29b      	uxth	r3, r3
 801f706:	4618      	mov	r0, r3
 801f708:	f7fa fc0a 	bl	8019f20 <lwip_htons>
 801f70c:	4603      	mov	r3, r0
 801f70e:	b2db      	uxtb	r3, r3
 801f710:	f003 0302 	and.w	r3, r3, #2
 801f714:	2b00      	cmp	r3, #0
 801f716:	d005      	beq.n	801f724 <tcp_receive+0x934>
                inseg.len -= 1;
 801f718:	4b78      	ldr	r3, [pc, #480]	; (801f8fc <tcp_receive+0xb0c>)
 801f71a:	891b      	ldrh	r3, [r3, #8]
 801f71c:	3b01      	subs	r3, #1
 801f71e:	b29a      	uxth	r2, r3
 801f720:	4b76      	ldr	r3, [pc, #472]	; (801f8fc <tcp_receive+0xb0c>)
 801f722:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801f724:	4b75      	ldr	r3, [pc, #468]	; (801f8fc <tcp_receive+0xb0c>)
 801f726:	685b      	ldr	r3, [r3, #4]
 801f728:	4a74      	ldr	r2, [pc, #464]	; (801f8fc <tcp_receive+0xb0c>)
 801f72a:	8912      	ldrh	r2, [r2, #8]
 801f72c:	4611      	mov	r1, r2
 801f72e:	4618      	mov	r0, r3
 801f730:	f7fb fe1c 	bl	801b36c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801f734:	4b71      	ldr	r3, [pc, #452]	; (801f8fc <tcp_receive+0xb0c>)
 801f736:	891c      	ldrh	r4, [r3, #8]
 801f738:	4b70      	ldr	r3, [pc, #448]	; (801f8fc <tcp_receive+0xb0c>)
 801f73a:	68db      	ldr	r3, [r3, #12]
 801f73c:	899b      	ldrh	r3, [r3, #12]
 801f73e:	b29b      	uxth	r3, r3
 801f740:	4618      	mov	r0, r3
 801f742:	f7fa fbed 	bl	8019f20 <lwip_htons>
 801f746:	4603      	mov	r3, r0
 801f748:	b2db      	uxtb	r3, r3
 801f74a:	f003 0303 	and.w	r3, r3, #3
 801f74e:	2b00      	cmp	r3, #0
 801f750:	d001      	beq.n	801f756 <tcp_receive+0x966>
 801f752:	2301      	movs	r3, #1
 801f754:	e000      	b.n	801f758 <tcp_receive+0x968>
 801f756:	2300      	movs	r3, #0
 801f758:	4423      	add	r3, r4
 801f75a:	b29a      	uxth	r2, r3
 801f75c:	4b65      	ldr	r3, [pc, #404]	; (801f8f4 <tcp_receive+0xb04>)
 801f75e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801f760:	4b64      	ldr	r3, [pc, #400]	; (801f8f4 <tcp_receive+0xb04>)
 801f762:	881b      	ldrh	r3, [r3, #0]
 801f764:	461a      	mov	r2, r3
 801f766:	4b64      	ldr	r3, [pc, #400]	; (801f8f8 <tcp_receive+0xb08>)
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	441a      	add	r2, r3
 801f76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f76e:	68db      	ldr	r3, [r3, #12]
 801f770:	685b      	ldr	r3, [r3, #4]
 801f772:	429a      	cmp	r2, r3
 801f774:	d006      	beq.n	801f784 <tcp_receive+0x994>
 801f776:	4b62      	ldr	r3, [pc, #392]	; (801f900 <tcp_receive+0xb10>)
 801f778:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801f77c:	4961      	ldr	r1, [pc, #388]	; (801f904 <tcp_receive+0xb14>)
 801f77e:	4862      	ldr	r0, [pc, #392]	; (801f908 <tcp_receive+0xb18>)
 801f780:	f006 fbb6 	bl	8025ef0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f788:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801f78a:	4b5a      	ldr	r3, [pc, #360]	; (801f8f4 <tcp_receive+0xb04>)
 801f78c:	881b      	ldrh	r3, [r3, #0]
 801f78e:	461a      	mov	r2, r3
 801f790:	4b59      	ldr	r3, [pc, #356]	; (801f8f8 <tcp_receive+0xb08>)
 801f792:	681b      	ldr	r3, [r3, #0]
 801f794:	441a      	add	r2, r3
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801f79a:	687b      	ldr	r3, [r7, #4]
 801f79c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f79e:	4b55      	ldr	r3, [pc, #340]	; (801f8f4 <tcp_receive+0xb04>)
 801f7a0:	881b      	ldrh	r3, [r3, #0]
 801f7a2:	429a      	cmp	r2, r3
 801f7a4:	d206      	bcs.n	801f7b4 <tcp_receive+0x9c4>
 801f7a6:	4b56      	ldr	r3, [pc, #344]	; (801f900 <tcp_receive+0xb10>)
 801f7a8:	f240 6207 	movw	r2, #1543	; 0x607
 801f7ac:	4957      	ldr	r1, [pc, #348]	; (801f90c <tcp_receive+0xb1c>)
 801f7ae:	4856      	ldr	r0, [pc, #344]	; (801f908 <tcp_receive+0xb18>)
 801f7b0:	f006 fb9e 	bl	8025ef0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f7b8:	4b4e      	ldr	r3, [pc, #312]	; (801f8f4 <tcp_receive+0xb04>)
 801f7ba:	881b      	ldrh	r3, [r3, #0]
 801f7bc:	1ad3      	subs	r3, r2, r3
 801f7be:	b29a      	uxth	r2, r3
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801f7c4:	6878      	ldr	r0, [r7, #4]
 801f7c6:	f7fc feb5 	bl	801c534 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801f7ca:	4b4c      	ldr	r3, [pc, #304]	; (801f8fc <tcp_receive+0xb0c>)
 801f7cc:	685b      	ldr	r3, [r3, #4]
 801f7ce:	891b      	ldrh	r3, [r3, #8]
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	d006      	beq.n	801f7e2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801f7d4:	4b49      	ldr	r3, [pc, #292]	; (801f8fc <tcp_receive+0xb0c>)
 801f7d6:	685b      	ldr	r3, [r3, #4]
 801f7d8:	4a4d      	ldr	r2, [pc, #308]	; (801f910 <tcp_receive+0xb20>)
 801f7da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801f7dc:	4b47      	ldr	r3, [pc, #284]	; (801f8fc <tcp_receive+0xb0c>)
 801f7de:	2200      	movs	r2, #0
 801f7e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801f7e2:	4b46      	ldr	r3, [pc, #280]	; (801f8fc <tcp_receive+0xb0c>)
 801f7e4:	68db      	ldr	r3, [r3, #12]
 801f7e6:	899b      	ldrh	r3, [r3, #12]
 801f7e8:	b29b      	uxth	r3, r3
 801f7ea:	4618      	mov	r0, r3
 801f7ec:	f7fa fb98 	bl	8019f20 <lwip_htons>
 801f7f0:	4603      	mov	r3, r0
 801f7f2:	b2db      	uxtb	r3, r3
 801f7f4:	f003 0301 	and.w	r3, r3, #1
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	f000 80b8 	beq.w	801f96e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801f7fe:	4b45      	ldr	r3, [pc, #276]	; (801f914 <tcp_receive+0xb24>)
 801f800:	781b      	ldrb	r3, [r3, #0]
 801f802:	f043 0320 	orr.w	r3, r3, #32
 801f806:	b2da      	uxtb	r2, r3
 801f808:	4b42      	ldr	r3, [pc, #264]	; (801f914 <tcp_receive+0xb24>)
 801f80a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801f80c:	e0af      	b.n	801f96e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f812:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f818:	68db      	ldr	r3, [r3, #12]
 801f81a:	685b      	ldr	r3, [r3, #4]
 801f81c:	4a36      	ldr	r2, [pc, #216]	; (801f8f8 <tcp_receive+0xb08>)
 801f81e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801f820:	68bb      	ldr	r3, [r7, #8]
 801f822:	891b      	ldrh	r3, [r3, #8]
 801f824:	461c      	mov	r4, r3
 801f826:	68bb      	ldr	r3, [r7, #8]
 801f828:	68db      	ldr	r3, [r3, #12]
 801f82a:	899b      	ldrh	r3, [r3, #12]
 801f82c:	b29b      	uxth	r3, r3
 801f82e:	4618      	mov	r0, r3
 801f830:	f7fa fb76 	bl	8019f20 <lwip_htons>
 801f834:	4603      	mov	r3, r0
 801f836:	b2db      	uxtb	r3, r3
 801f838:	f003 0303 	and.w	r3, r3, #3
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d001      	beq.n	801f844 <tcp_receive+0xa54>
 801f840:	2301      	movs	r3, #1
 801f842:	e000      	b.n	801f846 <tcp_receive+0xa56>
 801f844:	2300      	movs	r3, #0
 801f846:	191a      	adds	r2, r3, r4
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f84c:	441a      	add	r2, r3
 801f84e:	687b      	ldr	r3, [r7, #4]
 801f850:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f856:	461c      	mov	r4, r3
 801f858:	68bb      	ldr	r3, [r7, #8]
 801f85a:	891b      	ldrh	r3, [r3, #8]
 801f85c:	461d      	mov	r5, r3
 801f85e:	68bb      	ldr	r3, [r7, #8]
 801f860:	68db      	ldr	r3, [r3, #12]
 801f862:	899b      	ldrh	r3, [r3, #12]
 801f864:	b29b      	uxth	r3, r3
 801f866:	4618      	mov	r0, r3
 801f868:	f7fa fb5a 	bl	8019f20 <lwip_htons>
 801f86c:	4603      	mov	r3, r0
 801f86e:	b2db      	uxtb	r3, r3
 801f870:	f003 0303 	and.w	r3, r3, #3
 801f874:	2b00      	cmp	r3, #0
 801f876:	d001      	beq.n	801f87c <tcp_receive+0xa8c>
 801f878:	2301      	movs	r3, #1
 801f87a:	e000      	b.n	801f87e <tcp_receive+0xa8e>
 801f87c:	2300      	movs	r3, #0
 801f87e:	442b      	add	r3, r5
 801f880:	429c      	cmp	r4, r3
 801f882:	d206      	bcs.n	801f892 <tcp_receive+0xaa2>
 801f884:	4b1e      	ldr	r3, [pc, #120]	; (801f900 <tcp_receive+0xb10>)
 801f886:	f240 622b 	movw	r2, #1579	; 0x62b
 801f88a:	4923      	ldr	r1, [pc, #140]	; (801f918 <tcp_receive+0xb28>)
 801f88c:	481e      	ldr	r0, [pc, #120]	; (801f908 <tcp_receive+0xb18>)
 801f88e:	f006 fb2f 	bl	8025ef0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801f892:	68bb      	ldr	r3, [r7, #8]
 801f894:	891b      	ldrh	r3, [r3, #8]
 801f896:	461c      	mov	r4, r3
 801f898:	68bb      	ldr	r3, [r7, #8]
 801f89a:	68db      	ldr	r3, [r3, #12]
 801f89c:	899b      	ldrh	r3, [r3, #12]
 801f89e:	b29b      	uxth	r3, r3
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	f7fa fb3d 	bl	8019f20 <lwip_htons>
 801f8a6:	4603      	mov	r3, r0
 801f8a8:	b2db      	uxtb	r3, r3
 801f8aa:	f003 0303 	and.w	r3, r3, #3
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d001      	beq.n	801f8b6 <tcp_receive+0xac6>
 801f8b2:	2301      	movs	r3, #1
 801f8b4:	e000      	b.n	801f8b8 <tcp_receive+0xac8>
 801f8b6:	2300      	movs	r3, #0
 801f8b8:	1919      	adds	r1, r3, r4
 801f8ba:	687b      	ldr	r3, [r7, #4]
 801f8bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801f8be:	b28b      	uxth	r3, r1
 801f8c0:	1ad3      	subs	r3, r2, r3
 801f8c2:	b29a      	uxth	r2, r3
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801f8c8:	6878      	ldr	r0, [r7, #4]
 801f8ca:	f7fc fe33 	bl	801c534 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801f8ce:	68bb      	ldr	r3, [r7, #8]
 801f8d0:	685b      	ldr	r3, [r3, #4]
 801f8d2:	891b      	ldrh	r3, [r3, #8]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d028      	beq.n	801f92a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801f8d8:	4b0d      	ldr	r3, [pc, #52]	; (801f910 <tcp_receive+0xb20>)
 801f8da:	681b      	ldr	r3, [r3, #0]
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d01d      	beq.n	801f91c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801f8e0:	4b0b      	ldr	r3, [pc, #44]	; (801f910 <tcp_receive+0xb20>)
 801f8e2:	681a      	ldr	r2, [r3, #0]
 801f8e4:	68bb      	ldr	r3, [r7, #8]
 801f8e6:	685b      	ldr	r3, [r3, #4]
 801f8e8:	4619      	mov	r1, r3
 801f8ea:	4610      	mov	r0, r2
 801f8ec:	f7fb ff92 	bl	801b814 <pbuf_cat>
 801f8f0:	e018      	b.n	801f924 <tcp_receive+0xb34>
 801f8f2:	bf00      	nop
 801f8f4:	20008762 	.word	0x20008762
 801f8f8:	20008758 	.word	0x20008758
 801f8fc:	20008738 	.word	0x20008738
 801f900:	080285ec 	.word	0x080285ec
 801f904:	080289cc 	.word	0x080289cc
 801f908:	08028638 	.word	0x08028638
 801f90c:	08028a08 	.word	0x08028a08
 801f910:	20008768 	.word	0x20008768
 801f914:	20008765 	.word	0x20008765
 801f918:	08028a28 	.word	0x08028a28
            } else {
              recv_data = cseg->p;
 801f91c:	68bb      	ldr	r3, [r7, #8]
 801f91e:	685b      	ldr	r3, [r3, #4]
 801f920:	4a70      	ldr	r2, [pc, #448]	; (801fae4 <tcp_receive+0xcf4>)
 801f922:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801f924:	68bb      	ldr	r3, [r7, #8]
 801f926:	2200      	movs	r2, #0
 801f928:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801f92a:	68bb      	ldr	r3, [r7, #8]
 801f92c:	68db      	ldr	r3, [r3, #12]
 801f92e:	899b      	ldrh	r3, [r3, #12]
 801f930:	b29b      	uxth	r3, r3
 801f932:	4618      	mov	r0, r3
 801f934:	f7fa faf4 	bl	8019f20 <lwip_htons>
 801f938:	4603      	mov	r3, r0
 801f93a:	b2db      	uxtb	r3, r3
 801f93c:	f003 0301 	and.w	r3, r3, #1
 801f940:	2b00      	cmp	r3, #0
 801f942:	d00d      	beq.n	801f960 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801f944:	4b68      	ldr	r3, [pc, #416]	; (801fae8 <tcp_receive+0xcf8>)
 801f946:	781b      	ldrb	r3, [r3, #0]
 801f948:	f043 0320 	orr.w	r3, r3, #32
 801f94c:	b2da      	uxtb	r2, r3
 801f94e:	4b66      	ldr	r3, [pc, #408]	; (801fae8 <tcp_receive+0xcf8>)
 801f950:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	7d1b      	ldrb	r3, [r3, #20]
 801f956:	2b04      	cmp	r3, #4
 801f958:	d102      	bne.n	801f960 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	2207      	movs	r2, #7
 801f95e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801f960:	68bb      	ldr	r3, [r7, #8]
 801f962:	681a      	ldr	r2, [r3, #0]
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801f968:	68b8      	ldr	r0, [r7, #8]
 801f96a:	f7fd fb08 	bl	801cf7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f972:	2b00      	cmp	r3, #0
 801f974:	d008      	beq.n	801f988 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f97a:	68db      	ldr	r3, [r3, #12]
 801f97c:	685a      	ldr	r2, [r3, #4]
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801f982:	429a      	cmp	r2, r3
 801f984:	f43f af43 	beq.w	801f80e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801f988:	687b      	ldr	r3, [r7, #4]
 801f98a:	8b5b      	ldrh	r3, [r3, #26]
 801f98c:	f003 0301 	and.w	r3, r3, #1
 801f990:	2b00      	cmp	r3, #0
 801f992:	d00e      	beq.n	801f9b2 <tcp_receive+0xbc2>
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	8b5b      	ldrh	r3, [r3, #26]
 801f998:	f023 0301 	bic.w	r3, r3, #1
 801f99c:	b29a      	uxth	r2, r3
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	835a      	strh	r2, [r3, #26]
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	8b5b      	ldrh	r3, [r3, #26]
 801f9a6:	f043 0302 	orr.w	r3, r3, #2
 801f9aa:	b29a      	uxth	r2, r3
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f9b0:	e188      	b.n	801fcc4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	8b5b      	ldrh	r3, [r3, #26]
 801f9b6:	f043 0301 	orr.w	r3, r3, #1
 801f9ba:	b29a      	uxth	r2, r3
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801f9c0:	e180      	b.n	801fcc4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d106      	bne.n	801f9d8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801f9ca:	4848      	ldr	r0, [pc, #288]	; (801faec <tcp_receive+0xcfc>)
 801f9cc:	f7fd faf0 	bl	801cfb0 <tcp_seg_copy>
 801f9d0:	4602      	mov	r2, r0
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	675a      	str	r2, [r3, #116]	; 0x74
 801f9d6:	e16d      	b.n	801fcb4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801f9d8:	2300      	movs	r3, #0
 801f9da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f9e0:	63bb      	str	r3, [r7, #56]	; 0x38
 801f9e2:	e157      	b.n	801fc94 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801f9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9e6:	68db      	ldr	r3, [r3, #12]
 801f9e8:	685a      	ldr	r2, [r3, #4]
 801f9ea:	4b41      	ldr	r3, [pc, #260]	; (801faf0 <tcp_receive+0xd00>)
 801f9ec:	681b      	ldr	r3, [r3, #0]
 801f9ee:	429a      	cmp	r2, r3
 801f9f0:	d11d      	bne.n	801fa2e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801f9f2:	4b3e      	ldr	r3, [pc, #248]	; (801faec <tcp_receive+0xcfc>)
 801f9f4:	891a      	ldrh	r2, [r3, #8]
 801f9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f9f8:	891b      	ldrh	r3, [r3, #8]
 801f9fa:	429a      	cmp	r2, r3
 801f9fc:	f240 814f 	bls.w	801fc9e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801fa00:	483a      	ldr	r0, [pc, #232]	; (801faec <tcp_receive+0xcfc>)
 801fa02:	f7fd fad5 	bl	801cfb0 <tcp_seg_copy>
 801fa06:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801fa08:	697b      	ldr	r3, [r7, #20]
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	f000 8149 	beq.w	801fca2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801fa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	d003      	beq.n	801fa1e <tcp_receive+0xc2e>
                    prev->next = cseg;
 801fa16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa18:	697a      	ldr	r2, [r7, #20]
 801fa1a:	601a      	str	r2, [r3, #0]
 801fa1c:	e002      	b.n	801fa24 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	697a      	ldr	r2, [r7, #20]
 801fa22:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801fa24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fa26:	6978      	ldr	r0, [r7, #20]
 801fa28:	f7ff f8de 	bl	801ebe8 <tcp_oos_insert_segment>
                }
                break;
 801fa2c:	e139      	b.n	801fca2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801fa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d117      	bne.n	801fa64 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801fa34:	4b2e      	ldr	r3, [pc, #184]	; (801faf0 <tcp_receive+0xd00>)
 801fa36:	681a      	ldr	r2, [r3, #0]
 801fa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa3a:	68db      	ldr	r3, [r3, #12]
 801fa3c:	685b      	ldr	r3, [r3, #4]
 801fa3e:	1ad3      	subs	r3, r2, r3
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	da57      	bge.n	801faf4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801fa44:	4829      	ldr	r0, [pc, #164]	; (801faec <tcp_receive+0xcfc>)
 801fa46:	f7fd fab3 	bl	801cfb0 <tcp_seg_copy>
 801fa4a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801fa4c:	69bb      	ldr	r3, [r7, #24]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	f000 8129 	beq.w	801fca6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	69ba      	ldr	r2, [r7, #24]
 801fa58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801fa5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fa5c:	69b8      	ldr	r0, [r7, #24]
 801fa5e:	f7ff f8c3 	bl	801ebe8 <tcp_oos_insert_segment>
                  }
                  break;
 801fa62:	e120      	b.n	801fca6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801fa64:	4b22      	ldr	r3, [pc, #136]	; (801faf0 <tcp_receive+0xd00>)
 801fa66:	681a      	ldr	r2, [r3, #0]
 801fa68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa6a:	68db      	ldr	r3, [r3, #12]
 801fa6c:	685b      	ldr	r3, [r3, #4]
 801fa6e:	1ad3      	subs	r3, r2, r3
 801fa70:	3b01      	subs	r3, #1
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	db3e      	blt.n	801faf4 <tcp_receive+0xd04>
 801fa76:	4b1e      	ldr	r3, [pc, #120]	; (801faf0 <tcp_receive+0xd00>)
 801fa78:	681a      	ldr	r2, [r3, #0]
 801fa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa7c:	68db      	ldr	r3, [r3, #12]
 801fa7e:	685b      	ldr	r3, [r3, #4]
 801fa80:	1ad3      	subs	r3, r2, r3
 801fa82:	3301      	adds	r3, #1
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	dc35      	bgt.n	801faf4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801fa88:	4818      	ldr	r0, [pc, #96]	; (801faec <tcp_receive+0xcfc>)
 801fa8a:	f7fd fa91 	bl	801cfb0 <tcp_seg_copy>
 801fa8e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801fa90:	69fb      	ldr	r3, [r7, #28]
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	f000 8109 	beq.w	801fcaa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801fa98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fa9a:	68db      	ldr	r3, [r3, #12]
 801fa9c:	685b      	ldr	r3, [r3, #4]
 801fa9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801faa0:	8912      	ldrh	r2, [r2, #8]
 801faa2:	441a      	add	r2, r3
 801faa4:	4b12      	ldr	r3, [pc, #72]	; (801faf0 <tcp_receive+0xd00>)
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	1ad3      	subs	r3, r2, r3
 801faaa:	2b00      	cmp	r3, #0
 801faac:	dd12      	ble.n	801fad4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801faae:	4b10      	ldr	r3, [pc, #64]	; (801faf0 <tcp_receive+0xd00>)
 801fab0:	681b      	ldr	r3, [r3, #0]
 801fab2:	b29a      	uxth	r2, r3
 801fab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fab6:	68db      	ldr	r3, [r3, #12]
 801fab8:	685b      	ldr	r3, [r3, #4]
 801faba:	b29b      	uxth	r3, r3
 801fabc:	1ad3      	subs	r3, r2, r3
 801fabe:	b29a      	uxth	r2, r3
 801fac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fac2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801fac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fac6:	685a      	ldr	r2, [r3, #4]
 801fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801faca:	891b      	ldrh	r3, [r3, #8]
 801facc:	4619      	mov	r1, r3
 801face:	4610      	mov	r0, r2
 801fad0:	f7fb fc4c 	bl	801b36c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801fad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fad6:	69fa      	ldr	r2, [r7, #28]
 801fad8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801fada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801fadc:	69f8      	ldr	r0, [r7, #28]
 801fade:	f7ff f883 	bl	801ebe8 <tcp_oos_insert_segment>
                  }
                  break;
 801fae2:	e0e2      	b.n	801fcaa <tcp_receive+0xeba>
 801fae4:	20008768 	.word	0x20008768
 801fae8:	20008765 	.word	0x20008765
 801faec:	20008738 	.word	0x20008738
 801faf0:	20008758 	.word	0x20008758
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801faf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801faf6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801faf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	f040 80c6 	bne.w	801fc8e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801fb02:	4b80      	ldr	r3, [pc, #512]	; (801fd04 <tcp_receive+0xf14>)
 801fb04:	681a      	ldr	r2, [r3, #0]
 801fb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb08:	68db      	ldr	r3, [r3, #12]
 801fb0a:	685b      	ldr	r3, [r3, #4]
 801fb0c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801fb0e:	2b00      	cmp	r3, #0
 801fb10:	f340 80bd 	ble.w	801fc8e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb16:	68db      	ldr	r3, [r3, #12]
 801fb18:	899b      	ldrh	r3, [r3, #12]
 801fb1a:	b29b      	uxth	r3, r3
 801fb1c:	4618      	mov	r0, r3
 801fb1e:	f7fa f9ff 	bl	8019f20 <lwip_htons>
 801fb22:	4603      	mov	r3, r0
 801fb24:	b2db      	uxtb	r3, r3
 801fb26:	f003 0301 	and.w	r3, r3, #1
 801fb2a:	2b00      	cmp	r3, #0
 801fb2c:	f040 80bf 	bne.w	801fcae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801fb30:	4875      	ldr	r0, [pc, #468]	; (801fd08 <tcp_receive+0xf18>)
 801fb32:	f7fd fa3d 	bl	801cfb0 <tcp_seg_copy>
 801fb36:	4602      	mov	r2, r0
 801fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb3a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	f000 80b6 	beq.w	801fcb2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb48:	68db      	ldr	r3, [r3, #12]
 801fb4a:	685b      	ldr	r3, [r3, #4]
 801fb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801fb4e:	8912      	ldrh	r2, [r2, #8]
 801fb50:	441a      	add	r2, r3
 801fb52:	4b6c      	ldr	r3, [pc, #432]	; (801fd04 <tcp_receive+0xf14>)
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	1ad3      	subs	r3, r2, r3
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	dd12      	ble.n	801fb82 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801fb5c:	4b69      	ldr	r3, [pc, #420]	; (801fd04 <tcp_receive+0xf14>)
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	b29a      	uxth	r2, r3
 801fb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb64:	68db      	ldr	r3, [r3, #12]
 801fb66:	685b      	ldr	r3, [r3, #4]
 801fb68:	b29b      	uxth	r3, r3
 801fb6a:	1ad3      	subs	r3, r2, r3
 801fb6c:	b29a      	uxth	r2, r3
 801fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb70:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb74:	685a      	ldr	r2, [r3, #4]
 801fb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb78:	891b      	ldrh	r3, [r3, #8]
 801fb7a:	4619      	mov	r1, r3
 801fb7c:	4610      	mov	r0, r2
 801fb7e:	f7fb fbf5 	bl	801b36c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801fb82:	4b62      	ldr	r3, [pc, #392]	; (801fd0c <tcp_receive+0xf1c>)
 801fb84:	881b      	ldrh	r3, [r3, #0]
 801fb86:	461a      	mov	r2, r3
 801fb88:	4b5e      	ldr	r3, [pc, #376]	; (801fd04 <tcp_receive+0xf14>)
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	441a      	add	r2, r3
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb92:	6879      	ldr	r1, [r7, #4]
 801fb94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fb96:	440b      	add	r3, r1
 801fb98:	1ad3      	subs	r3, r2, r3
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	f340 8089 	ble.w	801fcb2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	68db      	ldr	r3, [r3, #12]
 801fba6:	899b      	ldrh	r3, [r3, #12]
 801fba8:	b29b      	uxth	r3, r3
 801fbaa:	4618      	mov	r0, r3
 801fbac:	f7fa f9b8 	bl	8019f20 <lwip_htons>
 801fbb0:	4603      	mov	r3, r0
 801fbb2:	b2db      	uxtb	r3, r3
 801fbb4:	f003 0301 	and.w	r3, r3, #1
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d022      	beq.n	801fc02 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	68db      	ldr	r3, [r3, #12]
 801fbc2:	899b      	ldrh	r3, [r3, #12]
 801fbc4:	b29b      	uxth	r3, r3
 801fbc6:	b21b      	sxth	r3, r3
 801fbc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801fbcc:	b21c      	sxth	r4, r3
 801fbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbd0:	681b      	ldr	r3, [r3, #0]
 801fbd2:	68db      	ldr	r3, [r3, #12]
 801fbd4:	899b      	ldrh	r3, [r3, #12]
 801fbd6:	b29b      	uxth	r3, r3
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7fa f9a1 	bl	8019f20 <lwip_htons>
 801fbde:	4603      	mov	r3, r0
 801fbe0:	b2db      	uxtb	r3, r3
 801fbe2:	b29b      	uxth	r3, r3
 801fbe4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801fbe8:	b29b      	uxth	r3, r3
 801fbea:	4618      	mov	r0, r3
 801fbec:	f7fa f998 	bl	8019f20 <lwip_htons>
 801fbf0:	4603      	mov	r3, r0
 801fbf2:	b21b      	sxth	r3, r3
 801fbf4:	4323      	orrs	r3, r4
 801fbf6:	b21a      	sxth	r2, r3
 801fbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	68db      	ldr	r3, [r3, #12]
 801fbfe:	b292      	uxth	r2, r2
 801fc00:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc06:	b29a      	uxth	r2, r3
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801fc0c:	4413      	add	r3, r2
 801fc0e:	b299      	uxth	r1, r3
 801fc10:	4b3c      	ldr	r3, [pc, #240]	; (801fd04 <tcp_receive+0xf14>)
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	b29a      	uxth	r2, r3
 801fc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc18:	681b      	ldr	r3, [r3, #0]
 801fc1a:	1a8a      	subs	r2, r1, r2
 801fc1c:	b292      	uxth	r2, r2
 801fc1e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	685a      	ldr	r2, [r3, #4]
 801fc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc28:	681b      	ldr	r3, [r3, #0]
 801fc2a:	891b      	ldrh	r3, [r3, #8]
 801fc2c:	4619      	mov	r1, r3
 801fc2e:	4610      	mov	r0, r2
 801fc30:	f7fb fb9c 	bl	801b36c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc36:	681b      	ldr	r3, [r3, #0]
 801fc38:	891c      	ldrh	r4, [r3, #8]
 801fc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc3c:	681b      	ldr	r3, [r3, #0]
 801fc3e:	68db      	ldr	r3, [r3, #12]
 801fc40:	899b      	ldrh	r3, [r3, #12]
 801fc42:	b29b      	uxth	r3, r3
 801fc44:	4618      	mov	r0, r3
 801fc46:	f7fa f96b 	bl	8019f20 <lwip_htons>
 801fc4a:	4603      	mov	r3, r0
 801fc4c:	b2db      	uxtb	r3, r3
 801fc4e:	f003 0303 	and.w	r3, r3, #3
 801fc52:	2b00      	cmp	r3, #0
 801fc54:	d001      	beq.n	801fc5a <tcp_receive+0xe6a>
 801fc56:	2301      	movs	r3, #1
 801fc58:	e000      	b.n	801fc5c <tcp_receive+0xe6c>
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	4423      	add	r3, r4
 801fc5e:	b29a      	uxth	r2, r3
 801fc60:	4b2a      	ldr	r3, [pc, #168]	; (801fd0c <tcp_receive+0xf1c>)
 801fc62:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801fc64:	4b29      	ldr	r3, [pc, #164]	; (801fd0c <tcp_receive+0xf1c>)
 801fc66:	881b      	ldrh	r3, [r3, #0]
 801fc68:	461a      	mov	r2, r3
 801fc6a:	4b26      	ldr	r3, [pc, #152]	; (801fd04 <tcp_receive+0xf14>)
 801fc6c:	681b      	ldr	r3, [r3, #0]
 801fc6e:	441a      	add	r2, r3
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc74:	6879      	ldr	r1, [r7, #4]
 801fc76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fc78:	440b      	add	r3, r1
 801fc7a:	429a      	cmp	r2, r3
 801fc7c:	d019      	beq.n	801fcb2 <tcp_receive+0xec2>
 801fc7e:	4b24      	ldr	r3, [pc, #144]	; (801fd10 <tcp_receive+0xf20>)
 801fc80:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801fc84:	4923      	ldr	r1, [pc, #140]	; (801fd14 <tcp_receive+0xf24>)
 801fc86:	4824      	ldr	r0, [pc, #144]	; (801fd18 <tcp_receive+0xf28>)
 801fc88:	f006 f932 	bl	8025ef0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801fc8c:	e011      	b.n	801fcb2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc90:	681b      	ldr	r3, [r3, #0]
 801fc92:	63bb      	str	r3, [r7, #56]	; 0x38
 801fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	f47f aea4 	bne.w	801f9e4 <tcp_receive+0xbf4>
 801fc9c:	e00a      	b.n	801fcb4 <tcp_receive+0xec4>
                break;
 801fc9e:	bf00      	nop
 801fca0:	e008      	b.n	801fcb4 <tcp_receive+0xec4>
                break;
 801fca2:	bf00      	nop
 801fca4:	e006      	b.n	801fcb4 <tcp_receive+0xec4>
                  break;
 801fca6:	bf00      	nop
 801fca8:	e004      	b.n	801fcb4 <tcp_receive+0xec4>
                  break;
 801fcaa:	bf00      	nop
 801fcac:	e002      	b.n	801fcb4 <tcp_receive+0xec4>
                  break;
 801fcae:	bf00      	nop
 801fcb0:	e000      	b.n	801fcb4 <tcp_receive+0xec4>
                break;
 801fcb2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801fcb4:	6878      	ldr	r0, [r7, #4]
 801fcb6:	f001 fe8b 	bl	80219d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801fcba:	e003      	b.n	801fcc4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801fcbc:	6878      	ldr	r0, [r7, #4]
 801fcbe:	f001 fe87 	bl	80219d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801fcc2:	e01a      	b.n	801fcfa <tcp_receive+0xf0a>
 801fcc4:	e019      	b.n	801fcfa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801fcc6:	4b0f      	ldr	r3, [pc, #60]	; (801fd04 <tcp_receive+0xf14>)
 801fcc8:	681a      	ldr	r2, [r3, #0]
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fcce:	1ad3      	subs	r3, r2, r3
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	db0a      	blt.n	801fcea <tcp_receive+0xefa>
 801fcd4:	4b0b      	ldr	r3, [pc, #44]	; (801fd04 <tcp_receive+0xf14>)
 801fcd6:	681a      	ldr	r2, [r3, #0]
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fcdc:	6879      	ldr	r1, [r7, #4]
 801fcde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801fce0:	440b      	add	r3, r1
 801fce2:	1ad3      	subs	r3, r2, r3
 801fce4:	3301      	adds	r3, #1
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	dd07      	ble.n	801fcfa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	8b5b      	ldrh	r3, [r3, #26]
 801fcee:	f043 0302 	orr.w	r3, r3, #2
 801fcf2:	b29a      	uxth	r2, r3
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801fcf8:	e7ff      	b.n	801fcfa <tcp_receive+0xf0a>
 801fcfa:	bf00      	nop
 801fcfc:	3750      	adds	r7, #80	; 0x50
 801fcfe:	46bd      	mov	sp, r7
 801fd00:	bdb0      	pop	{r4, r5, r7, pc}
 801fd02:	bf00      	nop
 801fd04:	20008758 	.word	0x20008758
 801fd08:	20008738 	.word	0x20008738
 801fd0c:	20008762 	.word	0x20008762
 801fd10:	080285ec 	.word	0x080285ec
 801fd14:	08028994 	.word	0x08028994
 801fd18:	08028638 	.word	0x08028638

0801fd1c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801fd1c:	b480      	push	{r7}
 801fd1e:	b083      	sub	sp, #12
 801fd20:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801fd22:	4b15      	ldr	r3, [pc, #84]	; (801fd78 <tcp_get_next_optbyte+0x5c>)
 801fd24:	881b      	ldrh	r3, [r3, #0]
 801fd26:	1c5a      	adds	r2, r3, #1
 801fd28:	b291      	uxth	r1, r2
 801fd2a:	4a13      	ldr	r2, [pc, #76]	; (801fd78 <tcp_get_next_optbyte+0x5c>)
 801fd2c:	8011      	strh	r1, [r2, #0]
 801fd2e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801fd30:	4b12      	ldr	r3, [pc, #72]	; (801fd7c <tcp_get_next_optbyte+0x60>)
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d004      	beq.n	801fd42 <tcp_get_next_optbyte+0x26>
 801fd38:	4b11      	ldr	r3, [pc, #68]	; (801fd80 <tcp_get_next_optbyte+0x64>)
 801fd3a:	881b      	ldrh	r3, [r3, #0]
 801fd3c:	88fa      	ldrh	r2, [r7, #6]
 801fd3e:	429a      	cmp	r2, r3
 801fd40:	d208      	bcs.n	801fd54 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801fd42:	4b10      	ldr	r3, [pc, #64]	; (801fd84 <tcp_get_next_optbyte+0x68>)
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	3314      	adds	r3, #20
 801fd48:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801fd4a:	88fb      	ldrh	r3, [r7, #6]
 801fd4c:	683a      	ldr	r2, [r7, #0]
 801fd4e:	4413      	add	r3, r2
 801fd50:	781b      	ldrb	r3, [r3, #0]
 801fd52:	e00b      	b.n	801fd6c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801fd54:	88fb      	ldrh	r3, [r7, #6]
 801fd56:	b2da      	uxtb	r2, r3
 801fd58:	4b09      	ldr	r3, [pc, #36]	; (801fd80 <tcp_get_next_optbyte+0x64>)
 801fd5a:	881b      	ldrh	r3, [r3, #0]
 801fd5c:	b2db      	uxtb	r3, r3
 801fd5e:	1ad3      	subs	r3, r2, r3
 801fd60:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801fd62:	4b06      	ldr	r3, [pc, #24]	; (801fd7c <tcp_get_next_optbyte+0x60>)
 801fd64:	681a      	ldr	r2, [r3, #0]
 801fd66:	797b      	ldrb	r3, [r7, #5]
 801fd68:	4413      	add	r3, r2
 801fd6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	370c      	adds	r7, #12
 801fd70:	46bd      	mov	sp, r7
 801fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd76:	4770      	bx	lr
 801fd78:	20008754 	.word	0x20008754
 801fd7c:	20008750 	.word	0x20008750
 801fd80:	2000874e 	.word	0x2000874e
 801fd84:	20008748 	.word	0x20008748

0801fd88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b084      	sub	sp, #16
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d106      	bne.n	801fda4 <tcp_parseopt+0x1c>
 801fd96:	4b32      	ldr	r3, [pc, #200]	; (801fe60 <tcp_parseopt+0xd8>)
 801fd98:	f240 727d 	movw	r2, #1917	; 0x77d
 801fd9c:	4931      	ldr	r1, [pc, #196]	; (801fe64 <tcp_parseopt+0xdc>)
 801fd9e:	4832      	ldr	r0, [pc, #200]	; (801fe68 <tcp_parseopt+0xe0>)
 801fda0:	f006 f8a6 	bl	8025ef0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801fda4:	4b31      	ldr	r3, [pc, #196]	; (801fe6c <tcp_parseopt+0xe4>)
 801fda6:	881b      	ldrh	r3, [r3, #0]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d055      	beq.n	801fe58 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801fdac:	4b30      	ldr	r3, [pc, #192]	; (801fe70 <tcp_parseopt+0xe8>)
 801fdae:	2200      	movs	r2, #0
 801fdb0:	801a      	strh	r2, [r3, #0]
 801fdb2:	e045      	b.n	801fe40 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801fdb4:	f7ff ffb2 	bl	801fd1c <tcp_get_next_optbyte>
 801fdb8:	4603      	mov	r3, r0
 801fdba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801fdbc:	7bfb      	ldrb	r3, [r7, #15]
 801fdbe:	2b02      	cmp	r3, #2
 801fdc0:	d006      	beq.n	801fdd0 <tcp_parseopt+0x48>
 801fdc2:	2b02      	cmp	r3, #2
 801fdc4:	dc2b      	bgt.n	801fe1e <tcp_parseopt+0x96>
 801fdc6:	2b00      	cmp	r3, #0
 801fdc8:	d041      	beq.n	801fe4e <tcp_parseopt+0xc6>
 801fdca:	2b01      	cmp	r3, #1
 801fdcc:	d127      	bne.n	801fe1e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801fdce:	e037      	b.n	801fe40 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801fdd0:	f7ff ffa4 	bl	801fd1c <tcp_get_next_optbyte>
 801fdd4:	4603      	mov	r3, r0
 801fdd6:	2b04      	cmp	r3, #4
 801fdd8:	d13b      	bne.n	801fe52 <tcp_parseopt+0xca>
 801fdda:	4b25      	ldr	r3, [pc, #148]	; (801fe70 <tcp_parseopt+0xe8>)
 801fddc:	881b      	ldrh	r3, [r3, #0]
 801fdde:	3301      	adds	r3, #1
 801fde0:	4a22      	ldr	r2, [pc, #136]	; (801fe6c <tcp_parseopt+0xe4>)
 801fde2:	8812      	ldrh	r2, [r2, #0]
 801fde4:	4293      	cmp	r3, r2
 801fde6:	da34      	bge.n	801fe52 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801fde8:	f7ff ff98 	bl	801fd1c <tcp_get_next_optbyte>
 801fdec:	4603      	mov	r3, r0
 801fdee:	b29b      	uxth	r3, r3
 801fdf0:	021b      	lsls	r3, r3, #8
 801fdf2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801fdf4:	f7ff ff92 	bl	801fd1c <tcp_get_next_optbyte>
 801fdf8:	4603      	mov	r3, r0
 801fdfa:	b29a      	uxth	r2, r3
 801fdfc:	89bb      	ldrh	r3, [r7, #12]
 801fdfe:	4313      	orrs	r3, r2
 801fe00:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801fe02:	89bb      	ldrh	r3, [r7, #12]
 801fe04:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801fe08:	d804      	bhi.n	801fe14 <tcp_parseopt+0x8c>
 801fe0a:	89bb      	ldrh	r3, [r7, #12]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d001      	beq.n	801fe14 <tcp_parseopt+0x8c>
 801fe10:	89ba      	ldrh	r2, [r7, #12]
 801fe12:	e001      	b.n	801fe18 <tcp_parseopt+0x90>
 801fe14:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801fe1c:	e010      	b.n	801fe40 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801fe1e:	f7ff ff7d 	bl	801fd1c <tcp_get_next_optbyte>
 801fe22:	4603      	mov	r3, r0
 801fe24:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801fe26:	7afb      	ldrb	r3, [r7, #11]
 801fe28:	2b01      	cmp	r3, #1
 801fe2a:	d914      	bls.n	801fe56 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801fe2c:	7afb      	ldrb	r3, [r7, #11]
 801fe2e:	b29a      	uxth	r2, r3
 801fe30:	4b0f      	ldr	r3, [pc, #60]	; (801fe70 <tcp_parseopt+0xe8>)
 801fe32:	881b      	ldrh	r3, [r3, #0]
 801fe34:	4413      	add	r3, r2
 801fe36:	b29b      	uxth	r3, r3
 801fe38:	3b02      	subs	r3, #2
 801fe3a:	b29a      	uxth	r2, r3
 801fe3c:	4b0c      	ldr	r3, [pc, #48]	; (801fe70 <tcp_parseopt+0xe8>)
 801fe3e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801fe40:	4b0b      	ldr	r3, [pc, #44]	; (801fe70 <tcp_parseopt+0xe8>)
 801fe42:	881a      	ldrh	r2, [r3, #0]
 801fe44:	4b09      	ldr	r3, [pc, #36]	; (801fe6c <tcp_parseopt+0xe4>)
 801fe46:	881b      	ldrh	r3, [r3, #0]
 801fe48:	429a      	cmp	r2, r3
 801fe4a:	d3b3      	bcc.n	801fdb4 <tcp_parseopt+0x2c>
 801fe4c:	e004      	b.n	801fe58 <tcp_parseopt+0xd0>
          return;
 801fe4e:	bf00      	nop
 801fe50:	e002      	b.n	801fe58 <tcp_parseopt+0xd0>
            return;
 801fe52:	bf00      	nop
 801fe54:	e000      	b.n	801fe58 <tcp_parseopt+0xd0>
            return;
 801fe56:	bf00      	nop
      }
    }
  }
}
 801fe58:	3710      	adds	r7, #16
 801fe5a:	46bd      	mov	sp, r7
 801fe5c:	bd80      	pop	{r7, pc}
 801fe5e:	bf00      	nop
 801fe60:	080285ec 	.word	0x080285ec
 801fe64:	08028a50 	.word	0x08028a50
 801fe68:	08028638 	.word	0x08028638
 801fe6c:	2000874c 	.word	0x2000874c
 801fe70:	20008754 	.word	0x20008754

0801fe74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801fe74:	b480      	push	{r7}
 801fe76:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801fe78:	4b05      	ldr	r3, [pc, #20]	; (801fe90 <tcp_trigger_input_pcb_close+0x1c>)
 801fe7a:	781b      	ldrb	r3, [r3, #0]
 801fe7c:	f043 0310 	orr.w	r3, r3, #16
 801fe80:	b2da      	uxtb	r2, r3
 801fe82:	4b03      	ldr	r3, [pc, #12]	; (801fe90 <tcp_trigger_input_pcb_close+0x1c>)
 801fe84:	701a      	strb	r2, [r3, #0]
}
 801fe86:	bf00      	nop
 801fe88:	46bd      	mov	sp, r7
 801fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe8e:	4770      	bx	lr
 801fe90:	20008765 	.word	0x20008765

0801fe94 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801fe94:	b580      	push	{r7, lr}
 801fe96:	b084      	sub	sp, #16
 801fe98:	af00      	add	r7, sp, #0
 801fe9a:	60f8      	str	r0, [r7, #12]
 801fe9c:	60b9      	str	r1, [r7, #8]
 801fe9e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801fea0:	68fb      	ldr	r3, [r7, #12]
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	d00a      	beq.n	801febc <tcp_route+0x28>
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	7a1b      	ldrb	r3, [r3, #8]
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d006      	beq.n	801febc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	7a1b      	ldrb	r3, [r3, #8]
 801feb2:	4618      	mov	r0, r3
 801feb4:	f7fb f852 	bl	801af5c <netif_get_by_index>
 801feb8:	4603      	mov	r3, r0
 801feba:	e003      	b.n	801fec4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801febc:	6878      	ldr	r0, [r7, #4]
 801febe:	f003 fc4b 	bl	8023758 <ip4_route>
 801fec2:	4603      	mov	r3, r0
  }
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3710      	adds	r7, #16
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}

0801fecc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801fecc:	b590      	push	{r4, r7, lr}
 801fece:	b087      	sub	sp, #28
 801fed0:	af00      	add	r7, sp, #0
 801fed2:	60f8      	str	r0, [r7, #12]
 801fed4:	60b9      	str	r1, [r7, #8]
 801fed6:	603b      	str	r3, [r7, #0]
 801fed8:	4613      	mov	r3, r2
 801feda:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d105      	bne.n	801feee <tcp_create_segment+0x22>
 801fee2:	4b44      	ldr	r3, [pc, #272]	; (801fff4 <tcp_create_segment+0x128>)
 801fee4:	22a3      	movs	r2, #163	; 0xa3
 801fee6:	4944      	ldr	r1, [pc, #272]	; (801fff8 <tcp_create_segment+0x12c>)
 801fee8:	4844      	ldr	r0, [pc, #272]	; (801fffc <tcp_create_segment+0x130>)
 801feea:	f006 f801 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801feee:	68bb      	ldr	r3, [r7, #8]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d105      	bne.n	801ff00 <tcp_create_segment+0x34>
 801fef4:	4b3f      	ldr	r3, [pc, #252]	; (801fff4 <tcp_create_segment+0x128>)
 801fef6:	22a4      	movs	r2, #164	; 0xa4
 801fef8:	4941      	ldr	r1, [pc, #260]	; (8020000 <tcp_create_segment+0x134>)
 801fefa:	4840      	ldr	r0, [pc, #256]	; (801fffc <tcp_create_segment+0x130>)
 801fefc:	f005 fff8 	bl	8025ef0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ff00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ff04:	009b      	lsls	r3, r3, #2
 801ff06:	b2db      	uxtb	r3, r3
 801ff08:	f003 0304 	and.w	r3, r3, #4
 801ff0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ff0e:	2003      	movs	r0, #3
 801ff10:	f7fa fcbc 	bl	801a88c <memp_malloc>
 801ff14:	6138      	str	r0, [r7, #16]
 801ff16:	693b      	ldr	r3, [r7, #16]
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d104      	bne.n	801ff26 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ff1c:	68b8      	ldr	r0, [r7, #8]
 801ff1e:	f7fb fbab 	bl	801b678 <pbuf_free>
    return NULL;
 801ff22:	2300      	movs	r3, #0
 801ff24:	e061      	b.n	801ffea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801ff26:	693b      	ldr	r3, [r7, #16]
 801ff28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ff2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ff2e:	693b      	ldr	r3, [r7, #16]
 801ff30:	2200      	movs	r2, #0
 801ff32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ff34:	693b      	ldr	r3, [r7, #16]
 801ff36:	68ba      	ldr	r2, [r7, #8]
 801ff38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ff3a:	68bb      	ldr	r3, [r7, #8]
 801ff3c:	891a      	ldrh	r2, [r3, #8]
 801ff3e:	7dfb      	ldrb	r3, [r7, #23]
 801ff40:	b29b      	uxth	r3, r3
 801ff42:	429a      	cmp	r2, r3
 801ff44:	d205      	bcs.n	801ff52 <tcp_create_segment+0x86>
 801ff46:	4b2b      	ldr	r3, [pc, #172]	; (801fff4 <tcp_create_segment+0x128>)
 801ff48:	22b0      	movs	r2, #176	; 0xb0
 801ff4a:	492e      	ldr	r1, [pc, #184]	; (8020004 <tcp_create_segment+0x138>)
 801ff4c:	482b      	ldr	r0, [pc, #172]	; (801fffc <tcp_create_segment+0x130>)
 801ff4e:	f005 ffcf 	bl	8025ef0 <iprintf>
  seg->len = p->tot_len - optlen;
 801ff52:	68bb      	ldr	r3, [r7, #8]
 801ff54:	891a      	ldrh	r2, [r3, #8]
 801ff56:	7dfb      	ldrb	r3, [r7, #23]
 801ff58:	b29b      	uxth	r3, r3
 801ff5a:	1ad3      	subs	r3, r2, r3
 801ff5c:	b29a      	uxth	r2, r3
 801ff5e:	693b      	ldr	r3, [r7, #16]
 801ff60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ff62:	2114      	movs	r1, #20
 801ff64:	68b8      	ldr	r0, [r7, #8]
 801ff66:	f7fb faf1 	bl	801b54c <pbuf_add_header>
 801ff6a:	4603      	mov	r3, r0
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	d004      	beq.n	801ff7a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ff70:	6938      	ldr	r0, [r7, #16]
 801ff72:	f7fd f804 	bl	801cf7e <tcp_seg_free>
    return NULL;
 801ff76:	2300      	movs	r3, #0
 801ff78:	e037      	b.n	801ffea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ff7a:	693b      	ldr	r3, [r7, #16]
 801ff7c:	685b      	ldr	r3, [r3, #4]
 801ff7e:	685a      	ldr	r2, [r3, #4]
 801ff80:	693b      	ldr	r3, [r7, #16]
 801ff82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	8ada      	ldrh	r2, [r3, #22]
 801ff88:	693b      	ldr	r3, [r7, #16]
 801ff8a:	68dc      	ldr	r4, [r3, #12]
 801ff8c:	4610      	mov	r0, r2
 801ff8e:	f7f9 ffc7 	bl	8019f20 <lwip_htons>
 801ff92:	4603      	mov	r3, r0
 801ff94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	8b1a      	ldrh	r2, [r3, #24]
 801ff9a:	693b      	ldr	r3, [r7, #16]
 801ff9c:	68dc      	ldr	r4, [r3, #12]
 801ff9e:	4610      	mov	r0, r2
 801ffa0:	f7f9 ffbe 	bl	8019f20 <lwip_htons>
 801ffa4:	4603      	mov	r3, r0
 801ffa6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ffa8:	693b      	ldr	r3, [r7, #16]
 801ffaa:	68dc      	ldr	r4, [r3, #12]
 801ffac:	6838      	ldr	r0, [r7, #0]
 801ffae:	f7f9 ffcc 	bl	8019f4a <lwip_htonl>
 801ffb2:	4603      	mov	r3, r0
 801ffb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ffb6:	7dfb      	ldrb	r3, [r7, #23]
 801ffb8:	089b      	lsrs	r3, r3, #2
 801ffba:	b2db      	uxtb	r3, r3
 801ffbc:	b29b      	uxth	r3, r3
 801ffbe:	3305      	adds	r3, #5
 801ffc0:	b29b      	uxth	r3, r3
 801ffc2:	031b      	lsls	r3, r3, #12
 801ffc4:	b29a      	uxth	r2, r3
 801ffc6:	79fb      	ldrb	r3, [r7, #7]
 801ffc8:	b29b      	uxth	r3, r3
 801ffca:	4313      	orrs	r3, r2
 801ffcc:	b29a      	uxth	r2, r3
 801ffce:	693b      	ldr	r3, [r7, #16]
 801ffd0:	68dc      	ldr	r4, [r3, #12]
 801ffd2:	4610      	mov	r0, r2
 801ffd4:	f7f9 ffa4 	bl	8019f20 <lwip_htons>
 801ffd8:	4603      	mov	r3, r0
 801ffda:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ffdc:	693b      	ldr	r3, [r7, #16]
 801ffde:	68db      	ldr	r3, [r3, #12]
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	749a      	strb	r2, [r3, #18]
 801ffe4:	2200      	movs	r2, #0
 801ffe6:	74da      	strb	r2, [r3, #19]
  return seg;
 801ffe8:	693b      	ldr	r3, [r7, #16]
}
 801ffea:	4618      	mov	r0, r3
 801ffec:	371c      	adds	r7, #28
 801ffee:	46bd      	mov	sp, r7
 801fff0:	bd90      	pop	{r4, r7, pc}
 801fff2:	bf00      	nop
 801fff4:	08028a6c 	.word	0x08028a6c
 801fff8:	08028aa0 	.word	0x08028aa0
 801fffc:	08028ac0 	.word	0x08028ac0
 8020000:	08028ae8 	.word	0x08028ae8
 8020004:	08028b0c 	.word	0x08028b0c

08020008 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8020008:	b580      	push	{r7, lr}
 802000a:	b086      	sub	sp, #24
 802000c:	af00      	add	r7, sp, #0
 802000e:	607b      	str	r3, [r7, #4]
 8020010:	4603      	mov	r3, r0
 8020012:	73fb      	strb	r3, [r7, #15]
 8020014:	460b      	mov	r3, r1
 8020016:	81bb      	strh	r3, [r7, #12]
 8020018:	4613      	mov	r3, r2
 802001a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 802001c:	89bb      	ldrh	r3, [r7, #12]
 802001e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	2b00      	cmp	r3, #0
 8020024:	d105      	bne.n	8020032 <tcp_pbuf_prealloc+0x2a>
 8020026:	4b30      	ldr	r3, [pc, #192]	; (80200e8 <tcp_pbuf_prealloc+0xe0>)
 8020028:	22e8      	movs	r2, #232	; 0xe8
 802002a:	4930      	ldr	r1, [pc, #192]	; (80200ec <tcp_pbuf_prealloc+0xe4>)
 802002c:	4830      	ldr	r0, [pc, #192]	; (80200f0 <tcp_pbuf_prealloc+0xe8>)
 802002e:	f005 ff5f 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8020032:	6a3b      	ldr	r3, [r7, #32]
 8020034:	2b00      	cmp	r3, #0
 8020036:	d105      	bne.n	8020044 <tcp_pbuf_prealloc+0x3c>
 8020038:	4b2b      	ldr	r3, [pc, #172]	; (80200e8 <tcp_pbuf_prealloc+0xe0>)
 802003a:	22e9      	movs	r2, #233	; 0xe9
 802003c:	492d      	ldr	r1, [pc, #180]	; (80200f4 <tcp_pbuf_prealloc+0xec>)
 802003e:	482c      	ldr	r0, [pc, #176]	; (80200f0 <tcp_pbuf_prealloc+0xe8>)
 8020040:	f005 ff56 	bl	8025ef0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8020044:	89ba      	ldrh	r2, [r7, #12]
 8020046:	897b      	ldrh	r3, [r7, #10]
 8020048:	429a      	cmp	r2, r3
 802004a:	d221      	bcs.n	8020090 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 802004c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020050:	f003 0302 	and.w	r3, r3, #2
 8020054:	2b00      	cmp	r3, #0
 8020056:	d111      	bne.n	802007c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8020058:	6a3b      	ldr	r3, [r7, #32]
 802005a:	8b5b      	ldrh	r3, [r3, #26]
 802005c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8020060:	2b00      	cmp	r3, #0
 8020062:	d115      	bne.n	8020090 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8020064:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8020068:	2b00      	cmp	r3, #0
 802006a:	d007      	beq.n	802007c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 802006c:	6a3b      	ldr	r3, [r7, #32]
 802006e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8020070:	2b00      	cmp	r3, #0
 8020072:	d103      	bne.n	802007c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8020074:	6a3b      	ldr	r3, [r7, #32]
 8020076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8020078:	2b00      	cmp	r3, #0
 802007a:	d009      	beq.n	8020090 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 802007c:	89bb      	ldrh	r3, [r7, #12]
 802007e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8020082:	f023 0203 	bic.w	r2, r3, #3
 8020086:	897b      	ldrh	r3, [r7, #10]
 8020088:	4293      	cmp	r3, r2
 802008a:	bf28      	it	cs
 802008c:	4613      	movcs	r3, r2
 802008e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8020090:	8af9      	ldrh	r1, [r7, #22]
 8020092:	7bfb      	ldrb	r3, [r7, #15]
 8020094:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020098:	4618      	mov	r0, r3
 802009a:	f7fb f809 	bl	801b0b0 <pbuf_alloc>
 802009e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80200a0:	693b      	ldr	r3, [r7, #16]
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d101      	bne.n	80200aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80200a6:	2300      	movs	r3, #0
 80200a8:	e019      	b.n	80200de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80200aa:	693b      	ldr	r3, [r7, #16]
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d006      	beq.n	80200c0 <tcp_pbuf_prealloc+0xb8>
 80200b2:	4b0d      	ldr	r3, [pc, #52]	; (80200e8 <tcp_pbuf_prealloc+0xe0>)
 80200b4:	f240 120b 	movw	r2, #267	; 0x10b
 80200b8:	490f      	ldr	r1, [pc, #60]	; (80200f8 <tcp_pbuf_prealloc+0xf0>)
 80200ba:	480d      	ldr	r0, [pc, #52]	; (80200f0 <tcp_pbuf_prealloc+0xe8>)
 80200bc:	f005 ff18 	bl	8025ef0 <iprintf>
  *oversize = p->len - length;
 80200c0:	693b      	ldr	r3, [r7, #16]
 80200c2:	895a      	ldrh	r2, [r3, #10]
 80200c4:	89bb      	ldrh	r3, [r7, #12]
 80200c6:	1ad3      	subs	r3, r2, r3
 80200c8:	b29a      	uxth	r2, r3
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80200ce:	693b      	ldr	r3, [r7, #16]
 80200d0:	89ba      	ldrh	r2, [r7, #12]
 80200d2:	811a      	strh	r2, [r3, #8]
 80200d4:	693b      	ldr	r3, [r7, #16]
 80200d6:	891a      	ldrh	r2, [r3, #8]
 80200d8:	693b      	ldr	r3, [r7, #16]
 80200da:	815a      	strh	r2, [r3, #10]
  return p;
 80200dc:	693b      	ldr	r3, [r7, #16]
}
 80200de:	4618      	mov	r0, r3
 80200e0:	3718      	adds	r7, #24
 80200e2:	46bd      	mov	sp, r7
 80200e4:	bd80      	pop	{r7, pc}
 80200e6:	bf00      	nop
 80200e8:	08028a6c 	.word	0x08028a6c
 80200ec:	08028b24 	.word	0x08028b24
 80200f0:	08028ac0 	.word	0x08028ac0
 80200f4:	08028b48 	.word	0x08028b48
 80200f8:	08028b68 	.word	0x08028b68

080200fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	b082      	sub	sp, #8
 8020100:	af00      	add	r7, sp, #0
 8020102:	6078      	str	r0, [r7, #4]
 8020104:	460b      	mov	r3, r1
 8020106:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	2b00      	cmp	r3, #0
 802010c:	d106      	bne.n	802011c <tcp_write_checks+0x20>
 802010e:	4b33      	ldr	r3, [pc, #204]	; (80201dc <tcp_write_checks+0xe0>)
 8020110:	f240 1233 	movw	r2, #307	; 0x133
 8020114:	4932      	ldr	r1, [pc, #200]	; (80201e0 <tcp_write_checks+0xe4>)
 8020116:	4833      	ldr	r0, [pc, #204]	; (80201e4 <tcp_write_checks+0xe8>)
 8020118:	f005 feea 	bl	8025ef0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	7d1b      	ldrb	r3, [r3, #20]
 8020120:	2b04      	cmp	r3, #4
 8020122:	d00e      	beq.n	8020142 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8020128:	2b07      	cmp	r3, #7
 802012a:	d00a      	beq.n	8020142 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8020130:	2b02      	cmp	r3, #2
 8020132:	d006      	beq.n	8020142 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8020138:	2b03      	cmp	r3, #3
 802013a:	d002      	beq.n	8020142 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 802013c:	f06f 030a 	mvn.w	r3, #10
 8020140:	e048      	b.n	80201d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8020142:	887b      	ldrh	r3, [r7, #2]
 8020144:	2b00      	cmp	r3, #0
 8020146:	d101      	bne.n	802014c <tcp_write_checks+0x50>
    return ERR_OK;
 8020148:	2300      	movs	r3, #0
 802014a:	e043      	b.n	80201d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8020152:	887a      	ldrh	r2, [r7, #2]
 8020154:	429a      	cmp	r2, r3
 8020156:	d909      	bls.n	802016c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	8b5b      	ldrh	r3, [r3, #26]
 802015c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020160:	b29a      	uxth	r2, r3
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8020166:	f04f 33ff 	mov.w	r3, #4294967295
 802016a:	e033      	b.n	80201d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020172:	2b08      	cmp	r3, #8
 8020174:	d909      	bls.n	802018a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	8b5b      	ldrh	r3, [r3, #26]
 802017a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802017e:	b29a      	uxth	r2, r3
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8020184:	f04f 33ff 	mov.w	r3, #4294967295
 8020188:	e024      	b.n	80201d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020190:	2b00      	cmp	r3, #0
 8020192:	d00f      	beq.n	80201b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8020194:	687b      	ldr	r3, [r7, #4]
 8020196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020198:	2b00      	cmp	r3, #0
 802019a:	d11a      	bne.n	80201d2 <tcp_write_checks+0xd6>
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d116      	bne.n	80201d2 <tcp_write_checks+0xd6>
 80201a4:	4b0d      	ldr	r3, [pc, #52]	; (80201dc <tcp_write_checks+0xe0>)
 80201a6:	f240 1255 	movw	r2, #341	; 0x155
 80201aa:	490f      	ldr	r1, [pc, #60]	; (80201e8 <tcp_write_checks+0xec>)
 80201ac:	480d      	ldr	r0, [pc, #52]	; (80201e4 <tcp_write_checks+0xe8>)
 80201ae:	f005 fe9f 	bl	8025ef0 <iprintf>
 80201b2:	e00e      	b.n	80201d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	d103      	bne.n	80201c4 <tcp_write_checks+0xc8>
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d006      	beq.n	80201d2 <tcp_write_checks+0xd6>
 80201c4:	4b05      	ldr	r3, [pc, #20]	; (80201dc <tcp_write_checks+0xe0>)
 80201c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80201ca:	4908      	ldr	r1, [pc, #32]	; (80201ec <tcp_write_checks+0xf0>)
 80201cc:	4805      	ldr	r0, [pc, #20]	; (80201e4 <tcp_write_checks+0xe8>)
 80201ce:	f005 fe8f 	bl	8025ef0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80201d2:	2300      	movs	r3, #0
}
 80201d4:	4618      	mov	r0, r3
 80201d6:	3708      	adds	r7, #8
 80201d8:	46bd      	mov	sp, r7
 80201da:	bd80      	pop	{r7, pc}
 80201dc:	08028a6c 	.word	0x08028a6c
 80201e0:	08028b7c 	.word	0x08028b7c
 80201e4:	08028ac0 	.word	0x08028ac0
 80201e8:	08028b9c 	.word	0x08028b9c
 80201ec:	08028bd8 	.word	0x08028bd8

080201f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80201f0:	b590      	push	{r4, r7, lr}
 80201f2:	b09b      	sub	sp, #108	; 0x6c
 80201f4:	af04      	add	r7, sp, #16
 80201f6:	60f8      	str	r0, [r7, #12]
 80201f8:	60b9      	str	r1, [r7, #8]
 80201fa:	4611      	mov	r1, r2
 80201fc:	461a      	mov	r2, r3
 80201fe:	460b      	mov	r3, r1
 8020200:	80fb      	strh	r3, [r7, #6]
 8020202:	4613      	mov	r3, r2
 8020204:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8020206:	2300      	movs	r3, #0
 8020208:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 802020a:	2300      	movs	r3, #0
 802020c:	653b      	str	r3, [r7, #80]	; 0x50
 802020e:	2300      	movs	r3, #0
 8020210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020212:	2300      	movs	r3, #0
 8020214:	64bb      	str	r3, [r7, #72]	; 0x48
 8020216:	2300      	movs	r3, #0
 8020218:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 802021a:	2300      	movs	r3, #0
 802021c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8020220:	2300      	movs	r3, #0
 8020222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8020226:	2300      	movs	r3, #0
 8020228:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 802022a:	2300      	movs	r3, #0
 802022c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 802022e:	2300      	movs	r3, #0
 8020230:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	2b00      	cmp	r3, #0
 8020236:	d109      	bne.n	802024c <tcp_write+0x5c>
 8020238:	4ba4      	ldr	r3, [pc, #656]	; (80204cc <tcp_write+0x2dc>)
 802023a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 802023e:	49a4      	ldr	r1, [pc, #656]	; (80204d0 <tcp_write+0x2e0>)
 8020240:	48a4      	ldr	r0, [pc, #656]	; (80204d4 <tcp_write+0x2e4>)
 8020242:	f005 fe55 	bl	8025ef0 <iprintf>
 8020246:	f06f 030f 	mvn.w	r3, #15
 802024a:	e32a      	b.n	80208a2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 802024c:	68fb      	ldr	r3, [r7, #12]
 802024e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8020252:	085b      	lsrs	r3, r3, #1
 8020254:	b29a      	uxth	r2, r3
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802025a:	4293      	cmp	r3, r2
 802025c:	bf28      	it	cs
 802025e:	4613      	movcs	r3, r2
 8020260:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8020262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020264:	2b00      	cmp	r3, #0
 8020266:	d102      	bne.n	802026e <tcp_write+0x7e>
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802026c:	e000      	b.n	8020270 <tcp_write+0x80>
 802026e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020270:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8020272:	68bb      	ldr	r3, [r7, #8]
 8020274:	2b00      	cmp	r3, #0
 8020276:	d109      	bne.n	802028c <tcp_write+0x9c>
 8020278:	4b94      	ldr	r3, [pc, #592]	; (80204cc <tcp_write+0x2dc>)
 802027a:	f240 12ad 	movw	r2, #429	; 0x1ad
 802027e:	4996      	ldr	r1, [pc, #600]	; (80204d8 <tcp_write+0x2e8>)
 8020280:	4894      	ldr	r0, [pc, #592]	; (80204d4 <tcp_write+0x2e4>)
 8020282:	f005 fe35 	bl	8025ef0 <iprintf>
 8020286:	f06f 030f 	mvn.w	r3, #15
 802028a:	e30a      	b.n	80208a2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 802028c:	88fb      	ldrh	r3, [r7, #6]
 802028e:	4619      	mov	r1, r3
 8020290:	68f8      	ldr	r0, [r7, #12]
 8020292:	f7ff ff33 	bl	80200fc <tcp_write_checks>
 8020296:	4603      	mov	r3, r0
 8020298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 802029c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d002      	beq.n	80202aa <tcp_write+0xba>
    return err;
 80202a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80202a8:	e2fb      	b.n	80208a2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80202aa:	68fb      	ldr	r3, [r7, #12]
 80202ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80202b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80202b4:	2300      	movs	r3, #0
 80202b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80202be:	2b00      	cmp	r3, #0
 80202c0:	f000 80f6 	beq.w	80204b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80202c4:	68fb      	ldr	r3, [r7, #12]
 80202c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80202c8:	653b      	str	r3, [r7, #80]	; 0x50
 80202ca:	e002      	b.n	80202d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80202cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80202d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d1f8      	bne.n	80202cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80202da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80202dc:	7a9b      	ldrb	r3, [r3, #10]
 80202de:	009b      	lsls	r3, r3, #2
 80202e0:	b29b      	uxth	r3, r3
 80202e2:	f003 0304 	and.w	r3, r3, #4
 80202e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80202e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80202ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80202ec:	891b      	ldrh	r3, [r3, #8]
 80202ee:	4619      	mov	r1, r3
 80202f0:	8c3b      	ldrh	r3, [r7, #32]
 80202f2:	440b      	add	r3, r1
 80202f4:	429a      	cmp	r2, r3
 80202f6:	da06      	bge.n	8020306 <tcp_write+0x116>
 80202f8:	4b74      	ldr	r3, [pc, #464]	; (80204cc <tcp_write+0x2dc>)
 80202fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80202fe:	4977      	ldr	r1, [pc, #476]	; (80204dc <tcp_write+0x2ec>)
 8020300:	4874      	ldr	r0, [pc, #464]	; (80204d4 <tcp_write+0x2e4>)
 8020302:	f005 fdf5 	bl	8025ef0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8020306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020308:	891a      	ldrh	r2, [r3, #8]
 802030a:	8c3b      	ldrh	r3, [r7, #32]
 802030c:	4413      	add	r3, r2
 802030e:	b29b      	uxth	r3, r3
 8020310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020312:	1ad3      	subs	r3, r2, r3
 8020314:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 802031c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 802031e:	8a7b      	ldrh	r3, [r7, #18]
 8020320:	2b00      	cmp	r3, #0
 8020322:	d026      	beq.n	8020372 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8020324:	8a7b      	ldrh	r3, [r7, #18]
 8020326:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8020328:	429a      	cmp	r2, r3
 802032a:	d206      	bcs.n	802033a <tcp_write+0x14a>
 802032c:	4b67      	ldr	r3, [pc, #412]	; (80204cc <tcp_write+0x2dc>)
 802032e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8020332:	496b      	ldr	r1, [pc, #428]	; (80204e0 <tcp_write+0x2f0>)
 8020334:	4867      	ldr	r0, [pc, #412]	; (80204d4 <tcp_write+0x2e4>)
 8020336:	f005 fddb 	bl	8025ef0 <iprintf>
      seg = last_unsent;
 802033a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802033c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 802033e:	8a7b      	ldrh	r3, [r7, #18]
 8020340:	88fa      	ldrh	r2, [r7, #6]
 8020342:	4293      	cmp	r3, r2
 8020344:	bf28      	it	cs
 8020346:	4613      	movcs	r3, r2
 8020348:	b29b      	uxth	r3, r3
 802034a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802034c:	4293      	cmp	r3, r2
 802034e:	bf28      	it	cs
 8020350:	4613      	movcs	r3, r2
 8020352:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8020354:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802035a:	4413      	add	r3, r2
 802035c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8020360:	8a7a      	ldrh	r2, [r7, #18]
 8020362:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020364:	1ad3      	subs	r3, r2, r3
 8020366:	b29b      	uxth	r3, r3
 8020368:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 802036a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802036c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802036e:	1ad3      	subs	r3, r2, r3
 8020370:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8020372:	8a7b      	ldrh	r3, [r7, #18]
 8020374:	2b00      	cmp	r3, #0
 8020376:	d00b      	beq.n	8020390 <tcp_write+0x1a0>
 8020378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802037c:	88fb      	ldrh	r3, [r7, #6]
 802037e:	429a      	cmp	r2, r3
 8020380:	d006      	beq.n	8020390 <tcp_write+0x1a0>
 8020382:	4b52      	ldr	r3, [pc, #328]	; (80204cc <tcp_write+0x2dc>)
 8020384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020388:	4956      	ldr	r1, [pc, #344]	; (80204e4 <tcp_write+0x2f4>)
 802038a:	4852      	ldr	r0, [pc, #328]	; (80204d4 <tcp_write+0x2e4>)
 802038c:	f005 fdb0 	bl	8025ef0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8020390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020394:	88fb      	ldrh	r3, [r7, #6]
 8020396:	429a      	cmp	r2, r3
 8020398:	f080 8167 	bcs.w	802066a <tcp_write+0x47a>
 802039c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802039e:	2b00      	cmp	r3, #0
 80203a0:	f000 8163 	beq.w	802066a <tcp_write+0x47a>
 80203a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80203a6:	891b      	ldrh	r3, [r3, #8]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	f000 815e 	beq.w	802066a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80203ae:	88fa      	ldrh	r2, [r7, #6]
 80203b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80203b4:	1ad2      	subs	r2, r2, r3
 80203b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80203b8:	4293      	cmp	r3, r2
 80203ba:	bfa8      	it	ge
 80203bc:	4613      	movge	r3, r2
 80203be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80203c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80203c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80203c4:	797b      	ldrb	r3, [r7, #5]
 80203c6:	f003 0301 	and.w	r3, r3, #1
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d027      	beq.n	802041e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80203ce:	f107 0012 	add.w	r0, r7, #18
 80203d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80203d4:	8bf9      	ldrh	r1, [r7, #30]
 80203d6:	2301      	movs	r3, #1
 80203d8:	9302      	str	r3, [sp, #8]
 80203da:	797b      	ldrb	r3, [r7, #5]
 80203dc:	9301      	str	r3, [sp, #4]
 80203de:	68fb      	ldr	r3, [r7, #12]
 80203e0:	9300      	str	r3, [sp, #0]
 80203e2:	4603      	mov	r3, r0
 80203e4:	2000      	movs	r0, #0
 80203e6:	f7ff fe0f 	bl	8020008 <tcp_pbuf_prealloc>
 80203ea:	6578      	str	r0, [r7, #84]	; 0x54
 80203ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80203ee:	2b00      	cmp	r3, #0
 80203f0:	f000 8225 	beq.w	802083e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80203f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80203f6:	6858      	ldr	r0, [r3, #4]
 80203f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80203fc:	68ba      	ldr	r2, [r7, #8]
 80203fe:	4413      	add	r3, r2
 8020400:	8bfa      	ldrh	r2, [r7, #30]
 8020402:	4619      	mov	r1, r3
 8020404:	f005 f9c6 	bl	8025794 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8020408:	6d78      	ldr	r0, [r7, #84]	; 0x54
 802040a:	f7fb f9c3 	bl	801b794 <pbuf_clen>
 802040e:	4603      	mov	r3, r0
 8020410:	461a      	mov	r2, r3
 8020412:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020416:	4413      	add	r3, r2
 8020418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 802041c:	e041      	b.n	80204a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 802041e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020420:	685b      	ldr	r3, [r3, #4]
 8020422:	637b      	str	r3, [r7, #52]	; 0x34
 8020424:	e002      	b.n	802042c <tcp_write+0x23c>
 8020426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	637b      	str	r3, [r7, #52]	; 0x34
 802042c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d1f8      	bne.n	8020426 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8020434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020436:	7b1b      	ldrb	r3, [r3, #12]
 8020438:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802043c:	2b00      	cmp	r3, #0
 802043e:	d115      	bne.n	802046c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8020440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020442:	685b      	ldr	r3, [r3, #4]
 8020444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020446:	8952      	ldrh	r2, [r2, #10]
 8020448:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 802044a:	68ba      	ldr	r2, [r7, #8]
 802044c:	429a      	cmp	r2, r3
 802044e:	d10d      	bne.n	802046c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8020450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020454:	2b00      	cmp	r3, #0
 8020456:	d006      	beq.n	8020466 <tcp_write+0x276>
 8020458:	4b1c      	ldr	r3, [pc, #112]	; (80204cc <tcp_write+0x2dc>)
 802045a:	f240 2231 	movw	r2, #561	; 0x231
 802045e:	4922      	ldr	r1, [pc, #136]	; (80204e8 <tcp_write+0x2f8>)
 8020460:	481c      	ldr	r0, [pc, #112]	; (80204d4 <tcp_write+0x2e4>)
 8020462:	f005 fd45 	bl	8025ef0 <iprintf>
          extendlen = seglen;
 8020466:	8bfb      	ldrh	r3, [r7, #30]
 8020468:	87bb      	strh	r3, [r7, #60]	; 0x3c
 802046a:	e01a      	b.n	80204a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 802046c:	8bfb      	ldrh	r3, [r7, #30]
 802046e:	2201      	movs	r2, #1
 8020470:	4619      	mov	r1, r3
 8020472:	2000      	movs	r0, #0
 8020474:	f7fa fe1c 	bl	801b0b0 <pbuf_alloc>
 8020478:	6578      	str	r0, [r7, #84]	; 0x54
 802047a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802047c:	2b00      	cmp	r3, #0
 802047e:	f000 81e0 	beq.w	8020842 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8020482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020486:	68ba      	ldr	r2, [r7, #8]
 8020488:	441a      	add	r2, r3
 802048a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802048c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 802048e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8020490:	f7fb f980 	bl	801b794 <pbuf_clen>
 8020494:	4603      	mov	r3, r0
 8020496:	461a      	mov	r2, r3
 8020498:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802049c:	4413      	add	r3, r2
 802049e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80204a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80204a6:	8bfb      	ldrh	r3, [r7, #30]
 80204a8:	4413      	add	r3, r2
 80204aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80204ae:	e0dc      	b.n	802066a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	f000 80d7 	beq.w	802066a <tcp_write+0x47a>
 80204bc:	4b03      	ldr	r3, [pc, #12]	; (80204cc <tcp_write+0x2dc>)
 80204be:	f240 224a 	movw	r2, #586	; 0x24a
 80204c2:	490a      	ldr	r1, [pc, #40]	; (80204ec <tcp_write+0x2fc>)
 80204c4:	4803      	ldr	r0, [pc, #12]	; (80204d4 <tcp_write+0x2e4>)
 80204c6:	f005 fd13 	bl	8025ef0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80204ca:	e0ce      	b.n	802066a <tcp_write+0x47a>
 80204cc:	08028a6c 	.word	0x08028a6c
 80204d0:	08028c0c 	.word	0x08028c0c
 80204d4:	08028ac0 	.word	0x08028ac0
 80204d8:	08028c24 	.word	0x08028c24
 80204dc:	08028c58 	.word	0x08028c58
 80204e0:	08028c70 	.word	0x08028c70
 80204e4:	08028c90 	.word	0x08028c90
 80204e8:	08028cb0 	.word	0x08028cb0
 80204ec:	08028cdc 	.word	0x08028cdc
    struct pbuf *p;
    u16_t left = len - pos;
 80204f0:	88fa      	ldrh	r2, [r7, #6]
 80204f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80204f6:	1ad3      	subs	r3, r2, r3
 80204f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80204fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80204fe:	b29b      	uxth	r3, r3
 8020500:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020502:	1ad3      	subs	r3, r2, r3
 8020504:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8020506:	8b7a      	ldrh	r2, [r7, #26]
 8020508:	8bbb      	ldrh	r3, [r7, #28]
 802050a:	4293      	cmp	r3, r2
 802050c:	bf28      	it	cs
 802050e:	4613      	movcs	r3, r2
 8020510:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8020512:	797b      	ldrb	r3, [r7, #5]
 8020514:	f003 0301 	and.w	r3, r3, #1
 8020518:	2b00      	cmp	r3, #0
 802051a:	d036      	beq.n	802058a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 802051c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020520:	b29a      	uxth	r2, r3
 8020522:	8b3b      	ldrh	r3, [r7, #24]
 8020524:	4413      	add	r3, r2
 8020526:	b299      	uxth	r1, r3
 8020528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802052a:	2b00      	cmp	r3, #0
 802052c:	bf0c      	ite	eq
 802052e:	2301      	moveq	r3, #1
 8020530:	2300      	movne	r3, #0
 8020532:	b2db      	uxtb	r3, r3
 8020534:	f107 0012 	add.w	r0, r7, #18
 8020538:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802053a:	9302      	str	r3, [sp, #8]
 802053c:	797b      	ldrb	r3, [r7, #5]
 802053e:	9301      	str	r3, [sp, #4]
 8020540:	68fb      	ldr	r3, [r7, #12]
 8020542:	9300      	str	r3, [sp, #0]
 8020544:	4603      	mov	r3, r0
 8020546:	2036      	movs	r0, #54	; 0x36
 8020548:	f7ff fd5e 	bl	8020008 <tcp_pbuf_prealloc>
 802054c:	6338      	str	r0, [r7, #48]	; 0x30
 802054e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020550:	2b00      	cmp	r3, #0
 8020552:	f000 8178 	beq.w	8020846 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8020556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020558:	895b      	ldrh	r3, [r3, #10]
 802055a:	8b3a      	ldrh	r2, [r7, #24]
 802055c:	429a      	cmp	r2, r3
 802055e:	d906      	bls.n	802056e <tcp_write+0x37e>
 8020560:	4b8c      	ldr	r3, [pc, #560]	; (8020794 <tcp_write+0x5a4>)
 8020562:	f240 2266 	movw	r2, #614	; 0x266
 8020566:	498c      	ldr	r1, [pc, #560]	; (8020798 <tcp_write+0x5a8>)
 8020568:	488c      	ldr	r0, [pc, #560]	; (802079c <tcp_write+0x5ac>)
 802056a:	f005 fcc1 	bl	8025ef0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 802056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020570:	685a      	ldr	r2, [r3, #4]
 8020572:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8020576:	18d0      	adds	r0, r2, r3
 8020578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802057c:	68ba      	ldr	r2, [r7, #8]
 802057e:	4413      	add	r3, r2
 8020580:	8b3a      	ldrh	r2, [r7, #24]
 8020582:	4619      	mov	r1, r3
 8020584:	f005 f906 	bl	8025794 <memcpy>
 8020588:	e02f      	b.n	80205ea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 802058a:	8a7b      	ldrh	r3, [r7, #18]
 802058c:	2b00      	cmp	r3, #0
 802058e:	d006      	beq.n	802059e <tcp_write+0x3ae>
 8020590:	4b80      	ldr	r3, [pc, #512]	; (8020794 <tcp_write+0x5a4>)
 8020592:	f240 2271 	movw	r2, #625	; 0x271
 8020596:	4982      	ldr	r1, [pc, #520]	; (80207a0 <tcp_write+0x5b0>)
 8020598:	4880      	ldr	r0, [pc, #512]	; (802079c <tcp_write+0x5ac>)
 802059a:	f005 fca9 	bl	8025ef0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 802059e:	8b3b      	ldrh	r3, [r7, #24]
 80205a0:	2201      	movs	r2, #1
 80205a2:	4619      	mov	r1, r3
 80205a4:	2036      	movs	r0, #54	; 0x36
 80205a6:	f7fa fd83 	bl	801b0b0 <pbuf_alloc>
 80205aa:	6178      	str	r0, [r7, #20]
 80205ac:	697b      	ldr	r3, [r7, #20]
 80205ae:	2b00      	cmp	r3, #0
 80205b0:	f000 814b 	beq.w	802084a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80205b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80205b8:	68ba      	ldr	r2, [r7, #8]
 80205ba:	441a      	add	r2, r3
 80205bc:	697b      	ldr	r3, [r7, #20]
 80205be:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80205c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80205c4:	b29b      	uxth	r3, r3
 80205c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80205ca:	4619      	mov	r1, r3
 80205cc:	2036      	movs	r0, #54	; 0x36
 80205ce:	f7fa fd6f 	bl	801b0b0 <pbuf_alloc>
 80205d2:	6338      	str	r0, [r7, #48]	; 0x30
 80205d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d103      	bne.n	80205e2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80205da:	6978      	ldr	r0, [r7, #20]
 80205dc:	f7fb f84c 	bl	801b678 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80205e0:	e136      	b.n	8020850 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80205e2:	6979      	ldr	r1, [r7, #20]
 80205e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80205e6:	f7fb f915 	bl	801b814 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80205ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80205ec:	f7fb f8d2 	bl	801b794 <pbuf_clen>
 80205f0:	4603      	mov	r3, r0
 80205f2:	461a      	mov	r2, r3
 80205f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80205f8:	4413      	add	r3, r2
 80205fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80205fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8020602:	2b09      	cmp	r3, #9
 8020604:	d903      	bls.n	802060e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8020606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020608:	f7fb f836 	bl	801b678 <pbuf_free>
      goto memerr;
 802060c:	e120      	b.n	8020850 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8020612:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020616:	441a      	add	r2, r3
 8020618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802061c:	9300      	str	r3, [sp, #0]
 802061e:	4613      	mov	r3, r2
 8020620:	2200      	movs	r2, #0
 8020622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020624:	68f8      	ldr	r0, [r7, #12]
 8020626:	f7ff fc51 	bl	801fecc <tcp_create_segment>
 802062a:	64f8      	str	r0, [r7, #76]	; 0x4c
 802062c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802062e:	2b00      	cmp	r3, #0
 8020630:	f000 810d 	beq.w	802084e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8020634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020636:	2b00      	cmp	r3, #0
 8020638:	d102      	bne.n	8020640 <tcp_write+0x450>
      queue = seg;
 802063a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802063c:	647b      	str	r3, [r7, #68]	; 0x44
 802063e:	e00c      	b.n	802065a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8020640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020642:	2b00      	cmp	r3, #0
 8020644:	d106      	bne.n	8020654 <tcp_write+0x464>
 8020646:	4b53      	ldr	r3, [pc, #332]	; (8020794 <tcp_write+0x5a4>)
 8020648:	f240 22ab 	movw	r2, #683	; 0x2ab
 802064c:	4955      	ldr	r1, [pc, #340]	; (80207a4 <tcp_write+0x5b4>)
 802064e:	4853      	ldr	r0, [pc, #332]	; (802079c <tcp_write+0x5ac>)
 8020650:	f005 fc4e 	bl	8025ef0 <iprintf>
      prev_seg->next = seg;
 8020654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8020656:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8020658:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 802065a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802065c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 802065e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020662:	8b3b      	ldrh	r3, [r7, #24]
 8020664:	4413      	add	r3, r2
 8020666:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 802066a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802066e:	88fb      	ldrh	r3, [r7, #6]
 8020670:	429a      	cmp	r2, r3
 8020672:	f4ff af3d 	bcc.w	80204f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8020676:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020678:	2b00      	cmp	r3, #0
 802067a:	d02c      	beq.n	80206d6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 802067c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802067e:	685b      	ldr	r3, [r3, #4]
 8020680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020682:	e01e      	b.n	80206c2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8020684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020686:	891a      	ldrh	r2, [r3, #8]
 8020688:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802068a:	4413      	add	r3, r2
 802068c:	b29a      	uxth	r2, r3
 802068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020690:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8020692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	2b00      	cmp	r3, #0
 8020698:	d110      	bne.n	80206bc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 802069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802069c:	685b      	ldr	r3, [r3, #4]
 802069e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80206a0:	8952      	ldrh	r2, [r2, #10]
 80206a2:	4413      	add	r3, r2
 80206a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80206a6:	68b9      	ldr	r1, [r7, #8]
 80206a8:	4618      	mov	r0, r3
 80206aa:	f005 f873 	bl	8025794 <memcpy>
        p->len += oversize_used;
 80206ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206b0:	895a      	ldrh	r2, [r3, #10]
 80206b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80206b4:	4413      	add	r3, r2
 80206b6:	b29a      	uxth	r2, r3
 80206b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80206bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80206c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d1dd      	bne.n	8020684 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80206c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80206ca:	891a      	ldrh	r2, [r3, #8]
 80206cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80206ce:	4413      	add	r3, r2
 80206d0:	b29a      	uxth	r2, r3
 80206d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80206d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80206d6:	8a7a      	ldrh	r2, [r7, #18]
 80206d8:	68fb      	ldr	r3, [r7, #12]
 80206da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80206de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d018      	beq.n	8020716 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80206e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d106      	bne.n	80206f8 <tcp_write+0x508>
 80206ea:	4b2a      	ldr	r3, [pc, #168]	; (8020794 <tcp_write+0x5a4>)
 80206ec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80206f0:	492d      	ldr	r1, [pc, #180]	; (80207a8 <tcp_write+0x5b8>)
 80206f2:	482a      	ldr	r0, [pc, #168]	; (802079c <tcp_write+0x5ac>)
 80206f4:	f005 fbfc 	bl	8025ef0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80206f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80206fa:	685b      	ldr	r3, [r3, #4]
 80206fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80206fe:	4618      	mov	r0, r3
 8020700:	f7fb f888 	bl	801b814 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8020704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020706:	891a      	ldrh	r2, [r3, #8]
 8020708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802070a:	891b      	ldrh	r3, [r3, #8]
 802070c:	4413      	add	r3, r2
 802070e:	b29a      	uxth	r2, r3
 8020710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020712:	811a      	strh	r2, [r3, #8]
 8020714:	e037      	b.n	8020786 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8020716:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020718:	2b00      	cmp	r3, #0
 802071a:	d034      	beq.n	8020786 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 802071c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802071e:	2b00      	cmp	r3, #0
 8020720:	d003      	beq.n	802072a <tcp_write+0x53a>
 8020722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020724:	685b      	ldr	r3, [r3, #4]
 8020726:	2b00      	cmp	r3, #0
 8020728:	d106      	bne.n	8020738 <tcp_write+0x548>
 802072a:	4b1a      	ldr	r3, [pc, #104]	; (8020794 <tcp_write+0x5a4>)
 802072c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8020730:	491e      	ldr	r1, [pc, #120]	; (80207ac <tcp_write+0x5bc>)
 8020732:	481a      	ldr	r0, [pc, #104]	; (802079c <tcp_write+0x5ac>)
 8020734:	f005 fbdc 	bl	8025ef0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8020738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802073a:	685b      	ldr	r3, [r3, #4]
 802073c:	62bb      	str	r3, [r7, #40]	; 0x28
 802073e:	e009      	b.n	8020754 <tcp_write+0x564>
      p->tot_len += extendlen;
 8020740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020742:	891a      	ldrh	r2, [r3, #8]
 8020744:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020746:	4413      	add	r3, r2
 8020748:	b29a      	uxth	r2, r3
 802074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802074c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 802074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	62bb      	str	r3, [r7, #40]	; 0x28
 8020754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	2b00      	cmp	r3, #0
 802075a:	d1f1      	bne.n	8020740 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 802075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802075e:	891a      	ldrh	r2, [r3, #8]
 8020760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020762:	4413      	add	r3, r2
 8020764:	b29a      	uxth	r2, r3
 8020766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020768:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 802076a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802076c:	895a      	ldrh	r2, [r3, #10]
 802076e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020770:	4413      	add	r3, r2
 8020772:	b29a      	uxth	r2, r3
 8020774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020776:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8020778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802077a:	891a      	ldrh	r2, [r3, #8]
 802077c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802077e:	4413      	add	r3, r2
 8020780:	b29a      	uxth	r2, r3
 8020782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020784:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8020786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020788:	2b00      	cmp	r3, #0
 802078a:	d111      	bne.n	80207b0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 802078c:	68fb      	ldr	r3, [r7, #12]
 802078e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020790:	66da      	str	r2, [r3, #108]	; 0x6c
 8020792:	e010      	b.n	80207b6 <tcp_write+0x5c6>
 8020794:	08028a6c 	.word	0x08028a6c
 8020798:	08028d0c 	.word	0x08028d0c
 802079c:	08028ac0 	.word	0x08028ac0
 80207a0:	08028d4c 	.word	0x08028d4c
 80207a4:	08028d5c 	.word	0x08028d5c
 80207a8:	08028d70 	.word	0x08028d70
 80207ac:	08028da8 	.word	0x08028da8
  } else {
    last_unsent->next = queue;
 80207b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80207b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80207b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80207b6:	68fb      	ldr	r3, [r7, #12]
 80207b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80207ba:	88fb      	ldrh	r3, [r7, #6]
 80207bc:	441a      	add	r2, r3
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80207c2:	68fb      	ldr	r3, [r7, #12]
 80207c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80207c8:	88fb      	ldrh	r3, [r7, #6]
 80207ca:	1ad3      	subs	r3, r2, r3
 80207cc:	b29a      	uxth	r2, r3
 80207ce:	68fb      	ldr	r3, [r7, #12]
 80207d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80207da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d00e      	beq.n	8020806 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d10a      	bne.n	8020806 <tcp_write+0x616>
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d106      	bne.n	8020806 <tcp_write+0x616>
 80207f8:	4b2c      	ldr	r3, [pc, #176]	; (80208ac <tcp_write+0x6bc>)
 80207fa:	f240 3212 	movw	r2, #786	; 0x312
 80207fe:	492c      	ldr	r1, [pc, #176]	; (80208b0 <tcp_write+0x6c0>)
 8020800:	482c      	ldr	r0, [pc, #176]	; (80208b4 <tcp_write+0x6c4>)
 8020802:	f005 fb75 	bl	8025ef0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8020806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020808:	2b00      	cmp	r3, #0
 802080a:	d016      	beq.n	802083a <tcp_write+0x64a>
 802080c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802080e:	68db      	ldr	r3, [r3, #12]
 8020810:	2b00      	cmp	r3, #0
 8020812:	d012      	beq.n	802083a <tcp_write+0x64a>
 8020814:	797b      	ldrb	r3, [r7, #5]
 8020816:	f003 0302 	and.w	r3, r3, #2
 802081a:	2b00      	cmp	r3, #0
 802081c:	d10d      	bne.n	802083a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 802081e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020820:	68db      	ldr	r3, [r3, #12]
 8020822:	899b      	ldrh	r3, [r3, #12]
 8020824:	b29c      	uxth	r4, r3
 8020826:	2008      	movs	r0, #8
 8020828:	f7f9 fb7a 	bl	8019f20 <lwip_htons>
 802082c:	4603      	mov	r3, r0
 802082e:	461a      	mov	r2, r3
 8020830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8020832:	68db      	ldr	r3, [r3, #12]
 8020834:	4322      	orrs	r2, r4
 8020836:	b292      	uxth	r2, r2
 8020838:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 802083a:	2300      	movs	r3, #0
 802083c:	e031      	b.n	80208a2 <tcp_write+0x6b2>
          goto memerr;
 802083e:	bf00      	nop
 8020840:	e006      	b.n	8020850 <tcp_write+0x660>
            goto memerr;
 8020842:	bf00      	nop
 8020844:	e004      	b.n	8020850 <tcp_write+0x660>
        goto memerr;
 8020846:	bf00      	nop
 8020848:	e002      	b.n	8020850 <tcp_write+0x660>
        goto memerr;
 802084a:	bf00      	nop
 802084c:	e000      	b.n	8020850 <tcp_write+0x660>
      goto memerr;
 802084e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020850:	68fb      	ldr	r3, [r7, #12]
 8020852:	8b5b      	ldrh	r3, [r3, #26]
 8020854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020858:	b29a      	uxth	r2, r3
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 802085e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020860:	2b00      	cmp	r3, #0
 8020862:	d002      	beq.n	802086a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8020864:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8020866:	f7fa ff07 	bl	801b678 <pbuf_free>
  }
  if (queue != NULL) {
 802086a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802086c:	2b00      	cmp	r3, #0
 802086e:	d002      	beq.n	8020876 <tcp_write+0x686>
    tcp_segs_free(queue);
 8020870:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8020872:	f7fc fb6f 	bl	801cf54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 802087c:	2b00      	cmp	r3, #0
 802087e:	d00e      	beq.n	802089e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8020880:	68fb      	ldr	r3, [r7, #12]
 8020882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020884:	2b00      	cmp	r3, #0
 8020886:	d10a      	bne.n	802089e <tcp_write+0x6ae>
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802088c:	2b00      	cmp	r3, #0
 802088e:	d106      	bne.n	802089e <tcp_write+0x6ae>
 8020890:	4b06      	ldr	r3, [pc, #24]	; (80208ac <tcp_write+0x6bc>)
 8020892:	f240 3227 	movw	r2, #807	; 0x327
 8020896:	4906      	ldr	r1, [pc, #24]	; (80208b0 <tcp_write+0x6c0>)
 8020898:	4806      	ldr	r0, [pc, #24]	; (80208b4 <tcp_write+0x6c4>)
 802089a:	f005 fb29 	bl	8025ef0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 802089e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	375c      	adds	r7, #92	; 0x5c
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd90      	pop	{r4, r7, pc}
 80208aa:	bf00      	nop
 80208ac:	08028a6c 	.word	0x08028a6c
 80208b0:	08028de0 	.word	0x08028de0
 80208b4:	08028ac0 	.word	0x08028ac0

080208b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80208b8:	b590      	push	{r4, r7, lr}
 80208ba:	b08b      	sub	sp, #44	; 0x2c
 80208bc:	af02      	add	r7, sp, #8
 80208be:	6078      	str	r0, [r7, #4]
 80208c0:	460b      	mov	r3, r1
 80208c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80208c4:	2300      	movs	r3, #0
 80208c6:	61fb      	str	r3, [r7, #28]
 80208c8:	2300      	movs	r3, #0
 80208ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80208cc:	2300      	movs	r3, #0
 80208ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80208d0:	687b      	ldr	r3, [r7, #4]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d106      	bne.n	80208e4 <tcp_split_unsent_seg+0x2c>
 80208d6:	4b95      	ldr	r3, [pc, #596]	; (8020b2c <tcp_split_unsent_seg+0x274>)
 80208d8:	f240 324b 	movw	r2, #843	; 0x34b
 80208dc:	4994      	ldr	r1, [pc, #592]	; (8020b30 <tcp_split_unsent_seg+0x278>)
 80208de:	4895      	ldr	r0, [pc, #596]	; (8020b34 <tcp_split_unsent_seg+0x27c>)
 80208e0:	f005 fb06 	bl	8025ef0 <iprintf>

  useg = pcb->unsent;
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80208e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80208ea:	697b      	ldr	r3, [r7, #20]
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d102      	bne.n	80208f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80208f0:	f04f 33ff 	mov.w	r3, #4294967295
 80208f4:	e116      	b.n	8020b24 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80208f6:	887b      	ldrh	r3, [r7, #2]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d109      	bne.n	8020910 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80208fc:	4b8b      	ldr	r3, [pc, #556]	; (8020b2c <tcp_split_unsent_seg+0x274>)
 80208fe:	f240 3253 	movw	r2, #851	; 0x353
 8020902:	498d      	ldr	r1, [pc, #564]	; (8020b38 <tcp_split_unsent_seg+0x280>)
 8020904:	488b      	ldr	r0, [pc, #556]	; (8020b34 <tcp_split_unsent_seg+0x27c>)
 8020906:	f005 faf3 	bl	8025ef0 <iprintf>
    return ERR_VAL;
 802090a:	f06f 0305 	mvn.w	r3, #5
 802090e:	e109      	b.n	8020b24 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8020910:	697b      	ldr	r3, [r7, #20]
 8020912:	891b      	ldrh	r3, [r3, #8]
 8020914:	887a      	ldrh	r2, [r7, #2]
 8020916:	429a      	cmp	r2, r3
 8020918:	d301      	bcc.n	802091e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 802091a:	2300      	movs	r3, #0
 802091c:	e102      	b.n	8020b24 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020922:	887a      	ldrh	r2, [r7, #2]
 8020924:	429a      	cmp	r2, r3
 8020926:	d906      	bls.n	8020936 <tcp_split_unsent_seg+0x7e>
 8020928:	4b80      	ldr	r3, [pc, #512]	; (8020b2c <tcp_split_unsent_seg+0x274>)
 802092a:	f240 325b 	movw	r2, #859	; 0x35b
 802092e:	4983      	ldr	r1, [pc, #524]	; (8020b3c <tcp_split_unsent_seg+0x284>)
 8020930:	4880      	ldr	r0, [pc, #512]	; (8020b34 <tcp_split_unsent_seg+0x27c>)
 8020932:	f005 fadd 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8020936:	697b      	ldr	r3, [r7, #20]
 8020938:	891b      	ldrh	r3, [r3, #8]
 802093a:	2b00      	cmp	r3, #0
 802093c:	d106      	bne.n	802094c <tcp_split_unsent_seg+0x94>
 802093e:	4b7b      	ldr	r3, [pc, #492]	; (8020b2c <tcp_split_unsent_seg+0x274>)
 8020940:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8020944:	497e      	ldr	r1, [pc, #504]	; (8020b40 <tcp_split_unsent_seg+0x288>)
 8020946:	487b      	ldr	r0, [pc, #492]	; (8020b34 <tcp_split_unsent_seg+0x27c>)
 8020948:	f005 fad2 	bl	8025ef0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 802094c:	697b      	ldr	r3, [r7, #20]
 802094e:	7a9b      	ldrb	r3, [r3, #10]
 8020950:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8020952:	7bfb      	ldrb	r3, [r7, #15]
 8020954:	009b      	lsls	r3, r3, #2
 8020956:	b2db      	uxtb	r3, r3
 8020958:	f003 0304 	and.w	r3, r3, #4
 802095c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 802095e:	697b      	ldr	r3, [r7, #20]
 8020960:	891a      	ldrh	r2, [r3, #8]
 8020962:	887b      	ldrh	r3, [r7, #2]
 8020964:	1ad3      	subs	r3, r2, r3
 8020966:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8020968:	7bbb      	ldrb	r3, [r7, #14]
 802096a:	b29a      	uxth	r2, r3
 802096c:	89bb      	ldrh	r3, [r7, #12]
 802096e:	4413      	add	r3, r2
 8020970:	b29b      	uxth	r3, r3
 8020972:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020976:	4619      	mov	r1, r3
 8020978:	2036      	movs	r0, #54	; 0x36
 802097a:	f7fa fb99 	bl	801b0b0 <pbuf_alloc>
 802097e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8020980:	693b      	ldr	r3, [r7, #16]
 8020982:	2b00      	cmp	r3, #0
 8020984:	f000 80b7 	beq.w	8020af6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8020988:	697b      	ldr	r3, [r7, #20]
 802098a:	685b      	ldr	r3, [r3, #4]
 802098c:	891a      	ldrh	r2, [r3, #8]
 802098e:	697b      	ldr	r3, [r7, #20]
 8020990:	891b      	ldrh	r3, [r3, #8]
 8020992:	1ad3      	subs	r3, r2, r3
 8020994:	b29a      	uxth	r2, r3
 8020996:	887b      	ldrh	r3, [r7, #2]
 8020998:	4413      	add	r3, r2
 802099a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 802099c:	697b      	ldr	r3, [r7, #20]
 802099e:	6858      	ldr	r0, [r3, #4]
 80209a0:	693b      	ldr	r3, [r7, #16]
 80209a2:	685a      	ldr	r2, [r3, #4]
 80209a4:	7bbb      	ldrb	r3, [r7, #14]
 80209a6:	18d1      	adds	r1, r2, r3
 80209a8:	897b      	ldrh	r3, [r7, #10]
 80209aa:	89ba      	ldrh	r2, [r7, #12]
 80209ac:	f7fb f85a 	bl	801ba64 <pbuf_copy_partial>
 80209b0:	4603      	mov	r3, r0
 80209b2:	461a      	mov	r2, r3
 80209b4:	89bb      	ldrh	r3, [r7, #12]
 80209b6:	4293      	cmp	r3, r2
 80209b8:	f040 809f 	bne.w	8020afa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80209bc:	697b      	ldr	r3, [r7, #20]
 80209be:	68db      	ldr	r3, [r3, #12]
 80209c0:	899b      	ldrh	r3, [r3, #12]
 80209c2:	b29b      	uxth	r3, r3
 80209c4:	4618      	mov	r0, r3
 80209c6:	f7f9 faab 	bl	8019f20 <lwip_htons>
 80209ca:	4603      	mov	r3, r0
 80209cc:	b2db      	uxtb	r3, r3
 80209ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80209d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80209d4:	2300      	movs	r3, #0
 80209d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80209d8:	7efb      	ldrb	r3, [r7, #27]
 80209da:	f003 0308 	and.w	r3, r3, #8
 80209de:	2b00      	cmp	r3, #0
 80209e0:	d007      	beq.n	80209f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80209e2:	7efb      	ldrb	r3, [r7, #27]
 80209e4:	f023 0308 	bic.w	r3, r3, #8
 80209e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80209ea:	7ebb      	ldrb	r3, [r7, #26]
 80209ec:	f043 0308 	orr.w	r3, r3, #8
 80209f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80209f2:	7efb      	ldrb	r3, [r7, #27]
 80209f4:	f003 0301 	and.w	r3, r3, #1
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d007      	beq.n	8020a0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80209fc:	7efb      	ldrb	r3, [r7, #27]
 80209fe:	f023 0301 	bic.w	r3, r3, #1
 8020a02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8020a04:	7ebb      	ldrb	r3, [r7, #26]
 8020a06:	f043 0301 	orr.w	r3, r3, #1
 8020a0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8020a0c:	697b      	ldr	r3, [r7, #20]
 8020a0e:	68db      	ldr	r3, [r3, #12]
 8020a10:	685b      	ldr	r3, [r3, #4]
 8020a12:	4618      	mov	r0, r3
 8020a14:	f7f9 fa99 	bl	8019f4a <lwip_htonl>
 8020a18:	4602      	mov	r2, r0
 8020a1a:	887b      	ldrh	r3, [r7, #2]
 8020a1c:	18d1      	adds	r1, r2, r3
 8020a1e:	7eba      	ldrb	r2, [r7, #26]
 8020a20:	7bfb      	ldrb	r3, [r7, #15]
 8020a22:	9300      	str	r3, [sp, #0]
 8020a24:	460b      	mov	r3, r1
 8020a26:	6939      	ldr	r1, [r7, #16]
 8020a28:	6878      	ldr	r0, [r7, #4]
 8020a2a:	f7ff fa4f 	bl	801fecc <tcp_create_segment>
 8020a2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8020a30:	69fb      	ldr	r3, [r7, #28]
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d063      	beq.n	8020afe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8020a36:	697b      	ldr	r3, [r7, #20]
 8020a38:	685b      	ldr	r3, [r3, #4]
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	f7fa feaa 	bl	801b794 <pbuf_clen>
 8020a40:	4603      	mov	r3, r0
 8020a42:	461a      	mov	r2, r3
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020a4a:	1a9b      	subs	r3, r3, r2
 8020a4c:	b29a      	uxth	r2, r3
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8020a54:	697b      	ldr	r3, [r7, #20]
 8020a56:	6858      	ldr	r0, [r3, #4]
 8020a58:	697b      	ldr	r3, [r7, #20]
 8020a5a:	685b      	ldr	r3, [r3, #4]
 8020a5c:	891a      	ldrh	r2, [r3, #8]
 8020a5e:	89bb      	ldrh	r3, [r7, #12]
 8020a60:	1ad3      	subs	r3, r2, r3
 8020a62:	b29b      	uxth	r3, r3
 8020a64:	4619      	mov	r1, r3
 8020a66:	f7fa fc81 	bl	801b36c <pbuf_realloc>
  useg->len -= remainder;
 8020a6a:	697b      	ldr	r3, [r7, #20]
 8020a6c:	891a      	ldrh	r2, [r3, #8]
 8020a6e:	89bb      	ldrh	r3, [r7, #12]
 8020a70:	1ad3      	subs	r3, r2, r3
 8020a72:	b29a      	uxth	r2, r3
 8020a74:	697b      	ldr	r3, [r7, #20]
 8020a76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8020a78:	697b      	ldr	r3, [r7, #20]
 8020a7a:	68db      	ldr	r3, [r3, #12]
 8020a7c:	899b      	ldrh	r3, [r3, #12]
 8020a7e:	b29c      	uxth	r4, r3
 8020a80:	7efb      	ldrb	r3, [r7, #27]
 8020a82:	b29b      	uxth	r3, r3
 8020a84:	4618      	mov	r0, r3
 8020a86:	f7f9 fa4b 	bl	8019f20 <lwip_htons>
 8020a8a:	4603      	mov	r3, r0
 8020a8c:	461a      	mov	r2, r3
 8020a8e:	697b      	ldr	r3, [r7, #20]
 8020a90:	68db      	ldr	r3, [r3, #12]
 8020a92:	4322      	orrs	r2, r4
 8020a94:	b292      	uxth	r2, r2
 8020a96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8020a98:	697b      	ldr	r3, [r7, #20]
 8020a9a:	685b      	ldr	r3, [r3, #4]
 8020a9c:	4618      	mov	r0, r3
 8020a9e:	f7fa fe79 	bl	801b794 <pbuf_clen>
 8020aa2:	4603      	mov	r3, r0
 8020aa4:	461a      	mov	r2, r3
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020aac:	4413      	add	r3, r2
 8020aae:	b29a      	uxth	r2, r3
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020ab6:	69fb      	ldr	r3, [r7, #28]
 8020ab8:	685b      	ldr	r3, [r3, #4]
 8020aba:	4618      	mov	r0, r3
 8020abc:	f7fa fe6a 	bl	801b794 <pbuf_clen>
 8020ac0:	4603      	mov	r3, r0
 8020ac2:	461a      	mov	r2, r3
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020aca:	4413      	add	r3, r2
 8020acc:	b29a      	uxth	r2, r3
 8020ace:	687b      	ldr	r3, [r7, #4]
 8020ad0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8020ad4:	697b      	ldr	r3, [r7, #20]
 8020ad6:	681a      	ldr	r2, [r3, #0]
 8020ad8:	69fb      	ldr	r3, [r7, #28]
 8020ada:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8020adc:	697b      	ldr	r3, [r7, #20]
 8020ade:	69fa      	ldr	r2, [r7, #28]
 8020ae0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8020ae2:	69fb      	ldr	r3, [r7, #28]
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d103      	bne.n	8020af2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	2200      	movs	r2, #0
 8020aee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8020af2:	2300      	movs	r3, #0
 8020af4:	e016      	b.n	8020b24 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8020af6:	bf00      	nop
 8020af8:	e002      	b.n	8020b00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020afa:	bf00      	nop
 8020afc:	e000      	b.n	8020b00 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8020afe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8020b00:	69fb      	ldr	r3, [r7, #28]
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d006      	beq.n	8020b14 <tcp_split_unsent_seg+0x25c>
 8020b06:	4b09      	ldr	r3, [pc, #36]	; (8020b2c <tcp_split_unsent_seg+0x274>)
 8020b08:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8020b0c:	490d      	ldr	r1, [pc, #52]	; (8020b44 <tcp_split_unsent_seg+0x28c>)
 8020b0e:	4809      	ldr	r0, [pc, #36]	; (8020b34 <tcp_split_unsent_seg+0x27c>)
 8020b10:	f005 f9ee 	bl	8025ef0 <iprintf>
  if (p != NULL) {
 8020b14:	693b      	ldr	r3, [r7, #16]
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d002      	beq.n	8020b20 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8020b1a:	6938      	ldr	r0, [r7, #16]
 8020b1c:	f7fa fdac 	bl	801b678 <pbuf_free>
  }

  return ERR_MEM;
 8020b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8020b24:	4618      	mov	r0, r3
 8020b26:	3724      	adds	r7, #36	; 0x24
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	bd90      	pop	{r4, r7, pc}
 8020b2c:	08028a6c 	.word	0x08028a6c
 8020b30:	08028e00 	.word	0x08028e00
 8020b34:	08028ac0 	.word	0x08028ac0
 8020b38:	08028e24 	.word	0x08028e24
 8020b3c:	08028e48 	.word	0x08028e48
 8020b40:	08028e58 	.word	0x08028e58
 8020b44:	08028e68 	.word	0x08028e68

08020b48 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8020b48:	b590      	push	{r4, r7, lr}
 8020b4a:	b085      	sub	sp, #20
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d106      	bne.n	8020b64 <tcp_send_fin+0x1c>
 8020b56:	4b21      	ldr	r3, [pc, #132]	; (8020bdc <tcp_send_fin+0x94>)
 8020b58:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8020b5c:	4920      	ldr	r1, [pc, #128]	; (8020be0 <tcp_send_fin+0x98>)
 8020b5e:	4821      	ldr	r0, [pc, #132]	; (8020be4 <tcp_send_fin+0x9c>)
 8020b60:	f005 f9c6 	bl	8025ef0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d02e      	beq.n	8020bca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020b70:	60fb      	str	r3, [r7, #12]
 8020b72:	e002      	b.n	8020b7a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8020b74:	68fb      	ldr	r3, [r7, #12]
 8020b76:	681b      	ldr	r3, [r3, #0]
 8020b78:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8020b7a:	68fb      	ldr	r3, [r7, #12]
 8020b7c:	681b      	ldr	r3, [r3, #0]
 8020b7e:	2b00      	cmp	r3, #0
 8020b80:	d1f8      	bne.n	8020b74 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	68db      	ldr	r3, [r3, #12]
 8020b86:	899b      	ldrh	r3, [r3, #12]
 8020b88:	b29b      	uxth	r3, r3
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	f7f9 f9c8 	bl	8019f20 <lwip_htons>
 8020b90:	4603      	mov	r3, r0
 8020b92:	b2db      	uxtb	r3, r3
 8020b94:	f003 0307 	and.w	r3, r3, #7
 8020b98:	2b00      	cmp	r3, #0
 8020b9a:	d116      	bne.n	8020bca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	68db      	ldr	r3, [r3, #12]
 8020ba0:	899b      	ldrh	r3, [r3, #12]
 8020ba2:	b29c      	uxth	r4, r3
 8020ba4:	2001      	movs	r0, #1
 8020ba6:	f7f9 f9bb 	bl	8019f20 <lwip_htons>
 8020baa:	4603      	mov	r3, r0
 8020bac:	461a      	mov	r2, r3
 8020bae:	68fb      	ldr	r3, [r7, #12]
 8020bb0:	68db      	ldr	r3, [r3, #12]
 8020bb2:	4322      	orrs	r2, r4
 8020bb4:	b292      	uxth	r2, r2
 8020bb6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8020bb8:	687b      	ldr	r3, [r7, #4]
 8020bba:	8b5b      	ldrh	r3, [r3, #26]
 8020bbc:	f043 0320 	orr.w	r3, r3, #32
 8020bc0:	b29a      	uxth	r2, r3
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	e004      	b.n	8020bd4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8020bca:	2101      	movs	r1, #1
 8020bcc:	6878      	ldr	r0, [r7, #4]
 8020bce:	f000 f80b 	bl	8020be8 <tcp_enqueue_flags>
 8020bd2:	4603      	mov	r3, r0
}
 8020bd4:	4618      	mov	r0, r3
 8020bd6:	3714      	adds	r7, #20
 8020bd8:	46bd      	mov	sp, r7
 8020bda:	bd90      	pop	{r4, r7, pc}
 8020bdc:	08028a6c 	.word	0x08028a6c
 8020be0:	08028e74 	.word	0x08028e74
 8020be4:	08028ac0 	.word	0x08028ac0

08020be8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8020be8:	b580      	push	{r7, lr}
 8020bea:	b08a      	sub	sp, #40	; 0x28
 8020bec:	af02      	add	r7, sp, #8
 8020bee:	6078      	str	r0, [r7, #4]
 8020bf0:	460b      	mov	r3, r1
 8020bf2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8020bf4:	2300      	movs	r3, #0
 8020bf6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8020bfc:	78fb      	ldrb	r3, [r7, #3]
 8020bfe:	f003 0303 	and.w	r3, r3, #3
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d106      	bne.n	8020c14 <tcp_enqueue_flags+0x2c>
 8020c06:	4b67      	ldr	r3, [pc, #412]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020c08:	f240 4211 	movw	r2, #1041	; 0x411
 8020c0c:	4966      	ldr	r1, [pc, #408]	; (8020da8 <tcp_enqueue_flags+0x1c0>)
 8020c0e:	4867      	ldr	r0, [pc, #412]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020c10:	f005 f96e 	bl	8025ef0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d106      	bne.n	8020c28 <tcp_enqueue_flags+0x40>
 8020c1a:	4b62      	ldr	r3, [pc, #392]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020c1c:	f240 4213 	movw	r2, #1043	; 0x413
 8020c20:	4963      	ldr	r1, [pc, #396]	; (8020db0 <tcp_enqueue_flags+0x1c8>)
 8020c22:	4862      	ldr	r0, [pc, #392]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020c24:	f005 f964 	bl	8025ef0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8020c28:	78fb      	ldrb	r3, [r7, #3]
 8020c2a:	f003 0302 	and.w	r3, r3, #2
 8020c2e:	2b00      	cmp	r3, #0
 8020c30:	d001      	beq.n	8020c36 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8020c32:	2301      	movs	r3, #1
 8020c34:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8020c36:	7ffb      	ldrb	r3, [r7, #31]
 8020c38:	009b      	lsls	r3, r3, #2
 8020c3a:	b2db      	uxtb	r3, r3
 8020c3c:	f003 0304 	and.w	r3, r3, #4
 8020c40:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8020c42:	7dfb      	ldrb	r3, [r7, #23]
 8020c44:	b29b      	uxth	r3, r3
 8020c46:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020c4a:	4619      	mov	r1, r3
 8020c4c:	2036      	movs	r0, #54	; 0x36
 8020c4e:	f7fa fa2f 	bl	801b0b0 <pbuf_alloc>
 8020c52:	6138      	str	r0, [r7, #16]
 8020c54:	693b      	ldr	r3, [r7, #16]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	d109      	bne.n	8020c6e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	8b5b      	ldrh	r3, [r3, #26]
 8020c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c62:	b29a      	uxth	r2, r3
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8020c68:	f04f 33ff 	mov.w	r3, #4294967295
 8020c6c:	e095      	b.n	8020d9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8020c6e:	693b      	ldr	r3, [r7, #16]
 8020c70:	895a      	ldrh	r2, [r3, #10]
 8020c72:	7dfb      	ldrb	r3, [r7, #23]
 8020c74:	b29b      	uxth	r3, r3
 8020c76:	429a      	cmp	r2, r3
 8020c78:	d206      	bcs.n	8020c88 <tcp_enqueue_flags+0xa0>
 8020c7a:	4b4a      	ldr	r3, [pc, #296]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020c7c:	f240 4239 	movw	r2, #1081	; 0x439
 8020c80:	494c      	ldr	r1, [pc, #304]	; (8020db4 <tcp_enqueue_flags+0x1cc>)
 8020c82:	484a      	ldr	r0, [pc, #296]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020c84:	f005 f934 	bl	8025ef0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8020c8c:	78fa      	ldrb	r2, [r7, #3]
 8020c8e:	7ffb      	ldrb	r3, [r7, #31]
 8020c90:	9300      	str	r3, [sp, #0]
 8020c92:	460b      	mov	r3, r1
 8020c94:	6939      	ldr	r1, [r7, #16]
 8020c96:	6878      	ldr	r0, [r7, #4]
 8020c98:	f7ff f918 	bl	801fecc <tcp_create_segment>
 8020c9c:	60f8      	str	r0, [r7, #12]
 8020c9e:	68fb      	ldr	r3, [r7, #12]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d109      	bne.n	8020cb8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	8b5b      	ldrh	r3, [r3, #26]
 8020ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020cac:	b29a      	uxth	r2, r3
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8020cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8020cb6:	e070      	b.n	8020d9a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8020cb8:	68fb      	ldr	r3, [r7, #12]
 8020cba:	68db      	ldr	r3, [r3, #12]
 8020cbc:	f003 0303 	and.w	r3, r3, #3
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	d006      	beq.n	8020cd2 <tcp_enqueue_flags+0xea>
 8020cc4:	4b37      	ldr	r3, [pc, #220]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020cc6:	f240 4242 	movw	r2, #1090	; 0x442
 8020cca:	493b      	ldr	r1, [pc, #236]	; (8020db8 <tcp_enqueue_flags+0x1d0>)
 8020ccc:	4837      	ldr	r0, [pc, #220]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020cce:	f005 f90f 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8020cd2:	68fb      	ldr	r3, [r7, #12]
 8020cd4:	891b      	ldrh	r3, [r3, #8]
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d006      	beq.n	8020ce8 <tcp_enqueue_flags+0x100>
 8020cda:	4b32      	ldr	r3, [pc, #200]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020cdc:	f240 4243 	movw	r2, #1091	; 0x443
 8020ce0:	4936      	ldr	r1, [pc, #216]	; (8020dbc <tcp_enqueue_flags+0x1d4>)
 8020ce2:	4832      	ldr	r0, [pc, #200]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020ce4:	f005 f904 	bl	8025ef0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	d103      	bne.n	8020cf8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	68fa      	ldr	r2, [r7, #12]
 8020cf4:	66da      	str	r2, [r3, #108]	; 0x6c
 8020cf6:	e00d      	b.n	8020d14 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020cfc:	61bb      	str	r3, [r7, #24]
 8020cfe:	e002      	b.n	8020d06 <tcp_enqueue_flags+0x11e>
 8020d00:	69bb      	ldr	r3, [r7, #24]
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	61bb      	str	r3, [r7, #24]
 8020d06:	69bb      	ldr	r3, [r7, #24]
 8020d08:	681b      	ldr	r3, [r3, #0]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d1f8      	bne.n	8020d00 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8020d0e:	69bb      	ldr	r3, [r7, #24]
 8020d10:	68fa      	ldr	r2, [r7, #12]
 8020d12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	2200      	movs	r2, #0
 8020d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8020d1c:	78fb      	ldrb	r3, [r7, #3]
 8020d1e:	f003 0302 	and.w	r3, r3, #2
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d104      	bne.n	8020d30 <tcp_enqueue_flags+0x148>
 8020d26:	78fb      	ldrb	r3, [r7, #3]
 8020d28:	f003 0301 	and.w	r3, r3, #1
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d004      	beq.n	8020d3a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020d34:	1c5a      	adds	r2, r3, #1
 8020d36:	687b      	ldr	r3, [r7, #4]
 8020d38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8020d3a:	78fb      	ldrb	r3, [r7, #3]
 8020d3c:	f003 0301 	and.w	r3, r3, #1
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d006      	beq.n	8020d52 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	8b5b      	ldrh	r3, [r3, #26]
 8020d48:	f043 0320 	orr.w	r3, r3, #32
 8020d4c:	b29a      	uxth	r2, r3
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8020d52:	68fb      	ldr	r3, [r7, #12]
 8020d54:	685b      	ldr	r3, [r3, #4]
 8020d56:	4618      	mov	r0, r3
 8020d58:	f7fa fd1c 	bl	801b794 <pbuf_clen>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	461a      	mov	r2, r3
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020d66:	4413      	add	r3, r2
 8020d68:	b29a      	uxth	r2, r3
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d00e      	beq.n	8020d98 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d10a      	bne.n	8020d98 <tcp_enqueue_flags+0x1b0>
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d106      	bne.n	8020d98 <tcp_enqueue_flags+0x1b0>
 8020d8a:	4b06      	ldr	r3, [pc, #24]	; (8020da4 <tcp_enqueue_flags+0x1bc>)
 8020d8c:	f240 4265 	movw	r2, #1125	; 0x465
 8020d90:	490b      	ldr	r1, [pc, #44]	; (8020dc0 <tcp_enqueue_flags+0x1d8>)
 8020d92:	4806      	ldr	r0, [pc, #24]	; (8020dac <tcp_enqueue_flags+0x1c4>)
 8020d94:	f005 f8ac 	bl	8025ef0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8020d98:	2300      	movs	r3, #0
}
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	3720      	adds	r7, #32
 8020d9e:	46bd      	mov	sp, r7
 8020da0:	bd80      	pop	{r7, pc}
 8020da2:	bf00      	nop
 8020da4:	08028a6c 	.word	0x08028a6c
 8020da8:	08028e90 	.word	0x08028e90
 8020dac:	08028ac0 	.word	0x08028ac0
 8020db0:	08028ee8 	.word	0x08028ee8
 8020db4:	08028f08 	.word	0x08028f08
 8020db8:	08028f44 	.word	0x08028f44
 8020dbc:	08028f5c 	.word	0x08028f5c
 8020dc0:	08028f88 	.word	0x08028f88

08020dc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8020dc4:	b5b0      	push	{r4, r5, r7, lr}
 8020dc6:	b08a      	sub	sp, #40	; 0x28
 8020dc8:	af00      	add	r7, sp, #0
 8020dca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d106      	bne.n	8020de0 <tcp_output+0x1c>
 8020dd2:	4b9e      	ldr	r3, [pc, #632]	; (802104c <tcp_output+0x288>)
 8020dd4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8020dd8:	499d      	ldr	r1, [pc, #628]	; (8021050 <tcp_output+0x28c>)
 8020dda:	489e      	ldr	r0, [pc, #632]	; (8021054 <tcp_output+0x290>)
 8020ddc:	f005 f888 	bl	8025ef0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	7d1b      	ldrb	r3, [r3, #20]
 8020de4:	2b01      	cmp	r3, #1
 8020de6:	d106      	bne.n	8020df6 <tcp_output+0x32>
 8020de8:	4b98      	ldr	r3, [pc, #608]	; (802104c <tcp_output+0x288>)
 8020dea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8020dee:	499a      	ldr	r1, [pc, #616]	; (8021058 <tcp_output+0x294>)
 8020df0:	4898      	ldr	r0, [pc, #608]	; (8021054 <tcp_output+0x290>)
 8020df2:	f005 f87d 	bl	8025ef0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8020df6:	4b99      	ldr	r3, [pc, #612]	; (802105c <tcp_output+0x298>)
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	687a      	ldr	r2, [r7, #4]
 8020dfc:	429a      	cmp	r2, r3
 8020dfe:	d101      	bne.n	8020e04 <tcp_output+0x40>
    return ERR_OK;
 8020e00:	2300      	movs	r3, #0
 8020e02:	e1ce      	b.n	80211a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020e10:	4293      	cmp	r3, r2
 8020e12:	bf28      	it	cs
 8020e14:	4613      	movcs	r3, r2
 8020e16:	b29b      	uxth	r3, r3
 8020e18:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8020e1a:	687b      	ldr	r3, [r7, #4]
 8020e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020e1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8020e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e22:	2b00      	cmp	r3, #0
 8020e24:	d10b      	bne.n	8020e3e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	8b5b      	ldrh	r3, [r3, #26]
 8020e2a:	f003 0302 	and.w	r3, r3, #2
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	f000 81aa 	beq.w	8021188 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8020e34:	6878      	ldr	r0, [r7, #4]
 8020e36:	f000 fdcb 	bl	80219d0 <tcp_send_empty_ack>
 8020e3a:	4603      	mov	r3, r0
 8020e3c:	e1b1      	b.n	80211a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8020e3e:	6879      	ldr	r1, [r7, #4]
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	3304      	adds	r3, #4
 8020e44:	461a      	mov	r2, r3
 8020e46:	6878      	ldr	r0, [r7, #4]
 8020e48:	f7ff f824 	bl	801fe94 <tcp_route>
 8020e4c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8020e4e:	697b      	ldr	r3, [r7, #20]
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d102      	bne.n	8020e5a <tcp_output+0x96>
    return ERR_RTE;
 8020e54:	f06f 0303 	mvn.w	r3, #3
 8020e58:	e1a3      	b.n	80211a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d003      	beq.n	8020e68 <tcp_output+0xa4>
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d111      	bne.n	8020e8c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8020e68:	697b      	ldr	r3, [r7, #20]
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d002      	beq.n	8020e74 <tcp_output+0xb0>
 8020e6e:	697b      	ldr	r3, [r7, #20]
 8020e70:	3304      	adds	r3, #4
 8020e72:	e000      	b.n	8020e76 <tcp_output+0xb2>
 8020e74:	2300      	movs	r3, #0
 8020e76:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8020e78:	693b      	ldr	r3, [r7, #16]
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d102      	bne.n	8020e84 <tcp_output+0xc0>
      return ERR_RTE;
 8020e7e:	f06f 0303 	mvn.w	r3, #3
 8020e82:	e18e      	b.n	80211a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8020e84:	693b      	ldr	r3, [r7, #16]
 8020e86:	681a      	ldr	r2, [r3, #0]
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8020e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e8e:	68db      	ldr	r3, [r3, #12]
 8020e90:	685b      	ldr	r3, [r3, #4]
 8020e92:	4618      	mov	r0, r3
 8020e94:	f7f9 f859 	bl	8019f4a <lwip_htonl>
 8020e98:	4602      	mov	r2, r0
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020e9e:	1ad3      	subs	r3, r2, r3
 8020ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020ea2:	8912      	ldrh	r2, [r2, #8]
 8020ea4:	4413      	add	r3, r2
 8020ea6:	69ba      	ldr	r2, [r7, #24]
 8020ea8:	429a      	cmp	r2, r3
 8020eaa:	d227      	bcs.n	8020efc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020eb2:	461a      	mov	r2, r3
 8020eb4:	69bb      	ldr	r3, [r7, #24]
 8020eb6:	4293      	cmp	r3, r2
 8020eb8:	d114      	bne.n	8020ee4 <tcp_output+0x120>
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d110      	bne.n	8020ee4 <tcp_output+0x120>
 8020ec2:	687b      	ldr	r3, [r7, #4]
 8020ec4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	d10b      	bne.n	8020ee4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8020ecc:	687b      	ldr	r3, [r7, #4]
 8020ece:	2200      	movs	r2, #0
 8020ed0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	2201      	movs	r2, #1
 8020ed8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	2200      	movs	r2, #0
 8020ee0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	8b5b      	ldrh	r3, [r3, #26]
 8020ee8:	f003 0302 	and.w	r3, r3, #2
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	f000 814d 	beq.w	802118c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8020ef2:	6878      	ldr	r0, [r7, #4]
 8020ef4:	f000 fd6c 	bl	80219d0 <tcp_send_empty_ack>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	e152      	b.n	80211a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	2200      	movs	r2, #0
 8020f00:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020f08:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8020f0a:	6a3b      	ldr	r3, [r7, #32]
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	f000 811c 	beq.w	802114a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8020f12:	e002      	b.n	8020f1a <tcp_output+0x156>
 8020f14:	6a3b      	ldr	r3, [r7, #32]
 8020f16:	681b      	ldr	r3, [r3, #0]
 8020f18:	623b      	str	r3, [r7, #32]
 8020f1a:	6a3b      	ldr	r3, [r7, #32]
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	2b00      	cmp	r3, #0
 8020f20:	d1f8      	bne.n	8020f14 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8020f22:	e112      	b.n	802114a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8020f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f26:	68db      	ldr	r3, [r3, #12]
 8020f28:	899b      	ldrh	r3, [r3, #12]
 8020f2a:	b29b      	uxth	r3, r3
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	f7f8 fff7 	bl	8019f20 <lwip_htons>
 8020f32:	4603      	mov	r3, r0
 8020f34:	b2db      	uxtb	r3, r3
 8020f36:	f003 0304 	and.w	r3, r3, #4
 8020f3a:	2b00      	cmp	r3, #0
 8020f3c:	d006      	beq.n	8020f4c <tcp_output+0x188>
 8020f3e:	4b43      	ldr	r3, [pc, #268]	; (802104c <tcp_output+0x288>)
 8020f40:	f240 5236 	movw	r2, #1334	; 0x536
 8020f44:	4946      	ldr	r1, [pc, #280]	; (8021060 <tcp_output+0x29c>)
 8020f46:	4843      	ldr	r0, [pc, #268]	; (8021054 <tcp_output+0x290>)
 8020f48:	f004 ffd2 	bl	8025ef0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	d01f      	beq.n	8020f94 <tcp_output+0x1d0>
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	8b5b      	ldrh	r3, [r3, #26]
 8020f58:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d119      	bne.n	8020f94 <tcp_output+0x1d0>
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020f64:	2b00      	cmp	r3, #0
 8020f66:	d00b      	beq.n	8020f80 <tcp_output+0x1bc>
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d110      	bne.n	8020f94 <tcp_output+0x1d0>
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8020f76:	891a      	ldrh	r2, [r3, #8]
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020f7c:	429a      	cmp	r2, r3
 8020f7e:	d209      	bcs.n	8020f94 <tcp_output+0x1d0>
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d004      	beq.n	8020f94 <tcp_output+0x1d0>
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8020f90:	2b08      	cmp	r3, #8
 8020f92:	d901      	bls.n	8020f98 <tcp_output+0x1d4>
 8020f94:	2301      	movs	r3, #1
 8020f96:	e000      	b.n	8020f9a <tcp_output+0x1d6>
 8020f98:	2300      	movs	r3, #0
 8020f9a:	2b00      	cmp	r3, #0
 8020f9c:	d106      	bne.n	8020fac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	8b5b      	ldrh	r3, [r3, #26]
 8020fa2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	f000 80e4 	beq.w	8021174 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	7d1b      	ldrb	r3, [r3, #20]
 8020fb0:	2b02      	cmp	r3, #2
 8020fb2:	d00d      	beq.n	8020fd0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8020fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fb6:	68db      	ldr	r3, [r3, #12]
 8020fb8:	899b      	ldrh	r3, [r3, #12]
 8020fba:	b29c      	uxth	r4, r3
 8020fbc:	2010      	movs	r0, #16
 8020fbe:	f7f8 ffaf 	bl	8019f20 <lwip_htons>
 8020fc2:	4603      	mov	r3, r0
 8020fc4:	461a      	mov	r2, r3
 8020fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020fc8:	68db      	ldr	r3, [r3, #12]
 8020fca:	4322      	orrs	r2, r4
 8020fcc:	b292      	uxth	r2, r2
 8020fce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8020fd0:	697a      	ldr	r2, [r7, #20]
 8020fd2:	6879      	ldr	r1, [r7, #4]
 8020fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020fd6:	f000 f909 	bl	80211ec <tcp_output_segment>
 8020fda:	4603      	mov	r3, r0
 8020fdc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8020fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d009      	beq.n	8020ffa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	8b5b      	ldrh	r3, [r3, #26]
 8020fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020fee:	b29a      	uxth	r2, r3
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	835a      	strh	r2, [r3, #26]
      return err;
 8020ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020ff8:	e0d3      	b.n	80211a2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8020ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ffc:	681a      	ldr	r2, [r3, #0]
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8021002:	687b      	ldr	r3, [r7, #4]
 8021004:	7d1b      	ldrb	r3, [r3, #20]
 8021006:	2b02      	cmp	r3, #2
 8021008:	d006      	beq.n	8021018 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	8b5b      	ldrh	r3, [r3, #26]
 802100e:	f023 0303 	bic.w	r3, r3, #3
 8021012:	b29a      	uxth	r2, r3
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802101a:	68db      	ldr	r3, [r3, #12]
 802101c:	685b      	ldr	r3, [r3, #4]
 802101e:	4618      	mov	r0, r3
 8021020:	f7f8 ff93 	bl	8019f4a <lwip_htonl>
 8021024:	4604      	mov	r4, r0
 8021026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021028:	891b      	ldrh	r3, [r3, #8]
 802102a:	461d      	mov	r5, r3
 802102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802102e:	68db      	ldr	r3, [r3, #12]
 8021030:	899b      	ldrh	r3, [r3, #12]
 8021032:	b29b      	uxth	r3, r3
 8021034:	4618      	mov	r0, r3
 8021036:	f7f8 ff73 	bl	8019f20 <lwip_htons>
 802103a:	4603      	mov	r3, r0
 802103c:	b2db      	uxtb	r3, r3
 802103e:	f003 0303 	and.w	r3, r3, #3
 8021042:	2b00      	cmp	r3, #0
 8021044:	d00e      	beq.n	8021064 <tcp_output+0x2a0>
 8021046:	2301      	movs	r3, #1
 8021048:	e00d      	b.n	8021066 <tcp_output+0x2a2>
 802104a:	bf00      	nop
 802104c:	08028a6c 	.word	0x08028a6c
 8021050:	08028fb0 	.word	0x08028fb0
 8021054:	08028ac0 	.word	0x08028ac0
 8021058:	08028fc8 	.word	0x08028fc8
 802105c:	200102c8 	.word	0x200102c8
 8021060:	08028ff0 	.word	0x08028ff0
 8021064:	2300      	movs	r3, #0
 8021066:	442b      	add	r3, r5
 8021068:	4423      	add	r3, r4
 802106a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021070:	68bb      	ldr	r3, [r7, #8]
 8021072:	1ad3      	subs	r3, r2, r3
 8021074:	2b00      	cmp	r3, #0
 8021076:	da02      	bge.n	802107e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	68ba      	ldr	r2, [r7, #8]
 802107c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 802107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021080:	891b      	ldrh	r3, [r3, #8]
 8021082:	461c      	mov	r4, r3
 8021084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021086:	68db      	ldr	r3, [r3, #12]
 8021088:	899b      	ldrh	r3, [r3, #12]
 802108a:	b29b      	uxth	r3, r3
 802108c:	4618      	mov	r0, r3
 802108e:	f7f8 ff47 	bl	8019f20 <lwip_htons>
 8021092:	4603      	mov	r3, r0
 8021094:	b2db      	uxtb	r3, r3
 8021096:	f003 0303 	and.w	r3, r3, #3
 802109a:	2b00      	cmp	r3, #0
 802109c:	d001      	beq.n	80210a2 <tcp_output+0x2de>
 802109e:	2301      	movs	r3, #1
 80210a0:	e000      	b.n	80210a4 <tcp_output+0x2e0>
 80210a2:	2300      	movs	r3, #0
 80210a4:	4423      	add	r3, r4
 80210a6:	2b00      	cmp	r3, #0
 80210a8:	d049      	beq.n	802113e <tcp_output+0x37a>
      seg->next = NULL;
 80210aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80210ac:	2200      	movs	r2, #0
 80210ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d105      	bne.n	80210c4 <tcp_output+0x300>
        pcb->unacked = seg;
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80210bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80210be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80210c0:	623b      	str	r3, [r7, #32]
 80210c2:	e03f      	b.n	8021144 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80210c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80210c6:	68db      	ldr	r3, [r3, #12]
 80210c8:	685b      	ldr	r3, [r3, #4]
 80210ca:	4618      	mov	r0, r3
 80210cc:	f7f8 ff3d 	bl	8019f4a <lwip_htonl>
 80210d0:	4604      	mov	r4, r0
 80210d2:	6a3b      	ldr	r3, [r7, #32]
 80210d4:	68db      	ldr	r3, [r3, #12]
 80210d6:	685b      	ldr	r3, [r3, #4]
 80210d8:	4618      	mov	r0, r3
 80210da:	f7f8 ff36 	bl	8019f4a <lwip_htonl>
 80210de:	4603      	mov	r3, r0
 80210e0:	1ae3      	subs	r3, r4, r3
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	da24      	bge.n	8021130 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	3370      	adds	r3, #112	; 0x70
 80210ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80210ec:	e002      	b.n	80210f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80210ee:	69fb      	ldr	r3, [r7, #28]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80210f4:	69fb      	ldr	r3, [r7, #28]
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d011      	beq.n	8021120 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80210fc:	69fb      	ldr	r3, [r7, #28]
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	68db      	ldr	r3, [r3, #12]
 8021102:	685b      	ldr	r3, [r3, #4]
 8021104:	4618      	mov	r0, r3
 8021106:	f7f8 ff20 	bl	8019f4a <lwip_htonl>
 802110a:	4604      	mov	r4, r0
 802110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802110e:	68db      	ldr	r3, [r3, #12]
 8021110:	685b      	ldr	r3, [r3, #4]
 8021112:	4618      	mov	r0, r3
 8021114:	f7f8 ff19 	bl	8019f4a <lwip_htonl>
 8021118:	4603      	mov	r3, r0
 802111a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 802111c:	2b00      	cmp	r3, #0
 802111e:	dbe6      	blt.n	80210ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8021120:	69fb      	ldr	r3, [r7, #28]
 8021122:	681a      	ldr	r2, [r3, #0]
 8021124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021126:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8021128:	69fb      	ldr	r3, [r7, #28]
 802112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802112c:	601a      	str	r2, [r3, #0]
 802112e:	e009      	b.n	8021144 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8021130:	6a3b      	ldr	r3, [r7, #32]
 8021132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021134:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8021136:	6a3b      	ldr	r3, [r7, #32]
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	623b      	str	r3, [r7, #32]
 802113c:	e002      	b.n	8021144 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 802113e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021140:	f7fb ff1d 	bl	801cf7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021148:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 802114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802114c:	2b00      	cmp	r3, #0
 802114e:	d012      	beq.n	8021176 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8021150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021152:	68db      	ldr	r3, [r3, #12]
 8021154:	685b      	ldr	r3, [r3, #4]
 8021156:	4618      	mov	r0, r3
 8021158:	f7f8 fef7 	bl	8019f4a <lwip_htonl>
 802115c:	4602      	mov	r2, r0
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021162:	1ad3      	subs	r3, r2, r3
 8021164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021166:	8912      	ldrh	r2, [r2, #8]
 8021168:	4413      	add	r3, r2
  while (seg != NULL &&
 802116a:	69ba      	ldr	r2, [r7, #24]
 802116c:	429a      	cmp	r2, r3
 802116e:	f4bf aed9 	bcs.w	8020f24 <tcp_output+0x160>
 8021172:	e000      	b.n	8021176 <tcp_output+0x3b2>
      break;
 8021174:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802117a:	2b00      	cmp	r3, #0
 802117c:	d108      	bne.n	8021190 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	2200      	movs	r2, #0
 8021182:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8021186:	e004      	b.n	8021192 <tcp_output+0x3ce>
    goto output_done;
 8021188:	bf00      	nop
 802118a:	e002      	b.n	8021192 <tcp_output+0x3ce>
    goto output_done;
 802118c:	bf00      	nop
 802118e:	e000      	b.n	8021192 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8021190:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	8b5b      	ldrh	r3, [r3, #26]
 8021196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802119a:	b29a      	uxth	r2, r3
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80211a0:	2300      	movs	r3, #0
}
 80211a2:	4618      	mov	r0, r3
 80211a4:	3728      	adds	r7, #40	; 0x28
 80211a6:	46bd      	mov	sp, r7
 80211a8:	bdb0      	pop	{r4, r5, r7, pc}
 80211aa:	bf00      	nop

080211ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80211ac:	b580      	push	{r7, lr}
 80211ae:	b082      	sub	sp, #8
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80211b4:	687b      	ldr	r3, [r7, #4]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d106      	bne.n	80211c8 <tcp_output_segment_busy+0x1c>
 80211ba:	4b09      	ldr	r3, [pc, #36]	; (80211e0 <tcp_output_segment_busy+0x34>)
 80211bc:	f240 529a 	movw	r2, #1434	; 0x59a
 80211c0:	4908      	ldr	r1, [pc, #32]	; (80211e4 <tcp_output_segment_busy+0x38>)
 80211c2:	4809      	ldr	r0, [pc, #36]	; (80211e8 <tcp_output_segment_busy+0x3c>)
 80211c4:	f004 fe94 	bl	8025ef0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	685b      	ldr	r3, [r3, #4]
 80211cc:	7b9b      	ldrb	r3, [r3, #14]
 80211ce:	2b01      	cmp	r3, #1
 80211d0:	d001      	beq.n	80211d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80211d2:	2301      	movs	r3, #1
 80211d4:	e000      	b.n	80211d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80211d6:	2300      	movs	r3, #0
}
 80211d8:	4618      	mov	r0, r3
 80211da:	3708      	adds	r7, #8
 80211dc:	46bd      	mov	sp, r7
 80211de:	bd80      	pop	{r7, pc}
 80211e0:	08028a6c 	.word	0x08028a6c
 80211e4:	08029008 	.word	0x08029008
 80211e8:	08028ac0 	.word	0x08028ac0

080211ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80211ec:	b5b0      	push	{r4, r5, r7, lr}
 80211ee:	b08c      	sub	sp, #48	; 0x30
 80211f0:	af04      	add	r7, sp, #16
 80211f2:	60f8      	str	r0, [r7, #12]
 80211f4:	60b9      	str	r1, [r7, #8]
 80211f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80211f8:	68fb      	ldr	r3, [r7, #12]
 80211fa:	2b00      	cmp	r3, #0
 80211fc:	d106      	bne.n	802120c <tcp_output_segment+0x20>
 80211fe:	4b63      	ldr	r3, [pc, #396]	; (802138c <tcp_output_segment+0x1a0>)
 8021200:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8021204:	4962      	ldr	r1, [pc, #392]	; (8021390 <tcp_output_segment+0x1a4>)
 8021206:	4863      	ldr	r0, [pc, #396]	; (8021394 <tcp_output_segment+0x1a8>)
 8021208:	f004 fe72 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 802120c:	68bb      	ldr	r3, [r7, #8]
 802120e:	2b00      	cmp	r3, #0
 8021210:	d106      	bne.n	8021220 <tcp_output_segment+0x34>
 8021212:	4b5e      	ldr	r3, [pc, #376]	; (802138c <tcp_output_segment+0x1a0>)
 8021214:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8021218:	495f      	ldr	r1, [pc, #380]	; (8021398 <tcp_output_segment+0x1ac>)
 802121a:	485e      	ldr	r0, [pc, #376]	; (8021394 <tcp_output_segment+0x1a8>)
 802121c:	f004 fe68 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d106      	bne.n	8021234 <tcp_output_segment+0x48>
 8021226:	4b59      	ldr	r3, [pc, #356]	; (802138c <tcp_output_segment+0x1a0>)
 8021228:	f240 52ba 	movw	r2, #1466	; 0x5ba
 802122c:	495b      	ldr	r1, [pc, #364]	; (802139c <tcp_output_segment+0x1b0>)
 802122e:	4859      	ldr	r0, [pc, #356]	; (8021394 <tcp_output_segment+0x1a8>)
 8021230:	f004 fe5e 	bl	8025ef0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8021234:	68f8      	ldr	r0, [r7, #12]
 8021236:	f7ff ffb9 	bl	80211ac <tcp_output_segment_busy>
 802123a:	4603      	mov	r3, r0
 802123c:	2b00      	cmp	r3, #0
 802123e:	d001      	beq.n	8021244 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8021240:	2300      	movs	r3, #0
 8021242:	e09f      	b.n	8021384 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8021244:	68bb      	ldr	r3, [r7, #8]
 8021246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021248:	68fb      	ldr	r3, [r7, #12]
 802124a:	68dc      	ldr	r4, [r3, #12]
 802124c:	4610      	mov	r0, r2
 802124e:	f7f8 fe7c 	bl	8019f4a <lwip_htonl>
 8021252:	4603      	mov	r3, r0
 8021254:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8021256:	68bb      	ldr	r3, [r7, #8]
 8021258:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802125a:	68fb      	ldr	r3, [r7, #12]
 802125c:	68dc      	ldr	r4, [r3, #12]
 802125e:	4610      	mov	r0, r2
 8021260:	f7f8 fe5e 	bl	8019f20 <lwip_htons>
 8021264:	4603      	mov	r3, r0
 8021266:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8021268:	68bb      	ldr	r3, [r7, #8]
 802126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802126c:	68ba      	ldr	r2, [r7, #8]
 802126e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8021270:	441a      	add	r2, r3
 8021272:	68bb      	ldr	r3, [r7, #8]
 8021274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8021276:	68fb      	ldr	r3, [r7, #12]
 8021278:	68db      	ldr	r3, [r3, #12]
 802127a:	3314      	adds	r3, #20
 802127c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 802127e:	68fb      	ldr	r3, [r7, #12]
 8021280:	7a9b      	ldrb	r3, [r3, #10]
 8021282:	f003 0301 	and.w	r3, r3, #1
 8021286:	2b00      	cmp	r3, #0
 8021288:	d015      	beq.n	80212b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 802128a:	68bb      	ldr	r3, [r7, #8]
 802128c:	3304      	adds	r3, #4
 802128e:	461a      	mov	r2, r3
 8021290:	6879      	ldr	r1, [r7, #4]
 8021292:	f44f 7006 	mov.w	r0, #536	; 0x218
 8021296:	f7fc fa37 	bl	801d708 <tcp_eff_send_mss_netif>
 802129a:	4603      	mov	r3, r0
 802129c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 802129e:	8b7b      	ldrh	r3, [r7, #26]
 80212a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80212a4:	4618      	mov	r0, r3
 80212a6:	f7f8 fe50 	bl	8019f4a <lwip_htonl>
 80212aa:	4602      	mov	r2, r0
 80212ac:	69fb      	ldr	r3, [r7, #28]
 80212ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 80212b0:	69fb      	ldr	r3, [r7, #28]
 80212b2:	3304      	adds	r3, #4
 80212b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80212b6:	68bb      	ldr	r3, [r7, #8]
 80212b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80212bc:	2b00      	cmp	r3, #0
 80212be:	da02      	bge.n	80212c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80212c0:	68bb      	ldr	r3, [r7, #8]
 80212c2:	2200      	movs	r2, #0
 80212c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80212c6:	68bb      	ldr	r3, [r7, #8]
 80212c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d10c      	bne.n	80212e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80212ce:	4b34      	ldr	r3, [pc, #208]	; (80213a0 <tcp_output_segment+0x1b4>)
 80212d0:	681a      	ldr	r2, [r3, #0]
 80212d2:	68bb      	ldr	r3, [r7, #8]
 80212d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	68db      	ldr	r3, [r3, #12]
 80212da:	685b      	ldr	r3, [r3, #4]
 80212dc:	4618      	mov	r0, r3
 80212de:	f7f8 fe34 	bl	8019f4a <lwip_htonl>
 80212e2:	4602      	mov	r2, r0
 80212e4:	68bb      	ldr	r3, [r7, #8]
 80212e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80212e8:	68fb      	ldr	r3, [r7, #12]
 80212ea:	68da      	ldr	r2, [r3, #12]
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	685b      	ldr	r3, [r3, #4]
 80212f0:	685b      	ldr	r3, [r3, #4]
 80212f2:	1ad3      	subs	r3, r2, r3
 80212f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	685b      	ldr	r3, [r3, #4]
 80212fa:	8959      	ldrh	r1, [r3, #10]
 80212fc:	68fb      	ldr	r3, [r7, #12]
 80212fe:	685b      	ldr	r3, [r3, #4]
 8021300:	8b3a      	ldrh	r2, [r7, #24]
 8021302:	1a8a      	subs	r2, r1, r2
 8021304:	b292      	uxth	r2, r2
 8021306:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8021308:	68fb      	ldr	r3, [r7, #12]
 802130a:	685b      	ldr	r3, [r3, #4]
 802130c:	8919      	ldrh	r1, [r3, #8]
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	685b      	ldr	r3, [r3, #4]
 8021312:	8b3a      	ldrh	r2, [r7, #24]
 8021314:	1a8a      	subs	r2, r1, r2
 8021316:	b292      	uxth	r2, r2
 8021318:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 802131a:	68fb      	ldr	r3, [r7, #12]
 802131c:	685b      	ldr	r3, [r3, #4]
 802131e:	68fa      	ldr	r2, [r7, #12]
 8021320:	68d2      	ldr	r2, [r2, #12]
 8021322:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8021324:	68fb      	ldr	r3, [r7, #12]
 8021326:	68db      	ldr	r3, [r3, #12]
 8021328:	2200      	movs	r2, #0
 802132a:	741a      	strb	r2, [r3, #16]
 802132c:	2200      	movs	r2, #0
 802132e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8021330:	68fb      	ldr	r3, [r7, #12]
 8021332:	68db      	ldr	r3, [r3, #12]
 8021334:	f103 0214 	add.w	r2, r3, #20
 8021338:	68fb      	ldr	r3, [r7, #12]
 802133a:	7a9b      	ldrb	r3, [r3, #10]
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	f003 0304 	and.w	r3, r3, #4
 8021342:	4413      	add	r3, r2
 8021344:	69fa      	ldr	r2, [r7, #28]
 8021346:	429a      	cmp	r2, r3
 8021348:	d006      	beq.n	8021358 <tcp_output_segment+0x16c>
 802134a:	4b10      	ldr	r3, [pc, #64]	; (802138c <tcp_output_segment+0x1a0>)
 802134c:	f240 621c 	movw	r2, #1564	; 0x61c
 8021350:	4914      	ldr	r1, [pc, #80]	; (80213a4 <tcp_output_segment+0x1b8>)
 8021352:	4810      	ldr	r0, [pc, #64]	; (8021394 <tcp_output_segment+0x1a8>)
 8021354:	f004 fdcc 	bl	8025ef0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8021358:	68fb      	ldr	r3, [r7, #12]
 802135a:	6858      	ldr	r0, [r3, #4]
 802135c:	68b9      	ldr	r1, [r7, #8]
 802135e:	68bb      	ldr	r3, [r7, #8]
 8021360:	1d1c      	adds	r4, r3, #4
 8021362:	68bb      	ldr	r3, [r7, #8]
 8021364:	7add      	ldrb	r5, [r3, #11]
 8021366:	68bb      	ldr	r3, [r7, #8]
 8021368:	7a9b      	ldrb	r3, [r3, #10]
 802136a:	687a      	ldr	r2, [r7, #4]
 802136c:	9202      	str	r2, [sp, #8]
 802136e:	2206      	movs	r2, #6
 8021370:	9201      	str	r2, [sp, #4]
 8021372:	9300      	str	r3, [sp, #0]
 8021374:	462b      	mov	r3, r5
 8021376:	4622      	mov	r2, r4
 8021378:	f002 fbac 	bl	8023ad4 <ip4_output_if>
 802137c:	4603      	mov	r3, r0
 802137e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8021380:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021384:	4618      	mov	r0, r3
 8021386:	3720      	adds	r7, #32
 8021388:	46bd      	mov	sp, r7
 802138a:	bdb0      	pop	{r4, r5, r7, pc}
 802138c:	08028a6c 	.word	0x08028a6c
 8021390:	08029030 	.word	0x08029030
 8021394:	08028ac0 	.word	0x08028ac0
 8021398:	08029050 	.word	0x08029050
 802139c:	08029070 	.word	0x08029070
 80213a0:	200102b8 	.word	0x200102b8
 80213a4:	08029094 	.word	0x08029094

080213a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80213a8:	b5b0      	push	{r4, r5, r7, lr}
 80213aa:	b084      	sub	sp, #16
 80213ac:	af00      	add	r7, sp, #0
 80213ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d106      	bne.n	80213c4 <tcp_rexmit_rto_prepare+0x1c>
 80213b6:	4b31      	ldr	r3, [pc, #196]	; (802147c <tcp_rexmit_rto_prepare+0xd4>)
 80213b8:	f240 6263 	movw	r2, #1635	; 0x663
 80213bc:	4930      	ldr	r1, [pc, #192]	; (8021480 <tcp_rexmit_rto_prepare+0xd8>)
 80213be:	4831      	ldr	r0, [pc, #196]	; (8021484 <tcp_rexmit_rto_prepare+0xdc>)
 80213c0:	f004 fd96 	bl	8025ef0 <iprintf>

  if (pcb->unacked == NULL) {
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d102      	bne.n	80213d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80213cc:	f06f 0305 	mvn.w	r3, #5
 80213d0:	e050      	b.n	8021474 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80213d6:	60fb      	str	r3, [r7, #12]
 80213d8:	e00b      	b.n	80213f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80213da:	68f8      	ldr	r0, [r7, #12]
 80213dc:	f7ff fee6 	bl	80211ac <tcp_output_segment_busy>
 80213e0:	4603      	mov	r3, r0
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	d002      	beq.n	80213ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80213e6:	f06f 0305 	mvn.w	r3, #5
 80213ea:	e043      	b.n	8021474 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80213ec:	68fb      	ldr	r3, [r7, #12]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	60fb      	str	r3, [r7, #12]
 80213f2:	68fb      	ldr	r3, [r7, #12]
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d1ef      	bne.n	80213da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80213fa:	68f8      	ldr	r0, [r7, #12]
 80213fc:	f7ff fed6 	bl	80211ac <tcp_output_segment_busy>
 8021400:	4603      	mov	r3, r0
 8021402:	2b00      	cmp	r3, #0
 8021404:	d002      	beq.n	802140c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8021406:	f06f 0305 	mvn.w	r3, #5
 802140a:	e033      	b.n	8021474 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 802141c:	687b      	ldr	r3, [r7, #4]
 802141e:	2200      	movs	r2, #0
 8021420:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8021422:	687b      	ldr	r3, [r7, #4]
 8021424:	8b5b      	ldrh	r3, [r3, #26]
 8021426:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802142a:	b29a      	uxth	r2, r3
 802142c:	687b      	ldr	r3, [r7, #4]
 802142e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	68db      	ldr	r3, [r3, #12]
 8021434:	685b      	ldr	r3, [r3, #4]
 8021436:	4618      	mov	r0, r3
 8021438:	f7f8 fd87 	bl	8019f4a <lwip_htonl>
 802143c:	4604      	mov	r4, r0
 802143e:	68fb      	ldr	r3, [r7, #12]
 8021440:	891b      	ldrh	r3, [r3, #8]
 8021442:	461d      	mov	r5, r3
 8021444:	68fb      	ldr	r3, [r7, #12]
 8021446:	68db      	ldr	r3, [r3, #12]
 8021448:	899b      	ldrh	r3, [r3, #12]
 802144a:	b29b      	uxth	r3, r3
 802144c:	4618      	mov	r0, r3
 802144e:	f7f8 fd67 	bl	8019f20 <lwip_htons>
 8021452:	4603      	mov	r3, r0
 8021454:	b2db      	uxtb	r3, r3
 8021456:	f003 0303 	and.w	r3, r3, #3
 802145a:	2b00      	cmp	r3, #0
 802145c:	d001      	beq.n	8021462 <tcp_rexmit_rto_prepare+0xba>
 802145e:	2301      	movs	r3, #1
 8021460:	e000      	b.n	8021464 <tcp_rexmit_rto_prepare+0xbc>
 8021462:	2300      	movs	r3, #0
 8021464:	442b      	add	r3, r5
 8021466:	18e2      	adds	r2, r4, r3
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	2200      	movs	r2, #0
 8021470:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8021472:	2300      	movs	r3, #0
}
 8021474:	4618      	mov	r0, r3
 8021476:	3710      	adds	r7, #16
 8021478:	46bd      	mov	sp, r7
 802147a:	bdb0      	pop	{r4, r5, r7, pc}
 802147c:	08028a6c 	.word	0x08028a6c
 8021480:	080290a8 	.word	0x080290a8
 8021484:	08028ac0 	.word	0x08028ac0

08021488 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8021488:	b580      	push	{r7, lr}
 802148a:	b082      	sub	sp, #8
 802148c:	af00      	add	r7, sp, #0
 802148e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d106      	bne.n	80214a4 <tcp_rexmit_rto_commit+0x1c>
 8021496:	4b0d      	ldr	r3, [pc, #52]	; (80214cc <tcp_rexmit_rto_commit+0x44>)
 8021498:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 802149c:	490c      	ldr	r1, [pc, #48]	; (80214d0 <tcp_rexmit_rto_commit+0x48>)
 802149e:	480d      	ldr	r0, [pc, #52]	; (80214d4 <tcp_rexmit_rto_commit+0x4c>)
 80214a0:	f004 fd26 	bl	8025ef0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80214aa:	2bff      	cmp	r3, #255	; 0xff
 80214ac:	d007      	beq.n	80214be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80214b4:	3301      	adds	r3, #1
 80214b6:	b2da      	uxtb	r2, r3
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80214be:	6878      	ldr	r0, [r7, #4]
 80214c0:	f7ff fc80 	bl	8020dc4 <tcp_output>
}
 80214c4:	bf00      	nop
 80214c6:	3708      	adds	r7, #8
 80214c8:	46bd      	mov	sp, r7
 80214ca:	bd80      	pop	{r7, pc}
 80214cc:	08028a6c 	.word	0x08028a6c
 80214d0:	080290cc 	.word	0x080290cc
 80214d4:	08028ac0 	.word	0x08028ac0

080214d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80214d8:	b580      	push	{r7, lr}
 80214da:	b082      	sub	sp, #8
 80214dc:	af00      	add	r7, sp, #0
 80214de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d106      	bne.n	80214f4 <tcp_rexmit_rto+0x1c>
 80214e6:	4b0a      	ldr	r3, [pc, #40]	; (8021510 <tcp_rexmit_rto+0x38>)
 80214e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80214ec:	4909      	ldr	r1, [pc, #36]	; (8021514 <tcp_rexmit_rto+0x3c>)
 80214ee:	480a      	ldr	r0, [pc, #40]	; (8021518 <tcp_rexmit_rto+0x40>)
 80214f0:	f004 fcfe 	bl	8025ef0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80214f4:	6878      	ldr	r0, [r7, #4]
 80214f6:	f7ff ff57 	bl	80213a8 <tcp_rexmit_rto_prepare>
 80214fa:	4603      	mov	r3, r0
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d102      	bne.n	8021506 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8021500:	6878      	ldr	r0, [r7, #4]
 8021502:	f7ff ffc1 	bl	8021488 <tcp_rexmit_rto_commit>
  }
}
 8021506:	bf00      	nop
 8021508:	3708      	adds	r7, #8
 802150a:	46bd      	mov	sp, r7
 802150c:	bd80      	pop	{r7, pc}
 802150e:	bf00      	nop
 8021510:	08028a6c 	.word	0x08028a6c
 8021514:	080290f0 	.word	0x080290f0
 8021518:	08028ac0 	.word	0x08028ac0

0802151c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 802151c:	b590      	push	{r4, r7, lr}
 802151e:	b085      	sub	sp, #20
 8021520:	af00      	add	r7, sp, #0
 8021522:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d106      	bne.n	8021538 <tcp_rexmit+0x1c>
 802152a:	4b2f      	ldr	r3, [pc, #188]	; (80215e8 <tcp_rexmit+0xcc>)
 802152c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8021530:	492e      	ldr	r1, [pc, #184]	; (80215ec <tcp_rexmit+0xd0>)
 8021532:	482f      	ldr	r0, [pc, #188]	; (80215f0 <tcp_rexmit+0xd4>)
 8021534:	f004 fcdc 	bl	8025ef0 <iprintf>

  if (pcb->unacked == NULL) {
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802153c:	2b00      	cmp	r3, #0
 802153e:	d102      	bne.n	8021546 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8021540:	f06f 0305 	mvn.w	r3, #5
 8021544:	e04c      	b.n	80215e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802154a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 802154c:	68b8      	ldr	r0, [r7, #8]
 802154e:	f7ff fe2d 	bl	80211ac <tcp_output_segment_busy>
 8021552:	4603      	mov	r3, r0
 8021554:	2b00      	cmp	r3, #0
 8021556:	d002      	beq.n	802155e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8021558:	f06f 0305 	mvn.w	r3, #5
 802155c:	e040      	b.n	80215e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 802155e:	68bb      	ldr	r3, [r7, #8]
 8021560:	681a      	ldr	r2, [r3, #0]
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	336c      	adds	r3, #108	; 0x6c
 802156a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802156c:	e002      	b.n	8021574 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8021574:	68fb      	ldr	r3, [r7, #12]
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d011      	beq.n	80215a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 802157c:	68fb      	ldr	r3, [r7, #12]
 802157e:	681b      	ldr	r3, [r3, #0]
 8021580:	68db      	ldr	r3, [r3, #12]
 8021582:	685b      	ldr	r3, [r3, #4]
 8021584:	4618      	mov	r0, r3
 8021586:	f7f8 fce0 	bl	8019f4a <lwip_htonl>
 802158a:	4604      	mov	r4, r0
 802158c:	68bb      	ldr	r3, [r7, #8]
 802158e:	68db      	ldr	r3, [r3, #12]
 8021590:	685b      	ldr	r3, [r3, #4]
 8021592:	4618      	mov	r0, r3
 8021594:	f7f8 fcd9 	bl	8019f4a <lwip_htonl>
 8021598:	4603      	mov	r3, r0
 802159a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 802159c:	2b00      	cmp	r3, #0
 802159e:	dbe6      	blt.n	802156e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80215a0:	68fb      	ldr	r3, [r7, #12]
 80215a2:	681a      	ldr	r2, [r3, #0]
 80215a4:	68bb      	ldr	r3, [r7, #8]
 80215a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80215a8:	68fb      	ldr	r3, [r7, #12]
 80215aa:	68ba      	ldr	r2, [r7, #8]
 80215ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80215ae:	68bb      	ldr	r3, [r7, #8]
 80215b0:	681b      	ldr	r3, [r3, #0]
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d103      	bne.n	80215be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	2200      	movs	r2, #0
 80215ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80215c4:	2bff      	cmp	r3, #255	; 0xff
 80215c6:	d007      	beq.n	80215d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80215ce:	3301      	adds	r3, #1
 80215d0:	b2da      	uxtb	r2, r3
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	2200      	movs	r2, #0
 80215dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80215de:	2300      	movs	r3, #0
}
 80215e0:	4618      	mov	r0, r3
 80215e2:	3714      	adds	r7, #20
 80215e4:	46bd      	mov	sp, r7
 80215e6:	bd90      	pop	{r4, r7, pc}
 80215e8:	08028a6c 	.word	0x08028a6c
 80215ec:	0802910c 	.word	0x0802910c
 80215f0:	08028ac0 	.word	0x08028ac0

080215f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80215f4:	b580      	push	{r7, lr}
 80215f6:	b082      	sub	sp, #8
 80215f8:	af00      	add	r7, sp, #0
 80215fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d106      	bne.n	8021610 <tcp_rexmit_fast+0x1c>
 8021602:	4b2a      	ldr	r3, [pc, #168]	; (80216ac <tcp_rexmit_fast+0xb8>)
 8021604:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8021608:	4929      	ldr	r1, [pc, #164]	; (80216b0 <tcp_rexmit_fast+0xbc>)
 802160a:	482a      	ldr	r0, [pc, #168]	; (80216b4 <tcp_rexmit_fast+0xc0>)
 802160c:	f004 fc70 	bl	8025ef0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8021614:	2b00      	cmp	r3, #0
 8021616:	d045      	beq.n	80216a4 <tcp_rexmit_fast+0xb0>
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	8b5b      	ldrh	r3, [r3, #26]
 802161c:	f003 0304 	and.w	r3, r3, #4
 8021620:	2b00      	cmp	r3, #0
 8021622:	d13f      	bne.n	80216a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8021624:	6878      	ldr	r0, [r7, #4]
 8021626:	f7ff ff79 	bl	802151c <tcp_rexmit>
 802162a:	4603      	mov	r3, r0
 802162c:	2b00      	cmp	r3, #0
 802162e:	d139      	bne.n	80216a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802163c:	4293      	cmp	r3, r2
 802163e:	bf28      	it	cs
 8021640:	4613      	movcs	r3, r2
 8021642:	b29b      	uxth	r3, r3
 8021644:	2b00      	cmp	r3, #0
 8021646:	da00      	bge.n	802164a <tcp_rexmit_fast+0x56>
 8021648:	3301      	adds	r3, #1
 802164a:	105b      	asrs	r3, r3, #1
 802164c:	b29a      	uxth	r2, r3
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 802165a:	461a      	mov	r2, r3
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8021660:	005b      	lsls	r3, r3, #1
 8021662:	429a      	cmp	r2, r3
 8021664:	d206      	bcs.n	8021674 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802166a:	005b      	lsls	r3, r3, #1
 802166c:	b29a      	uxth	r2, r3
 802166e:	687b      	ldr	r3, [r7, #4]
 8021670:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802167e:	4619      	mov	r1, r3
 8021680:	0049      	lsls	r1, r1, #1
 8021682:	440b      	add	r3, r1
 8021684:	b29b      	uxth	r3, r3
 8021686:	4413      	add	r3, r2
 8021688:	b29a      	uxth	r2, r3
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	8b5b      	ldrh	r3, [r3, #26]
 8021694:	f043 0304 	orr.w	r3, r3, #4
 8021698:	b29a      	uxth	r2, r3
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	2200      	movs	r2, #0
 80216a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80216a4:	bf00      	nop
 80216a6:	3708      	adds	r7, #8
 80216a8:	46bd      	mov	sp, r7
 80216aa:	bd80      	pop	{r7, pc}
 80216ac:	08028a6c 	.word	0x08028a6c
 80216b0:	08029124 	.word	0x08029124
 80216b4:	08028ac0 	.word	0x08028ac0

080216b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b086      	sub	sp, #24
 80216bc:	af00      	add	r7, sp, #0
 80216be:	60f8      	str	r0, [r7, #12]
 80216c0:	607b      	str	r3, [r7, #4]
 80216c2:	460b      	mov	r3, r1
 80216c4:	817b      	strh	r3, [r7, #10]
 80216c6:	4613      	mov	r3, r2
 80216c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80216ca:	897a      	ldrh	r2, [r7, #10]
 80216cc:	893b      	ldrh	r3, [r7, #8]
 80216ce:	4413      	add	r3, r2
 80216d0:	b29b      	uxth	r3, r3
 80216d2:	3314      	adds	r3, #20
 80216d4:	b29b      	uxth	r3, r3
 80216d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80216da:	4619      	mov	r1, r3
 80216dc:	2022      	movs	r0, #34	; 0x22
 80216de:	f7f9 fce7 	bl	801b0b0 <pbuf_alloc>
 80216e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80216e4:	697b      	ldr	r3, [r7, #20]
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d04d      	beq.n	8021786 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80216ea:	897b      	ldrh	r3, [r7, #10]
 80216ec:	3313      	adds	r3, #19
 80216ee:	697a      	ldr	r2, [r7, #20]
 80216f0:	8952      	ldrh	r2, [r2, #10]
 80216f2:	4293      	cmp	r3, r2
 80216f4:	db06      	blt.n	8021704 <tcp_output_alloc_header_common+0x4c>
 80216f6:	4b26      	ldr	r3, [pc, #152]	; (8021790 <tcp_output_alloc_header_common+0xd8>)
 80216f8:	f240 7223 	movw	r2, #1827	; 0x723
 80216fc:	4925      	ldr	r1, [pc, #148]	; (8021794 <tcp_output_alloc_header_common+0xdc>)
 80216fe:	4826      	ldr	r0, [pc, #152]	; (8021798 <tcp_output_alloc_header_common+0xe0>)
 8021700:	f004 fbf6 	bl	8025ef0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8021704:	697b      	ldr	r3, [r7, #20]
 8021706:	685b      	ldr	r3, [r3, #4]
 8021708:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 802170a:	8c3b      	ldrh	r3, [r7, #32]
 802170c:	4618      	mov	r0, r3
 802170e:	f7f8 fc07 	bl	8019f20 <lwip_htons>
 8021712:	4603      	mov	r3, r0
 8021714:	461a      	mov	r2, r3
 8021716:	693b      	ldr	r3, [r7, #16]
 8021718:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 802171a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802171c:	4618      	mov	r0, r3
 802171e:	f7f8 fbff 	bl	8019f20 <lwip_htons>
 8021722:	4603      	mov	r3, r0
 8021724:	461a      	mov	r2, r3
 8021726:	693b      	ldr	r3, [r7, #16]
 8021728:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 802172a:	693b      	ldr	r3, [r7, #16]
 802172c:	687a      	ldr	r2, [r7, #4]
 802172e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8021730:	68f8      	ldr	r0, [r7, #12]
 8021732:	f7f8 fc0a 	bl	8019f4a <lwip_htonl>
 8021736:	4602      	mov	r2, r0
 8021738:	693b      	ldr	r3, [r7, #16]
 802173a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802173c:	897b      	ldrh	r3, [r7, #10]
 802173e:	089b      	lsrs	r3, r3, #2
 8021740:	b29b      	uxth	r3, r3
 8021742:	3305      	adds	r3, #5
 8021744:	b29b      	uxth	r3, r3
 8021746:	031b      	lsls	r3, r3, #12
 8021748:	b29a      	uxth	r2, r3
 802174a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802174e:	b29b      	uxth	r3, r3
 8021750:	4313      	orrs	r3, r2
 8021752:	b29b      	uxth	r3, r3
 8021754:	4618      	mov	r0, r3
 8021756:	f7f8 fbe3 	bl	8019f20 <lwip_htons>
 802175a:	4603      	mov	r3, r0
 802175c:	461a      	mov	r2, r3
 802175e:	693b      	ldr	r3, [r7, #16]
 8021760:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8021762:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021764:	4618      	mov	r0, r3
 8021766:	f7f8 fbdb 	bl	8019f20 <lwip_htons>
 802176a:	4603      	mov	r3, r0
 802176c:	461a      	mov	r2, r3
 802176e:	693b      	ldr	r3, [r7, #16]
 8021770:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8021772:	693b      	ldr	r3, [r7, #16]
 8021774:	2200      	movs	r2, #0
 8021776:	741a      	strb	r2, [r3, #16]
 8021778:	2200      	movs	r2, #0
 802177a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802177c:	693b      	ldr	r3, [r7, #16]
 802177e:	2200      	movs	r2, #0
 8021780:	749a      	strb	r2, [r3, #18]
 8021782:	2200      	movs	r2, #0
 8021784:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8021786:	697b      	ldr	r3, [r7, #20]
}
 8021788:	4618      	mov	r0, r3
 802178a:	3718      	adds	r7, #24
 802178c:	46bd      	mov	sp, r7
 802178e:	bd80      	pop	{r7, pc}
 8021790:	08028a6c 	.word	0x08028a6c
 8021794:	08029144 	.word	0x08029144
 8021798:	08028ac0 	.word	0x08028ac0

0802179c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 802179c:	b5b0      	push	{r4, r5, r7, lr}
 802179e:	b08a      	sub	sp, #40	; 0x28
 80217a0:	af04      	add	r7, sp, #16
 80217a2:	60f8      	str	r0, [r7, #12]
 80217a4:	607b      	str	r3, [r7, #4]
 80217a6:	460b      	mov	r3, r1
 80217a8:	817b      	strh	r3, [r7, #10]
 80217aa:	4613      	mov	r3, r2
 80217ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80217ae:	68fb      	ldr	r3, [r7, #12]
 80217b0:	2b00      	cmp	r3, #0
 80217b2:	d106      	bne.n	80217c2 <tcp_output_alloc_header+0x26>
 80217b4:	4b15      	ldr	r3, [pc, #84]	; (802180c <tcp_output_alloc_header+0x70>)
 80217b6:	f240 7242 	movw	r2, #1858	; 0x742
 80217ba:	4915      	ldr	r1, [pc, #84]	; (8021810 <tcp_output_alloc_header+0x74>)
 80217bc:	4815      	ldr	r0, [pc, #84]	; (8021814 <tcp_output_alloc_header+0x78>)
 80217be:	f004 fb97 	bl	8025ef0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80217c2:	68fb      	ldr	r3, [r7, #12]
 80217c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	8adb      	ldrh	r3, [r3, #22]
 80217ca:	68fa      	ldr	r2, [r7, #12]
 80217cc:	8b12      	ldrh	r2, [r2, #24]
 80217ce:	68f9      	ldr	r1, [r7, #12]
 80217d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80217d2:	893d      	ldrh	r5, [r7, #8]
 80217d4:	897c      	ldrh	r4, [r7, #10]
 80217d6:	9103      	str	r1, [sp, #12]
 80217d8:	2110      	movs	r1, #16
 80217da:	9102      	str	r1, [sp, #8]
 80217dc:	9201      	str	r2, [sp, #4]
 80217de:	9300      	str	r3, [sp, #0]
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	462a      	mov	r2, r5
 80217e4:	4621      	mov	r1, r4
 80217e6:	f7ff ff67 	bl	80216b8 <tcp_output_alloc_header_common>
 80217ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80217ec:	697b      	ldr	r3, [r7, #20]
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d006      	beq.n	8021800 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80217f2:	68fb      	ldr	r3, [r7, #12]
 80217f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80217f6:	68fa      	ldr	r2, [r7, #12]
 80217f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80217fa:	441a      	add	r2, r3
 80217fc:	68fb      	ldr	r3, [r7, #12]
 80217fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8021800:	697b      	ldr	r3, [r7, #20]
}
 8021802:	4618      	mov	r0, r3
 8021804:	3718      	adds	r7, #24
 8021806:	46bd      	mov	sp, r7
 8021808:	bdb0      	pop	{r4, r5, r7, pc}
 802180a:	bf00      	nop
 802180c:	08028a6c 	.word	0x08028a6c
 8021810:	08029174 	.word	0x08029174
 8021814:	08028ac0 	.word	0x08028ac0

08021818 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8021818:	b580      	push	{r7, lr}
 802181a:	b088      	sub	sp, #32
 802181c:	af00      	add	r7, sp, #0
 802181e:	60f8      	str	r0, [r7, #12]
 8021820:	60b9      	str	r1, [r7, #8]
 8021822:	4611      	mov	r1, r2
 8021824:	461a      	mov	r2, r3
 8021826:	460b      	mov	r3, r1
 8021828:	71fb      	strb	r3, [r7, #7]
 802182a:	4613      	mov	r3, r2
 802182c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802182e:	2300      	movs	r3, #0
 8021830:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8021832:	68bb      	ldr	r3, [r7, #8]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d106      	bne.n	8021846 <tcp_output_fill_options+0x2e>
 8021838:	4b13      	ldr	r3, [pc, #76]	; (8021888 <tcp_output_fill_options+0x70>)
 802183a:	f240 7256 	movw	r2, #1878	; 0x756
 802183e:	4913      	ldr	r1, [pc, #76]	; (802188c <tcp_output_fill_options+0x74>)
 8021840:	4813      	ldr	r0, [pc, #76]	; (8021890 <tcp_output_fill_options+0x78>)
 8021842:	f004 fb55 	bl	8025ef0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8021846:	68bb      	ldr	r3, [r7, #8]
 8021848:	685b      	ldr	r3, [r3, #4]
 802184a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802184c:	69bb      	ldr	r3, [r7, #24]
 802184e:	3314      	adds	r3, #20
 8021850:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8021852:	69bb      	ldr	r3, [r7, #24]
 8021854:	f103 0214 	add.w	r2, r3, #20
 8021858:	8bfb      	ldrh	r3, [r7, #30]
 802185a:	009b      	lsls	r3, r3, #2
 802185c:	4619      	mov	r1, r3
 802185e:	79fb      	ldrb	r3, [r7, #7]
 8021860:	009b      	lsls	r3, r3, #2
 8021862:	f003 0304 	and.w	r3, r3, #4
 8021866:	440b      	add	r3, r1
 8021868:	4413      	add	r3, r2
 802186a:	697a      	ldr	r2, [r7, #20]
 802186c:	429a      	cmp	r2, r3
 802186e:	d006      	beq.n	802187e <tcp_output_fill_options+0x66>
 8021870:	4b05      	ldr	r3, [pc, #20]	; (8021888 <tcp_output_fill_options+0x70>)
 8021872:	f240 7275 	movw	r2, #1909	; 0x775
 8021876:	4907      	ldr	r1, [pc, #28]	; (8021894 <tcp_output_fill_options+0x7c>)
 8021878:	4805      	ldr	r0, [pc, #20]	; (8021890 <tcp_output_fill_options+0x78>)
 802187a:	f004 fb39 	bl	8025ef0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 802187e:	bf00      	nop
 8021880:	3720      	adds	r7, #32
 8021882:	46bd      	mov	sp, r7
 8021884:	bd80      	pop	{r7, pc}
 8021886:	bf00      	nop
 8021888:	08028a6c 	.word	0x08028a6c
 802188c:	0802919c 	.word	0x0802919c
 8021890:	08028ac0 	.word	0x08028ac0
 8021894:	08029094 	.word	0x08029094

08021898 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8021898:	b580      	push	{r7, lr}
 802189a:	b08a      	sub	sp, #40	; 0x28
 802189c:	af04      	add	r7, sp, #16
 802189e:	60f8      	str	r0, [r7, #12]
 80218a0:	60b9      	str	r1, [r7, #8]
 80218a2:	607a      	str	r2, [r7, #4]
 80218a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80218a6:	68bb      	ldr	r3, [r7, #8]
 80218a8:	2b00      	cmp	r3, #0
 80218aa:	d106      	bne.n	80218ba <tcp_output_control_segment+0x22>
 80218ac:	4b1c      	ldr	r3, [pc, #112]	; (8021920 <tcp_output_control_segment+0x88>)
 80218ae:	f240 7287 	movw	r2, #1927	; 0x787
 80218b2:	491c      	ldr	r1, [pc, #112]	; (8021924 <tcp_output_control_segment+0x8c>)
 80218b4:	481c      	ldr	r0, [pc, #112]	; (8021928 <tcp_output_control_segment+0x90>)
 80218b6:	f004 fb1b 	bl	8025ef0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80218ba:	683a      	ldr	r2, [r7, #0]
 80218bc:	6879      	ldr	r1, [r7, #4]
 80218be:	68f8      	ldr	r0, [r7, #12]
 80218c0:	f7fe fae8 	bl	801fe94 <tcp_route>
 80218c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80218c6:	693b      	ldr	r3, [r7, #16]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d102      	bne.n	80218d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80218cc:	23fc      	movs	r3, #252	; 0xfc
 80218ce:	75fb      	strb	r3, [r7, #23]
 80218d0:	e01c      	b.n	802190c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80218d2:	68fb      	ldr	r3, [r7, #12]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d006      	beq.n	80218e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80218d8:	68fb      	ldr	r3, [r7, #12]
 80218da:	7adb      	ldrb	r3, [r3, #11]
 80218dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80218de:	68fb      	ldr	r3, [r7, #12]
 80218e0:	7a9b      	ldrb	r3, [r3, #10]
 80218e2:	757b      	strb	r3, [r7, #21]
 80218e4:	e003      	b.n	80218ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80218e6:	23ff      	movs	r3, #255	; 0xff
 80218e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80218ea:	2300      	movs	r3, #0
 80218ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80218ee:	7dba      	ldrb	r2, [r7, #22]
 80218f0:	693b      	ldr	r3, [r7, #16]
 80218f2:	9302      	str	r3, [sp, #8]
 80218f4:	2306      	movs	r3, #6
 80218f6:	9301      	str	r3, [sp, #4]
 80218f8:	7d7b      	ldrb	r3, [r7, #21]
 80218fa:	9300      	str	r3, [sp, #0]
 80218fc:	4613      	mov	r3, r2
 80218fe:	683a      	ldr	r2, [r7, #0]
 8021900:	6879      	ldr	r1, [r7, #4]
 8021902:	68b8      	ldr	r0, [r7, #8]
 8021904:	f002 f8e6 	bl	8023ad4 <ip4_output_if>
 8021908:	4603      	mov	r3, r0
 802190a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 802190c:	68b8      	ldr	r0, [r7, #8]
 802190e:	f7f9 feb3 	bl	801b678 <pbuf_free>
  return err;
 8021912:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8021916:	4618      	mov	r0, r3
 8021918:	3718      	adds	r7, #24
 802191a:	46bd      	mov	sp, r7
 802191c:	bd80      	pop	{r7, pc}
 802191e:	bf00      	nop
 8021920:	08028a6c 	.word	0x08028a6c
 8021924:	080291c4 	.word	0x080291c4
 8021928:	08028ac0 	.word	0x08028ac0

0802192c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 802192c:	b590      	push	{r4, r7, lr}
 802192e:	b08b      	sub	sp, #44	; 0x2c
 8021930:	af04      	add	r7, sp, #16
 8021932:	60f8      	str	r0, [r7, #12]
 8021934:	60b9      	str	r1, [r7, #8]
 8021936:	607a      	str	r2, [r7, #4]
 8021938:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802193a:	683b      	ldr	r3, [r7, #0]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d106      	bne.n	802194e <tcp_rst+0x22>
 8021940:	4b1f      	ldr	r3, [pc, #124]	; (80219c0 <tcp_rst+0x94>)
 8021942:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8021946:	491f      	ldr	r1, [pc, #124]	; (80219c4 <tcp_rst+0x98>)
 8021948:	481f      	ldr	r0, [pc, #124]	; (80219c8 <tcp_rst+0x9c>)
 802194a:	f004 fad1 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021950:	2b00      	cmp	r3, #0
 8021952:	d106      	bne.n	8021962 <tcp_rst+0x36>
 8021954:	4b1a      	ldr	r3, [pc, #104]	; (80219c0 <tcp_rst+0x94>)
 8021956:	f240 72c5 	movw	r2, #1989	; 0x7c5
 802195a:	491c      	ldr	r1, [pc, #112]	; (80219cc <tcp_rst+0xa0>)
 802195c:	481a      	ldr	r0, [pc, #104]	; (80219c8 <tcp_rst+0x9c>)
 802195e:	f004 fac7 	bl	8025ef0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021962:	2300      	movs	r3, #0
 8021964:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8021966:	f246 0308 	movw	r3, #24584	; 0x6008
 802196a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 802196c:	7dfb      	ldrb	r3, [r7, #23]
 802196e:	b29c      	uxth	r4, r3
 8021970:	68b8      	ldr	r0, [r7, #8]
 8021972:	f7f8 faea 	bl	8019f4a <lwip_htonl>
 8021976:	4602      	mov	r2, r0
 8021978:	8abb      	ldrh	r3, [r7, #20]
 802197a:	9303      	str	r3, [sp, #12]
 802197c:	2314      	movs	r3, #20
 802197e:	9302      	str	r3, [sp, #8]
 8021980:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8021982:	9301      	str	r3, [sp, #4]
 8021984:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8021986:	9300      	str	r3, [sp, #0]
 8021988:	4613      	mov	r3, r2
 802198a:	2200      	movs	r2, #0
 802198c:	4621      	mov	r1, r4
 802198e:	6878      	ldr	r0, [r7, #4]
 8021990:	f7ff fe92 	bl	80216b8 <tcp_output_alloc_header_common>
 8021994:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8021996:	693b      	ldr	r3, [r7, #16]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d00c      	beq.n	80219b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802199c:	7dfb      	ldrb	r3, [r7, #23]
 802199e:	2200      	movs	r2, #0
 80219a0:	6939      	ldr	r1, [r7, #16]
 80219a2:	68f8      	ldr	r0, [r7, #12]
 80219a4:	f7ff ff38 	bl	8021818 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80219a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219aa:	683a      	ldr	r2, [r7, #0]
 80219ac:	6939      	ldr	r1, [r7, #16]
 80219ae:	68f8      	ldr	r0, [r7, #12]
 80219b0:	f7ff ff72 	bl	8021898 <tcp_output_control_segment>
 80219b4:	e000      	b.n	80219b8 <tcp_rst+0x8c>
    return;
 80219b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80219b8:	371c      	adds	r7, #28
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd90      	pop	{r4, r7, pc}
 80219be:	bf00      	nop
 80219c0:	08028a6c 	.word	0x08028a6c
 80219c4:	080291f0 	.word	0x080291f0
 80219c8:	08028ac0 	.word	0x08028ac0
 80219cc:	0802920c 	.word	0x0802920c

080219d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80219d0:	b590      	push	{r4, r7, lr}
 80219d2:	b087      	sub	sp, #28
 80219d4:	af00      	add	r7, sp, #0
 80219d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80219d8:	2300      	movs	r3, #0
 80219da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80219dc:	2300      	movs	r3, #0
 80219de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d106      	bne.n	80219f4 <tcp_send_empty_ack+0x24>
 80219e6:	4b28      	ldr	r3, [pc, #160]	; (8021a88 <tcp_send_empty_ack+0xb8>)
 80219e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80219ec:	4927      	ldr	r1, [pc, #156]	; (8021a8c <tcp_send_empty_ack+0xbc>)
 80219ee:	4828      	ldr	r0, [pc, #160]	; (8021a90 <tcp_send_empty_ack+0xc0>)
 80219f0:	f004 fa7e 	bl	8025ef0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80219f4:	7dfb      	ldrb	r3, [r7, #23]
 80219f6:	009b      	lsls	r3, r3, #2
 80219f8:	b2db      	uxtb	r3, r3
 80219fa:	f003 0304 	and.w	r3, r3, #4
 80219fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8021a00:	7d7b      	ldrb	r3, [r7, #21]
 8021a02:	b29c      	uxth	r4, r3
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021a08:	4618      	mov	r0, r3
 8021a0a:	f7f8 fa9e 	bl	8019f4a <lwip_htonl>
 8021a0e:	4603      	mov	r3, r0
 8021a10:	2200      	movs	r2, #0
 8021a12:	4621      	mov	r1, r4
 8021a14:	6878      	ldr	r0, [r7, #4]
 8021a16:	f7ff fec1 	bl	802179c <tcp_output_alloc_header>
 8021a1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021a1c:	693b      	ldr	r3, [r7, #16]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d109      	bne.n	8021a36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	8b5b      	ldrh	r3, [r3, #26]
 8021a26:	f043 0303 	orr.w	r3, r3, #3
 8021a2a:	b29a      	uxth	r2, r3
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8021a30:	f06f 0301 	mvn.w	r3, #1
 8021a34:	e023      	b.n	8021a7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8021a36:	7dbb      	ldrb	r3, [r7, #22]
 8021a38:	7dfa      	ldrb	r2, [r7, #23]
 8021a3a:	6939      	ldr	r1, [r7, #16]
 8021a3c:	6878      	ldr	r0, [r7, #4]
 8021a3e:	f7ff feeb 	bl	8021818 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021a42:	687a      	ldr	r2, [r7, #4]
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	3304      	adds	r3, #4
 8021a48:	6939      	ldr	r1, [r7, #16]
 8021a4a:	6878      	ldr	r0, [r7, #4]
 8021a4c:	f7ff ff24 	bl	8021898 <tcp_output_control_segment>
 8021a50:	4603      	mov	r3, r0
 8021a52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8021a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d007      	beq.n	8021a6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	8b5b      	ldrh	r3, [r3, #26]
 8021a60:	f043 0303 	orr.w	r3, r3, #3
 8021a64:	b29a      	uxth	r2, r3
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	835a      	strh	r2, [r3, #26]
 8021a6a:	e006      	b.n	8021a7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	8b5b      	ldrh	r3, [r3, #26]
 8021a70:	f023 0303 	bic.w	r3, r3, #3
 8021a74:	b29a      	uxth	r2, r3
 8021a76:	687b      	ldr	r3, [r7, #4]
 8021a78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8021a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021a7e:	4618      	mov	r0, r3
 8021a80:	371c      	adds	r7, #28
 8021a82:	46bd      	mov	sp, r7
 8021a84:	bd90      	pop	{r4, r7, pc}
 8021a86:	bf00      	nop
 8021a88:	08028a6c 	.word	0x08028a6c
 8021a8c:	08029228 	.word	0x08029228
 8021a90:	08028ac0 	.word	0x08028ac0

08021a94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8021a94:	b590      	push	{r4, r7, lr}
 8021a96:	b087      	sub	sp, #28
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d106      	bne.n	8021ab4 <tcp_keepalive+0x20>
 8021aa6:	4b18      	ldr	r3, [pc, #96]	; (8021b08 <tcp_keepalive+0x74>)
 8021aa8:	f640 0224 	movw	r2, #2084	; 0x824
 8021aac:	4917      	ldr	r1, [pc, #92]	; (8021b0c <tcp_keepalive+0x78>)
 8021aae:	4818      	ldr	r0, [pc, #96]	; (8021b10 <tcp_keepalive+0x7c>)
 8021ab0:	f004 fa1e 	bl	8025ef0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8021ab4:	7dfb      	ldrb	r3, [r7, #23]
 8021ab6:	b29c      	uxth	r4, r3
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021abc:	3b01      	subs	r3, #1
 8021abe:	4618      	mov	r0, r3
 8021ac0:	f7f8 fa43 	bl	8019f4a <lwip_htonl>
 8021ac4:	4603      	mov	r3, r0
 8021ac6:	2200      	movs	r2, #0
 8021ac8:	4621      	mov	r1, r4
 8021aca:	6878      	ldr	r0, [r7, #4]
 8021acc:	f7ff fe66 	bl	802179c <tcp_output_alloc_header>
 8021ad0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8021ad2:	693b      	ldr	r3, [r7, #16]
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	d102      	bne.n	8021ade <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8021ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8021adc:	e010      	b.n	8021b00 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021ade:	7dfb      	ldrb	r3, [r7, #23]
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	6939      	ldr	r1, [r7, #16]
 8021ae4:	6878      	ldr	r0, [r7, #4]
 8021ae6:	f7ff fe97 	bl	8021818 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021aea:	687a      	ldr	r2, [r7, #4]
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	3304      	adds	r3, #4
 8021af0:	6939      	ldr	r1, [r7, #16]
 8021af2:	6878      	ldr	r0, [r7, #4]
 8021af4:	f7ff fed0 	bl	8021898 <tcp_output_control_segment>
 8021af8:	4603      	mov	r3, r0
 8021afa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021b00:	4618      	mov	r0, r3
 8021b02:	371c      	adds	r7, #28
 8021b04:	46bd      	mov	sp, r7
 8021b06:	bd90      	pop	{r4, r7, pc}
 8021b08:	08028a6c 	.word	0x08028a6c
 8021b0c:	08029248 	.word	0x08029248
 8021b10:	08028ac0 	.word	0x08028ac0

08021b14 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8021b14:	b590      	push	{r4, r7, lr}
 8021b16:	b08b      	sub	sp, #44	; 0x2c
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d106      	bne.n	8021b36 <tcp_zero_window_probe+0x22>
 8021b28:	4b4c      	ldr	r3, [pc, #304]	; (8021c5c <tcp_zero_window_probe+0x148>)
 8021b2a:	f640 024f 	movw	r2, #2127	; 0x84f
 8021b2e:	494c      	ldr	r1, [pc, #304]	; (8021c60 <tcp_zero_window_probe+0x14c>)
 8021b30:	484c      	ldr	r0, [pc, #304]	; (8021c64 <tcp_zero_window_probe+0x150>)
 8021b32:	f004 f9dd 	bl	8025ef0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8021b36:	687b      	ldr	r3, [r7, #4]
 8021b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021b3a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8021b3c:	6a3b      	ldr	r3, [r7, #32]
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	d101      	bne.n	8021b46 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8021b42:	2300      	movs	r3, #0
 8021b44:	e086      	b.n	8021c54 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8021b4c:	2bff      	cmp	r3, #255	; 0xff
 8021b4e:	d007      	beq.n	8021b60 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8021b56:	3301      	adds	r3, #1
 8021b58:	b2da      	uxtb	r2, r3
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8021b60:	6a3b      	ldr	r3, [r7, #32]
 8021b62:	68db      	ldr	r3, [r3, #12]
 8021b64:	899b      	ldrh	r3, [r3, #12]
 8021b66:	b29b      	uxth	r3, r3
 8021b68:	4618      	mov	r0, r3
 8021b6a:	f7f8 f9d9 	bl	8019f20 <lwip_htons>
 8021b6e:	4603      	mov	r3, r0
 8021b70:	b2db      	uxtb	r3, r3
 8021b72:	f003 0301 	and.w	r3, r3, #1
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d005      	beq.n	8021b86 <tcp_zero_window_probe+0x72>
 8021b7a:	6a3b      	ldr	r3, [r7, #32]
 8021b7c:	891b      	ldrh	r3, [r3, #8]
 8021b7e:	2b00      	cmp	r3, #0
 8021b80:	d101      	bne.n	8021b86 <tcp_zero_window_probe+0x72>
 8021b82:	2301      	movs	r3, #1
 8021b84:	e000      	b.n	8021b88 <tcp_zero_window_probe+0x74>
 8021b86:	2300      	movs	r3, #0
 8021b88:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8021b8a:	7ffb      	ldrb	r3, [r7, #31]
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	bf0c      	ite	eq
 8021b90:	2301      	moveq	r3, #1
 8021b92:	2300      	movne	r3, #0
 8021b94:	b2db      	uxtb	r3, r3
 8021b96:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8021b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021b9c:	b299      	uxth	r1, r3
 8021b9e:	6a3b      	ldr	r3, [r7, #32]
 8021ba0:	68db      	ldr	r3, [r3, #12]
 8021ba2:	685b      	ldr	r3, [r3, #4]
 8021ba4:	8bba      	ldrh	r2, [r7, #28]
 8021ba6:	6878      	ldr	r0, [r7, #4]
 8021ba8:	f7ff fdf8 	bl	802179c <tcp_output_alloc_header>
 8021bac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8021bae:	69bb      	ldr	r3, [r7, #24]
 8021bb0:	2b00      	cmp	r3, #0
 8021bb2:	d102      	bne.n	8021bba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8021bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8021bb8:	e04c      	b.n	8021c54 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8021bba:	69bb      	ldr	r3, [r7, #24]
 8021bbc:	685b      	ldr	r3, [r3, #4]
 8021bbe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8021bc0:	7ffb      	ldrb	r3, [r7, #31]
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	d011      	beq.n	8021bea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8021bc6:	697b      	ldr	r3, [r7, #20]
 8021bc8:	899b      	ldrh	r3, [r3, #12]
 8021bca:	b29b      	uxth	r3, r3
 8021bcc:	b21b      	sxth	r3, r3
 8021bce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8021bd2:	b21c      	sxth	r4, r3
 8021bd4:	2011      	movs	r0, #17
 8021bd6:	f7f8 f9a3 	bl	8019f20 <lwip_htons>
 8021bda:	4603      	mov	r3, r0
 8021bdc:	b21b      	sxth	r3, r3
 8021bde:	4323      	orrs	r3, r4
 8021be0:	b21b      	sxth	r3, r3
 8021be2:	b29a      	uxth	r2, r3
 8021be4:	697b      	ldr	r3, [r7, #20]
 8021be6:	819a      	strh	r2, [r3, #12]
 8021be8:	e010      	b.n	8021c0c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8021bea:	69bb      	ldr	r3, [r7, #24]
 8021bec:	685b      	ldr	r3, [r3, #4]
 8021bee:	3314      	adds	r3, #20
 8021bf0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8021bf2:	6a3b      	ldr	r3, [r7, #32]
 8021bf4:	6858      	ldr	r0, [r3, #4]
 8021bf6:	6a3b      	ldr	r3, [r7, #32]
 8021bf8:	685b      	ldr	r3, [r3, #4]
 8021bfa:	891a      	ldrh	r2, [r3, #8]
 8021bfc:	6a3b      	ldr	r3, [r7, #32]
 8021bfe:	891b      	ldrh	r3, [r3, #8]
 8021c00:	1ad3      	subs	r3, r2, r3
 8021c02:	b29b      	uxth	r3, r3
 8021c04:	2201      	movs	r2, #1
 8021c06:	6939      	ldr	r1, [r7, #16]
 8021c08:	f7f9 ff2c 	bl	801ba64 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8021c0c:	6a3b      	ldr	r3, [r7, #32]
 8021c0e:	68db      	ldr	r3, [r3, #12]
 8021c10:	685b      	ldr	r3, [r3, #4]
 8021c12:	4618      	mov	r0, r3
 8021c14:	f7f8 f999 	bl	8019f4a <lwip_htonl>
 8021c18:	4603      	mov	r3, r0
 8021c1a:	3301      	adds	r3, #1
 8021c1c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8021c22:	68fb      	ldr	r3, [r7, #12]
 8021c24:	1ad3      	subs	r3, r2, r3
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	da02      	bge.n	8021c30 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8021c2a:	687b      	ldr	r3, [r7, #4]
 8021c2c:	68fa      	ldr	r2, [r7, #12]
 8021c2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8021c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021c34:	2200      	movs	r2, #0
 8021c36:	69b9      	ldr	r1, [r7, #24]
 8021c38:	6878      	ldr	r0, [r7, #4]
 8021c3a:	f7ff fded 	bl	8021818 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8021c3e:	687a      	ldr	r2, [r7, #4]
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	3304      	adds	r3, #4
 8021c44:	69b9      	ldr	r1, [r7, #24]
 8021c46:	6878      	ldr	r0, [r7, #4]
 8021c48:	f7ff fe26 	bl	8021898 <tcp_output_control_segment>
 8021c4c:	4603      	mov	r3, r0
 8021c4e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8021c50:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8021c54:	4618      	mov	r0, r3
 8021c56:	372c      	adds	r7, #44	; 0x2c
 8021c58:	46bd      	mov	sp, r7
 8021c5a:	bd90      	pop	{r4, r7, pc}
 8021c5c:	08028a6c 	.word	0x08028a6c
 8021c60:	08029264 	.word	0x08029264
 8021c64:	08028ac0 	.word	0x08028ac0

08021c68 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8021c68:	b580      	push	{r7, lr}
 8021c6a:	b082      	sub	sp, #8
 8021c6c:	af00      	add	r7, sp, #0
 8021c6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8021c70:	f7f9 ffe6 	bl	801bc40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8021c74:	4b0a      	ldr	r3, [pc, #40]	; (8021ca0 <tcpip_tcp_timer+0x38>)
 8021c76:	681b      	ldr	r3, [r3, #0]
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	d103      	bne.n	8021c84 <tcpip_tcp_timer+0x1c>
 8021c7c:	4b09      	ldr	r3, [pc, #36]	; (8021ca4 <tcpip_tcp_timer+0x3c>)
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d005      	beq.n	8021c90 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8021c84:	2200      	movs	r2, #0
 8021c86:	4908      	ldr	r1, [pc, #32]	; (8021ca8 <tcpip_tcp_timer+0x40>)
 8021c88:	20fa      	movs	r0, #250	; 0xfa
 8021c8a:	f000 f8f3 	bl	8021e74 <sys_timeout>
 8021c8e:	e003      	b.n	8021c98 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8021c90:	4b06      	ldr	r3, [pc, #24]	; (8021cac <tcpip_tcp_timer+0x44>)
 8021c92:	2200      	movs	r2, #0
 8021c94:	601a      	str	r2, [r3, #0]
  }
}
 8021c96:	bf00      	nop
 8021c98:	bf00      	nop
 8021c9a:	3708      	adds	r7, #8
 8021c9c:	46bd      	mov	sp, r7
 8021c9e:	bd80      	pop	{r7, pc}
 8021ca0:	200102b4 	.word	0x200102b4
 8021ca4:	200102c4 	.word	0x200102c4
 8021ca8:	08021c69 	.word	0x08021c69
 8021cac:	20008774 	.word	0x20008774

08021cb0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8021cb0:	b580      	push	{r7, lr}
 8021cb2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8021cb4:	4b0a      	ldr	r3, [pc, #40]	; (8021ce0 <tcp_timer_needed+0x30>)
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d10f      	bne.n	8021cdc <tcp_timer_needed+0x2c>
 8021cbc:	4b09      	ldr	r3, [pc, #36]	; (8021ce4 <tcp_timer_needed+0x34>)
 8021cbe:	681b      	ldr	r3, [r3, #0]
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d103      	bne.n	8021ccc <tcp_timer_needed+0x1c>
 8021cc4:	4b08      	ldr	r3, [pc, #32]	; (8021ce8 <tcp_timer_needed+0x38>)
 8021cc6:	681b      	ldr	r3, [r3, #0]
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d007      	beq.n	8021cdc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8021ccc:	4b04      	ldr	r3, [pc, #16]	; (8021ce0 <tcp_timer_needed+0x30>)
 8021cce:	2201      	movs	r2, #1
 8021cd0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8021cd2:	2200      	movs	r2, #0
 8021cd4:	4905      	ldr	r1, [pc, #20]	; (8021cec <tcp_timer_needed+0x3c>)
 8021cd6:	20fa      	movs	r0, #250	; 0xfa
 8021cd8:	f000 f8cc 	bl	8021e74 <sys_timeout>
  }
}
 8021cdc:	bf00      	nop
 8021cde:	bd80      	pop	{r7, pc}
 8021ce0:	20008774 	.word	0x20008774
 8021ce4:	200102b4 	.word	0x200102b4
 8021ce8:	200102c4 	.word	0x200102c4
 8021cec:	08021c69 	.word	0x08021c69

08021cf0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8021cf0:	b580      	push	{r7, lr}
 8021cf2:	b086      	sub	sp, #24
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	60f8      	str	r0, [r7, #12]
 8021cf8:	60b9      	str	r1, [r7, #8]
 8021cfa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8021cfc:	200a      	movs	r0, #10
 8021cfe:	f7f8 fdc5 	bl	801a88c <memp_malloc>
 8021d02:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8021d04:	693b      	ldr	r3, [r7, #16]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d109      	bne.n	8021d1e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8021d0a:	693b      	ldr	r3, [r7, #16]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	d151      	bne.n	8021db4 <sys_timeout_abs+0xc4>
 8021d10:	4b2a      	ldr	r3, [pc, #168]	; (8021dbc <sys_timeout_abs+0xcc>)
 8021d12:	22be      	movs	r2, #190	; 0xbe
 8021d14:	492a      	ldr	r1, [pc, #168]	; (8021dc0 <sys_timeout_abs+0xd0>)
 8021d16:	482b      	ldr	r0, [pc, #172]	; (8021dc4 <sys_timeout_abs+0xd4>)
 8021d18:	f004 f8ea 	bl	8025ef0 <iprintf>
    return;
 8021d1c:	e04a      	b.n	8021db4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8021d1e:	693b      	ldr	r3, [r7, #16]
 8021d20:	2200      	movs	r2, #0
 8021d22:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8021d24:	693b      	ldr	r3, [r7, #16]
 8021d26:	68ba      	ldr	r2, [r7, #8]
 8021d28:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8021d2a:	693b      	ldr	r3, [r7, #16]
 8021d2c:	687a      	ldr	r2, [r7, #4]
 8021d2e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8021d30:	693b      	ldr	r3, [r7, #16]
 8021d32:	68fa      	ldr	r2, [r7, #12]
 8021d34:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8021d36:	4b24      	ldr	r3, [pc, #144]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d103      	bne.n	8021d46 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8021d3e:	4a22      	ldr	r2, [pc, #136]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d40:	693b      	ldr	r3, [r7, #16]
 8021d42:	6013      	str	r3, [r2, #0]
    return;
 8021d44:	e037      	b.n	8021db6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8021d46:	693b      	ldr	r3, [r7, #16]
 8021d48:	685a      	ldr	r2, [r3, #4]
 8021d4a:	4b1f      	ldr	r3, [pc, #124]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	685b      	ldr	r3, [r3, #4]
 8021d50:	1ad3      	subs	r3, r2, r3
 8021d52:	0fdb      	lsrs	r3, r3, #31
 8021d54:	f003 0301 	and.w	r3, r3, #1
 8021d58:	b2db      	uxtb	r3, r3
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d007      	beq.n	8021d6e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8021d5e:	4b1a      	ldr	r3, [pc, #104]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d60:	681a      	ldr	r2, [r3, #0]
 8021d62:	693b      	ldr	r3, [r7, #16]
 8021d64:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8021d66:	4a18      	ldr	r2, [pc, #96]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d68:	693b      	ldr	r3, [r7, #16]
 8021d6a:	6013      	str	r3, [r2, #0]
 8021d6c:	e023      	b.n	8021db6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8021d6e:	4b16      	ldr	r3, [pc, #88]	; (8021dc8 <sys_timeout_abs+0xd8>)
 8021d70:	681b      	ldr	r3, [r3, #0]
 8021d72:	617b      	str	r3, [r7, #20]
 8021d74:	e01a      	b.n	8021dac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8021d76:	697b      	ldr	r3, [r7, #20]
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	d00b      	beq.n	8021d96 <sys_timeout_abs+0xa6>
 8021d7e:	693b      	ldr	r3, [r7, #16]
 8021d80:	685a      	ldr	r2, [r3, #4]
 8021d82:	697b      	ldr	r3, [r7, #20]
 8021d84:	681b      	ldr	r3, [r3, #0]
 8021d86:	685b      	ldr	r3, [r3, #4]
 8021d88:	1ad3      	subs	r3, r2, r3
 8021d8a:	0fdb      	lsrs	r3, r3, #31
 8021d8c:	f003 0301 	and.w	r3, r3, #1
 8021d90:	b2db      	uxtb	r3, r3
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	d007      	beq.n	8021da6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8021d96:	697b      	ldr	r3, [r7, #20]
 8021d98:	681a      	ldr	r2, [r3, #0]
 8021d9a:	693b      	ldr	r3, [r7, #16]
 8021d9c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8021d9e:	697b      	ldr	r3, [r7, #20]
 8021da0:	693a      	ldr	r2, [r7, #16]
 8021da2:	601a      	str	r2, [r3, #0]
        break;
 8021da4:	e007      	b.n	8021db6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8021da6:	697b      	ldr	r3, [r7, #20]
 8021da8:	681b      	ldr	r3, [r3, #0]
 8021daa:	617b      	str	r3, [r7, #20]
 8021dac:	697b      	ldr	r3, [r7, #20]
 8021dae:	2b00      	cmp	r3, #0
 8021db0:	d1e1      	bne.n	8021d76 <sys_timeout_abs+0x86>
 8021db2:	e000      	b.n	8021db6 <sys_timeout_abs+0xc6>
    return;
 8021db4:	bf00      	nop
      }
    }
  }
}
 8021db6:	3718      	adds	r7, #24
 8021db8:	46bd      	mov	sp, r7
 8021dba:	bd80      	pop	{r7, pc}
 8021dbc:	08029288 	.word	0x08029288
 8021dc0:	080292bc 	.word	0x080292bc
 8021dc4:	080292fc 	.word	0x080292fc
 8021dc8:	2000876c 	.word	0x2000876c

08021dcc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8021dcc:	b580      	push	{r7, lr}
 8021dce:	b086      	sub	sp, #24
 8021dd0:	af00      	add	r7, sp, #0
 8021dd2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8021dd8:	697b      	ldr	r3, [r7, #20]
 8021dda:	685b      	ldr	r3, [r3, #4]
 8021ddc:	4798      	blx	r3

  now = sys_now();
 8021dde:	f7f0 f9f9 	bl	80121d4 <sys_now>
 8021de2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8021de4:	697b      	ldr	r3, [r7, #20]
 8021de6:	681a      	ldr	r2, [r3, #0]
 8021de8:	4b0f      	ldr	r3, [pc, #60]	; (8021e28 <lwip_cyclic_timer+0x5c>)
 8021dea:	681b      	ldr	r3, [r3, #0]
 8021dec:	4413      	add	r3, r2
 8021dee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8021df0:	68fa      	ldr	r2, [r7, #12]
 8021df2:	693b      	ldr	r3, [r7, #16]
 8021df4:	1ad3      	subs	r3, r2, r3
 8021df6:	0fdb      	lsrs	r3, r3, #31
 8021df8:	f003 0301 	and.w	r3, r3, #1
 8021dfc:	b2db      	uxtb	r3, r3
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	d009      	beq.n	8021e16 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8021e02:	697b      	ldr	r3, [r7, #20]
 8021e04:	681a      	ldr	r2, [r3, #0]
 8021e06:	693b      	ldr	r3, [r7, #16]
 8021e08:	4413      	add	r3, r2
 8021e0a:	687a      	ldr	r2, [r7, #4]
 8021e0c:	4907      	ldr	r1, [pc, #28]	; (8021e2c <lwip_cyclic_timer+0x60>)
 8021e0e:	4618      	mov	r0, r3
 8021e10:	f7ff ff6e 	bl	8021cf0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8021e14:	e004      	b.n	8021e20 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8021e16:	687a      	ldr	r2, [r7, #4]
 8021e18:	4904      	ldr	r1, [pc, #16]	; (8021e2c <lwip_cyclic_timer+0x60>)
 8021e1a:	68f8      	ldr	r0, [r7, #12]
 8021e1c:	f7ff ff68 	bl	8021cf0 <sys_timeout_abs>
}
 8021e20:	bf00      	nop
 8021e22:	3718      	adds	r7, #24
 8021e24:	46bd      	mov	sp, r7
 8021e26:	bd80      	pop	{r7, pc}
 8021e28:	20008770 	.word	0x20008770
 8021e2c:	08021dcd 	.word	0x08021dcd

08021e30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8021e30:	b580      	push	{r7, lr}
 8021e32:	b082      	sub	sp, #8
 8021e34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021e36:	2301      	movs	r3, #1
 8021e38:	607b      	str	r3, [r7, #4]
 8021e3a:	e00e      	b.n	8021e5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8021e3c:	4a0b      	ldr	r2, [pc, #44]	; (8021e6c <sys_timeouts_init+0x3c>)
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	00db      	lsls	r3, r3, #3
 8021e48:	4a08      	ldr	r2, [pc, #32]	; (8021e6c <sys_timeouts_init+0x3c>)
 8021e4a:	4413      	add	r3, r2
 8021e4c:	461a      	mov	r2, r3
 8021e4e:	4908      	ldr	r1, [pc, #32]	; (8021e70 <sys_timeouts_init+0x40>)
 8021e50:	f000 f810 	bl	8021e74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	3301      	adds	r3, #1
 8021e58:	607b      	str	r3, [r7, #4]
 8021e5a:	687b      	ldr	r3, [r7, #4]
 8021e5c:	2b02      	cmp	r3, #2
 8021e5e:	d9ed      	bls.n	8021e3c <sys_timeouts_init+0xc>
  }
}
 8021e60:	bf00      	nop
 8021e62:	bf00      	nop
 8021e64:	3708      	adds	r7, #8
 8021e66:	46bd      	mov	sp, r7
 8021e68:	bd80      	pop	{r7, pc}
 8021e6a:	bf00      	nop
 8021e6c:	0802b980 	.word	0x0802b980
 8021e70:	08021dcd 	.word	0x08021dcd

08021e74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8021e74:	b580      	push	{r7, lr}
 8021e76:	b086      	sub	sp, #24
 8021e78:	af00      	add	r7, sp, #0
 8021e7a:	60f8      	str	r0, [r7, #12]
 8021e7c:	60b9      	str	r1, [r7, #8]
 8021e7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021e86:	d306      	bcc.n	8021e96 <sys_timeout+0x22>
 8021e88:	4b0a      	ldr	r3, [pc, #40]	; (8021eb4 <sys_timeout+0x40>)
 8021e8a:	f240 1229 	movw	r2, #297	; 0x129
 8021e8e:	490a      	ldr	r1, [pc, #40]	; (8021eb8 <sys_timeout+0x44>)
 8021e90:	480a      	ldr	r0, [pc, #40]	; (8021ebc <sys_timeout+0x48>)
 8021e92:	f004 f82d 	bl	8025ef0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8021e96:	f7f0 f99d 	bl	80121d4 <sys_now>
 8021e9a:	4602      	mov	r2, r0
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	4413      	add	r3, r2
 8021ea0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8021ea2:	687a      	ldr	r2, [r7, #4]
 8021ea4:	68b9      	ldr	r1, [r7, #8]
 8021ea6:	6978      	ldr	r0, [r7, #20]
 8021ea8:	f7ff ff22 	bl	8021cf0 <sys_timeout_abs>
#endif
}
 8021eac:	bf00      	nop
 8021eae:	3718      	adds	r7, #24
 8021eb0:	46bd      	mov	sp, r7
 8021eb2:	bd80      	pop	{r7, pc}
 8021eb4:	08029288 	.word	0x08029288
 8021eb8:	08029324 	.word	0x08029324
 8021ebc:	080292fc 	.word	0x080292fc

08021ec0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021ec0:	b580      	push	{r7, lr}
 8021ec2:	b084      	sub	sp, #16
 8021ec4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8021ec6:	f7f0 f985 	bl	80121d4 <sys_now>
 8021eca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021ecc:	4b17      	ldr	r3, [pc, #92]	; (8021f2c <sys_check_timeouts+0x6c>)
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8021ed2:	68bb      	ldr	r3, [r7, #8]
 8021ed4:	2b00      	cmp	r3, #0
 8021ed6:	d022      	beq.n	8021f1e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8021ed8:	68bb      	ldr	r3, [r7, #8]
 8021eda:	685b      	ldr	r3, [r3, #4]
 8021edc:	68fa      	ldr	r2, [r7, #12]
 8021ede:	1ad3      	subs	r3, r2, r3
 8021ee0:	0fdb      	lsrs	r3, r3, #31
 8021ee2:	f003 0301 	and.w	r3, r3, #1
 8021ee6:	b2db      	uxtb	r3, r3
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d11a      	bne.n	8021f22 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021eec:	68bb      	ldr	r3, [r7, #8]
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	4a0e      	ldr	r2, [pc, #56]	; (8021f2c <sys_check_timeouts+0x6c>)
 8021ef2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021ef4:	68bb      	ldr	r3, [r7, #8]
 8021ef6:	689b      	ldr	r3, [r3, #8]
 8021ef8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8021efa:	68bb      	ldr	r3, [r7, #8]
 8021efc:	68db      	ldr	r3, [r3, #12]
 8021efe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8021f00:	68bb      	ldr	r3, [r7, #8]
 8021f02:	685b      	ldr	r3, [r3, #4]
 8021f04:	4a0a      	ldr	r2, [pc, #40]	; (8021f30 <sys_check_timeouts+0x70>)
 8021f06:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8021f08:	68b9      	ldr	r1, [r7, #8]
 8021f0a:	200a      	movs	r0, #10
 8021f0c:	f7f8 fd10 	bl	801a930 <memp_free>
    if (handler != NULL) {
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d0da      	beq.n	8021ecc <sys_check_timeouts+0xc>
      handler(arg);
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	6838      	ldr	r0, [r7, #0]
 8021f1a:	4798      	blx	r3
  do {
 8021f1c:	e7d6      	b.n	8021ecc <sys_check_timeouts+0xc>
      return;
 8021f1e:	bf00      	nop
 8021f20:	e000      	b.n	8021f24 <sys_check_timeouts+0x64>
      return;
 8021f22:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021f24:	3710      	adds	r7, #16
 8021f26:	46bd      	mov	sp, r7
 8021f28:	bd80      	pop	{r7, pc}
 8021f2a:	bf00      	nop
 8021f2c:	2000876c 	.word	0x2000876c
 8021f30:	20008770 	.word	0x20008770

08021f34 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021f34:	b580      	push	{r7, lr}
 8021f36:	b082      	sub	sp, #8
 8021f38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8021f3a:	4b16      	ldr	r3, [pc, #88]	; (8021f94 <sys_timeouts_sleeptime+0x60>)
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d102      	bne.n	8021f48 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8021f42:	f04f 33ff 	mov.w	r3, #4294967295
 8021f46:	e020      	b.n	8021f8a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8021f48:	f7f0 f944 	bl	80121d4 <sys_now>
 8021f4c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8021f4e:	4b11      	ldr	r3, [pc, #68]	; (8021f94 <sys_timeouts_sleeptime+0x60>)
 8021f50:	681b      	ldr	r3, [r3, #0]
 8021f52:	685a      	ldr	r2, [r3, #4]
 8021f54:	687b      	ldr	r3, [r7, #4]
 8021f56:	1ad3      	subs	r3, r2, r3
 8021f58:	0fdb      	lsrs	r3, r3, #31
 8021f5a:	f003 0301 	and.w	r3, r3, #1
 8021f5e:	b2db      	uxtb	r3, r3
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d001      	beq.n	8021f68 <sys_timeouts_sleeptime+0x34>
    return 0;
 8021f64:	2300      	movs	r3, #0
 8021f66:	e010      	b.n	8021f8a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8021f68:	4b0a      	ldr	r3, [pc, #40]	; (8021f94 <sys_timeouts_sleeptime+0x60>)
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	685a      	ldr	r2, [r3, #4]
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	1ad3      	subs	r3, r2, r3
 8021f72:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8021f74:	683b      	ldr	r3, [r7, #0]
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	da06      	bge.n	8021f88 <sys_timeouts_sleeptime+0x54>
 8021f7a:	4b07      	ldr	r3, [pc, #28]	; (8021f98 <sys_timeouts_sleeptime+0x64>)
 8021f7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8021f80:	4906      	ldr	r1, [pc, #24]	; (8021f9c <sys_timeouts_sleeptime+0x68>)
 8021f82:	4807      	ldr	r0, [pc, #28]	; (8021fa0 <sys_timeouts_sleeptime+0x6c>)
 8021f84:	f003 ffb4 	bl	8025ef0 <iprintf>
    return ret;
 8021f88:	683b      	ldr	r3, [r7, #0]
  }
}
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	3708      	adds	r7, #8
 8021f8e:	46bd      	mov	sp, r7
 8021f90:	bd80      	pop	{r7, pc}
 8021f92:	bf00      	nop
 8021f94:	2000876c 	.word	0x2000876c
 8021f98:	08029288 	.word	0x08029288
 8021f9c:	0802935c 	.word	0x0802935c
 8021fa0:	080292fc 	.word	0x080292fc

08021fa4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8021fa4:	b580      	push	{r7, lr}
 8021fa6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8021fa8:	f003 ffba 	bl	8025f20 <rand>
 8021fac:	4603      	mov	r3, r0
 8021fae:	b29b      	uxth	r3, r3
 8021fb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021fb4:	b29b      	uxth	r3, r3
 8021fb6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8021fba:	b29a      	uxth	r2, r3
 8021fbc:	4b01      	ldr	r3, [pc, #4]	; (8021fc4 <udp_init+0x20>)
 8021fbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8021fc0:	bf00      	nop
 8021fc2:	bd80      	pop	{r7, pc}
 8021fc4:	2000006c 	.word	0x2000006c

08021fc8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8021fc8:	b480      	push	{r7}
 8021fca:	b083      	sub	sp, #12
 8021fcc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8021fce:	2300      	movs	r3, #0
 8021fd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8021fd2:	4b17      	ldr	r3, [pc, #92]	; (8022030 <udp_new_port+0x68>)
 8021fd4:	881b      	ldrh	r3, [r3, #0]
 8021fd6:	1c5a      	adds	r2, r3, #1
 8021fd8:	b291      	uxth	r1, r2
 8021fda:	4a15      	ldr	r2, [pc, #84]	; (8022030 <udp_new_port+0x68>)
 8021fdc:	8011      	strh	r1, [r2, #0]
 8021fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021fe2:	4293      	cmp	r3, r2
 8021fe4:	d103      	bne.n	8021fee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8021fe6:	4b12      	ldr	r3, [pc, #72]	; (8022030 <udp_new_port+0x68>)
 8021fe8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8021fec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021fee:	4b11      	ldr	r3, [pc, #68]	; (8022034 <udp_new_port+0x6c>)
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	603b      	str	r3, [r7, #0]
 8021ff4:	e011      	b.n	802201a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8021ff6:	683b      	ldr	r3, [r7, #0]
 8021ff8:	8a5a      	ldrh	r2, [r3, #18]
 8021ffa:	4b0d      	ldr	r3, [pc, #52]	; (8022030 <udp_new_port+0x68>)
 8021ffc:	881b      	ldrh	r3, [r3, #0]
 8021ffe:	429a      	cmp	r2, r3
 8022000:	d108      	bne.n	8022014 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8022002:	88fb      	ldrh	r3, [r7, #6]
 8022004:	3301      	adds	r3, #1
 8022006:	80fb      	strh	r3, [r7, #6]
 8022008:	88fb      	ldrh	r3, [r7, #6]
 802200a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802200e:	d3e0      	bcc.n	8021fd2 <udp_new_port+0xa>
        return 0;
 8022010:	2300      	movs	r3, #0
 8022012:	e007      	b.n	8022024 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022014:	683b      	ldr	r3, [r7, #0]
 8022016:	68db      	ldr	r3, [r3, #12]
 8022018:	603b      	str	r3, [r7, #0]
 802201a:	683b      	ldr	r3, [r7, #0]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d1ea      	bne.n	8021ff6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022020:	4b03      	ldr	r3, [pc, #12]	; (8022030 <udp_new_port+0x68>)
 8022022:	881b      	ldrh	r3, [r3, #0]
}
 8022024:	4618      	mov	r0, r3
 8022026:	370c      	adds	r7, #12
 8022028:	46bd      	mov	sp, r7
 802202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802202e:	4770      	bx	lr
 8022030:	2000006c 	.word	0x2000006c
 8022034:	200102cc 	.word	0x200102cc

08022038 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8022038:	b580      	push	{r7, lr}
 802203a:	b084      	sub	sp, #16
 802203c:	af00      	add	r7, sp, #0
 802203e:	60f8      	str	r0, [r7, #12]
 8022040:	60b9      	str	r1, [r7, #8]
 8022042:	4613      	mov	r3, r2
 8022044:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	2b00      	cmp	r3, #0
 802204a:	d105      	bne.n	8022058 <udp_input_local_match+0x20>
 802204c:	4b27      	ldr	r3, [pc, #156]	; (80220ec <udp_input_local_match+0xb4>)
 802204e:	2287      	movs	r2, #135	; 0x87
 8022050:	4927      	ldr	r1, [pc, #156]	; (80220f0 <udp_input_local_match+0xb8>)
 8022052:	4828      	ldr	r0, [pc, #160]	; (80220f4 <udp_input_local_match+0xbc>)
 8022054:	f003 ff4c 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8022058:	68bb      	ldr	r3, [r7, #8]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d105      	bne.n	802206a <udp_input_local_match+0x32>
 802205e:	4b23      	ldr	r3, [pc, #140]	; (80220ec <udp_input_local_match+0xb4>)
 8022060:	2288      	movs	r2, #136	; 0x88
 8022062:	4925      	ldr	r1, [pc, #148]	; (80220f8 <udp_input_local_match+0xc0>)
 8022064:	4823      	ldr	r0, [pc, #140]	; (80220f4 <udp_input_local_match+0xbc>)
 8022066:	f003 ff43 	bl	8025ef0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802206a:	68fb      	ldr	r3, [r7, #12]
 802206c:	7a1b      	ldrb	r3, [r3, #8]
 802206e:	2b00      	cmp	r3, #0
 8022070:	d00b      	beq.n	802208a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8022072:	68fb      	ldr	r3, [r7, #12]
 8022074:	7a1a      	ldrb	r2, [r3, #8]
 8022076:	4b21      	ldr	r3, [pc, #132]	; (80220fc <udp_input_local_match+0xc4>)
 8022078:	685b      	ldr	r3, [r3, #4]
 802207a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802207e:	3301      	adds	r3, #1
 8022080:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022082:	429a      	cmp	r2, r3
 8022084:	d001      	beq.n	802208a <udp_input_local_match+0x52>
    return 0;
 8022086:	2300      	movs	r3, #0
 8022088:	e02b      	b.n	80220e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 802208a:	79fb      	ldrb	r3, [r7, #7]
 802208c:	2b00      	cmp	r3, #0
 802208e:	d018      	beq.n	80220c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	2b00      	cmp	r3, #0
 8022094:	d013      	beq.n	80220be <udp_input_local_match+0x86>
 8022096:	68fb      	ldr	r3, [r7, #12]
 8022098:	681b      	ldr	r3, [r3, #0]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d00f      	beq.n	80220be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802209e:	4b17      	ldr	r3, [pc, #92]	; (80220fc <udp_input_local_match+0xc4>)
 80220a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80220a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80220a6:	d00a      	beq.n	80220be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	681a      	ldr	r2, [r3, #0]
 80220ac:	4b13      	ldr	r3, [pc, #76]	; (80220fc <udp_input_local_match+0xc4>)
 80220ae:	695b      	ldr	r3, [r3, #20]
 80220b0:	405a      	eors	r2, r3
 80220b2:	68bb      	ldr	r3, [r7, #8]
 80220b4:	3308      	adds	r3, #8
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	d110      	bne.n	80220e0 <udp_input_local_match+0xa8>
          return 1;
 80220be:	2301      	movs	r3, #1
 80220c0:	e00f      	b.n	80220e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80220c2:	68fb      	ldr	r3, [r7, #12]
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	d009      	beq.n	80220dc <udp_input_local_match+0xa4>
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	681b      	ldr	r3, [r3, #0]
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d005      	beq.n	80220dc <udp_input_local_match+0xa4>
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	681a      	ldr	r2, [r3, #0]
 80220d4:	4b09      	ldr	r3, [pc, #36]	; (80220fc <udp_input_local_match+0xc4>)
 80220d6:	695b      	ldr	r3, [r3, #20]
 80220d8:	429a      	cmp	r2, r3
 80220da:	d101      	bne.n	80220e0 <udp_input_local_match+0xa8>
        return 1;
 80220dc:	2301      	movs	r3, #1
 80220de:	e000      	b.n	80220e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80220e0:	2300      	movs	r3, #0
}
 80220e2:	4618      	mov	r0, r3
 80220e4:	3710      	adds	r7, #16
 80220e6:	46bd      	mov	sp, r7
 80220e8:	bd80      	pop	{r7, pc}
 80220ea:	bf00      	nop
 80220ec:	08029370 	.word	0x08029370
 80220f0:	080293a0 	.word	0x080293a0
 80220f4:	080293c4 	.word	0x080293c4
 80220f8:	080293ec 	.word	0x080293ec
 80220fc:	2000cba0 	.word	0x2000cba0

08022100 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8022100:	b590      	push	{r4, r7, lr}
 8022102:	b08d      	sub	sp, #52	; 0x34
 8022104:	af02      	add	r7, sp, #8
 8022106:	6078      	str	r0, [r7, #4]
 8022108:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802210a:	2300      	movs	r3, #0
 802210c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 802210e:	687b      	ldr	r3, [r7, #4]
 8022110:	2b00      	cmp	r3, #0
 8022112:	d105      	bne.n	8022120 <udp_input+0x20>
 8022114:	4b7c      	ldr	r3, [pc, #496]	; (8022308 <udp_input+0x208>)
 8022116:	22cf      	movs	r2, #207	; 0xcf
 8022118:	497c      	ldr	r1, [pc, #496]	; (802230c <udp_input+0x20c>)
 802211a:	487d      	ldr	r0, [pc, #500]	; (8022310 <udp_input+0x210>)
 802211c:	f003 fee8 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	2b00      	cmp	r3, #0
 8022124:	d105      	bne.n	8022132 <udp_input+0x32>
 8022126:	4b78      	ldr	r3, [pc, #480]	; (8022308 <udp_input+0x208>)
 8022128:	22d0      	movs	r2, #208	; 0xd0
 802212a:	497a      	ldr	r1, [pc, #488]	; (8022314 <udp_input+0x214>)
 802212c:	4878      	ldr	r0, [pc, #480]	; (8022310 <udp_input+0x210>)
 802212e:	f003 fedf 	bl	8025ef0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	895b      	ldrh	r3, [r3, #10]
 8022136:	2b07      	cmp	r3, #7
 8022138:	d803      	bhi.n	8022142 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802213a:	6878      	ldr	r0, [r7, #4]
 802213c:	f7f9 fa9c 	bl	801b678 <pbuf_free>
    goto end;
 8022140:	e0de      	b.n	8022300 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	685b      	ldr	r3, [r3, #4]
 8022146:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8022148:	4b73      	ldr	r3, [pc, #460]	; (8022318 <udp_input+0x218>)
 802214a:	695b      	ldr	r3, [r3, #20]
 802214c:	4a72      	ldr	r2, [pc, #456]	; (8022318 <udp_input+0x218>)
 802214e:	6812      	ldr	r2, [r2, #0]
 8022150:	4611      	mov	r1, r2
 8022152:	4618      	mov	r0, r3
 8022154:	f001 fd96 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8022158:	4603      	mov	r3, r0
 802215a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 802215c:	697b      	ldr	r3, [r7, #20]
 802215e:	881b      	ldrh	r3, [r3, #0]
 8022160:	b29b      	uxth	r3, r3
 8022162:	4618      	mov	r0, r3
 8022164:	f7f7 fedc 	bl	8019f20 <lwip_htons>
 8022168:	4603      	mov	r3, r0
 802216a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 802216c:	697b      	ldr	r3, [r7, #20]
 802216e:	885b      	ldrh	r3, [r3, #2]
 8022170:	b29b      	uxth	r3, r3
 8022172:	4618      	mov	r0, r3
 8022174:	f7f7 fed4 	bl	8019f20 <lwip_htons>
 8022178:	4603      	mov	r3, r0
 802217a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 802217c:	2300      	movs	r3, #0
 802217e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8022180:	2300      	movs	r3, #0
 8022182:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022184:	2300      	movs	r3, #0
 8022186:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022188:	4b64      	ldr	r3, [pc, #400]	; (802231c <udp_input+0x21c>)
 802218a:	681b      	ldr	r3, [r3, #0]
 802218c:	627b      	str	r3, [r7, #36]	; 0x24
 802218e:	e054      	b.n	802223a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022192:	8a5b      	ldrh	r3, [r3, #18]
 8022194:	89fa      	ldrh	r2, [r7, #14]
 8022196:	429a      	cmp	r2, r3
 8022198:	d14a      	bne.n	8022230 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 802219a:	7cfb      	ldrb	r3, [r7, #19]
 802219c:	461a      	mov	r2, r3
 802219e:	6839      	ldr	r1, [r7, #0]
 80221a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80221a2:	f7ff ff49 	bl	8022038 <udp_input_local_match>
 80221a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	d041      	beq.n	8022230 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80221ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221ae:	7c1b      	ldrb	r3, [r3, #16]
 80221b0:	f003 0304 	and.w	r3, r3, #4
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d11d      	bne.n	80221f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80221b8:	69fb      	ldr	r3, [r7, #28]
 80221ba:	2b00      	cmp	r3, #0
 80221bc:	d102      	bne.n	80221c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80221be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221c0:	61fb      	str	r3, [r7, #28]
 80221c2:	e017      	b.n	80221f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80221c4:	7cfb      	ldrb	r3, [r7, #19]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d014      	beq.n	80221f4 <udp_input+0xf4>
 80221ca:	4b53      	ldr	r3, [pc, #332]	; (8022318 <udp_input+0x218>)
 80221cc:	695b      	ldr	r3, [r3, #20]
 80221ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221d2:	d10f      	bne.n	80221f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80221d4:	69fb      	ldr	r3, [r7, #28]
 80221d6:	681a      	ldr	r2, [r3, #0]
 80221d8:	683b      	ldr	r3, [r7, #0]
 80221da:	3304      	adds	r3, #4
 80221dc:	681b      	ldr	r3, [r3, #0]
 80221de:	429a      	cmp	r2, r3
 80221e0:	d008      	beq.n	80221f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80221e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221e4:	681a      	ldr	r2, [r3, #0]
 80221e6:	683b      	ldr	r3, [r7, #0]
 80221e8:	3304      	adds	r3, #4
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	429a      	cmp	r2, r3
 80221ee:	d101      	bne.n	80221f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80221f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80221f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221f6:	8a9b      	ldrh	r3, [r3, #20]
 80221f8:	8a3a      	ldrh	r2, [r7, #16]
 80221fa:	429a      	cmp	r2, r3
 80221fc:	d118      	bne.n	8022230 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80221fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022200:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022202:	2b00      	cmp	r3, #0
 8022204:	d005      	beq.n	8022212 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022208:	685a      	ldr	r2, [r3, #4]
 802220a:	4b43      	ldr	r3, [pc, #268]	; (8022318 <udp_input+0x218>)
 802220c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 802220e:	429a      	cmp	r2, r3
 8022210:	d10e      	bne.n	8022230 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022212:	6a3b      	ldr	r3, [r7, #32]
 8022214:	2b00      	cmp	r3, #0
 8022216:	d014      	beq.n	8022242 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802221a:	68da      	ldr	r2, [r3, #12]
 802221c:	6a3b      	ldr	r3, [r7, #32]
 802221e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022220:	4b3e      	ldr	r3, [pc, #248]	; (802231c <udp_input+0x21c>)
 8022222:	681a      	ldr	r2, [r3, #0]
 8022224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022226:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022228:	4a3c      	ldr	r2, [pc, #240]	; (802231c <udp_input+0x21c>)
 802222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802222c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 802222e:	e008      	b.n	8022242 <udp_input+0x142>
      }
    }

    prev = pcb;
 8022230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022232:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022236:	68db      	ldr	r3, [r3, #12]
 8022238:	627b      	str	r3, [r7, #36]	; 0x24
 802223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802223c:	2b00      	cmp	r3, #0
 802223e:	d1a7      	bne.n	8022190 <udp_input+0x90>
 8022240:	e000      	b.n	8022244 <udp_input+0x144>
        break;
 8022242:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022246:	2b00      	cmp	r3, #0
 8022248:	d101      	bne.n	802224e <udp_input+0x14e>
    pcb = uncon_pcb;
 802224a:	69fb      	ldr	r3, [r7, #28]
 802224c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 802224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022250:	2b00      	cmp	r3, #0
 8022252:	d002      	beq.n	802225a <udp_input+0x15a>
    for_us = 1;
 8022254:	2301      	movs	r3, #1
 8022256:	76fb      	strb	r3, [r7, #27]
 8022258:	e00a      	b.n	8022270 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 802225a:	683b      	ldr	r3, [r7, #0]
 802225c:	3304      	adds	r3, #4
 802225e:	681a      	ldr	r2, [r3, #0]
 8022260:	4b2d      	ldr	r3, [pc, #180]	; (8022318 <udp_input+0x218>)
 8022262:	695b      	ldr	r3, [r3, #20]
 8022264:	429a      	cmp	r2, r3
 8022266:	bf0c      	ite	eq
 8022268:	2301      	moveq	r3, #1
 802226a:	2300      	movne	r3, #0
 802226c:	b2db      	uxtb	r3, r3
 802226e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022270:	7efb      	ldrb	r3, [r7, #27]
 8022272:	2b00      	cmp	r3, #0
 8022274:	d041      	beq.n	80222fa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8022276:	2108      	movs	r1, #8
 8022278:	6878      	ldr	r0, [r7, #4]
 802227a:	f7f9 f977 	bl	801b56c <pbuf_remove_header>
 802227e:	4603      	mov	r3, r0
 8022280:	2b00      	cmp	r3, #0
 8022282:	d00a      	beq.n	802229a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8022284:	4b20      	ldr	r3, [pc, #128]	; (8022308 <udp_input+0x208>)
 8022286:	f44f 72b8 	mov.w	r2, #368	; 0x170
 802228a:	4925      	ldr	r1, [pc, #148]	; (8022320 <udp_input+0x220>)
 802228c:	4820      	ldr	r0, [pc, #128]	; (8022310 <udp_input+0x210>)
 802228e:	f003 fe2f 	bl	8025ef0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022292:	6878      	ldr	r0, [r7, #4]
 8022294:	f7f9 f9f0 	bl	801b678 <pbuf_free>
      goto end;
 8022298:	e032      	b.n	8022300 <udp_input+0x200>
    }

    if (pcb != NULL) {
 802229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802229c:	2b00      	cmp	r3, #0
 802229e:	d012      	beq.n	80222c6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80222a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222a2:	699b      	ldr	r3, [r3, #24]
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d00a      	beq.n	80222be <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80222a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222aa:	699c      	ldr	r4, [r3, #24]
 80222ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ae:	69d8      	ldr	r0, [r3, #28]
 80222b0:	8a3b      	ldrh	r3, [r7, #16]
 80222b2:	9300      	str	r3, [sp, #0]
 80222b4:	4b1b      	ldr	r3, [pc, #108]	; (8022324 <udp_input+0x224>)
 80222b6:	687a      	ldr	r2, [r7, #4]
 80222b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80222ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80222bc:	e021      	b.n	8022302 <udp_input+0x202>
        pbuf_free(p);
 80222be:	6878      	ldr	r0, [r7, #4]
 80222c0:	f7f9 f9da 	bl	801b678 <pbuf_free>
        goto end;
 80222c4:	e01c      	b.n	8022300 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80222c6:	7cfb      	ldrb	r3, [r7, #19]
 80222c8:	2b00      	cmp	r3, #0
 80222ca:	d112      	bne.n	80222f2 <udp_input+0x1f2>
 80222cc:	4b12      	ldr	r3, [pc, #72]	; (8022318 <udp_input+0x218>)
 80222ce:	695b      	ldr	r3, [r3, #20]
 80222d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80222d4:	2be0      	cmp	r3, #224	; 0xe0
 80222d6:	d00c      	beq.n	80222f2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80222d8:	4b0f      	ldr	r3, [pc, #60]	; (8022318 <udp_input+0x218>)
 80222da:	899b      	ldrh	r3, [r3, #12]
 80222dc:	3308      	adds	r3, #8
 80222de:	b29b      	uxth	r3, r3
 80222e0:	b21b      	sxth	r3, r3
 80222e2:	4619      	mov	r1, r3
 80222e4:	6878      	ldr	r0, [r7, #4]
 80222e6:	f7f9 f9b4 	bl	801b652 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80222ea:	2103      	movs	r1, #3
 80222ec:	6878      	ldr	r0, [r7, #4]
 80222ee:	f001 f9a9 	bl	8023644 <icmp_dest_unreach>
      pbuf_free(p);
 80222f2:	6878      	ldr	r0, [r7, #4]
 80222f4:	f7f9 f9c0 	bl	801b678 <pbuf_free>
  return;
 80222f8:	e003      	b.n	8022302 <udp_input+0x202>
    pbuf_free(p);
 80222fa:	6878      	ldr	r0, [r7, #4]
 80222fc:	f7f9 f9bc 	bl	801b678 <pbuf_free>
  return;
 8022300:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8022302:	372c      	adds	r7, #44	; 0x2c
 8022304:	46bd      	mov	sp, r7
 8022306:	bd90      	pop	{r4, r7, pc}
 8022308:	08029370 	.word	0x08029370
 802230c:	08029414 	.word	0x08029414
 8022310:	080293c4 	.word	0x080293c4
 8022314:	0802942c 	.word	0x0802942c
 8022318:	2000cba0 	.word	0x2000cba0
 802231c:	200102cc 	.word	0x200102cc
 8022320:	08029448 	.word	0x08029448
 8022324:	2000cbb0 	.word	0x2000cbb0

08022328 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022328:	b580      	push	{r7, lr}
 802232a:	b086      	sub	sp, #24
 802232c:	af00      	add	r7, sp, #0
 802232e:	60f8      	str	r0, [r7, #12]
 8022330:	60b9      	str	r1, [r7, #8]
 8022332:	4613      	mov	r3, r2
 8022334:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022336:	68bb      	ldr	r3, [r7, #8]
 8022338:	2b00      	cmp	r3, #0
 802233a:	d101      	bne.n	8022340 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 802233c:	4b39      	ldr	r3, [pc, #228]	; (8022424 <udp_bind+0xfc>)
 802233e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8022340:	68fb      	ldr	r3, [r7, #12]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d109      	bne.n	802235a <udp_bind+0x32>
 8022346:	4b38      	ldr	r3, [pc, #224]	; (8022428 <udp_bind+0x100>)
 8022348:	f240 32b7 	movw	r2, #951	; 0x3b7
 802234c:	4937      	ldr	r1, [pc, #220]	; (802242c <udp_bind+0x104>)
 802234e:	4838      	ldr	r0, [pc, #224]	; (8022430 <udp_bind+0x108>)
 8022350:	f003 fdce 	bl	8025ef0 <iprintf>
 8022354:	f06f 030f 	mvn.w	r3, #15
 8022358:	e060      	b.n	802241c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802235a:	2300      	movs	r3, #0
 802235c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802235e:	4b35      	ldr	r3, [pc, #212]	; (8022434 <udp_bind+0x10c>)
 8022360:	681b      	ldr	r3, [r3, #0]
 8022362:	617b      	str	r3, [r7, #20]
 8022364:	e009      	b.n	802237a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022366:	68fa      	ldr	r2, [r7, #12]
 8022368:	697b      	ldr	r3, [r7, #20]
 802236a:	429a      	cmp	r2, r3
 802236c:	d102      	bne.n	8022374 <udp_bind+0x4c>
      rebind = 1;
 802236e:	2301      	movs	r3, #1
 8022370:	74fb      	strb	r3, [r7, #19]
      break;
 8022372:	e005      	b.n	8022380 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022374:	697b      	ldr	r3, [r7, #20]
 8022376:	68db      	ldr	r3, [r3, #12]
 8022378:	617b      	str	r3, [r7, #20]
 802237a:	697b      	ldr	r3, [r7, #20]
 802237c:	2b00      	cmp	r3, #0
 802237e:	d1f2      	bne.n	8022366 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8022380:	88fb      	ldrh	r3, [r7, #6]
 8022382:	2b00      	cmp	r3, #0
 8022384:	d109      	bne.n	802239a <udp_bind+0x72>
    port = udp_new_port();
 8022386:	f7ff fe1f 	bl	8021fc8 <udp_new_port>
 802238a:	4603      	mov	r3, r0
 802238c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802238e:	88fb      	ldrh	r3, [r7, #6]
 8022390:	2b00      	cmp	r3, #0
 8022392:	d12c      	bne.n	80223ee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022394:	f06f 0307 	mvn.w	r3, #7
 8022398:	e040      	b.n	802241c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802239a:	4b26      	ldr	r3, [pc, #152]	; (8022434 <udp_bind+0x10c>)
 802239c:	681b      	ldr	r3, [r3, #0]
 802239e:	617b      	str	r3, [r7, #20]
 80223a0:	e022      	b.n	80223e8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80223a2:	68fa      	ldr	r2, [r7, #12]
 80223a4:	697b      	ldr	r3, [r7, #20]
 80223a6:	429a      	cmp	r2, r3
 80223a8:	d01b      	beq.n	80223e2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80223aa:	697b      	ldr	r3, [r7, #20]
 80223ac:	8a5b      	ldrh	r3, [r3, #18]
 80223ae:	88fa      	ldrh	r2, [r7, #6]
 80223b0:	429a      	cmp	r2, r3
 80223b2:	d116      	bne.n	80223e2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80223b4:	697b      	ldr	r3, [r7, #20]
 80223b6:	681a      	ldr	r2, [r3, #0]
 80223b8:	68bb      	ldr	r3, [r7, #8]
 80223ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80223bc:	429a      	cmp	r2, r3
 80223be:	d00d      	beq.n	80223dc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80223c0:	68bb      	ldr	r3, [r7, #8]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d00a      	beq.n	80223dc <udp_bind+0xb4>
 80223c6:	68bb      	ldr	r3, [r7, #8]
 80223c8:	681b      	ldr	r3, [r3, #0]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d006      	beq.n	80223dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80223ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	d003      	beq.n	80223dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80223d4:	697b      	ldr	r3, [r7, #20]
 80223d6:	681b      	ldr	r3, [r3, #0]
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d102      	bne.n	80223e2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80223dc:	f06f 0307 	mvn.w	r3, #7
 80223e0:	e01c      	b.n	802241c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80223e2:	697b      	ldr	r3, [r7, #20]
 80223e4:	68db      	ldr	r3, [r3, #12]
 80223e6:	617b      	str	r3, [r7, #20]
 80223e8:	697b      	ldr	r3, [r7, #20]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	d1d9      	bne.n	80223a2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80223ee:	68bb      	ldr	r3, [r7, #8]
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d002      	beq.n	80223fa <udp_bind+0xd2>
 80223f4:	68bb      	ldr	r3, [r7, #8]
 80223f6:	681b      	ldr	r3, [r3, #0]
 80223f8:	e000      	b.n	80223fc <udp_bind+0xd4>
 80223fa:	2300      	movs	r3, #0
 80223fc:	68fa      	ldr	r2, [r7, #12]
 80223fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022400:	68fb      	ldr	r3, [r7, #12]
 8022402:	88fa      	ldrh	r2, [r7, #6]
 8022404:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8022406:	7cfb      	ldrb	r3, [r7, #19]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d106      	bne.n	802241a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 802240c:	4b09      	ldr	r3, [pc, #36]	; (8022434 <udp_bind+0x10c>)
 802240e:	681a      	ldr	r2, [r3, #0]
 8022410:	68fb      	ldr	r3, [r7, #12]
 8022412:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8022414:	4a07      	ldr	r2, [pc, #28]	; (8022434 <udp_bind+0x10c>)
 8022416:	68fb      	ldr	r3, [r7, #12]
 8022418:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802241a:	2300      	movs	r3, #0
}
 802241c:	4618      	mov	r0, r3
 802241e:	3718      	adds	r7, #24
 8022420:	46bd      	mov	sp, r7
 8022422:	bd80      	pop	{r7, pc}
 8022424:	0802b998 	.word	0x0802b998
 8022428:	08029370 	.word	0x08029370
 802242c:	08029638 	.word	0x08029638
 8022430:	080293c4 	.word	0x080293c4
 8022434:	200102cc 	.word	0x200102cc

08022438 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8022438:	b580      	push	{r7, lr}
 802243a:	b084      	sub	sp, #16
 802243c:	af00      	add	r7, sp, #0
 802243e:	60f8      	str	r0, [r7, #12]
 8022440:	60b9      	str	r1, [r7, #8]
 8022442:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8022444:	68fb      	ldr	r3, [r7, #12]
 8022446:	2b00      	cmp	r3, #0
 8022448:	d107      	bne.n	802245a <udp_recv+0x22>
 802244a:	4b08      	ldr	r3, [pc, #32]	; (802246c <udp_recv+0x34>)
 802244c:	f240 428a 	movw	r2, #1162	; 0x48a
 8022450:	4907      	ldr	r1, [pc, #28]	; (8022470 <udp_recv+0x38>)
 8022452:	4808      	ldr	r0, [pc, #32]	; (8022474 <udp_recv+0x3c>)
 8022454:	f003 fd4c 	bl	8025ef0 <iprintf>
 8022458:	e005      	b.n	8022466 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802245a:	68fb      	ldr	r3, [r7, #12]
 802245c:	68ba      	ldr	r2, [r7, #8]
 802245e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8022460:	68fb      	ldr	r3, [r7, #12]
 8022462:	687a      	ldr	r2, [r7, #4]
 8022464:	61da      	str	r2, [r3, #28]
}
 8022466:	3710      	adds	r7, #16
 8022468:	46bd      	mov	sp, r7
 802246a:	bd80      	pop	{r7, pc}
 802246c:	08029370 	.word	0x08029370
 8022470:	080296a4 	.word	0x080296a4
 8022474:	080293c4 	.word	0x080293c4

08022478 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8022478:	b580      	push	{r7, lr}
 802247a:	b084      	sub	sp, #16
 802247c:	af00      	add	r7, sp, #0
 802247e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	2b00      	cmp	r3, #0
 8022484:	d107      	bne.n	8022496 <udp_remove+0x1e>
 8022486:	4b19      	ldr	r3, [pc, #100]	; (80224ec <udp_remove+0x74>)
 8022488:	f240 42a1 	movw	r2, #1185	; 0x4a1
 802248c:	4918      	ldr	r1, [pc, #96]	; (80224f0 <udp_remove+0x78>)
 802248e:	4819      	ldr	r0, [pc, #100]	; (80224f4 <udp_remove+0x7c>)
 8022490:	f003 fd2e 	bl	8025ef0 <iprintf>
 8022494:	e026      	b.n	80224e4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8022496:	4b18      	ldr	r3, [pc, #96]	; (80224f8 <udp_remove+0x80>)
 8022498:	681b      	ldr	r3, [r3, #0]
 802249a:	687a      	ldr	r2, [r7, #4]
 802249c:	429a      	cmp	r2, r3
 802249e:	d105      	bne.n	80224ac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80224a0:	4b15      	ldr	r3, [pc, #84]	; (80224f8 <udp_remove+0x80>)
 80224a2:	681b      	ldr	r3, [r3, #0]
 80224a4:	68db      	ldr	r3, [r3, #12]
 80224a6:	4a14      	ldr	r2, [pc, #80]	; (80224f8 <udp_remove+0x80>)
 80224a8:	6013      	str	r3, [r2, #0]
 80224aa:	e017      	b.n	80224dc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80224ac:	4b12      	ldr	r3, [pc, #72]	; (80224f8 <udp_remove+0x80>)
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	60fb      	str	r3, [r7, #12]
 80224b2:	e010      	b.n	80224d6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80224b4:	68fb      	ldr	r3, [r7, #12]
 80224b6:	68db      	ldr	r3, [r3, #12]
 80224b8:	2b00      	cmp	r3, #0
 80224ba:	d009      	beq.n	80224d0 <udp_remove+0x58>
 80224bc:	68fb      	ldr	r3, [r7, #12]
 80224be:	68db      	ldr	r3, [r3, #12]
 80224c0:	687a      	ldr	r2, [r7, #4]
 80224c2:	429a      	cmp	r2, r3
 80224c4:	d104      	bne.n	80224d0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80224c6:	687b      	ldr	r3, [r7, #4]
 80224c8:	68da      	ldr	r2, [r3, #12]
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	60da      	str	r2, [r3, #12]
        break;
 80224ce:	e005      	b.n	80224dc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80224d0:	68fb      	ldr	r3, [r7, #12]
 80224d2:	68db      	ldr	r3, [r3, #12]
 80224d4:	60fb      	str	r3, [r7, #12]
 80224d6:	68fb      	ldr	r3, [r7, #12]
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d1eb      	bne.n	80224b4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80224dc:	6879      	ldr	r1, [r7, #4]
 80224de:	2000      	movs	r0, #0
 80224e0:	f7f8 fa26 	bl	801a930 <memp_free>
}
 80224e4:	3710      	adds	r7, #16
 80224e6:	46bd      	mov	sp, r7
 80224e8:	bd80      	pop	{r7, pc}
 80224ea:	bf00      	nop
 80224ec:	08029370 	.word	0x08029370
 80224f0:	080296bc 	.word	0x080296bc
 80224f4:	080293c4 	.word	0x080293c4
 80224f8:	200102cc 	.word	0x200102cc

080224fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b082      	sub	sp, #8
 8022500:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8022502:	2000      	movs	r0, #0
 8022504:	f7f8 f9c2 	bl	801a88c <memp_malloc>
 8022508:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	2b00      	cmp	r3, #0
 802250e:	d007      	beq.n	8022520 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8022510:	2220      	movs	r2, #32
 8022512:	2100      	movs	r1, #0
 8022514:	6878      	ldr	r0, [r7, #4]
 8022516:	f003 f94b 	bl	80257b0 <memset>
    pcb->ttl = UDP_TTL;
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	22ff      	movs	r2, #255	; 0xff
 802251e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8022520:	687b      	ldr	r3, [r7, #4]
}
 8022522:	4618      	mov	r0, r3
 8022524:	3708      	adds	r7, #8
 8022526:	46bd      	mov	sp, r7
 8022528:	bd80      	pop	{r7, pc}

0802252a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 802252a:	b580      	push	{r7, lr}
 802252c:	b084      	sub	sp, #16
 802252e:	af00      	add	r7, sp, #0
 8022530:	4603      	mov	r3, r0
 8022532:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8022534:	f7ff ffe2 	bl	80224fc <udp_new>
 8022538:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 802253a:	68fb      	ldr	r3, [r7, #12]
}
 802253c:	4618      	mov	r0, r3
 802253e:	3710      	adds	r7, #16
 8022540:	46bd      	mov	sp, r7
 8022542:	bd80      	pop	{r7, pc}

08022544 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8022544:	b480      	push	{r7}
 8022546:	b085      	sub	sp, #20
 8022548:	af00      	add	r7, sp, #0
 802254a:	6078      	str	r0, [r7, #4]
 802254c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	2b00      	cmp	r3, #0
 8022552:	d01e      	beq.n	8022592 <udp_netif_ip_addr_changed+0x4e>
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	681b      	ldr	r3, [r3, #0]
 8022558:	2b00      	cmp	r3, #0
 802255a:	d01a      	beq.n	8022592 <udp_netif_ip_addr_changed+0x4e>
 802255c:	683b      	ldr	r3, [r7, #0]
 802255e:	2b00      	cmp	r3, #0
 8022560:	d017      	beq.n	8022592 <udp_netif_ip_addr_changed+0x4e>
 8022562:	683b      	ldr	r3, [r7, #0]
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	2b00      	cmp	r3, #0
 8022568:	d013      	beq.n	8022592 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802256a:	4b0d      	ldr	r3, [pc, #52]	; (80225a0 <udp_netif_ip_addr_changed+0x5c>)
 802256c:	681b      	ldr	r3, [r3, #0]
 802256e:	60fb      	str	r3, [r7, #12]
 8022570:	e00c      	b.n	802258c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	681a      	ldr	r2, [r3, #0]
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	429a      	cmp	r2, r3
 802257c:	d103      	bne.n	8022586 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802257e:	683b      	ldr	r3, [r7, #0]
 8022580:	681a      	ldr	r2, [r3, #0]
 8022582:	68fb      	ldr	r3, [r7, #12]
 8022584:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8022586:	68fb      	ldr	r3, [r7, #12]
 8022588:	68db      	ldr	r3, [r3, #12]
 802258a:	60fb      	str	r3, [r7, #12]
 802258c:	68fb      	ldr	r3, [r7, #12]
 802258e:	2b00      	cmp	r3, #0
 8022590:	d1ef      	bne.n	8022572 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8022592:	bf00      	nop
 8022594:	3714      	adds	r7, #20
 8022596:	46bd      	mov	sp, r7
 8022598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802259c:	4770      	bx	lr
 802259e:	bf00      	nop
 80225a0:	200102cc 	.word	0x200102cc

080225a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80225a4:	b580      	push	{r7, lr}
 80225a6:	b082      	sub	sp, #8
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80225ac:	4915      	ldr	r1, [pc, #84]	; (8022604 <etharp_free_entry+0x60>)
 80225ae:	687a      	ldr	r2, [r7, #4]
 80225b0:	4613      	mov	r3, r2
 80225b2:	005b      	lsls	r3, r3, #1
 80225b4:	4413      	add	r3, r2
 80225b6:	00db      	lsls	r3, r3, #3
 80225b8:	440b      	add	r3, r1
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	2b00      	cmp	r3, #0
 80225be:	d013      	beq.n	80225e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80225c0:	4910      	ldr	r1, [pc, #64]	; (8022604 <etharp_free_entry+0x60>)
 80225c2:	687a      	ldr	r2, [r7, #4]
 80225c4:	4613      	mov	r3, r2
 80225c6:	005b      	lsls	r3, r3, #1
 80225c8:	4413      	add	r3, r2
 80225ca:	00db      	lsls	r3, r3, #3
 80225cc:	440b      	add	r3, r1
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	4618      	mov	r0, r3
 80225d2:	f7f9 f851 	bl	801b678 <pbuf_free>
    arp_table[i].q = NULL;
 80225d6:	490b      	ldr	r1, [pc, #44]	; (8022604 <etharp_free_entry+0x60>)
 80225d8:	687a      	ldr	r2, [r7, #4]
 80225da:	4613      	mov	r3, r2
 80225dc:	005b      	lsls	r3, r3, #1
 80225de:	4413      	add	r3, r2
 80225e0:	00db      	lsls	r3, r3, #3
 80225e2:	440b      	add	r3, r1
 80225e4:	2200      	movs	r2, #0
 80225e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80225e8:	4906      	ldr	r1, [pc, #24]	; (8022604 <etharp_free_entry+0x60>)
 80225ea:	687a      	ldr	r2, [r7, #4]
 80225ec:	4613      	mov	r3, r2
 80225ee:	005b      	lsls	r3, r3, #1
 80225f0:	4413      	add	r3, r2
 80225f2:	00db      	lsls	r3, r3, #3
 80225f4:	440b      	add	r3, r1
 80225f6:	3314      	adds	r3, #20
 80225f8:	2200      	movs	r2, #0
 80225fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80225fc:	bf00      	nop
 80225fe:	3708      	adds	r7, #8
 8022600:	46bd      	mov	sp, r7
 8022602:	bd80      	pop	{r7, pc}
 8022604:	20008778 	.word	0x20008778

08022608 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8022608:	b580      	push	{r7, lr}
 802260a:	b082      	sub	sp, #8
 802260c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802260e:	2300      	movs	r3, #0
 8022610:	607b      	str	r3, [r7, #4]
 8022612:	e096      	b.n	8022742 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8022614:	494f      	ldr	r1, [pc, #316]	; (8022754 <etharp_tmr+0x14c>)
 8022616:	687a      	ldr	r2, [r7, #4]
 8022618:	4613      	mov	r3, r2
 802261a:	005b      	lsls	r3, r3, #1
 802261c:	4413      	add	r3, r2
 802261e:	00db      	lsls	r3, r3, #3
 8022620:	440b      	add	r3, r1
 8022622:	3314      	adds	r3, #20
 8022624:	781b      	ldrb	r3, [r3, #0]
 8022626:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8022628:	78fb      	ldrb	r3, [r7, #3]
 802262a:	2b00      	cmp	r3, #0
 802262c:	f000 8086 	beq.w	802273c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8022630:	4948      	ldr	r1, [pc, #288]	; (8022754 <etharp_tmr+0x14c>)
 8022632:	687a      	ldr	r2, [r7, #4]
 8022634:	4613      	mov	r3, r2
 8022636:	005b      	lsls	r3, r3, #1
 8022638:	4413      	add	r3, r2
 802263a:	00db      	lsls	r3, r3, #3
 802263c:	440b      	add	r3, r1
 802263e:	3312      	adds	r3, #18
 8022640:	881b      	ldrh	r3, [r3, #0]
 8022642:	3301      	adds	r3, #1
 8022644:	b298      	uxth	r0, r3
 8022646:	4943      	ldr	r1, [pc, #268]	; (8022754 <etharp_tmr+0x14c>)
 8022648:	687a      	ldr	r2, [r7, #4]
 802264a:	4613      	mov	r3, r2
 802264c:	005b      	lsls	r3, r3, #1
 802264e:	4413      	add	r3, r2
 8022650:	00db      	lsls	r3, r3, #3
 8022652:	440b      	add	r3, r1
 8022654:	3312      	adds	r3, #18
 8022656:	4602      	mov	r2, r0
 8022658:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802265a:	493e      	ldr	r1, [pc, #248]	; (8022754 <etharp_tmr+0x14c>)
 802265c:	687a      	ldr	r2, [r7, #4]
 802265e:	4613      	mov	r3, r2
 8022660:	005b      	lsls	r3, r3, #1
 8022662:	4413      	add	r3, r2
 8022664:	00db      	lsls	r3, r3, #3
 8022666:	440b      	add	r3, r1
 8022668:	3312      	adds	r3, #18
 802266a:	881b      	ldrh	r3, [r3, #0]
 802266c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8022670:	d215      	bcs.n	802269e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022672:	4938      	ldr	r1, [pc, #224]	; (8022754 <etharp_tmr+0x14c>)
 8022674:	687a      	ldr	r2, [r7, #4]
 8022676:	4613      	mov	r3, r2
 8022678:	005b      	lsls	r3, r3, #1
 802267a:	4413      	add	r3, r2
 802267c:	00db      	lsls	r3, r3, #3
 802267e:	440b      	add	r3, r1
 8022680:	3314      	adds	r3, #20
 8022682:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022684:	2b01      	cmp	r3, #1
 8022686:	d10e      	bne.n	80226a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8022688:	4932      	ldr	r1, [pc, #200]	; (8022754 <etharp_tmr+0x14c>)
 802268a:	687a      	ldr	r2, [r7, #4]
 802268c:	4613      	mov	r3, r2
 802268e:	005b      	lsls	r3, r3, #1
 8022690:	4413      	add	r3, r2
 8022692:	00db      	lsls	r3, r3, #3
 8022694:	440b      	add	r3, r1
 8022696:	3312      	adds	r3, #18
 8022698:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802269a:	2b04      	cmp	r3, #4
 802269c:	d903      	bls.n	80226a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802269e:	6878      	ldr	r0, [r7, #4]
 80226a0:	f7ff ff80 	bl	80225a4 <etharp_free_entry>
 80226a4:	e04a      	b.n	802273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80226a6:	492b      	ldr	r1, [pc, #172]	; (8022754 <etharp_tmr+0x14c>)
 80226a8:	687a      	ldr	r2, [r7, #4]
 80226aa:	4613      	mov	r3, r2
 80226ac:	005b      	lsls	r3, r3, #1
 80226ae:	4413      	add	r3, r2
 80226b0:	00db      	lsls	r3, r3, #3
 80226b2:	440b      	add	r3, r1
 80226b4:	3314      	adds	r3, #20
 80226b6:	781b      	ldrb	r3, [r3, #0]
 80226b8:	2b03      	cmp	r3, #3
 80226ba:	d10a      	bne.n	80226d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80226bc:	4925      	ldr	r1, [pc, #148]	; (8022754 <etharp_tmr+0x14c>)
 80226be:	687a      	ldr	r2, [r7, #4]
 80226c0:	4613      	mov	r3, r2
 80226c2:	005b      	lsls	r3, r3, #1
 80226c4:	4413      	add	r3, r2
 80226c6:	00db      	lsls	r3, r3, #3
 80226c8:	440b      	add	r3, r1
 80226ca:	3314      	adds	r3, #20
 80226cc:	2204      	movs	r2, #4
 80226ce:	701a      	strb	r2, [r3, #0]
 80226d0:	e034      	b.n	802273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80226d2:	4920      	ldr	r1, [pc, #128]	; (8022754 <etharp_tmr+0x14c>)
 80226d4:	687a      	ldr	r2, [r7, #4]
 80226d6:	4613      	mov	r3, r2
 80226d8:	005b      	lsls	r3, r3, #1
 80226da:	4413      	add	r3, r2
 80226dc:	00db      	lsls	r3, r3, #3
 80226de:	440b      	add	r3, r1
 80226e0:	3314      	adds	r3, #20
 80226e2:	781b      	ldrb	r3, [r3, #0]
 80226e4:	2b04      	cmp	r3, #4
 80226e6:	d10a      	bne.n	80226fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80226e8:	491a      	ldr	r1, [pc, #104]	; (8022754 <etharp_tmr+0x14c>)
 80226ea:	687a      	ldr	r2, [r7, #4]
 80226ec:	4613      	mov	r3, r2
 80226ee:	005b      	lsls	r3, r3, #1
 80226f0:	4413      	add	r3, r2
 80226f2:	00db      	lsls	r3, r3, #3
 80226f4:	440b      	add	r3, r1
 80226f6:	3314      	adds	r3, #20
 80226f8:	2202      	movs	r2, #2
 80226fa:	701a      	strb	r2, [r3, #0]
 80226fc:	e01e      	b.n	802273c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80226fe:	4915      	ldr	r1, [pc, #84]	; (8022754 <etharp_tmr+0x14c>)
 8022700:	687a      	ldr	r2, [r7, #4]
 8022702:	4613      	mov	r3, r2
 8022704:	005b      	lsls	r3, r3, #1
 8022706:	4413      	add	r3, r2
 8022708:	00db      	lsls	r3, r3, #3
 802270a:	440b      	add	r3, r1
 802270c:	3314      	adds	r3, #20
 802270e:	781b      	ldrb	r3, [r3, #0]
 8022710:	2b01      	cmp	r3, #1
 8022712:	d113      	bne.n	802273c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8022714:	490f      	ldr	r1, [pc, #60]	; (8022754 <etharp_tmr+0x14c>)
 8022716:	687a      	ldr	r2, [r7, #4]
 8022718:	4613      	mov	r3, r2
 802271a:	005b      	lsls	r3, r3, #1
 802271c:	4413      	add	r3, r2
 802271e:	00db      	lsls	r3, r3, #3
 8022720:	440b      	add	r3, r1
 8022722:	3308      	adds	r3, #8
 8022724:	6818      	ldr	r0, [r3, #0]
 8022726:	687a      	ldr	r2, [r7, #4]
 8022728:	4613      	mov	r3, r2
 802272a:	005b      	lsls	r3, r3, #1
 802272c:	4413      	add	r3, r2
 802272e:	00db      	lsls	r3, r3, #3
 8022730:	4a08      	ldr	r2, [pc, #32]	; (8022754 <etharp_tmr+0x14c>)
 8022732:	4413      	add	r3, r2
 8022734:	3304      	adds	r3, #4
 8022736:	4619      	mov	r1, r3
 8022738:	f000 fe6e 	bl	8023418 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	3301      	adds	r3, #1
 8022740:	607b      	str	r3, [r7, #4]
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	2b09      	cmp	r3, #9
 8022746:	f77f af65 	ble.w	8022614 <etharp_tmr+0xc>
      }
    }
  }
}
 802274a:	bf00      	nop
 802274c:	bf00      	nop
 802274e:	3708      	adds	r7, #8
 8022750:	46bd      	mov	sp, r7
 8022752:	bd80      	pop	{r7, pc}
 8022754:	20008778 	.word	0x20008778

08022758 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8022758:	b580      	push	{r7, lr}
 802275a:	b08a      	sub	sp, #40	; 0x28
 802275c:	af00      	add	r7, sp, #0
 802275e:	60f8      	str	r0, [r7, #12]
 8022760:	460b      	mov	r3, r1
 8022762:	607a      	str	r2, [r7, #4]
 8022764:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8022766:	230a      	movs	r3, #10
 8022768:	84fb      	strh	r3, [r7, #38]	; 0x26
 802276a:	230a      	movs	r3, #10
 802276c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802276e:	230a      	movs	r3, #10
 8022770:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8022772:	2300      	movs	r3, #0
 8022774:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8022776:	230a      	movs	r3, #10
 8022778:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802277a:	2300      	movs	r3, #0
 802277c:	83bb      	strh	r3, [r7, #28]
 802277e:	2300      	movs	r3, #0
 8022780:	837b      	strh	r3, [r7, #26]
 8022782:	2300      	movs	r3, #0
 8022784:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022786:	2300      	movs	r3, #0
 8022788:	843b      	strh	r3, [r7, #32]
 802278a:	e0ae      	b.n	80228ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802278c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022790:	49a6      	ldr	r1, [pc, #664]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022792:	4613      	mov	r3, r2
 8022794:	005b      	lsls	r3, r3, #1
 8022796:	4413      	add	r3, r2
 8022798:	00db      	lsls	r3, r3, #3
 802279a:	440b      	add	r3, r1
 802279c:	3314      	adds	r3, #20
 802279e:	781b      	ldrb	r3, [r3, #0]
 80227a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80227a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80227a6:	2b0a      	cmp	r3, #10
 80227a8:	d105      	bne.n	80227b6 <etharp_find_entry+0x5e>
 80227aa:	7dfb      	ldrb	r3, [r7, #23]
 80227ac:	2b00      	cmp	r3, #0
 80227ae:	d102      	bne.n	80227b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80227b0:	8c3b      	ldrh	r3, [r7, #32]
 80227b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80227b4:	e095      	b.n	80228e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80227b6:	7dfb      	ldrb	r3, [r7, #23]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	f000 8092 	beq.w	80228e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80227be:	7dfb      	ldrb	r3, [r7, #23]
 80227c0:	2b01      	cmp	r3, #1
 80227c2:	d009      	beq.n	80227d8 <etharp_find_entry+0x80>
 80227c4:	7dfb      	ldrb	r3, [r7, #23]
 80227c6:	2b01      	cmp	r3, #1
 80227c8:	d806      	bhi.n	80227d8 <etharp_find_entry+0x80>
 80227ca:	4b99      	ldr	r3, [pc, #612]	; (8022a30 <etharp_find_entry+0x2d8>)
 80227cc:	f240 1223 	movw	r2, #291	; 0x123
 80227d0:	4998      	ldr	r1, [pc, #608]	; (8022a34 <etharp_find_entry+0x2dc>)
 80227d2:	4899      	ldr	r0, [pc, #612]	; (8022a38 <etharp_find_entry+0x2e0>)
 80227d4:	f003 fb8c 	bl	8025ef0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80227d8:	68fb      	ldr	r3, [r7, #12]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d020      	beq.n	8022820 <etharp_find_entry+0xc8>
 80227de:	68fb      	ldr	r3, [r7, #12]
 80227e0:	6819      	ldr	r1, [r3, #0]
 80227e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80227e6:	4891      	ldr	r0, [pc, #580]	; (8022a2c <etharp_find_entry+0x2d4>)
 80227e8:	4613      	mov	r3, r2
 80227ea:	005b      	lsls	r3, r3, #1
 80227ec:	4413      	add	r3, r2
 80227ee:	00db      	lsls	r3, r3, #3
 80227f0:	4403      	add	r3, r0
 80227f2:	3304      	adds	r3, #4
 80227f4:	681b      	ldr	r3, [r3, #0]
 80227f6:	4299      	cmp	r1, r3
 80227f8:	d112      	bne.n	8022820 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d00c      	beq.n	802281a <etharp_find_entry+0xc2>
 8022800:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022804:	4989      	ldr	r1, [pc, #548]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022806:	4613      	mov	r3, r2
 8022808:	005b      	lsls	r3, r3, #1
 802280a:	4413      	add	r3, r2
 802280c:	00db      	lsls	r3, r3, #3
 802280e:	440b      	add	r3, r1
 8022810:	3308      	adds	r3, #8
 8022812:	681b      	ldr	r3, [r3, #0]
 8022814:	687a      	ldr	r2, [r7, #4]
 8022816:	429a      	cmp	r2, r3
 8022818:	d102      	bne.n	8022820 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 802281a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802281e:	e100      	b.n	8022a22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8022820:	7dfb      	ldrb	r3, [r7, #23]
 8022822:	2b01      	cmp	r3, #1
 8022824:	d140      	bne.n	80228a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8022826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802282a:	4980      	ldr	r1, [pc, #512]	; (8022a2c <etharp_find_entry+0x2d4>)
 802282c:	4613      	mov	r3, r2
 802282e:	005b      	lsls	r3, r3, #1
 8022830:	4413      	add	r3, r2
 8022832:	00db      	lsls	r3, r3, #3
 8022834:	440b      	add	r3, r1
 8022836:	681b      	ldr	r3, [r3, #0]
 8022838:	2b00      	cmp	r3, #0
 802283a:	d01a      	beq.n	8022872 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 802283c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022840:	497a      	ldr	r1, [pc, #488]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022842:	4613      	mov	r3, r2
 8022844:	005b      	lsls	r3, r3, #1
 8022846:	4413      	add	r3, r2
 8022848:	00db      	lsls	r3, r3, #3
 802284a:	440b      	add	r3, r1
 802284c:	3312      	adds	r3, #18
 802284e:	881b      	ldrh	r3, [r3, #0]
 8022850:	8bba      	ldrh	r2, [r7, #28]
 8022852:	429a      	cmp	r2, r3
 8022854:	d845      	bhi.n	80228e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8022856:	8c3b      	ldrh	r3, [r7, #32]
 8022858:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802285a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802285e:	4973      	ldr	r1, [pc, #460]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022860:	4613      	mov	r3, r2
 8022862:	005b      	lsls	r3, r3, #1
 8022864:	4413      	add	r3, r2
 8022866:	00db      	lsls	r3, r3, #3
 8022868:	440b      	add	r3, r1
 802286a:	3312      	adds	r3, #18
 802286c:	881b      	ldrh	r3, [r3, #0]
 802286e:	83bb      	strh	r3, [r7, #28]
 8022870:	e037      	b.n	80228e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8022872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022876:	496d      	ldr	r1, [pc, #436]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022878:	4613      	mov	r3, r2
 802287a:	005b      	lsls	r3, r3, #1
 802287c:	4413      	add	r3, r2
 802287e:	00db      	lsls	r3, r3, #3
 8022880:	440b      	add	r3, r1
 8022882:	3312      	adds	r3, #18
 8022884:	881b      	ldrh	r3, [r3, #0]
 8022886:	8b7a      	ldrh	r2, [r7, #26]
 8022888:	429a      	cmp	r2, r3
 802288a:	d82a      	bhi.n	80228e2 <etharp_find_entry+0x18a>
            old_pending = i;
 802288c:	8c3b      	ldrh	r3, [r7, #32]
 802288e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8022890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022894:	4965      	ldr	r1, [pc, #404]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022896:	4613      	mov	r3, r2
 8022898:	005b      	lsls	r3, r3, #1
 802289a:	4413      	add	r3, r2
 802289c:	00db      	lsls	r3, r3, #3
 802289e:	440b      	add	r3, r1
 80228a0:	3312      	adds	r3, #18
 80228a2:	881b      	ldrh	r3, [r3, #0]
 80228a4:	837b      	strh	r3, [r7, #26]
 80228a6:	e01c      	b.n	80228e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80228a8:	7dfb      	ldrb	r3, [r7, #23]
 80228aa:	2b01      	cmp	r3, #1
 80228ac:	d919      	bls.n	80228e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80228ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80228b2:	495e      	ldr	r1, [pc, #376]	; (8022a2c <etharp_find_entry+0x2d4>)
 80228b4:	4613      	mov	r3, r2
 80228b6:	005b      	lsls	r3, r3, #1
 80228b8:	4413      	add	r3, r2
 80228ba:	00db      	lsls	r3, r3, #3
 80228bc:	440b      	add	r3, r1
 80228be:	3312      	adds	r3, #18
 80228c0:	881b      	ldrh	r3, [r3, #0]
 80228c2:	8b3a      	ldrh	r2, [r7, #24]
 80228c4:	429a      	cmp	r2, r3
 80228c6:	d80c      	bhi.n	80228e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80228c8:	8c3b      	ldrh	r3, [r7, #32]
 80228ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80228cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80228d0:	4956      	ldr	r1, [pc, #344]	; (8022a2c <etharp_find_entry+0x2d4>)
 80228d2:	4613      	mov	r3, r2
 80228d4:	005b      	lsls	r3, r3, #1
 80228d6:	4413      	add	r3, r2
 80228d8:	00db      	lsls	r3, r3, #3
 80228da:	440b      	add	r3, r1
 80228dc:	3312      	adds	r3, #18
 80228de:	881b      	ldrh	r3, [r3, #0]
 80228e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80228e2:	8c3b      	ldrh	r3, [r7, #32]
 80228e4:	3301      	adds	r3, #1
 80228e6:	b29b      	uxth	r3, r3
 80228e8:	843b      	strh	r3, [r7, #32]
 80228ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80228ee:	2b09      	cmp	r3, #9
 80228f0:	f77f af4c 	ble.w	802278c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80228f4:	7afb      	ldrb	r3, [r7, #11]
 80228f6:	f003 0302 	and.w	r3, r3, #2
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d108      	bne.n	8022910 <etharp_find_entry+0x1b8>
 80228fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8022902:	2b0a      	cmp	r3, #10
 8022904:	d107      	bne.n	8022916 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8022906:	7afb      	ldrb	r3, [r7, #11]
 8022908:	f003 0301 	and.w	r3, r3, #1
 802290c:	2b00      	cmp	r3, #0
 802290e:	d102      	bne.n	8022916 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8022910:	f04f 33ff 	mov.w	r3, #4294967295
 8022914:	e085      	b.n	8022a22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8022916:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802291a:	2b09      	cmp	r3, #9
 802291c:	dc02      	bgt.n	8022924 <etharp_find_entry+0x1cc>
    i = empty;
 802291e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022920:	843b      	strh	r3, [r7, #32]
 8022922:	e039      	b.n	8022998 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8022924:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8022928:	2b09      	cmp	r3, #9
 802292a:	dc14      	bgt.n	8022956 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 802292c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802292e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8022930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022934:	493d      	ldr	r1, [pc, #244]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022936:	4613      	mov	r3, r2
 8022938:	005b      	lsls	r3, r3, #1
 802293a:	4413      	add	r3, r2
 802293c:	00db      	lsls	r3, r3, #3
 802293e:	440b      	add	r3, r1
 8022940:	681b      	ldr	r3, [r3, #0]
 8022942:	2b00      	cmp	r3, #0
 8022944:	d018      	beq.n	8022978 <etharp_find_entry+0x220>
 8022946:	4b3a      	ldr	r3, [pc, #232]	; (8022a30 <etharp_find_entry+0x2d8>)
 8022948:	f240 126d 	movw	r2, #365	; 0x16d
 802294c:	493b      	ldr	r1, [pc, #236]	; (8022a3c <etharp_find_entry+0x2e4>)
 802294e:	483a      	ldr	r0, [pc, #232]	; (8022a38 <etharp_find_entry+0x2e0>)
 8022950:	f003 face 	bl	8025ef0 <iprintf>
 8022954:	e010      	b.n	8022978 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8022956:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802295a:	2b09      	cmp	r3, #9
 802295c:	dc02      	bgt.n	8022964 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802295e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022960:	843b      	strh	r3, [r7, #32]
 8022962:	e009      	b.n	8022978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8022964:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022968:	2b09      	cmp	r3, #9
 802296a:	dc02      	bgt.n	8022972 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802296c:	8bfb      	ldrh	r3, [r7, #30]
 802296e:	843b      	strh	r3, [r7, #32]
 8022970:	e002      	b.n	8022978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8022972:	f04f 33ff 	mov.w	r3, #4294967295
 8022976:	e054      	b.n	8022a22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022978:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802297c:	2b09      	cmp	r3, #9
 802297e:	dd06      	ble.n	802298e <etharp_find_entry+0x236>
 8022980:	4b2b      	ldr	r3, [pc, #172]	; (8022a30 <etharp_find_entry+0x2d8>)
 8022982:	f240 127f 	movw	r2, #383	; 0x17f
 8022986:	492e      	ldr	r1, [pc, #184]	; (8022a40 <etharp_find_entry+0x2e8>)
 8022988:	482b      	ldr	r0, [pc, #172]	; (8022a38 <etharp_find_entry+0x2e0>)
 802298a:	f003 fab1 	bl	8025ef0 <iprintf>
    etharp_free_entry(i);
 802298e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022992:	4618      	mov	r0, r3
 8022994:	f7ff fe06 	bl	80225a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8022998:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802299c:	2b09      	cmp	r3, #9
 802299e:	dd06      	ble.n	80229ae <etharp_find_entry+0x256>
 80229a0:	4b23      	ldr	r3, [pc, #140]	; (8022a30 <etharp_find_entry+0x2d8>)
 80229a2:	f240 1283 	movw	r2, #387	; 0x183
 80229a6:	4926      	ldr	r1, [pc, #152]	; (8022a40 <etharp_find_entry+0x2e8>)
 80229a8:	4823      	ldr	r0, [pc, #140]	; (8022a38 <etharp_find_entry+0x2e0>)
 80229aa:	f003 faa1 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80229ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229b2:	491e      	ldr	r1, [pc, #120]	; (8022a2c <etharp_find_entry+0x2d4>)
 80229b4:	4613      	mov	r3, r2
 80229b6:	005b      	lsls	r3, r3, #1
 80229b8:	4413      	add	r3, r2
 80229ba:	00db      	lsls	r3, r3, #3
 80229bc:	440b      	add	r3, r1
 80229be:	3314      	adds	r3, #20
 80229c0:	781b      	ldrb	r3, [r3, #0]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d006      	beq.n	80229d4 <etharp_find_entry+0x27c>
 80229c6:	4b1a      	ldr	r3, [pc, #104]	; (8022a30 <etharp_find_entry+0x2d8>)
 80229c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80229cc:	491d      	ldr	r1, [pc, #116]	; (8022a44 <etharp_find_entry+0x2ec>)
 80229ce:	481a      	ldr	r0, [pc, #104]	; (8022a38 <etharp_find_entry+0x2e0>)
 80229d0:	f003 fa8e 	bl	8025ef0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80229d4:	68fb      	ldr	r3, [r7, #12]
 80229d6:	2b00      	cmp	r3, #0
 80229d8:	d00b      	beq.n	80229f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80229da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229de:	68fb      	ldr	r3, [r7, #12]
 80229e0:	6819      	ldr	r1, [r3, #0]
 80229e2:	4812      	ldr	r0, [pc, #72]	; (8022a2c <etharp_find_entry+0x2d4>)
 80229e4:	4613      	mov	r3, r2
 80229e6:	005b      	lsls	r3, r3, #1
 80229e8:	4413      	add	r3, r2
 80229ea:	00db      	lsls	r3, r3, #3
 80229ec:	4403      	add	r3, r0
 80229ee:	3304      	adds	r3, #4
 80229f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80229f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80229f6:	490d      	ldr	r1, [pc, #52]	; (8022a2c <etharp_find_entry+0x2d4>)
 80229f8:	4613      	mov	r3, r2
 80229fa:	005b      	lsls	r3, r3, #1
 80229fc:	4413      	add	r3, r2
 80229fe:	00db      	lsls	r3, r3, #3
 8022a00:	440b      	add	r3, r1
 8022a02:	3312      	adds	r3, #18
 8022a04:	2200      	movs	r2, #0
 8022a06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8022a08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022a0c:	4907      	ldr	r1, [pc, #28]	; (8022a2c <etharp_find_entry+0x2d4>)
 8022a0e:	4613      	mov	r3, r2
 8022a10:	005b      	lsls	r3, r3, #1
 8022a12:	4413      	add	r3, r2
 8022a14:	00db      	lsls	r3, r3, #3
 8022a16:	440b      	add	r3, r1
 8022a18:	3308      	adds	r3, #8
 8022a1a:	687a      	ldr	r2, [r7, #4]
 8022a1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8022a1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8022a22:	4618      	mov	r0, r3
 8022a24:	3728      	adds	r7, #40	; 0x28
 8022a26:	46bd      	mov	sp, r7
 8022a28:	bd80      	pop	{r7, pc}
 8022a2a:	bf00      	nop
 8022a2c:	20008778 	.word	0x20008778
 8022a30:	080296d4 	.word	0x080296d4
 8022a34:	0802970c 	.word	0x0802970c
 8022a38:	0802974c 	.word	0x0802974c
 8022a3c:	08029774 	.word	0x08029774
 8022a40:	0802978c 	.word	0x0802978c
 8022a44:	080297a0 	.word	0x080297a0

08022a48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8022a48:	b580      	push	{r7, lr}
 8022a4a:	b088      	sub	sp, #32
 8022a4c:	af02      	add	r7, sp, #8
 8022a4e:	60f8      	str	r0, [r7, #12]
 8022a50:	60b9      	str	r1, [r7, #8]
 8022a52:	607a      	str	r2, [r7, #4]
 8022a54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8022a56:	68fb      	ldr	r3, [r7, #12]
 8022a58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8022a5c:	2b06      	cmp	r3, #6
 8022a5e:	d006      	beq.n	8022a6e <etharp_update_arp_entry+0x26>
 8022a60:	4b48      	ldr	r3, [pc, #288]	; (8022b84 <etharp_update_arp_entry+0x13c>)
 8022a62:	f240 12a9 	movw	r2, #425	; 0x1a9
 8022a66:	4948      	ldr	r1, [pc, #288]	; (8022b88 <etharp_update_arp_entry+0x140>)
 8022a68:	4848      	ldr	r0, [pc, #288]	; (8022b8c <etharp_update_arp_entry+0x144>)
 8022a6a:	f003 fa41 	bl	8025ef0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8022a6e:	68bb      	ldr	r3, [r7, #8]
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	d012      	beq.n	8022a9a <etharp_update_arp_entry+0x52>
 8022a74:	68bb      	ldr	r3, [r7, #8]
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	d00e      	beq.n	8022a9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022a7c:	68bb      	ldr	r3, [r7, #8]
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	68f9      	ldr	r1, [r7, #12]
 8022a82:	4618      	mov	r0, r3
 8022a84:	f001 f8fe 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8022a88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d105      	bne.n	8022a9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8022a8e:	68bb      	ldr	r3, [r7, #8]
 8022a90:	681b      	ldr	r3, [r3, #0]
 8022a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8022a96:	2be0      	cmp	r3, #224	; 0xe0
 8022a98:	d102      	bne.n	8022aa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022a9a:	f06f 030f 	mvn.w	r3, #15
 8022a9e:	e06c      	b.n	8022b7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8022aa0:	78fb      	ldrb	r3, [r7, #3]
 8022aa2:	68fa      	ldr	r2, [r7, #12]
 8022aa4:	4619      	mov	r1, r3
 8022aa6:	68b8      	ldr	r0, [r7, #8]
 8022aa8:	f7ff fe56 	bl	8022758 <etharp_find_entry>
 8022aac:	4603      	mov	r3, r0
 8022aae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8022ab0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	da02      	bge.n	8022abe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8022ab8:	8afb      	ldrh	r3, [r7, #22]
 8022aba:	b25b      	sxtb	r3, r3
 8022abc:	e05d      	b.n	8022b7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8022abe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022ac2:	4933      	ldr	r1, [pc, #204]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022ac4:	4613      	mov	r3, r2
 8022ac6:	005b      	lsls	r3, r3, #1
 8022ac8:	4413      	add	r3, r2
 8022aca:	00db      	lsls	r3, r3, #3
 8022acc:	440b      	add	r3, r1
 8022ace:	3314      	adds	r3, #20
 8022ad0:	2202      	movs	r2, #2
 8022ad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8022ad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022ad8:	492d      	ldr	r1, [pc, #180]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022ada:	4613      	mov	r3, r2
 8022adc:	005b      	lsls	r3, r3, #1
 8022ade:	4413      	add	r3, r2
 8022ae0:	00db      	lsls	r3, r3, #3
 8022ae2:	440b      	add	r3, r1
 8022ae4:	3308      	adds	r3, #8
 8022ae6:	68fa      	ldr	r2, [r7, #12]
 8022ae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022aea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022aee:	4613      	mov	r3, r2
 8022af0:	005b      	lsls	r3, r3, #1
 8022af2:	4413      	add	r3, r2
 8022af4:	00db      	lsls	r3, r3, #3
 8022af6:	3308      	adds	r3, #8
 8022af8:	4a25      	ldr	r2, [pc, #148]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022afa:	4413      	add	r3, r2
 8022afc:	3304      	adds	r3, #4
 8022afe:	2206      	movs	r2, #6
 8022b00:	6879      	ldr	r1, [r7, #4]
 8022b02:	4618      	mov	r0, r3
 8022b04:	f002 fe46 	bl	8025794 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022b08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022b0c:	4920      	ldr	r1, [pc, #128]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022b0e:	4613      	mov	r3, r2
 8022b10:	005b      	lsls	r3, r3, #1
 8022b12:	4413      	add	r3, r2
 8022b14:	00db      	lsls	r3, r3, #3
 8022b16:	440b      	add	r3, r1
 8022b18:	3312      	adds	r3, #18
 8022b1a:	2200      	movs	r2, #0
 8022b1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022b1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022b22:	491b      	ldr	r1, [pc, #108]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022b24:	4613      	mov	r3, r2
 8022b26:	005b      	lsls	r3, r3, #1
 8022b28:	4413      	add	r3, r2
 8022b2a:	00db      	lsls	r3, r3, #3
 8022b2c:	440b      	add	r3, r1
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d021      	beq.n	8022b78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8022b34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022b38:	4915      	ldr	r1, [pc, #84]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022b3a:	4613      	mov	r3, r2
 8022b3c:	005b      	lsls	r3, r3, #1
 8022b3e:	4413      	add	r3, r2
 8022b40:	00db      	lsls	r3, r3, #3
 8022b42:	440b      	add	r3, r1
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8022b48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022b4c:	4910      	ldr	r1, [pc, #64]	; (8022b90 <etharp_update_arp_entry+0x148>)
 8022b4e:	4613      	mov	r3, r2
 8022b50:	005b      	lsls	r3, r3, #1
 8022b52:	4413      	add	r3, r2
 8022b54:	00db      	lsls	r3, r3, #3
 8022b56:	440b      	add	r3, r1
 8022b58:	2200      	movs	r2, #0
 8022b5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8022b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022b66:	9300      	str	r3, [sp, #0]
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	6939      	ldr	r1, [r7, #16]
 8022b6c:	68f8      	ldr	r0, [r7, #12]
 8022b6e:	f001 ff91 	bl	8024a94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8022b72:	6938      	ldr	r0, [r7, #16]
 8022b74:	f7f8 fd80 	bl	801b678 <pbuf_free>
  }
  return ERR_OK;
 8022b78:	2300      	movs	r3, #0
}
 8022b7a:	4618      	mov	r0, r3
 8022b7c:	3718      	adds	r7, #24
 8022b7e:	46bd      	mov	sp, r7
 8022b80:	bd80      	pop	{r7, pc}
 8022b82:	bf00      	nop
 8022b84:	080296d4 	.word	0x080296d4
 8022b88:	080297cc 	.word	0x080297cc
 8022b8c:	0802974c 	.word	0x0802974c
 8022b90:	20008778 	.word	0x20008778

08022b94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8022b94:	b580      	push	{r7, lr}
 8022b96:	b084      	sub	sp, #16
 8022b98:	af00      	add	r7, sp, #0
 8022b9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022b9c:	2300      	movs	r3, #0
 8022b9e:	60fb      	str	r3, [r7, #12]
 8022ba0:	e01e      	b.n	8022be0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8022ba2:	4913      	ldr	r1, [pc, #76]	; (8022bf0 <etharp_cleanup_netif+0x5c>)
 8022ba4:	68fa      	ldr	r2, [r7, #12]
 8022ba6:	4613      	mov	r3, r2
 8022ba8:	005b      	lsls	r3, r3, #1
 8022baa:	4413      	add	r3, r2
 8022bac:	00db      	lsls	r3, r3, #3
 8022bae:	440b      	add	r3, r1
 8022bb0:	3314      	adds	r3, #20
 8022bb2:	781b      	ldrb	r3, [r3, #0]
 8022bb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8022bb6:	7afb      	ldrb	r3, [r7, #11]
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d00e      	beq.n	8022bda <etharp_cleanup_netif+0x46>
 8022bbc:	490c      	ldr	r1, [pc, #48]	; (8022bf0 <etharp_cleanup_netif+0x5c>)
 8022bbe:	68fa      	ldr	r2, [r7, #12]
 8022bc0:	4613      	mov	r3, r2
 8022bc2:	005b      	lsls	r3, r3, #1
 8022bc4:	4413      	add	r3, r2
 8022bc6:	00db      	lsls	r3, r3, #3
 8022bc8:	440b      	add	r3, r1
 8022bca:	3308      	adds	r3, #8
 8022bcc:	681b      	ldr	r3, [r3, #0]
 8022bce:	687a      	ldr	r2, [r7, #4]
 8022bd0:	429a      	cmp	r2, r3
 8022bd2:	d102      	bne.n	8022bda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8022bd4:	68f8      	ldr	r0, [r7, #12]
 8022bd6:	f7ff fce5 	bl	80225a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	3301      	adds	r3, #1
 8022bde:	60fb      	str	r3, [r7, #12]
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	2b09      	cmp	r3, #9
 8022be4:	dddd      	ble.n	8022ba2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8022be6:	bf00      	nop
 8022be8:	bf00      	nop
 8022bea:	3710      	adds	r7, #16
 8022bec:	46bd      	mov	sp, r7
 8022bee:	bd80      	pop	{r7, pc}
 8022bf0:	20008778 	.word	0x20008778

08022bf4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8022bf4:	b5b0      	push	{r4, r5, r7, lr}
 8022bf6:	b08a      	sub	sp, #40	; 0x28
 8022bf8:	af04      	add	r7, sp, #16
 8022bfa:	6078      	str	r0, [r7, #4]
 8022bfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022bfe:	683b      	ldr	r3, [r7, #0]
 8022c00:	2b00      	cmp	r3, #0
 8022c02:	d107      	bne.n	8022c14 <etharp_input+0x20>
 8022c04:	4b3d      	ldr	r3, [pc, #244]	; (8022cfc <etharp_input+0x108>)
 8022c06:	f240 228a 	movw	r2, #650	; 0x28a
 8022c0a:	493d      	ldr	r1, [pc, #244]	; (8022d00 <etharp_input+0x10c>)
 8022c0c:	483d      	ldr	r0, [pc, #244]	; (8022d04 <etharp_input+0x110>)
 8022c0e:	f003 f96f 	bl	8025ef0 <iprintf>
 8022c12:	e06f      	b.n	8022cf4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	685b      	ldr	r3, [r3, #4]
 8022c18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022c1a:	693b      	ldr	r3, [r7, #16]
 8022c1c:	881b      	ldrh	r3, [r3, #0]
 8022c1e:	b29b      	uxth	r3, r3
 8022c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022c24:	d10c      	bne.n	8022c40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8022c26:	693b      	ldr	r3, [r7, #16]
 8022c28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022c2a:	2b06      	cmp	r3, #6
 8022c2c:	d108      	bne.n	8022c40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022c2e:	693b      	ldr	r3, [r7, #16]
 8022c30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8022c32:	2b04      	cmp	r3, #4
 8022c34:	d104      	bne.n	8022c40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8022c36:	693b      	ldr	r3, [r7, #16]
 8022c38:	885b      	ldrh	r3, [r3, #2]
 8022c3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022c3c:	2b08      	cmp	r3, #8
 8022c3e:	d003      	beq.n	8022c48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8022c40:	6878      	ldr	r0, [r7, #4]
 8022c42:	f7f8 fd19 	bl	801b678 <pbuf_free>
    return;
 8022c46:	e055      	b.n	8022cf4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022c48:	693b      	ldr	r3, [r7, #16]
 8022c4a:	330e      	adds	r3, #14
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8022c50:	693b      	ldr	r3, [r7, #16]
 8022c52:	3318      	adds	r3, #24
 8022c54:	681b      	ldr	r3, [r3, #0]
 8022c56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022c58:	683b      	ldr	r3, [r7, #0]
 8022c5a:	3304      	adds	r3, #4
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	2b00      	cmp	r3, #0
 8022c60:	d102      	bne.n	8022c68 <etharp_input+0x74>
    for_us = 0;
 8022c62:	2300      	movs	r3, #0
 8022c64:	75fb      	strb	r3, [r7, #23]
 8022c66:	e009      	b.n	8022c7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022c68:	68ba      	ldr	r2, [r7, #8]
 8022c6a:	683b      	ldr	r3, [r7, #0]
 8022c6c:	3304      	adds	r3, #4
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	429a      	cmp	r2, r3
 8022c72:	bf0c      	ite	eq
 8022c74:	2301      	moveq	r3, #1
 8022c76:	2300      	movne	r3, #0
 8022c78:	b2db      	uxtb	r3, r3
 8022c7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	f103 0208 	add.w	r2, r3, #8
 8022c82:	7dfb      	ldrb	r3, [r7, #23]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d001      	beq.n	8022c8c <etharp_input+0x98>
 8022c88:	2301      	movs	r3, #1
 8022c8a:	e000      	b.n	8022c8e <etharp_input+0x9a>
 8022c8c:	2302      	movs	r3, #2
 8022c8e:	f107 010c 	add.w	r1, r7, #12
 8022c92:	6838      	ldr	r0, [r7, #0]
 8022c94:	f7ff fed8 	bl	8022a48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8022c98:	693b      	ldr	r3, [r7, #16]
 8022c9a:	88db      	ldrh	r3, [r3, #6]
 8022c9c:	b29b      	uxth	r3, r3
 8022c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8022ca2:	d003      	beq.n	8022cac <etharp_input+0xb8>
 8022ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022ca8:	d01e      	beq.n	8022ce8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8022caa:	e020      	b.n	8022cee <etharp_input+0xfa>
      if (for_us) {
 8022cac:	7dfb      	ldrb	r3, [r7, #23]
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	d01c      	beq.n	8022cec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8022cb2:	683b      	ldr	r3, [r7, #0]
 8022cb4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8022cb8:	693b      	ldr	r3, [r7, #16]
 8022cba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022cbe:	683b      	ldr	r3, [r7, #0]
 8022cc0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8022cc4:	683b      	ldr	r3, [r7, #0]
 8022cc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8022cc8:	693a      	ldr	r2, [r7, #16]
 8022cca:	3208      	adds	r2, #8
        etharp_raw(netif,
 8022ccc:	2102      	movs	r1, #2
 8022cce:	9103      	str	r1, [sp, #12]
 8022cd0:	f107 010c 	add.w	r1, r7, #12
 8022cd4:	9102      	str	r1, [sp, #8]
 8022cd6:	9201      	str	r2, [sp, #4]
 8022cd8:	9300      	str	r3, [sp, #0]
 8022cda:	462b      	mov	r3, r5
 8022cdc:	4622      	mov	r2, r4
 8022cde:	4601      	mov	r1, r0
 8022ce0:	6838      	ldr	r0, [r7, #0]
 8022ce2:	f000 faeb 	bl	80232bc <etharp_raw>
      break;
 8022ce6:	e001      	b.n	8022cec <etharp_input+0xf8>
      break;
 8022ce8:	bf00      	nop
 8022cea:	e000      	b.n	8022cee <etharp_input+0xfa>
      break;
 8022cec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8022cee:	6878      	ldr	r0, [r7, #4]
 8022cf0:	f7f8 fcc2 	bl	801b678 <pbuf_free>
}
 8022cf4:	3718      	adds	r7, #24
 8022cf6:	46bd      	mov	sp, r7
 8022cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8022cfa:	bf00      	nop
 8022cfc:	080296d4 	.word	0x080296d4
 8022d00:	08029824 	.word	0x08029824
 8022d04:	0802974c 	.word	0x0802974c

08022d08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b086      	sub	sp, #24
 8022d0c:	af02      	add	r7, sp, #8
 8022d0e:	60f8      	str	r0, [r7, #12]
 8022d10:	60b9      	str	r1, [r7, #8]
 8022d12:	4613      	mov	r3, r2
 8022d14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022d16:	79fa      	ldrb	r2, [r7, #7]
 8022d18:	4944      	ldr	r1, [pc, #272]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022d1a:	4613      	mov	r3, r2
 8022d1c:	005b      	lsls	r3, r3, #1
 8022d1e:	4413      	add	r3, r2
 8022d20:	00db      	lsls	r3, r3, #3
 8022d22:	440b      	add	r3, r1
 8022d24:	3314      	adds	r3, #20
 8022d26:	781b      	ldrb	r3, [r3, #0]
 8022d28:	2b01      	cmp	r3, #1
 8022d2a:	d806      	bhi.n	8022d3a <etharp_output_to_arp_index+0x32>
 8022d2c:	4b40      	ldr	r3, [pc, #256]	; (8022e30 <etharp_output_to_arp_index+0x128>)
 8022d2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8022d32:	4940      	ldr	r1, [pc, #256]	; (8022e34 <etharp_output_to_arp_index+0x12c>)
 8022d34:	4840      	ldr	r0, [pc, #256]	; (8022e38 <etharp_output_to_arp_index+0x130>)
 8022d36:	f003 f8db 	bl	8025ef0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8022d3a:	79fa      	ldrb	r2, [r7, #7]
 8022d3c:	493b      	ldr	r1, [pc, #236]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022d3e:	4613      	mov	r3, r2
 8022d40:	005b      	lsls	r3, r3, #1
 8022d42:	4413      	add	r3, r2
 8022d44:	00db      	lsls	r3, r3, #3
 8022d46:	440b      	add	r3, r1
 8022d48:	3314      	adds	r3, #20
 8022d4a:	781b      	ldrb	r3, [r3, #0]
 8022d4c:	2b02      	cmp	r3, #2
 8022d4e:	d153      	bne.n	8022df8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8022d50:	79fa      	ldrb	r2, [r7, #7]
 8022d52:	4936      	ldr	r1, [pc, #216]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022d54:	4613      	mov	r3, r2
 8022d56:	005b      	lsls	r3, r3, #1
 8022d58:	4413      	add	r3, r2
 8022d5a:	00db      	lsls	r3, r3, #3
 8022d5c:	440b      	add	r3, r1
 8022d5e:	3312      	adds	r3, #18
 8022d60:	881b      	ldrh	r3, [r3, #0]
 8022d62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8022d66:	d919      	bls.n	8022d9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8022d68:	79fa      	ldrb	r2, [r7, #7]
 8022d6a:	4613      	mov	r3, r2
 8022d6c:	005b      	lsls	r3, r3, #1
 8022d6e:	4413      	add	r3, r2
 8022d70:	00db      	lsls	r3, r3, #3
 8022d72:	4a2e      	ldr	r2, [pc, #184]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022d74:	4413      	add	r3, r2
 8022d76:	3304      	adds	r3, #4
 8022d78:	4619      	mov	r1, r3
 8022d7a:	68f8      	ldr	r0, [r7, #12]
 8022d7c:	f000 fb4c 	bl	8023418 <etharp_request>
 8022d80:	4603      	mov	r3, r0
 8022d82:	2b00      	cmp	r3, #0
 8022d84:	d138      	bne.n	8022df8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022d86:	79fa      	ldrb	r2, [r7, #7]
 8022d88:	4928      	ldr	r1, [pc, #160]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022d8a:	4613      	mov	r3, r2
 8022d8c:	005b      	lsls	r3, r3, #1
 8022d8e:	4413      	add	r3, r2
 8022d90:	00db      	lsls	r3, r3, #3
 8022d92:	440b      	add	r3, r1
 8022d94:	3314      	adds	r3, #20
 8022d96:	2203      	movs	r2, #3
 8022d98:	701a      	strb	r2, [r3, #0]
 8022d9a:	e02d      	b.n	8022df8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8022d9c:	79fa      	ldrb	r2, [r7, #7]
 8022d9e:	4923      	ldr	r1, [pc, #140]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022da0:	4613      	mov	r3, r2
 8022da2:	005b      	lsls	r3, r3, #1
 8022da4:	4413      	add	r3, r2
 8022da6:	00db      	lsls	r3, r3, #3
 8022da8:	440b      	add	r3, r1
 8022daa:	3312      	adds	r3, #18
 8022dac:	881b      	ldrh	r3, [r3, #0]
 8022dae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8022db2:	d321      	bcc.n	8022df8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022db4:	79fa      	ldrb	r2, [r7, #7]
 8022db6:	4613      	mov	r3, r2
 8022db8:	005b      	lsls	r3, r3, #1
 8022dba:	4413      	add	r3, r2
 8022dbc:	00db      	lsls	r3, r3, #3
 8022dbe:	4a1b      	ldr	r2, [pc, #108]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022dc0:	4413      	add	r3, r2
 8022dc2:	1d19      	adds	r1, r3, #4
 8022dc4:	79fa      	ldrb	r2, [r7, #7]
 8022dc6:	4613      	mov	r3, r2
 8022dc8:	005b      	lsls	r3, r3, #1
 8022dca:	4413      	add	r3, r2
 8022dcc:	00db      	lsls	r3, r3, #3
 8022dce:	3308      	adds	r3, #8
 8022dd0:	4a16      	ldr	r2, [pc, #88]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022dd2:	4413      	add	r3, r2
 8022dd4:	3304      	adds	r3, #4
 8022dd6:	461a      	mov	r2, r3
 8022dd8:	68f8      	ldr	r0, [r7, #12]
 8022dda:	f000 fafb 	bl	80233d4 <etharp_request_dst>
 8022dde:	4603      	mov	r3, r0
 8022de0:	2b00      	cmp	r3, #0
 8022de2:	d109      	bne.n	8022df8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022de4:	79fa      	ldrb	r2, [r7, #7]
 8022de6:	4911      	ldr	r1, [pc, #68]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022de8:	4613      	mov	r3, r2
 8022dea:	005b      	lsls	r3, r3, #1
 8022dec:	4413      	add	r3, r2
 8022dee:	00db      	lsls	r3, r3, #3
 8022df0:	440b      	add	r3, r1
 8022df2:	3314      	adds	r3, #20
 8022df4:	2203      	movs	r2, #3
 8022df6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022df8:	68fb      	ldr	r3, [r7, #12]
 8022dfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8022dfe:	79fa      	ldrb	r2, [r7, #7]
 8022e00:	4613      	mov	r3, r2
 8022e02:	005b      	lsls	r3, r3, #1
 8022e04:	4413      	add	r3, r2
 8022e06:	00db      	lsls	r3, r3, #3
 8022e08:	3308      	adds	r3, #8
 8022e0a:	4a08      	ldr	r2, [pc, #32]	; (8022e2c <etharp_output_to_arp_index+0x124>)
 8022e0c:	4413      	add	r3, r2
 8022e0e:	3304      	adds	r3, #4
 8022e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022e14:	9200      	str	r2, [sp, #0]
 8022e16:	460a      	mov	r2, r1
 8022e18:	68b9      	ldr	r1, [r7, #8]
 8022e1a:	68f8      	ldr	r0, [r7, #12]
 8022e1c:	f001 fe3a 	bl	8024a94 <ethernet_output>
 8022e20:	4603      	mov	r3, r0
}
 8022e22:	4618      	mov	r0, r3
 8022e24:	3710      	adds	r7, #16
 8022e26:	46bd      	mov	sp, r7
 8022e28:	bd80      	pop	{r7, pc}
 8022e2a:	bf00      	nop
 8022e2c:	20008778 	.word	0x20008778
 8022e30:	080296d4 	.word	0x080296d4
 8022e34:	08029844 	.word	0x08029844
 8022e38:	0802974c 	.word	0x0802974c

08022e3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8022e3c:	b580      	push	{r7, lr}
 8022e3e:	b08a      	sub	sp, #40	; 0x28
 8022e40:	af02      	add	r7, sp, #8
 8022e42:	60f8      	str	r0, [r7, #12]
 8022e44:	60b9      	str	r1, [r7, #8]
 8022e46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022e4c:	68fb      	ldr	r3, [r7, #12]
 8022e4e:	2b00      	cmp	r3, #0
 8022e50:	d106      	bne.n	8022e60 <etharp_output+0x24>
 8022e52:	4b73      	ldr	r3, [pc, #460]	; (8023020 <etharp_output+0x1e4>)
 8022e54:	f240 321e 	movw	r2, #798	; 0x31e
 8022e58:	4972      	ldr	r1, [pc, #456]	; (8023024 <etharp_output+0x1e8>)
 8022e5a:	4873      	ldr	r0, [pc, #460]	; (8023028 <etharp_output+0x1ec>)
 8022e5c:	f003 f848 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022e60:	68bb      	ldr	r3, [r7, #8]
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d106      	bne.n	8022e74 <etharp_output+0x38>
 8022e66:	4b6e      	ldr	r3, [pc, #440]	; (8023020 <etharp_output+0x1e4>)
 8022e68:	f240 321f 	movw	r2, #799	; 0x31f
 8022e6c:	496f      	ldr	r1, [pc, #444]	; (802302c <etharp_output+0x1f0>)
 8022e6e:	486e      	ldr	r0, [pc, #440]	; (8023028 <etharp_output+0x1ec>)
 8022e70:	f003 f83e 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d106      	bne.n	8022e88 <etharp_output+0x4c>
 8022e7a:	4b69      	ldr	r3, [pc, #420]	; (8023020 <etharp_output+0x1e4>)
 8022e7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022e80:	496b      	ldr	r1, [pc, #428]	; (8023030 <etharp_output+0x1f4>)
 8022e82:	4869      	ldr	r0, [pc, #420]	; (8023028 <etharp_output+0x1ec>)
 8022e84:	f003 f834 	bl	8025ef0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	68f9      	ldr	r1, [r7, #12]
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f000 fef8 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8022e94:	4603      	mov	r3, r0
 8022e96:	2b00      	cmp	r3, #0
 8022e98:	d002      	beq.n	8022ea0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8022e9a:	4b66      	ldr	r3, [pc, #408]	; (8023034 <etharp_output+0x1f8>)
 8022e9c:	61fb      	str	r3, [r7, #28]
 8022e9e:	e0af      	b.n	8023000 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022ea0:	687b      	ldr	r3, [r7, #4]
 8022ea2:	681b      	ldr	r3, [r3, #0]
 8022ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022ea8:	2be0      	cmp	r3, #224	; 0xe0
 8022eaa:	d118      	bne.n	8022ede <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022eac:	2301      	movs	r3, #1
 8022eae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8022eb0:	2300      	movs	r3, #0
 8022eb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022eb4:	235e      	movs	r3, #94	; 0x5e
 8022eb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	3301      	adds	r3, #1
 8022ebc:	781b      	ldrb	r3, [r3, #0]
 8022ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022ec2:	b2db      	uxtb	r3, r3
 8022ec4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	3302      	adds	r3, #2
 8022eca:	781b      	ldrb	r3, [r3, #0]
 8022ecc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022ece:	687b      	ldr	r3, [r7, #4]
 8022ed0:	3303      	adds	r3, #3
 8022ed2:	781b      	ldrb	r3, [r3, #0]
 8022ed4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8022ed6:	f107 0310 	add.w	r3, r7, #16
 8022eda:	61fb      	str	r3, [r7, #28]
 8022edc:	e090      	b.n	8023000 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022ede:	687b      	ldr	r3, [r7, #4]
 8022ee0:	681a      	ldr	r2, [r3, #0]
 8022ee2:	68fb      	ldr	r3, [r7, #12]
 8022ee4:	3304      	adds	r3, #4
 8022ee6:	681b      	ldr	r3, [r3, #0]
 8022ee8:	405a      	eors	r2, r3
 8022eea:	68fb      	ldr	r3, [r7, #12]
 8022eec:	3308      	adds	r3, #8
 8022eee:	681b      	ldr	r3, [r3, #0]
 8022ef0:	4013      	ands	r3, r2
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d012      	beq.n	8022f1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8022ef6:	687b      	ldr	r3, [r7, #4]
 8022ef8:	681b      	ldr	r3, [r3, #0]
 8022efa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022efc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022f00:	4293      	cmp	r3, r2
 8022f02:	d00b      	beq.n	8022f1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022f04:	68fb      	ldr	r3, [r7, #12]
 8022f06:	330c      	adds	r3, #12
 8022f08:	681b      	ldr	r3, [r3, #0]
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d003      	beq.n	8022f16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8022f0e:	68fb      	ldr	r3, [r7, #12]
 8022f10:	330c      	adds	r3, #12
 8022f12:	61bb      	str	r3, [r7, #24]
 8022f14:	e002      	b.n	8022f1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8022f16:	f06f 0303 	mvn.w	r3, #3
 8022f1a:	e07d      	b.n	8023018 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022f1c:	4b46      	ldr	r3, [pc, #280]	; (8023038 <etharp_output+0x1fc>)
 8022f1e:	781b      	ldrb	r3, [r3, #0]
 8022f20:	4619      	mov	r1, r3
 8022f22:	4a46      	ldr	r2, [pc, #280]	; (802303c <etharp_output+0x200>)
 8022f24:	460b      	mov	r3, r1
 8022f26:	005b      	lsls	r3, r3, #1
 8022f28:	440b      	add	r3, r1
 8022f2a:	00db      	lsls	r3, r3, #3
 8022f2c:	4413      	add	r3, r2
 8022f2e:	3314      	adds	r3, #20
 8022f30:	781b      	ldrb	r3, [r3, #0]
 8022f32:	2b01      	cmp	r3, #1
 8022f34:	d925      	bls.n	8022f82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022f36:	4b40      	ldr	r3, [pc, #256]	; (8023038 <etharp_output+0x1fc>)
 8022f38:	781b      	ldrb	r3, [r3, #0]
 8022f3a:	4619      	mov	r1, r3
 8022f3c:	4a3f      	ldr	r2, [pc, #252]	; (802303c <etharp_output+0x200>)
 8022f3e:	460b      	mov	r3, r1
 8022f40:	005b      	lsls	r3, r3, #1
 8022f42:	440b      	add	r3, r1
 8022f44:	00db      	lsls	r3, r3, #3
 8022f46:	4413      	add	r3, r2
 8022f48:	3308      	adds	r3, #8
 8022f4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022f4c:	68fa      	ldr	r2, [r7, #12]
 8022f4e:	429a      	cmp	r2, r3
 8022f50:	d117      	bne.n	8022f82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8022f52:	69bb      	ldr	r3, [r7, #24]
 8022f54:	681a      	ldr	r2, [r3, #0]
 8022f56:	4b38      	ldr	r3, [pc, #224]	; (8023038 <etharp_output+0x1fc>)
 8022f58:	781b      	ldrb	r3, [r3, #0]
 8022f5a:	4618      	mov	r0, r3
 8022f5c:	4937      	ldr	r1, [pc, #220]	; (802303c <etharp_output+0x200>)
 8022f5e:	4603      	mov	r3, r0
 8022f60:	005b      	lsls	r3, r3, #1
 8022f62:	4403      	add	r3, r0
 8022f64:	00db      	lsls	r3, r3, #3
 8022f66:	440b      	add	r3, r1
 8022f68:	3304      	adds	r3, #4
 8022f6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022f6c:	429a      	cmp	r2, r3
 8022f6e:	d108      	bne.n	8022f82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8022f70:	4b31      	ldr	r3, [pc, #196]	; (8023038 <etharp_output+0x1fc>)
 8022f72:	781b      	ldrb	r3, [r3, #0]
 8022f74:	461a      	mov	r2, r3
 8022f76:	68b9      	ldr	r1, [r7, #8]
 8022f78:	68f8      	ldr	r0, [r7, #12]
 8022f7a:	f7ff fec5 	bl	8022d08 <etharp_output_to_arp_index>
 8022f7e:	4603      	mov	r3, r0
 8022f80:	e04a      	b.n	8023018 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022f82:	2300      	movs	r3, #0
 8022f84:	75fb      	strb	r3, [r7, #23]
 8022f86:	e031      	b.n	8022fec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022f88:	7dfa      	ldrb	r2, [r7, #23]
 8022f8a:	492c      	ldr	r1, [pc, #176]	; (802303c <etharp_output+0x200>)
 8022f8c:	4613      	mov	r3, r2
 8022f8e:	005b      	lsls	r3, r3, #1
 8022f90:	4413      	add	r3, r2
 8022f92:	00db      	lsls	r3, r3, #3
 8022f94:	440b      	add	r3, r1
 8022f96:	3314      	adds	r3, #20
 8022f98:	781b      	ldrb	r3, [r3, #0]
 8022f9a:	2b01      	cmp	r3, #1
 8022f9c:	d923      	bls.n	8022fe6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8022f9e:	7dfa      	ldrb	r2, [r7, #23]
 8022fa0:	4926      	ldr	r1, [pc, #152]	; (802303c <etharp_output+0x200>)
 8022fa2:	4613      	mov	r3, r2
 8022fa4:	005b      	lsls	r3, r3, #1
 8022fa6:	4413      	add	r3, r2
 8022fa8:	00db      	lsls	r3, r3, #3
 8022faa:	440b      	add	r3, r1
 8022fac:	3308      	adds	r3, #8
 8022fae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022fb0:	68fa      	ldr	r2, [r7, #12]
 8022fb2:	429a      	cmp	r2, r3
 8022fb4:	d117      	bne.n	8022fe6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8022fb6:	69bb      	ldr	r3, [r7, #24]
 8022fb8:	6819      	ldr	r1, [r3, #0]
 8022fba:	7dfa      	ldrb	r2, [r7, #23]
 8022fbc:	481f      	ldr	r0, [pc, #124]	; (802303c <etharp_output+0x200>)
 8022fbe:	4613      	mov	r3, r2
 8022fc0:	005b      	lsls	r3, r3, #1
 8022fc2:	4413      	add	r3, r2
 8022fc4:	00db      	lsls	r3, r3, #3
 8022fc6:	4403      	add	r3, r0
 8022fc8:	3304      	adds	r3, #4
 8022fca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8022fcc:	4299      	cmp	r1, r3
 8022fce:	d10a      	bne.n	8022fe6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022fd0:	4a19      	ldr	r2, [pc, #100]	; (8023038 <etharp_output+0x1fc>)
 8022fd2:	7dfb      	ldrb	r3, [r7, #23]
 8022fd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8022fd6:	7dfb      	ldrb	r3, [r7, #23]
 8022fd8:	461a      	mov	r2, r3
 8022fda:	68b9      	ldr	r1, [r7, #8]
 8022fdc:	68f8      	ldr	r0, [r7, #12]
 8022fde:	f7ff fe93 	bl	8022d08 <etharp_output_to_arp_index>
 8022fe2:	4603      	mov	r3, r0
 8022fe4:	e018      	b.n	8023018 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022fe6:	7dfb      	ldrb	r3, [r7, #23]
 8022fe8:	3301      	adds	r3, #1
 8022fea:	75fb      	strb	r3, [r7, #23]
 8022fec:	7dfb      	ldrb	r3, [r7, #23]
 8022fee:	2b09      	cmp	r3, #9
 8022ff0:	d9ca      	bls.n	8022f88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8022ff2:	68ba      	ldr	r2, [r7, #8]
 8022ff4:	69b9      	ldr	r1, [r7, #24]
 8022ff6:	68f8      	ldr	r0, [r7, #12]
 8022ff8:	f000 f822 	bl	8023040 <etharp_query>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	e00b      	b.n	8023018 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023000:	68fb      	ldr	r3, [r7, #12]
 8023002:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8023006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802300a:	9300      	str	r3, [sp, #0]
 802300c:	69fb      	ldr	r3, [r7, #28]
 802300e:	68b9      	ldr	r1, [r7, #8]
 8023010:	68f8      	ldr	r0, [r7, #12]
 8023012:	f001 fd3f 	bl	8024a94 <ethernet_output>
 8023016:	4603      	mov	r3, r0
}
 8023018:	4618      	mov	r0, r3
 802301a:	3720      	adds	r7, #32
 802301c:	46bd      	mov	sp, r7
 802301e:	bd80      	pop	{r7, pc}
 8023020:	080296d4 	.word	0x080296d4
 8023024:	08029824 	.word	0x08029824
 8023028:	0802974c 	.word	0x0802974c
 802302c:	08029874 	.word	0x08029874
 8023030:	08029814 	.word	0x08029814
 8023034:	0802b99c 	.word	0x0802b99c
 8023038:	20008868 	.word	0x20008868
 802303c:	20008778 	.word	0x20008778

08023040 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8023040:	b580      	push	{r7, lr}
 8023042:	b08c      	sub	sp, #48	; 0x30
 8023044:	af02      	add	r7, sp, #8
 8023046:	60f8      	str	r0, [r7, #12]
 8023048:	60b9      	str	r1, [r7, #8]
 802304a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802304c:	68fb      	ldr	r3, [r7, #12]
 802304e:	3326      	adds	r3, #38	; 0x26
 8023050:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8023052:	23ff      	movs	r3, #255	; 0xff
 8023054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8023058:	2300      	movs	r3, #0
 802305a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802305c:	68bb      	ldr	r3, [r7, #8]
 802305e:	681b      	ldr	r3, [r3, #0]
 8023060:	68f9      	ldr	r1, [r7, #12]
 8023062:	4618      	mov	r0, r3
 8023064:	f000 fe0e 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8023068:	4603      	mov	r3, r0
 802306a:	2b00      	cmp	r3, #0
 802306c:	d10c      	bne.n	8023088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802306e:	68bb      	ldr	r3, [r7, #8]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023076:	2be0      	cmp	r3, #224	; 0xe0
 8023078:	d006      	beq.n	8023088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802307a:	68bb      	ldr	r3, [r7, #8]
 802307c:	2b00      	cmp	r3, #0
 802307e:	d003      	beq.n	8023088 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8023080:	68bb      	ldr	r3, [r7, #8]
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	2b00      	cmp	r3, #0
 8023086:	d102      	bne.n	802308e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023088:	f06f 030f 	mvn.w	r3, #15
 802308c:	e101      	b.n	8023292 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802308e:	68fa      	ldr	r2, [r7, #12]
 8023090:	2101      	movs	r1, #1
 8023092:	68b8      	ldr	r0, [r7, #8]
 8023094:	f7ff fb60 	bl	8022758 <etharp_find_entry>
 8023098:	4603      	mov	r3, r0
 802309a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802309c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80230a0:	2b00      	cmp	r3, #0
 80230a2:	da02      	bge.n	80230aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80230a4:	8a7b      	ldrh	r3, [r7, #18]
 80230a6:	b25b      	sxtb	r3, r3
 80230a8:	e0f3      	b.n	8023292 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80230aa:	8a7b      	ldrh	r3, [r7, #18]
 80230ac:	2b7e      	cmp	r3, #126	; 0x7e
 80230ae:	d906      	bls.n	80230be <etharp_query+0x7e>
 80230b0:	4b7a      	ldr	r3, [pc, #488]	; (802329c <etharp_query+0x25c>)
 80230b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80230b6:	497a      	ldr	r1, [pc, #488]	; (80232a0 <etharp_query+0x260>)
 80230b8:	487a      	ldr	r0, [pc, #488]	; (80232a4 <etharp_query+0x264>)
 80230ba:	f002 ff19 	bl	8025ef0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80230be:	8a7b      	ldrh	r3, [r7, #18]
 80230c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80230c2:	7c7a      	ldrb	r2, [r7, #17]
 80230c4:	4978      	ldr	r1, [pc, #480]	; (80232a8 <etharp_query+0x268>)
 80230c6:	4613      	mov	r3, r2
 80230c8:	005b      	lsls	r3, r3, #1
 80230ca:	4413      	add	r3, r2
 80230cc:	00db      	lsls	r3, r3, #3
 80230ce:	440b      	add	r3, r1
 80230d0:	3314      	adds	r3, #20
 80230d2:	781b      	ldrb	r3, [r3, #0]
 80230d4:	2b00      	cmp	r3, #0
 80230d6:	d115      	bne.n	8023104 <etharp_query+0xc4>
    is_new_entry = 1;
 80230d8:	2301      	movs	r3, #1
 80230da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80230dc:	7c7a      	ldrb	r2, [r7, #17]
 80230de:	4972      	ldr	r1, [pc, #456]	; (80232a8 <etharp_query+0x268>)
 80230e0:	4613      	mov	r3, r2
 80230e2:	005b      	lsls	r3, r3, #1
 80230e4:	4413      	add	r3, r2
 80230e6:	00db      	lsls	r3, r3, #3
 80230e8:	440b      	add	r3, r1
 80230ea:	3314      	adds	r3, #20
 80230ec:	2201      	movs	r2, #1
 80230ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80230f0:	7c7a      	ldrb	r2, [r7, #17]
 80230f2:	496d      	ldr	r1, [pc, #436]	; (80232a8 <etharp_query+0x268>)
 80230f4:	4613      	mov	r3, r2
 80230f6:	005b      	lsls	r3, r3, #1
 80230f8:	4413      	add	r3, r2
 80230fa:	00db      	lsls	r3, r3, #3
 80230fc:	440b      	add	r3, r1
 80230fe:	3308      	adds	r3, #8
 8023100:	68fa      	ldr	r2, [r7, #12]
 8023102:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8023104:	7c7a      	ldrb	r2, [r7, #17]
 8023106:	4968      	ldr	r1, [pc, #416]	; (80232a8 <etharp_query+0x268>)
 8023108:	4613      	mov	r3, r2
 802310a:	005b      	lsls	r3, r3, #1
 802310c:	4413      	add	r3, r2
 802310e:	00db      	lsls	r3, r3, #3
 8023110:	440b      	add	r3, r1
 8023112:	3314      	adds	r3, #20
 8023114:	781b      	ldrb	r3, [r3, #0]
 8023116:	2b01      	cmp	r3, #1
 8023118:	d011      	beq.n	802313e <etharp_query+0xfe>
 802311a:	7c7a      	ldrb	r2, [r7, #17]
 802311c:	4962      	ldr	r1, [pc, #392]	; (80232a8 <etharp_query+0x268>)
 802311e:	4613      	mov	r3, r2
 8023120:	005b      	lsls	r3, r3, #1
 8023122:	4413      	add	r3, r2
 8023124:	00db      	lsls	r3, r3, #3
 8023126:	440b      	add	r3, r1
 8023128:	3314      	adds	r3, #20
 802312a:	781b      	ldrb	r3, [r3, #0]
 802312c:	2b01      	cmp	r3, #1
 802312e:	d806      	bhi.n	802313e <etharp_query+0xfe>
 8023130:	4b5a      	ldr	r3, [pc, #360]	; (802329c <etharp_query+0x25c>)
 8023132:	f240 32cd 	movw	r2, #973	; 0x3cd
 8023136:	495d      	ldr	r1, [pc, #372]	; (80232ac <etharp_query+0x26c>)
 8023138:	485a      	ldr	r0, [pc, #360]	; (80232a4 <etharp_query+0x264>)
 802313a:	f002 fed9 	bl	8025ef0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 802313e:	6a3b      	ldr	r3, [r7, #32]
 8023140:	2b00      	cmp	r3, #0
 8023142:	d102      	bne.n	802314a <etharp_query+0x10a>
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	2b00      	cmp	r3, #0
 8023148:	d10c      	bne.n	8023164 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802314a:	68b9      	ldr	r1, [r7, #8]
 802314c:	68f8      	ldr	r0, [r7, #12]
 802314e:	f000 f963 	bl	8023418 <etharp_request>
 8023152:	4603      	mov	r3, r0
 8023154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	2b00      	cmp	r3, #0
 802315c:	d102      	bne.n	8023164 <etharp_query+0x124>
      return result;
 802315e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8023162:	e096      	b.n	8023292 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8023164:	687b      	ldr	r3, [r7, #4]
 8023166:	2b00      	cmp	r3, #0
 8023168:	d106      	bne.n	8023178 <etharp_query+0x138>
 802316a:	4b4c      	ldr	r3, [pc, #304]	; (802329c <etharp_query+0x25c>)
 802316c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8023170:	494f      	ldr	r1, [pc, #316]	; (80232b0 <etharp_query+0x270>)
 8023172:	484c      	ldr	r0, [pc, #304]	; (80232a4 <etharp_query+0x264>)
 8023174:	f002 febc 	bl	8025ef0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023178:	7c7a      	ldrb	r2, [r7, #17]
 802317a:	494b      	ldr	r1, [pc, #300]	; (80232a8 <etharp_query+0x268>)
 802317c:	4613      	mov	r3, r2
 802317e:	005b      	lsls	r3, r3, #1
 8023180:	4413      	add	r3, r2
 8023182:	00db      	lsls	r3, r3, #3
 8023184:	440b      	add	r3, r1
 8023186:	3314      	adds	r3, #20
 8023188:	781b      	ldrb	r3, [r3, #0]
 802318a:	2b01      	cmp	r3, #1
 802318c:	d917      	bls.n	80231be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802318e:	4a49      	ldr	r2, [pc, #292]	; (80232b4 <etharp_query+0x274>)
 8023190:	7c7b      	ldrb	r3, [r7, #17]
 8023192:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023194:	7c7a      	ldrb	r2, [r7, #17]
 8023196:	4613      	mov	r3, r2
 8023198:	005b      	lsls	r3, r3, #1
 802319a:	4413      	add	r3, r2
 802319c:	00db      	lsls	r3, r3, #3
 802319e:	3308      	adds	r3, #8
 80231a0:	4a41      	ldr	r2, [pc, #260]	; (80232a8 <etharp_query+0x268>)
 80231a2:	4413      	add	r3, r2
 80231a4:	3304      	adds	r3, #4
 80231a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80231aa:	9200      	str	r2, [sp, #0]
 80231ac:	697a      	ldr	r2, [r7, #20]
 80231ae:	6879      	ldr	r1, [r7, #4]
 80231b0:	68f8      	ldr	r0, [r7, #12]
 80231b2:	f001 fc6f 	bl	8024a94 <ethernet_output>
 80231b6:	4603      	mov	r3, r0
 80231b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80231bc:	e067      	b.n	802328e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80231be:	7c7a      	ldrb	r2, [r7, #17]
 80231c0:	4939      	ldr	r1, [pc, #228]	; (80232a8 <etharp_query+0x268>)
 80231c2:	4613      	mov	r3, r2
 80231c4:	005b      	lsls	r3, r3, #1
 80231c6:	4413      	add	r3, r2
 80231c8:	00db      	lsls	r3, r3, #3
 80231ca:	440b      	add	r3, r1
 80231cc:	3314      	adds	r3, #20
 80231ce:	781b      	ldrb	r3, [r3, #0]
 80231d0:	2b01      	cmp	r3, #1
 80231d2:	d15c      	bne.n	802328e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80231d4:	2300      	movs	r3, #0
 80231d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80231d8:	687b      	ldr	r3, [r7, #4]
 80231da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80231dc:	e01c      	b.n	8023218 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80231de:	69fb      	ldr	r3, [r7, #28]
 80231e0:	895a      	ldrh	r2, [r3, #10]
 80231e2:	69fb      	ldr	r3, [r7, #28]
 80231e4:	891b      	ldrh	r3, [r3, #8]
 80231e6:	429a      	cmp	r2, r3
 80231e8:	d10a      	bne.n	8023200 <etharp_query+0x1c0>
 80231ea:	69fb      	ldr	r3, [r7, #28]
 80231ec:	681b      	ldr	r3, [r3, #0]
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d006      	beq.n	8023200 <etharp_query+0x1c0>
 80231f2:	4b2a      	ldr	r3, [pc, #168]	; (802329c <etharp_query+0x25c>)
 80231f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80231f8:	492f      	ldr	r1, [pc, #188]	; (80232b8 <etharp_query+0x278>)
 80231fa:	482a      	ldr	r0, [pc, #168]	; (80232a4 <etharp_query+0x264>)
 80231fc:	f002 fe78 	bl	8025ef0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8023200:	69fb      	ldr	r3, [r7, #28]
 8023202:	7b1b      	ldrb	r3, [r3, #12]
 8023204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023208:	2b00      	cmp	r3, #0
 802320a:	d002      	beq.n	8023212 <etharp_query+0x1d2>
        copy_needed = 1;
 802320c:	2301      	movs	r3, #1
 802320e:	61bb      	str	r3, [r7, #24]
        break;
 8023210:	e005      	b.n	802321e <etharp_query+0x1de>
      }
      p = p->next;
 8023212:	69fb      	ldr	r3, [r7, #28]
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023218:	69fb      	ldr	r3, [r7, #28]
 802321a:	2b00      	cmp	r3, #0
 802321c:	d1df      	bne.n	80231de <etharp_query+0x19e>
    }
    if (copy_needed) {
 802321e:	69bb      	ldr	r3, [r7, #24]
 8023220:	2b00      	cmp	r3, #0
 8023222:	d007      	beq.n	8023234 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8023224:	687a      	ldr	r2, [r7, #4]
 8023226:	f44f 7120 	mov.w	r1, #640	; 0x280
 802322a:	200e      	movs	r0, #14
 802322c:	f7f8 fc8c 	bl	801bb48 <pbuf_clone>
 8023230:	61f8      	str	r0, [r7, #28]
 8023232:	e004      	b.n	802323e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8023238:	69f8      	ldr	r0, [r7, #28]
 802323a:	f7f8 fac3 	bl	801b7c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 802323e:	69fb      	ldr	r3, [r7, #28]
 8023240:	2b00      	cmp	r3, #0
 8023242:	d021      	beq.n	8023288 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8023244:	7c7a      	ldrb	r2, [r7, #17]
 8023246:	4918      	ldr	r1, [pc, #96]	; (80232a8 <etharp_query+0x268>)
 8023248:	4613      	mov	r3, r2
 802324a:	005b      	lsls	r3, r3, #1
 802324c:	4413      	add	r3, r2
 802324e:	00db      	lsls	r3, r3, #3
 8023250:	440b      	add	r3, r1
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	2b00      	cmp	r3, #0
 8023256:	d00a      	beq.n	802326e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8023258:	7c7a      	ldrb	r2, [r7, #17]
 802325a:	4913      	ldr	r1, [pc, #76]	; (80232a8 <etharp_query+0x268>)
 802325c:	4613      	mov	r3, r2
 802325e:	005b      	lsls	r3, r3, #1
 8023260:	4413      	add	r3, r2
 8023262:	00db      	lsls	r3, r3, #3
 8023264:	440b      	add	r3, r1
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	4618      	mov	r0, r3
 802326a:	f7f8 fa05 	bl	801b678 <pbuf_free>
      }
      arp_table[i].q = p;
 802326e:	7c7a      	ldrb	r2, [r7, #17]
 8023270:	490d      	ldr	r1, [pc, #52]	; (80232a8 <etharp_query+0x268>)
 8023272:	4613      	mov	r3, r2
 8023274:	005b      	lsls	r3, r3, #1
 8023276:	4413      	add	r3, r2
 8023278:	00db      	lsls	r3, r3, #3
 802327a:	440b      	add	r3, r1
 802327c:	69fa      	ldr	r2, [r7, #28]
 802327e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8023280:	2300      	movs	r3, #0
 8023282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023286:	e002      	b.n	802328e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8023288:	23ff      	movs	r3, #255	; 0xff
 802328a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802328e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023292:	4618      	mov	r0, r3
 8023294:	3728      	adds	r7, #40	; 0x28
 8023296:	46bd      	mov	sp, r7
 8023298:	bd80      	pop	{r7, pc}
 802329a:	bf00      	nop
 802329c:	080296d4 	.word	0x080296d4
 80232a0:	08029880 	.word	0x08029880
 80232a4:	0802974c 	.word	0x0802974c
 80232a8:	20008778 	.word	0x20008778
 80232ac:	08029890 	.word	0x08029890
 80232b0:	08029874 	.word	0x08029874
 80232b4:	20008868 	.word	0x20008868
 80232b8:	080298b8 	.word	0x080298b8

080232bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80232bc:	b580      	push	{r7, lr}
 80232be:	b08a      	sub	sp, #40	; 0x28
 80232c0:	af02      	add	r7, sp, #8
 80232c2:	60f8      	str	r0, [r7, #12]
 80232c4:	60b9      	str	r1, [r7, #8]
 80232c6:	607a      	str	r2, [r7, #4]
 80232c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80232ca:	2300      	movs	r3, #0
 80232cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80232ce:	68fb      	ldr	r3, [r7, #12]
 80232d0:	2b00      	cmp	r3, #0
 80232d2:	d106      	bne.n	80232e2 <etharp_raw+0x26>
 80232d4:	4b3a      	ldr	r3, [pc, #232]	; (80233c0 <etharp_raw+0x104>)
 80232d6:	f240 4257 	movw	r2, #1111	; 0x457
 80232da:	493a      	ldr	r1, [pc, #232]	; (80233c4 <etharp_raw+0x108>)
 80232dc:	483a      	ldr	r0, [pc, #232]	; (80233c8 <etharp_raw+0x10c>)
 80232de:	f002 fe07 	bl	8025ef0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80232e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80232e6:	211c      	movs	r1, #28
 80232e8:	200e      	movs	r0, #14
 80232ea:	f7f7 fee1 	bl	801b0b0 <pbuf_alloc>
 80232ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80232f0:	69bb      	ldr	r3, [r7, #24]
 80232f2:	2b00      	cmp	r3, #0
 80232f4:	d102      	bne.n	80232fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80232f6:	f04f 33ff 	mov.w	r3, #4294967295
 80232fa:	e05d      	b.n	80233b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80232fc:	69bb      	ldr	r3, [r7, #24]
 80232fe:	895b      	ldrh	r3, [r3, #10]
 8023300:	2b1b      	cmp	r3, #27
 8023302:	d806      	bhi.n	8023312 <etharp_raw+0x56>
 8023304:	4b2e      	ldr	r3, [pc, #184]	; (80233c0 <etharp_raw+0x104>)
 8023306:	f240 4262 	movw	r2, #1122	; 0x462
 802330a:	4930      	ldr	r1, [pc, #192]	; (80233cc <etharp_raw+0x110>)
 802330c:	482e      	ldr	r0, [pc, #184]	; (80233c8 <etharp_raw+0x10c>)
 802330e:	f002 fdef 	bl	8025ef0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8023312:	69bb      	ldr	r3, [r7, #24]
 8023314:	685b      	ldr	r3, [r3, #4]
 8023316:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8023318:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802331a:	4618      	mov	r0, r3
 802331c:	f7f6 fe00 	bl	8019f20 <lwip_htons>
 8023320:	4603      	mov	r3, r0
 8023322:	461a      	mov	r2, r3
 8023324:	697b      	ldr	r3, [r7, #20]
 8023326:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023328:	68fb      	ldr	r3, [r7, #12]
 802332a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802332e:	2b06      	cmp	r3, #6
 8023330:	d006      	beq.n	8023340 <etharp_raw+0x84>
 8023332:	4b23      	ldr	r3, [pc, #140]	; (80233c0 <etharp_raw+0x104>)
 8023334:	f240 4269 	movw	r2, #1129	; 0x469
 8023338:	4925      	ldr	r1, [pc, #148]	; (80233d0 <etharp_raw+0x114>)
 802333a:	4823      	ldr	r0, [pc, #140]	; (80233c8 <etharp_raw+0x10c>)
 802333c:	f002 fdd8 	bl	8025ef0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023340:	697b      	ldr	r3, [r7, #20]
 8023342:	3308      	adds	r3, #8
 8023344:	2206      	movs	r2, #6
 8023346:	6839      	ldr	r1, [r7, #0]
 8023348:	4618      	mov	r0, r3
 802334a:	f002 fa23 	bl	8025794 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802334e:	697b      	ldr	r3, [r7, #20]
 8023350:	3312      	adds	r3, #18
 8023352:	2206      	movs	r2, #6
 8023354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023356:	4618      	mov	r0, r3
 8023358:	f002 fa1c 	bl	8025794 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802335c:	697b      	ldr	r3, [r7, #20]
 802335e:	330e      	adds	r3, #14
 8023360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023362:	6812      	ldr	r2, [r2, #0]
 8023364:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023366:	697b      	ldr	r3, [r7, #20]
 8023368:	3318      	adds	r3, #24
 802336a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802336c:	6812      	ldr	r2, [r2, #0]
 802336e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023370:	697b      	ldr	r3, [r7, #20]
 8023372:	2200      	movs	r2, #0
 8023374:	701a      	strb	r2, [r3, #0]
 8023376:	2200      	movs	r2, #0
 8023378:	f042 0201 	orr.w	r2, r2, #1
 802337c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802337e:	697b      	ldr	r3, [r7, #20]
 8023380:	2200      	movs	r2, #0
 8023382:	f042 0208 	orr.w	r2, r2, #8
 8023386:	709a      	strb	r2, [r3, #2]
 8023388:	2200      	movs	r2, #0
 802338a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802338c:	697b      	ldr	r3, [r7, #20]
 802338e:	2206      	movs	r2, #6
 8023390:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023392:	697b      	ldr	r3, [r7, #20]
 8023394:	2204      	movs	r2, #4
 8023396:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023398:	f640 0306 	movw	r3, #2054	; 0x806
 802339c:	9300      	str	r3, [sp, #0]
 802339e:	687b      	ldr	r3, [r7, #4]
 80233a0:	68ba      	ldr	r2, [r7, #8]
 80233a2:	69b9      	ldr	r1, [r7, #24]
 80233a4:	68f8      	ldr	r0, [r7, #12]
 80233a6:	f001 fb75 	bl	8024a94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80233aa:	69b8      	ldr	r0, [r7, #24]
 80233ac:	f7f8 f964 	bl	801b678 <pbuf_free>
  p = NULL;
 80233b0:	2300      	movs	r3, #0
 80233b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80233b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80233b8:	4618      	mov	r0, r3
 80233ba:	3720      	adds	r7, #32
 80233bc:	46bd      	mov	sp, r7
 80233be:	bd80      	pop	{r7, pc}
 80233c0:	080296d4 	.word	0x080296d4
 80233c4:	08029824 	.word	0x08029824
 80233c8:	0802974c 	.word	0x0802974c
 80233cc:	080298d4 	.word	0x080298d4
 80233d0:	08029908 	.word	0x08029908

080233d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80233d4:	b580      	push	{r7, lr}
 80233d6:	b088      	sub	sp, #32
 80233d8:	af04      	add	r7, sp, #16
 80233da:	60f8      	str	r0, [r7, #12]
 80233dc:	60b9      	str	r1, [r7, #8]
 80233de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80233e0:	68fb      	ldr	r3, [r7, #12]
 80233e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80233e6:	68fb      	ldr	r3, [r7, #12]
 80233e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80233ec:	68fb      	ldr	r3, [r7, #12]
 80233ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80233f0:	2201      	movs	r2, #1
 80233f2:	9203      	str	r2, [sp, #12]
 80233f4:	68ba      	ldr	r2, [r7, #8]
 80233f6:	9202      	str	r2, [sp, #8]
 80233f8:	4a06      	ldr	r2, [pc, #24]	; (8023414 <etharp_request_dst+0x40>)
 80233fa:	9201      	str	r2, [sp, #4]
 80233fc:	9300      	str	r3, [sp, #0]
 80233fe:	4603      	mov	r3, r0
 8023400:	687a      	ldr	r2, [r7, #4]
 8023402:	68f8      	ldr	r0, [r7, #12]
 8023404:	f7ff ff5a 	bl	80232bc <etharp_raw>
 8023408:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802340a:	4618      	mov	r0, r3
 802340c:	3710      	adds	r7, #16
 802340e:	46bd      	mov	sp, r7
 8023410:	bd80      	pop	{r7, pc}
 8023412:	bf00      	nop
 8023414:	0802b9a4 	.word	0x0802b9a4

08023418 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023418:	b580      	push	{r7, lr}
 802341a:	b082      	sub	sp, #8
 802341c:	af00      	add	r7, sp, #0
 802341e:	6078      	str	r0, [r7, #4]
 8023420:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8023422:	4a05      	ldr	r2, [pc, #20]	; (8023438 <etharp_request+0x20>)
 8023424:	6839      	ldr	r1, [r7, #0]
 8023426:	6878      	ldr	r0, [r7, #4]
 8023428:	f7ff ffd4 	bl	80233d4 <etharp_request_dst>
 802342c:	4603      	mov	r3, r0
}
 802342e:	4618      	mov	r0, r3
 8023430:	3708      	adds	r7, #8
 8023432:	46bd      	mov	sp, r7
 8023434:	bd80      	pop	{r7, pc}
 8023436:	bf00      	nop
 8023438:	0802b99c 	.word	0x0802b99c

0802343c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 802343c:	b580      	push	{r7, lr}
 802343e:	b08e      	sub	sp, #56	; 0x38
 8023440:	af04      	add	r7, sp, #16
 8023442:	6078      	str	r0, [r7, #4]
 8023444:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8023446:	4b79      	ldr	r3, [pc, #484]	; (802362c <icmp_input+0x1f0>)
 8023448:	689b      	ldr	r3, [r3, #8]
 802344a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802344e:	781b      	ldrb	r3, [r3, #0]
 8023450:	f003 030f 	and.w	r3, r3, #15
 8023454:	b2db      	uxtb	r3, r3
 8023456:	009b      	lsls	r3, r3, #2
 8023458:	b2db      	uxtb	r3, r3
 802345a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802345c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802345e:	2b13      	cmp	r3, #19
 8023460:	f240 80cd 	bls.w	80235fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8023464:	687b      	ldr	r3, [r7, #4]
 8023466:	895b      	ldrh	r3, [r3, #10]
 8023468:	2b03      	cmp	r3, #3
 802346a:	f240 80ca 	bls.w	8023602 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802346e:	687b      	ldr	r3, [r7, #4]
 8023470:	685b      	ldr	r3, [r3, #4]
 8023472:	781b      	ldrb	r3, [r3, #0]
 8023474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8023478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802347c:	2b00      	cmp	r3, #0
 802347e:	f000 80b7 	beq.w	80235f0 <icmp_input+0x1b4>
 8023482:	2b08      	cmp	r3, #8
 8023484:	f040 80b7 	bne.w	80235f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8023488:	4b69      	ldr	r3, [pc, #420]	; (8023630 <icmp_input+0x1f4>)
 802348a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802348c:	4b67      	ldr	r3, [pc, #412]	; (802362c <icmp_input+0x1f0>)
 802348e:	695b      	ldr	r3, [r3, #20]
 8023490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023494:	2be0      	cmp	r3, #224	; 0xe0
 8023496:	f000 80bb 	beq.w	8023610 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802349a:	4b64      	ldr	r3, [pc, #400]	; (802362c <icmp_input+0x1f0>)
 802349c:	695b      	ldr	r3, [r3, #20]
 802349e:	4a63      	ldr	r2, [pc, #396]	; (802362c <icmp_input+0x1f0>)
 80234a0:	6812      	ldr	r2, [r2, #0]
 80234a2:	4611      	mov	r1, r2
 80234a4:	4618      	mov	r0, r3
 80234a6:	f000 fbed 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 80234aa:	4603      	mov	r3, r0
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	f040 80b1 	bne.w	8023614 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80234b2:	687b      	ldr	r3, [r7, #4]
 80234b4:	891b      	ldrh	r3, [r3, #8]
 80234b6:	2b07      	cmp	r3, #7
 80234b8:	f240 80a5 	bls.w	8023606 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80234bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80234be:	330e      	adds	r3, #14
 80234c0:	4619      	mov	r1, r3
 80234c2:	6878      	ldr	r0, [r7, #4]
 80234c4:	f7f8 f842 	bl	801b54c <pbuf_add_header>
 80234c8:	4603      	mov	r3, r0
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d04b      	beq.n	8023566 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	891a      	ldrh	r2, [r3, #8]
 80234d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80234d4:	4413      	add	r3, r2
 80234d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	891b      	ldrh	r3, [r3, #8]
 80234dc:	8b7a      	ldrh	r2, [r7, #26]
 80234de:	429a      	cmp	r2, r3
 80234e0:	f0c0 809a 	bcc.w	8023618 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80234e4:	8b7b      	ldrh	r3, [r7, #26]
 80234e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80234ea:	4619      	mov	r1, r3
 80234ec:	200e      	movs	r0, #14
 80234ee:	f7f7 fddf 	bl	801b0b0 <pbuf_alloc>
 80234f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80234f4:	697b      	ldr	r3, [r7, #20]
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	f000 8090 	beq.w	802361c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80234fc:	697b      	ldr	r3, [r7, #20]
 80234fe:	895b      	ldrh	r3, [r3, #10]
 8023500:	461a      	mov	r2, r3
 8023502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023504:	3308      	adds	r3, #8
 8023506:	429a      	cmp	r2, r3
 8023508:	d203      	bcs.n	8023512 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 802350a:	6978      	ldr	r0, [r7, #20]
 802350c:	f7f8 f8b4 	bl	801b678 <pbuf_free>
          goto icmperr;
 8023510:	e085      	b.n	802361e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8023512:	697b      	ldr	r3, [r7, #20]
 8023514:	685b      	ldr	r3, [r3, #4]
 8023516:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8023518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802351a:	4618      	mov	r0, r3
 802351c:	f002 f93a 	bl	8025794 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8023520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023522:	4619      	mov	r1, r3
 8023524:	6978      	ldr	r0, [r7, #20]
 8023526:	f7f8 f821 	bl	801b56c <pbuf_remove_header>
 802352a:	4603      	mov	r3, r0
 802352c:	2b00      	cmp	r3, #0
 802352e:	d009      	beq.n	8023544 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8023530:	4b40      	ldr	r3, [pc, #256]	; (8023634 <icmp_input+0x1f8>)
 8023532:	22b6      	movs	r2, #182	; 0xb6
 8023534:	4940      	ldr	r1, [pc, #256]	; (8023638 <icmp_input+0x1fc>)
 8023536:	4841      	ldr	r0, [pc, #260]	; (802363c <icmp_input+0x200>)
 8023538:	f002 fcda 	bl	8025ef0 <iprintf>
          pbuf_free(r);
 802353c:	6978      	ldr	r0, [r7, #20]
 802353e:	f7f8 f89b 	bl	801b678 <pbuf_free>
          goto icmperr;
 8023542:	e06c      	b.n	802361e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8023544:	6879      	ldr	r1, [r7, #4]
 8023546:	6978      	ldr	r0, [r7, #20]
 8023548:	f7f8 f9ba 	bl	801b8c0 <pbuf_copy>
 802354c:	4603      	mov	r3, r0
 802354e:	2b00      	cmp	r3, #0
 8023550:	d003      	beq.n	802355a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8023552:	6978      	ldr	r0, [r7, #20]
 8023554:	f7f8 f890 	bl	801b678 <pbuf_free>
          goto icmperr;
 8023558:	e061      	b.n	802361e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802355a:	6878      	ldr	r0, [r7, #4]
 802355c:	f7f8 f88c 	bl	801b678 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8023560:	697b      	ldr	r3, [r7, #20]
 8023562:	607b      	str	r3, [r7, #4]
 8023564:	e00f      	b.n	8023586 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8023566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023568:	330e      	adds	r3, #14
 802356a:	4619      	mov	r1, r3
 802356c:	6878      	ldr	r0, [r7, #4]
 802356e:	f7f7 fffd 	bl	801b56c <pbuf_remove_header>
 8023572:	4603      	mov	r3, r0
 8023574:	2b00      	cmp	r3, #0
 8023576:	d006      	beq.n	8023586 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8023578:	4b2e      	ldr	r3, [pc, #184]	; (8023634 <icmp_input+0x1f8>)
 802357a:	22c7      	movs	r2, #199	; 0xc7
 802357c:	4930      	ldr	r1, [pc, #192]	; (8023640 <icmp_input+0x204>)
 802357e:	482f      	ldr	r0, [pc, #188]	; (802363c <icmp_input+0x200>)
 8023580:	f002 fcb6 	bl	8025ef0 <iprintf>
          goto icmperr;
 8023584:	e04b      	b.n	802361e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8023586:	687b      	ldr	r3, [r7, #4]
 8023588:	685b      	ldr	r3, [r3, #4]
 802358a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 802358c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802358e:	4619      	mov	r1, r3
 8023590:	6878      	ldr	r0, [r7, #4]
 8023592:	f7f7 ffdb 	bl	801b54c <pbuf_add_header>
 8023596:	4603      	mov	r3, r0
 8023598:	2b00      	cmp	r3, #0
 802359a:	d12b      	bne.n	80235f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	685b      	ldr	r3, [r3, #4]
 80235a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80235a2:	69fb      	ldr	r3, [r7, #28]
 80235a4:	681a      	ldr	r2, [r3, #0]
 80235a6:	68fb      	ldr	r3, [r7, #12]
 80235a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80235aa:	4b20      	ldr	r3, [pc, #128]	; (802362c <icmp_input+0x1f0>)
 80235ac:	691a      	ldr	r2, [r3, #16]
 80235ae:	68fb      	ldr	r3, [r7, #12]
 80235b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80235b2:	693b      	ldr	r3, [r7, #16]
 80235b4:	2200      	movs	r2, #0
 80235b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80235b8:	693b      	ldr	r3, [r7, #16]
 80235ba:	2200      	movs	r2, #0
 80235bc:	709a      	strb	r2, [r3, #2]
 80235be:	2200      	movs	r2, #0
 80235c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80235c2:	68fb      	ldr	r3, [r7, #12]
 80235c4:	22ff      	movs	r2, #255	; 0xff
 80235c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80235c8:	68fb      	ldr	r3, [r7, #12]
 80235ca:	2200      	movs	r2, #0
 80235cc:	729a      	strb	r2, [r3, #10]
 80235ce:	2200      	movs	r2, #0
 80235d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80235d2:	683b      	ldr	r3, [r7, #0]
 80235d4:	9302      	str	r3, [sp, #8]
 80235d6:	2301      	movs	r3, #1
 80235d8:	9301      	str	r3, [sp, #4]
 80235da:	2300      	movs	r3, #0
 80235dc:	9300      	str	r3, [sp, #0]
 80235de:	23ff      	movs	r3, #255	; 0xff
 80235e0:	2200      	movs	r2, #0
 80235e2:	69f9      	ldr	r1, [r7, #28]
 80235e4:	6878      	ldr	r0, [r7, #4]
 80235e6:	f000 fa75 	bl	8023ad4 <ip4_output_if>
 80235ea:	4603      	mov	r3, r0
 80235ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80235ee:	e001      	b.n	80235f4 <icmp_input+0x1b8>
      break;
 80235f0:	bf00      	nop
 80235f2:	e000      	b.n	80235f6 <icmp_input+0x1ba>
      break;
 80235f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80235f6:	6878      	ldr	r0, [r7, #4]
 80235f8:	f7f8 f83e 	bl	801b678 <pbuf_free>
  return;
 80235fc:	e013      	b.n	8023626 <icmp_input+0x1ea>
    goto lenerr;
 80235fe:	bf00      	nop
 8023600:	e002      	b.n	8023608 <icmp_input+0x1cc>
    goto lenerr;
 8023602:	bf00      	nop
 8023604:	e000      	b.n	8023608 <icmp_input+0x1cc>
        goto lenerr;
 8023606:	bf00      	nop
lenerr:
  pbuf_free(p);
 8023608:	6878      	ldr	r0, [r7, #4]
 802360a:	f7f8 f835 	bl	801b678 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802360e:	e00a      	b.n	8023626 <icmp_input+0x1ea>
        goto icmperr;
 8023610:	bf00      	nop
 8023612:	e004      	b.n	802361e <icmp_input+0x1e2>
        goto icmperr;
 8023614:	bf00      	nop
 8023616:	e002      	b.n	802361e <icmp_input+0x1e2>
          goto icmperr;
 8023618:	bf00      	nop
 802361a:	e000      	b.n	802361e <icmp_input+0x1e2>
          goto icmperr;
 802361c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802361e:	6878      	ldr	r0, [r7, #4]
 8023620:	f7f8 f82a 	bl	801b678 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8023624:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8023626:	3728      	adds	r7, #40	; 0x28
 8023628:	46bd      	mov	sp, r7
 802362a:	bd80      	pop	{r7, pc}
 802362c:	2000cba0 	.word	0x2000cba0
 8023630:	2000cbb4 	.word	0x2000cbb4
 8023634:	0802994c 	.word	0x0802994c
 8023638:	08029984 	.word	0x08029984
 802363c:	080299bc 	.word	0x080299bc
 8023640:	080299e4 	.word	0x080299e4

08023644 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8023644:	b580      	push	{r7, lr}
 8023646:	b082      	sub	sp, #8
 8023648:	af00      	add	r7, sp, #0
 802364a:	6078      	str	r0, [r7, #4]
 802364c:	460b      	mov	r3, r1
 802364e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8023650:	78fb      	ldrb	r3, [r7, #3]
 8023652:	461a      	mov	r2, r3
 8023654:	2103      	movs	r1, #3
 8023656:	6878      	ldr	r0, [r7, #4]
 8023658:	f000 f814 	bl	8023684 <icmp_send_response>
}
 802365c:	bf00      	nop
 802365e:	3708      	adds	r7, #8
 8023660:	46bd      	mov	sp, r7
 8023662:	bd80      	pop	{r7, pc}

08023664 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
 802366c:	460b      	mov	r3, r1
 802366e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8023670:	78fb      	ldrb	r3, [r7, #3]
 8023672:	461a      	mov	r2, r3
 8023674:	210b      	movs	r1, #11
 8023676:	6878      	ldr	r0, [r7, #4]
 8023678:	f000 f804 	bl	8023684 <icmp_send_response>
}
 802367c:	bf00      	nop
 802367e:	3708      	adds	r7, #8
 8023680:	46bd      	mov	sp, r7
 8023682:	bd80      	pop	{r7, pc}

08023684 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8023684:	b580      	push	{r7, lr}
 8023686:	b08c      	sub	sp, #48	; 0x30
 8023688:	af04      	add	r7, sp, #16
 802368a:	6078      	str	r0, [r7, #4]
 802368c:	460b      	mov	r3, r1
 802368e:	70fb      	strb	r3, [r7, #3]
 8023690:	4613      	mov	r3, r2
 8023692:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8023694:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023698:	2124      	movs	r1, #36	; 0x24
 802369a:	2022      	movs	r0, #34	; 0x22
 802369c:	f7f7 fd08 	bl	801b0b0 <pbuf_alloc>
 80236a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80236a2:	69fb      	ldr	r3, [r7, #28]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d04c      	beq.n	8023742 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80236a8:	69fb      	ldr	r3, [r7, #28]
 80236aa:	895b      	ldrh	r3, [r3, #10]
 80236ac:	2b23      	cmp	r3, #35	; 0x23
 80236ae:	d806      	bhi.n	80236be <icmp_send_response+0x3a>
 80236b0:	4b26      	ldr	r3, [pc, #152]	; (802374c <icmp_send_response+0xc8>)
 80236b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80236b6:	4926      	ldr	r1, [pc, #152]	; (8023750 <icmp_send_response+0xcc>)
 80236b8:	4826      	ldr	r0, [pc, #152]	; (8023754 <icmp_send_response+0xd0>)
 80236ba:	f002 fc19 	bl	8025ef0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	685b      	ldr	r3, [r3, #4]
 80236c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80236c4:	69fb      	ldr	r3, [r7, #28]
 80236c6:	685b      	ldr	r3, [r3, #4]
 80236c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80236ca:	697b      	ldr	r3, [r7, #20]
 80236cc:	78fa      	ldrb	r2, [r7, #3]
 80236ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80236d0:	697b      	ldr	r3, [r7, #20]
 80236d2:	78ba      	ldrb	r2, [r7, #2]
 80236d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80236d6:	697b      	ldr	r3, [r7, #20]
 80236d8:	2200      	movs	r2, #0
 80236da:	711a      	strb	r2, [r3, #4]
 80236dc:	2200      	movs	r2, #0
 80236de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80236e0:	697b      	ldr	r3, [r7, #20]
 80236e2:	2200      	movs	r2, #0
 80236e4:	719a      	strb	r2, [r3, #6]
 80236e6:	2200      	movs	r2, #0
 80236e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80236ea:	69fb      	ldr	r3, [r7, #28]
 80236ec:	685b      	ldr	r3, [r3, #4]
 80236ee:	f103 0008 	add.w	r0, r3, #8
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	685b      	ldr	r3, [r3, #4]
 80236f6:	221c      	movs	r2, #28
 80236f8:	4619      	mov	r1, r3
 80236fa:	f002 f84b 	bl	8025794 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80236fe:	69bb      	ldr	r3, [r7, #24]
 8023700:	68db      	ldr	r3, [r3, #12]
 8023702:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8023704:	f107 030c 	add.w	r3, r7, #12
 8023708:	4618      	mov	r0, r3
 802370a:	f000 f825 	bl	8023758 <ip4_route>
 802370e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8023710:	693b      	ldr	r3, [r7, #16]
 8023712:	2b00      	cmp	r3, #0
 8023714:	d011      	beq.n	802373a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8023716:	697b      	ldr	r3, [r7, #20]
 8023718:	2200      	movs	r2, #0
 802371a:	709a      	strb	r2, [r3, #2]
 802371c:	2200      	movs	r2, #0
 802371e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8023720:	f107 020c 	add.w	r2, r7, #12
 8023724:	693b      	ldr	r3, [r7, #16]
 8023726:	9302      	str	r3, [sp, #8]
 8023728:	2301      	movs	r3, #1
 802372a:	9301      	str	r3, [sp, #4]
 802372c:	2300      	movs	r3, #0
 802372e:	9300      	str	r3, [sp, #0]
 8023730:	23ff      	movs	r3, #255	; 0xff
 8023732:	2100      	movs	r1, #0
 8023734:	69f8      	ldr	r0, [r7, #28]
 8023736:	f000 f9cd 	bl	8023ad4 <ip4_output_if>
  }
  pbuf_free(q);
 802373a:	69f8      	ldr	r0, [r7, #28]
 802373c:	f7f7 ff9c 	bl	801b678 <pbuf_free>
 8023740:	e000      	b.n	8023744 <icmp_send_response+0xc0>
    return;
 8023742:	bf00      	nop
}
 8023744:	3720      	adds	r7, #32
 8023746:	46bd      	mov	sp, r7
 8023748:	bd80      	pop	{r7, pc}
 802374a:	bf00      	nop
 802374c:	0802994c 	.word	0x0802994c
 8023750:	08029a18 	.word	0x08029a18
 8023754:	080299bc 	.word	0x080299bc

08023758 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8023758:	b480      	push	{r7}
 802375a:	b085      	sub	sp, #20
 802375c:	af00      	add	r7, sp, #0
 802375e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8023760:	4b33      	ldr	r3, [pc, #204]	; (8023830 <ip4_route+0xd8>)
 8023762:	681b      	ldr	r3, [r3, #0]
 8023764:	60fb      	str	r3, [r7, #12]
 8023766:	e036      	b.n	80237d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023768:	68fb      	ldr	r3, [r7, #12]
 802376a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802376e:	f003 0301 	and.w	r3, r3, #1
 8023772:	b2db      	uxtb	r3, r3
 8023774:	2b00      	cmp	r3, #0
 8023776:	d02b      	beq.n	80237d0 <ip4_route+0x78>
 8023778:	68fb      	ldr	r3, [r7, #12]
 802377a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802377e:	089b      	lsrs	r3, r3, #2
 8023780:	f003 0301 	and.w	r3, r3, #1
 8023784:	b2db      	uxtb	r3, r3
 8023786:	2b00      	cmp	r3, #0
 8023788:	d022      	beq.n	80237d0 <ip4_route+0x78>
 802378a:	68fb      	ldr	r3, [r7, #12]
 802378c:	3304      	adds	r3, #4
 802378e:	681b      	ldr	r3, [r3, #0]
 8023790:	2b00      	cmp	r3, #0
 8023792:	d01d      	beq.n	80237d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	681a      	ldr	r2, [r3, #0]
 8023798:	68fb      	ldr	r3, [r7, #12]
 802379a:	3304      	adds	r3, #4
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	405a      	eors	r2, r3
 80237a0:	68fb      	ldr	r3, [r7, #12]
 80237a2:	3308      	adds	r3, #8
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	4013      	ands	r3, r2
 80237a8:	2b00      	cmp	r3, #0
 80237aa:	d101      	bne.n	80237b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80237ac:	68fb      	ldr	r3, [r7, #12]
 80237ae:	e038      	b.n	8023822 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80237b0:	68fb      	ldr	r3, [r7, #12]
 80237b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80237b6:	f003 0302 	and.w	r3, r3, #2
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d108      	bne.n	80237d0 <ip4_route+0x78>
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	681a      	ldr	r2, [r3, #0]
 80237c2:	68fb      	ldr	r3, [r7, #12]
 80237c4:	330c      	adds	r3, #12
 80237c6:	681b      	ldr	r3, [r3, #0]
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d101      	bne.n	80237d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	e028      	b.n	8023822 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80237d0:	68fb      	ldr	r3, [r7, #12]
 80237d2:	681b      	ldr	r3, [r3, #0]
 80237d4:	60fb      	str	r3, [r7, #12]
 80237d6:	68fb      	ldr	r3, [r7, #12]
 80237d8:	2b00      	cmp	r3, #0
 80237da:	d1c5      	bne.n	8023768 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80237dc:	4b15      	ldr	r3, [pc, #84]	; (8023834 <ip4_route+0xdc>)
 80237de:	681b      	ldr	r3, [r3, #0]
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d01a      	beq.n	802381a <ip4_route+0xc2>
 80237e4:	4b13      	ldr	r3, [pc, #76]	; (8023834 <ip4_route+0xdc>)
 80237e6:	681b      	ldr	r3, [r3, #0]
 80237e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80237ec:	f003 0301 	and.w	r3, r3, #1
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	d012      	beq.n	802381a <ip4_route+0xc2>
 80237f4:	4b0f      	ldr	r3, [pc, #60]	; (8023834 <ip4_route+0xdc>)
 80237f6:	681b      	ldr	r3, [r3, #0]
 80237f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80237fc:	f003 0304 	and.w	r3, r3, #4
 8023800:	2b00      	cmp	r3, #0
 8023802:	d00a      	beq.n	802381a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023804:	4b0b      	ldr	r3, [pc, #44]	; (8023834 <ip4_route+0xdc>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	3304      	adds	r3, #4
 802380a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802380c:	2b00      	cmp	r3, #0
 802380e:	d004      	beq.n	802381a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	681b      	ldr	r3, [r3, #0]
 8023814:	b2db      	uxtb	r3, r3
 8023816:	2b7f      	cmp	r3, #127	; 0x7f
 8023818:	d101      	bne.n	802381e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 802381a:	2300      	movs	r3, #0
 802381c:	e001      	b.n	8023822 <ip4_route+0xca>
  }

  return netif_default;
 802381e:	4b05      	ldr	r3, [pc, #20]	; (8023834 <ip4_route+0xdc>)
 8023820:	681b      	ldr	r3, [r3, #0]
}
 8023822:	4618      	mov	r0, r3
 8023824:	3714      	adds	r7, #20
 8023826:	46bd      	mov	sp, r7
 8023828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802382c:	4770      	bx	lr
 802382e:	bf00      	nop
 8023830:	200102a4 	.word	0x200102a4
 8023834:	200102a8 	.word	0x200102a8

08023838 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8023838:	b580      	push	{r7, lr}
 802383a:	b082      	sub	sp, #8
 802383c:	af00      	add	r7, sp, #0
 802383e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8023846:	f003 0301 	and.w	r3, r3, #1
 802384a:	b2db      	uxtb	r3, r3
 802384c:	2b00      	cmp	r3, #0
 802384e:	d016      	beq.n	802387e <ip4_input_accept+0x46>
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	3304      	adds	r3, #4
 8023854:	681b      	ldr	r3, [r3, #0]
 8023856:	2b00      	cmp	r3, #0
 8023858:	d011      	beq.n	802387e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802385a:	4b0b      	ldr	r3, [pc, #44]	; (8023888 <ip4_input_accept+0x50>)
 802385c:	695a      	ldr	r2, [r3, #20]
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	3304      	adds	r3, #4
 8023862:	681b      	ldr	r3, [r3, #0]
 8023864:	429a      	cmp	r2, r3
 8023866:	d008      	beq.n	802387a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8023868:	4b07      	ldr	r3, [pc, #28]	; (8023888 <ip4_input_accept+0x50>)
 802386a:	695b      	ldr	r3, [r3, #20]
 802386c:	6879      	ldr	r1, [r7, #4]
 802386e:	4618      	mov	r0, r3
 8023870:	f000 fa08 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8023874:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8023876:	2b00      	cmp	r3, #0
 8023878:	d001      	beq.n	802387e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802387a:	2301      	movs	r3, #1
 802387c:	e000      	b.n	8023880 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802387e:	2300      	movs	r3, #0
}
 8023880:	4618      	mov	r0, r3
 8023882:	3708      	adds	r7, #8
 8023884:	46bd      	mov	sp, r7
 8023886:	bd80      	pop	{r7, pc}
 8023888:	2000cba0 	.word	0x2000cba0

0802388c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802388c:	b580      	push	{r7, lr}
 802388e:	b086      	sub	sp, #24
 8023890:	af00      	add	r7, sp, #0
 8023892:	6078      	str	r0, [r7, #4]
 8023894:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	685b      	ldr	r3, [r3, #4]
 802389a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802389c:	697b      	ldr	r3, [r7, #20]
 802389e:	781b      	ldrb	r3, [r3, #0]
 80238a0:	091b      	lsrs	r3, r3, #4
 80238a2:	b2db      	uxtb	r3, r3
 80238a4:	2b04      	cmp	r3, #4
 80238a6:	d004      	beq.n	80238b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80238a8:	6878      	ldr	r0, [r7, #4]
 80238aa:	f7f7 fee5 	bl	801b678 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80238ae:	2300      	movs	r3, #0
 80238b0:	e107      	b.n	8023ac2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80238b2:	697b      	ldr	r3, [r7, #20]
 80238b4:	781b      	ldrb	r3, [r3, #0]
 80238b6:	f003 030f 	and.w	r3, r3, #15
 80238ba:	b2db      	uxtb	r3, r3
 80238bc:	009b      	lsls	r3, r3, #2
 80238be:	b2db      	uxtb	r3, r3
 80238c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80238c2:	697b      	ldr	r3, [r7, #20]
 80238c4:	885b      	ldrh	r3, [r3, #2]
 80238c6:	b29b      	uxth	r3, r3
 80238c8:	4618      	mov	r0, r3
 80238ca:	f7f6 fb29 	bl	8019f20 <lwip_htons>
 80238ce:	4603      	mov	r3, r0
 80238d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80238d2:	687b      	ldr	r3, [r7, #4]
 80238d4:	891b      	ldrh	r3, [r3, #8]
 80238d6:	89ba      	ldrh	r2, [r7, #12]
 80238d8:	429a      	cmp	r2, r3
 80238da:	d204      	bcs.n	80238e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80238dc:	89bb      	ldrh	r3, [r7, #12]
 80238de:	4619      	mov	r1, r3
 80238e0:	6878      	ldr	r0, [r7, #4]
 80238e2:	f7f7 fd43 	bl	801b36c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	895b      	ldrh	r3, [r3, #10]
 80238ea:	89fa      	ldrh	r2, [r7, #14]
 80238ec:	429a      	cmp	r2, r3
 80238ee:	d807      	bhi.n	8023900 <ip4_input+0x74>
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	891b      	ldrh	r3, [r3, #8]
 80238f4:	89ba      	ldrh	r2, [r7, #12]
 80238f6:	429a      	cmp	r2, r3
 80238f8:	d802      	bhi.n	8023900 <ip4_input+0x74>
 80238fa:	89fb      	ldrh	r3, [r7, #14]
 80238fc:	2b13      	cmp	r3, #19
 80238fe:	d804      	bhi.n	802390a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8023900:	6878      	ldr	r0, [r7, #4]
 8023902:	f7f7 feb9 	bl	801b678 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8023906:	2300      	movs	r3, #0
 8023908:	e0db      	b.n	8023ac2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802390a:	697b      	ldr	r3, [r7, #20]
 802390c:	691b      	ldr	r3, [r3, #16]
 802390e:	4a6f      	ldr	r2, [pc, #444]	; (8023acc <ip4_input+0x240>)
 8023910:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8023912:	697b      	ldr	r3, [r7, #20]
 8023914:	68db      	ldr	r3, [r3, #12]
 8023916:	4a6d      	ldr	r2, [pc, #436]	; (8023acc <ip4_input+0x240>)
 8023918:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802391a:	4b6c      	ldr	r3, [pc, #432]	; (8023acc <ip4_input+0x240>)
 802391c:	695b      	ldr	r3, [r3, #20]
 802391e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023922:	2be0      	cmp	r3, #224	; 0xe0
 8023924:	d112      	bne.n	802394c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8023926:	683b      	ldr	r3, [r7, #0]
 8023928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802392c:	f003 0301 	and.w	r3, r3, #1
 8023930:	b2db      	uxtb	r3, r3
 8023932:	2b00      	cmp	r3, #0
 8023934:	d007      	beq.n	8023946 <ip4_input+0xba>
 8023936:	683b      	ldr	r3, [r7, #0]
 8023938:	3304      	adds	r3, #4
 802393a:	681b      	ldr	r3, [r3, #0]
 802393c:	2b00      	cmp	r3, #0
 802393e:	d002      	beq.n	8023946 <ip4_input+0xba>
      netif = inp;
 8023940:	683b      	ldr	r3, [r7, #0]
 8023942:	613b      	str	r3, [r7, #16]
 8023944:	e02a      	b.n	802399c <ip4_input+0x110>
    } else {
      netif = NULL;
 8023946:	2300      	movs	r3, #0
 8023948:	613b      	str	r3, [r7, #16]
 802394a:	e027      	b.n	802399c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 802394c:	6838      	ldr	r0, [r7, #0]
 802394e:	f7ff ff73 	bl	8023838 <ip4_input_accept>
 8023952:	4603      	mov	r3, r0
 8023954:	2b00      	cmp	r3, #0
 8023956:	d002      	beq.n	802395e <ip4_input+0xd2>
      netif = inp;
 8023958:	683b      	ldr	r3, [r7, #0]
 802395a:	613b      	str	r3, [r7, #16]
 802395c:	e01e      	b.n	802399c <ip4_input+0x110>
    } else {
      netif = NULL;
 802395e:	2300      	movs	r3, #0
 8023960:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8023962:	4b5a      	ldr	r3, [pc, #360]	; (8023acc <ip4_input+0x240>)
 8023964:	695b      	ldr	r3, [r3, #20]
 8023966:	b2db      	uxtb	r3, r3
 8023968:	2b7f      	cmp	r3, #127	; 0x7f
 802396a:	d017      	beq.n	802399c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802396c:	4b58      	ldr	r3, [pc, #352]	; (8023ad0 <ip4_input+0x244>)
 802396e:	681b      	ldr	r3, [r3, #0]
 8023970:	613b      	str	r3, [r7, #16]
 8023972:	e00e      	b.n	8023992 <ip4_input+0x106>
          if (netif == inp) {
 8023974:	693a      	ldr	r2, [r7, #16]
 8023976:	683b      	ldr	r3, [r7, #0]
 8023978:	429a      	cmp	r2, r3
 802397a:	d006      	beq.n	802398a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802397c:	6938      	ldr	r0, [r7, #16]
 802397e:	f7ff ff5b 	bl	8023838 <ip4_input_accept>
 8023982:	4603      	mov	r3, r0
 8023984:	2b00      	cmp	r3, #0
 8023986:	d108      	bne.n	802399a <ip4_input+0x10e>
 8023988:	e000      	b.n	802398c <ip4_input+0x100>
            continue;
 802398a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802398c:	693b      	ldr	r3, [r7, #16]
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	613b      	str	r3, [r7, #16]
 8023992:	693b      	ldr	r3, [r7, #16]
 8023994:	2b00      	cmp	r3, #0
 8023996:	d1ed      	bne.n	8023974 <ip4_input+0xe8>
 8023998:	e000      	b.n	802399c <ip4_input+0x110>
            break;
 802399a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802399c:	4b4b      	ldr	r3, [pc, #300]	; (8023acc <ip4_input+0x240>)
 802399e:	691b      	ldr	r3, [r3, #16]
 80239a0:	6839      	ldr	r1, [r7, #0]
 80239a2:	4618      	mov	r0, r3
 80239a4:	f000 f96e 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 80239a8:	4603      	mov	r3, r0
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d105      	bne.n	80239ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80239ae:	4b47      	ldr	r3, [pc, #284]	; (8023acc <ip4_input+0x240>)
 80239b0:	691b      	ldr	r3, [r3, #16]
 80239b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80239b6:	2be0      	cmp	r3, #224	; 0xe0
 80239b8:	d104      	bne.n	80239c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80239ba:	6878      	ldr	r0, [r7, #4]
 80239bc:	f7f7 fe5c 	bl	801b678 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80239c0:	2300      	movs	r3, #0
 80239c2:	e07e      	b.n	8023ac2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80239c4:	693b      	ldr	r3, [r7, #16]
 80239c6:	2b00      	cmp	r3, #0
 80239c8:	d104      	bne.n	80239d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80239ca:	6878      	ldr	r0, [r7, #4]
 80239cc:	f7f7 fe54 	bl	801b678 <pbuf_free>
    return ERR_OK;
 80239d0:	2300      	movs	r3, #0
 80239d2:	e076      	b.n	8023ac2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80239d4:	697b      	ldr	r3, [r7, #20]
 80239d6:	88db      	ldrh	r3, [r3, #6]
 80239d8:	b29b      	uxth	r3, r3
 80239da:	461a      	mov	r2, r3
 80239dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80239e0:	4013      	ands	r3, r2
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d00b      	beq.n	80239fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80239e6:	6878      	ldr	r0, [r7, #4]
 80239e8:	f000 fc92 	bl	8024310 <ip4_reass>
 80239ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d101      	bne.n	80239f8 <ip4_input+0x16c>
      return ERR_OK;
 80239f4:	2300      	movs	r3, #0
 80239f6:	e064      	b.n	8023ac2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	685b      	ldr	r3, [r3, #4]
 80239fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80239fe:	4a33      	ldr	r2, [pc, #204]	; (8023acc <ip4_input+0x240>)
 8023a00:	693b      	ldr	r3, [r7, #16]
 8023a02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8023a04:	4a31      	ldr	r2, [pc, #196]	; (8023acc <ip4_input+0x240>)
 8023a06:	683b      	ldr	r3, [r7, #0]
 8023a08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8023a0a:	4a30      	ldr	r2, [pc, #192]	; (8023acc <ip4_input+0x240>)
 8023a0c:	697b      	ldr	r3, [r7, #20]
 8023a0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8023a10:	697b      	ldr	r3, [r7, #20]
 8023a12:	781b      	ldrb	r3, [r3, #0]
 8023a14:	f003 030f 	and.w	r3, r3, #15
 8023a18:	b2db      	uxtb	r3, r3
 8023a1a:	009b      	lsls	r3, r3, #2
 8023a1c:	b2db      	uxtb	r3, r3
 8023a1e:	b29a      	uxth	r2, r3
 8023a20:	4b2a      	ldr	r3, [pc, #168]	; (8023acc <ip4_input+0x240>)
 8023a22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023a24:	89fb      	ldrh	r3, [r7, #14]
 8023a26:	4619      	mov	r1, r3
 8023a28:	6878      	ldr	r0, [r7, #4]
 8023a2a:	f7f7 fd9f 	bl	801b56c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8023a2e:	697b      	ldr	r3, [r7, #20]
 8023a30:	7a5b      	ldrb	r3, [r3, #9]
 8023a32:	2b11      	cmp	r3, #17
 8023a34:	d006      	beq.n	8023a44 <ip4_input+0x1b8>
 8023a36:	2b11      	cmp	r3, #17
 8023a38:	dc13      	bgt.n	8023a62 <ip4_input+0x1d6>
 8023a3a:	2b01      	cmp	r3, #1
 8023a3c:	d00c      	beq.n	8023a58 <ip4_input+0x1cc>
 8023a3e:	2b06      	cmp	r3, #6
 8023a40:	d005      	beq.n	8023a4e <ip4_input+0x1c2>
 8023a42:	e00e      	b.n	8023a62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8023a44:	6839      	ldr	r1, [r7, #0]
 8023a46:	6878      	ldr	r0, [r7, #4]
 8023a48:	f7fe fb5a 	bl	8022100 <udp_input>
        break;
 8023a4c:	e026      	b.n	8023a9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8023a4e:	6839      	ldr	r1, [r7, #0]
 8023a50:	6878      	ldr	r0, [r7, #4]
 8023a52:	f7f9 ff17 	bl	801d884 <tcp_input>
        break;
 8023a56:	e021      	b.n	8023a9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8023a58:	6839      	ldr	r1, [r7, #0]
 8023a5a:	6878      	ldr	r0, [r7, #4]
 8023a5c:	f7ff fcee 	bl	802343c <icmp_input>
        break;
 8023a60:	e01c      	b.n	8023a9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023a62:	4b1a      	ldr	r3, [pc, #104]	; (8023acc <ip4_input+0x240>)
 8023a64:	695b      	ldr	r3, [r3, #20]
 8023a66:	6939      	ldr	r1, [r7, #16]
 8023a68:	4618      	mov	r0, r3
 8023a6a:	f000 f90b 	bl	8023c84 <ip4_addr_isbroadcast_u32>
 8023a6e:	4603      	mov	r3, r0
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d10f      	bne.n	8023a94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023a74:	4b15      	ldr	r3, [pc, #84]	; (8023acc <ip4_input+0x240>)
 8023a76:	695b      	ldr	r3, [r3, #20]
 8023a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023a7c:	2be0      	cmp	r3, #224	; 0xe0
 8023a7e:	d009      	beq.n	8023a94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8023a80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8023a84:	4619      	mov	r1, r3
 8023a86:	6878      	ldr	r0, [r7, #4]
 8023a88:	f7f7 fde3 	bl	801b652 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023a8c:	2102      	movs	r1, #2
 8023a8e:	6878      	ldr	r0, [r7, #4]
 8023a90:	f7ff fdd8 	bl	8023644 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8023a94:	6878      	ldr	r0, [r7, #4]
 8023a96:	f7f7 fdef 	bl	801b678 <pbuf_free>
        break;
 8023a9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023a9c:	4b0b      	ldr	r3, [pc, #44]	; (8023acc <ip4_input+0x240>)
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8023aa2:	4b0a      	ldr	r3, [pc, #40]	; (8023acc <ip4_input+0x240>)
 8023aa4:	2200      	movs	r2, #0
 8023aa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8023aa8:	4b08      	ldr	r3, [pc, #32]	; (8023acc <ip4_input+0x240>)
 8023aaa:	2200      	movs	r2, #0
 8023aac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023aae:	4b07      	ldr	r3, [pc, #28]	; (8023acc <ip4_input+0x240>)
 8023ab0:	2200      	movs	r2, #0
 8023ab2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8023ab4:	4b05      	ldr	r3, [pc, #20]	; (8023acc <ip4_input+0x240>)
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023aba:	4b04      	ldr	r3, [pc, #16]	; (8023acc <ip4_input+0x240>)
 8023abc:	2200      	movs	r2, #0
 8023abe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8023ac0:	2300      	movs	r3, #0
}
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	3718      	adds	r7, #24
 8023ac6:	46bd      	mov	sp, r7
 8023ac8:	bd80      	pop	{r7, pc}
 8023aca:	bf00      	nop
 8023acc:	2000cba0 	.word	0x2000cba0
 8023ad0:	200102a4 	.word	0x200102a4

08023ad4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8023ad4:	b580      	push	{r7, lr}
 8023ad6:	b08a      	sub	sp, #40	; 0x28
 8023ad8:	af04      	add	r7, sp, #16
 8023ada:	60f8      	str	r0, [r7, #12]
 8023adc:	60b9      	str	r1, [r7, #8]
 8023ade:	607a      	str	r2, [r7, #4]
 8023ae0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8023ae2:	68bb      	ldr	r3, [r7, #8]
 8023ae4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	d009      	beq.n	8023b00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8023aec:	68bb      	ldr	r3, [r7, #8]
 8023aee:	2b00      	cmp	r3, #0
 8023af0:	d003      	beq.n	8023afa <ip4_output_if+0x26>
 8023af2:	68bb      	ldr	r3, [r7, #8]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d102      	bne.n	8023b00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8023afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023afc:	3304      	adds	r3, #4
 8023afe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8023b00:	78fa      	ldrb	r2, [r7, #3]
 8023b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023b04:	9302      	str	r3, [sp, #8]
 8023b06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8023b0a:	9301      	str	r3, [sp, #4]
 8023b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8023b10:	9300      	str	r3, [sp, #0]
 8023b12:	4613      	mov	r3, r2
 8023b14:	687a      	ldr	r2, [r7, #4]
 8023b16:	6979      	ldr	r1, [r7, #20]
 8023b18:	68f8      	ldr	r0, [r7, #12]
 8023b1a:	f000 f805 	bl	8023b28 <ip4_output_if_src>
 8023b1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8023b20:	4618      	mov	r0, r3
 8023b22:	3718      	adds	r7, #24
 8023b24:	46bd      	mov	sp, r7
 8023b26:	bd80      	pop	{r7, pc}

08023b28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023b28:	b580      	push	{r7, lr}
 8023b2a:	b088      	sub	sp, #32
 8023b2c:	af00      	add	r7, sp, #0
 8023b2e:	60f8      	str	r0, [r7, #12]
 8023b30:	60b9      	str	r1, [r7, #8]
 8023b32:	607a      	str	r2, [r7, #4]
 8023b34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023b36:	68fb      	ldr	r3, [r7, #12]
 8023b38:	7b9b      	ldrb	r3, [r3, #14]
 8023b3a:	2b01      	cmp	r3, #1
 8023b3c:	d006      	beq.n	8023b4c <ip4_output_if_src+0x24>
 8023b3e:	4b4b      	ldr	r3, [pc, #300]	; (8023c6c <ip4_output_if_src+0x144>)
 8023b40:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023b44:	494a      	ldr	r1, [pc, #296]	; (8023c70 <ip4_output_if_src+0x148>)
 8023b46:	484b      	ldr	r0, [pc, #300]	; (8023c74 <ip4_output_if_src+0x14c>)
 8023b48:	f002 f9d2 	bl	8025ef0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023b4c:	687b      	ldr	r3, [r7, #4]
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d060      	beq.n	8023c14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8023b52:	2314      	movs	r3, #20
 8023b54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023b56:	2114      	movs	r1, #20
 8023b58:	68f8      	ldr	r0, [r7, #12]
 8023b5a:	f7f7 fcf7 	bl	801b54c <pbuf_add_header>
 8023b5e:	4603      	mov	r3, r0
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	d002      	beq.n	8023b6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023b64:	f06f 0301 	mvn.w	r3, #1
 8023b68:	e07c      	b.n	8023c64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8023b6a:	68fb      	ldr	r3, [r7, #12]
 8023b6c:	685b      	ldr	r3, [r3, #4]
 8023b6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8023b70:	68fb      	ldr	r3, [r7, #12]
 8023b72:	895b      	ldrh	r3, [r3, #10]
 8023b74:	2b13      	cmp	r3, #19
 8023b76:	d806      	bhi.n	8023b86 <ip4_output_if_src+0x5e>
 8023b78:	4b3c      	ldr	r3, [pc, #240]	; (8023c6c <ip4_output_if_src+0x144>)
 8023b7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8023b7e:	493e      	ldr	r1, [pc, #248]	; (8023c78 <ip4_output_if_src+0x150>)
 8023b80:	483c      	ldr	r0, [pc, #240]	; (8023c74 <ip4_output_if_src+0x14c>)
 8023b82:	f002 f9b5 	bl	8025ef0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023b86:	69fb      	ldr	r3, [r7, #28]
 8023b88:	78fa      	ldrb	r2, [r7, #3]
 8023b8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8023b8c:	69fb      	ldr	r3, [r7, #28]
 8023b8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8023b92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	681a      	ldr	r2, [r3, #0]
 8023b98:	69fb      	ldr	r3, [r7, #28]
 8023b9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8023b9c:	8b7b      	ldrh	r3, [r7, #26]
 8023b9e:	089b      	lsrs	r3, r3, #2
 8023ba0:	b29b      	uxth	r3, r3
 8023ba2:	b2db      	uxtb	r3, r3
 8023ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023ba8:	b2da      	uxtb	r2, r3
 8023baa:	69fb      	ldr	r3, [r7, #28]
 8023bac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8023bae:	69fb      	ldr	r3, [r7, #28]
 8023bb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023bb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8023bb6:	68fb      	ldr	r3, [r7, #12]
 8023bb8:	891b      	ldrh	r3, [r3, #8]
 8023bba:	4618      	mov	r0, r3
 8023bbc:	f7f6 f9b0 	bl	8019f20 <lwip_htons>
 8023bc0:	4603      	mov	r3, r0
 8023bc2:	461a      	mov	r2, r3
 8023bc4:	69fb      	ldr	r3, [r7, #28]
 8023bc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8023bc8:	69fb      	ldr	r3, [r7, #28]
 8023bca:	2200      	movs	r2, #0
 8023bcc:	719a      	strb	r2, [r3, #6]
 8023bce:	2200      	movs	r2, #0
 8023bd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023bd2:	4b2a      	ldr	r3, [pc, #168]	; (8023c7c <ip4_output_if_src+0x154>)
 8023bd4:	881b      	ldrh	r3, [r3, #0]
 8023bd6:	4618      	mov	r0, r3
 8023bd8:	f7f6 f9a2 	bl	8019f20 <lwip_htons>
 8023bdc:	4603      	mov	r3, r0
 8023bde:	461a      	mov	r2, r3
 8023be0:	69fb      	ldr	r3, [r7, #28]
 8023be2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023be4:	4b25      	ldr	r3, [pc, #148]	; (8023c7c <ip4_output_if_src+0x154>)
 8023be6:	881b      	ldrh	r3, [r3, #0]
 8023be8:	3301      	adds	r3, #1
 8023bea:	b29a      	uxth	r2, r3
 8023bec:	4b23      	ldr	r3, [pc, #140]	; (8023c7c <ip4_output_if_src+0x154>)
 8023bee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8023bf0:	68bb      	ldr	r3, [r7, #8]
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d104      	bne.n	8023c00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8023bf6:	4b22      	ldr	r3, [pc, #136]	; (8023c80 <ip4_output_if_src+0x158>)
 8023bf8:	681a      	ldr	r2, [r3, #0]
 8023bfa:	69fb      	ldr	r3, [r7, #28]
 8023bfc:	60da      	str	r2, [r3, #12]
 8023bfe:	e003      	b.n	8023c08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8023c00:	68bb      	ldr	r3, [r7, #8]
 8023c02:	681a      	ldr	r2, [r3, #0]
 8023c04:	69fb      	ldr	r3, [r7, #28]
 8023c06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8023c08:	69fb      	ldr	r3, [r7, #28]
 8023c0a:	2200      	movs	r2, #0
 8023c0c:	729a      	strb	r2, [r3, #10]
 8023c0e:	2200      	movs	r2, #0
 8023c10:	72da      	strb	r2, [r3, #11]
 8023c12:	e00f      	b.n	8023c34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8023c14:	68fb      	ldr	r3, [r7, #12]
 8023c16:	895b      	ldrh	r3, [r3, #10]
 8023c18:	2b13      	cmp	r3, #19
 8023c1a:	d802      	bhi.n	8023c22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023c1c:	f06f 0301 	mvn.w	r3, #1
 8023c20:	e020      	b.n	8023c64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8023c22:	68fb      	ldr	r3, [r7, #12]
 8023c24:	685b      	ldr	r3, [r3, #4]
 8023c26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8023c28:	69fb      	ldr	r3, [r7, #28]
 8023c2a:	691b      	ldr	r3, [r3, #16]
 8023c2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8023c2e:	f107 0314 	add.w	r3, r7, #20
 8023c32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8023c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d00c      	beq.n	8023c56 <ip4_output_if_src+0x12e>
 8023c3c:	68fb      	ldr	r3, [r7, #12]
 8023c3e:	891a      	ldrh	r2, [r3, #8]
 8023c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8023c44:	429a      	cmp	r2, r3
 8023c46:	d906      	bls.n	8023c56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8023c48:	687a      	ldr	r2, [r7, #4]
 8023c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023c4c:	68f8      	ldr	r0, [r7, #12]
 8023c4e:	f000 fd4d 	bl	80246ec <ip4_frag>
 8023c52:	4603      	mov	r3, r0
 8023c54:	e006      	b.n	8023c64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8023c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c58:	695b      	ldr	r3, [r3, #20]
 8023c5a:	687a      	ldr	r2, [r7, #4]
 8023c5c:	68f9      	ldr	r1, [r7, #12]
 8023c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023c60:	4798      	blx	r3
 8023c62:	4603      	mov	r3, r0
}
 8023c64:	4618      	mov	r0, r3
 8023c66:	3720      	adds	r7, #32
 8023c68:	46bd      	mov	sp, r7
 8023c6a:	bd80      	pop	{r7, pc}
 8023c6c:	08029a44 	.word	0x08029a44
 8023c70:	08029a78 	.word	0x08029a78
 8023c74:	08029a84 	.word	0x08029a84
 8023c78:	08029aac 	.word	0x08029aac
 8023c7c:	2000886a 	.word	0x2000886a
 8023c80:	0802b998 	.word	0x0802b998

08023c84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8023c84:	b480      	push	{r7}
 8023c86:	b085      	sub	sp, #20
 8023c88:	af00      	add	r7, sp, #0
 8023c8a:	6078      	str	r0, [r7, #4]
 8023c8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c98:	d002      	beq.n	8023ca0 <ip4_addr_isbroadcast_u32+0x1c>
 8023c9a:	687b      	ldr	r3, [r7, #4]
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	d101      	bne.n	8023ca4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8023ca0:	2301      	movs	r3, #1
 8023ca2:	e02a      	b.n	8023cfa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8023ca4:	683b      	ldr	r3, [r7, #0]
 8023ca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8023caa:	f003 0302 	and.w	r3, r3, #2
 8023cae:	2b00      	cmp	r3, #0
 8023cb0:	d101      	bne.n	8023cb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8023cb2:	2300      	movs	r3, #0
 8023cb4:	e021      	b.n	8023cfa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8023cb6:	683b      	ldr	r3, [r7, #0]
 8023cb8:	3304      	adds	r3, #4
 8023cba:	681b      	ldr	r3, [r3, #0]
 8023cbc:	687a      	ldr	r2, [r7, #4]
 8023cbe:	429a      	cmp	r2, r3
 8023cc0:	d101      	bne.n	8023cc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8023cc2:	2300      	movs	r3, #0
 8023cc4:	e019      	b.n	8023cfa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8023cc6:	68fa      	ldr	r2, [r7, #12]
 8023cc8:	683b      	ldr	r3, [r7, #0]
 8023cca:	3304      	adds	r3, #4
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	405a      	eors	r2, r3
 8023cd0:	683b      	ldr	r3, [r7, #0]
 8023cd2:	3308      	adds	r3, #8
 8023cd4:	681b      	ldr	r3, [r3, #0]
 8023cd6:	4013      	ands	r3, r2
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	d10d      	bne.n	8023cf8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023cdc:	683b      	ldr	r3, [r7, #0]
 8023cde:	3308      	adds	r3, #8
 8023ce0:	681b      	ldr	r3, [r3, #0]
 8023ce2:	43da      	mvns	r2, r3
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8023ce8:	683b      	ldr	r3, [r7, #0]
 8023cea:	3308      	adds	r3, #8
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023cf0:	429a      	cmp	r2, r3
 8023cf2:	d101      	bne.n	8023cf8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8023cf4:	2301      	movs	r3, #1
 8023cf6:	e000      	b.n	8023cfa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8023cf8:	2300      	movs	r3, #0
  }
}
 8023cfa:	4618      	mov	r0, r3
 8023cfc:	3714      	adds	r7, #20
 8023cfe:	46bd      	mov	sp, r7
 8023d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d04:	4770      	bx	lr
	...

08023d08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8023d08:	b580      	push	{r7, lr}
 8023d0a:	b084      	sub	sp, #16
 8023d0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8023d12:	4b12      	ldr	r3, [pc, #72]	; (8023d5c <ip_reass_tmr+0x54>)
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8023d18:	e018      	b.n	8023d4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8023d1a:	68fb      	ldr	r3, [r7, #12]
 8023d1c:	7fdb      	ldrb	r3, [r3, #31]
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d00b      	beq.n	8023d3a <ip_reass_tmr+0x32>
      r->timer--;
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	7fdb      	ldrb	r3, [r3, #31]
 8023d26:	3b01      	subs	r3, #1
 8023d28:	b2da      	uxtb	r2, r3
 8023d2a:	68fb      	ldr	r3, [r7, #12]
 8023d2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8023d2e:	68fb      	ldr	r3, [r7, #12]
 8023d30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8023d32:	68fb      	ldr	r3, [r7, #12]
 8023d34:	681b      	ldr	r3, [r3, #0]
 8023d36:	60fb      	str	r3, [r7, #12]
 8023d38:	e008      	b.n	8023d4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8023d3a:	68fb      	ldr	r3, [r7, #12]
 8023d3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8023d3e:	68fb      	ldr	r3, [r7, #12]
 8023d40:	681b      	ldr	r3, [r3, #0]
 8023d42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8023d44:	68b9      	ldr	r1, [r7, #8]
 8023d46:	6878      	ldr	r0, [r7, #4]
 8023d48:	f000 f80a 	bl	8023d60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8023d4c:	68fb      	ldr	r3, [r7, #12]
 8023d4e:	2b00      	cmp	r3, #0
 8023d50:	d1e3      	bne.n	8023d1a <ip_reass_tmr+0x12>
    }
  }
}
 8023d52:	bf00      	nop
 8023d54:	bf00      	nop
 8023d56:	3710      	adds	r7, #16
 8023d58:	46bd      	mov	sp, r7
 8023d5a:	bd80      	pop	{r7, pc}
 8023d5c:	2000886c 	.word	0x2000886c

08023d60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023d60:	b580      	push	{r7, lr}
 8023d62:	b088      	sub	sp, #32
 8023d64:	af00      	add	r7, sp, #0
 8023d66:	6078      	str	r0, [r7, #4]
 8023d68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8023d6a:	2300      	movs	r3, #0
 8023d6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023d6e:	683a      	ldr	r2, [r7, #0]
 8023d70:	687b      	ldr	r3, [r7, #4]
 8023d72:	429a      	cmp	r2, r3
 8023d74:	d105      	bne.n	8023d82 <ip_reass_free_complete_datagram+0x22>
 8023d76:	4b45      	ldr	r3, [pc, #276]	; (8023e8c <ip_reass_free_complete_datagram+0x12c>)
 8023d78:	22ab      	movs	r2, #171	; 0xab
 8023d7a:	4945      	ldr	r1, [pc, #276]	; (8023e90 <ip_reass_free_complete_datagram+0x130>)
 8023d7c:	4845      	ldr	r0, [pc, #276]	; (8023e94 <ip_reass_free_complete_datagram+0x134>)
 8023d7e:	f002 f8b7 	bl	8025ef0 <iprintf>
  if (prev != NULL) {
 8023d82:	683b      	ldr	r3, [r7, #0]
 8023d84:	2b00      	cmp	r3, #0
 8023d86:	d00a      	beq.n	8023d9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8023d88:	683b      	ldr	r3, [r7, #0]
 8023d8a:	681b      	ldr	r3, [r3, #0]
 8023d8c:	687a      	ldr	r2, [r7, #4]
 8023d8e:	429a      	cmp	r2, r3
 8023d90:	d005      	beq.n	8023d9e <ip_reass_free_complete_datagram+0x3e>
 8023d92:	4b3e      	ldr	r3, [pc, #248]	; (8023e8c <ip_reass_free_complete_datagram+0x12c>)
 8023d94:	22ad      	movs	r2, #173	; 0xad
 8023d96:	4940      	ldr	r1, [pc, #256]	; (8023e98 <ip_reass_free_complete_datagram+0x138>)
 8023d98:	483e      	ldr	r0, [pc, #248]	; (8023e94 <ip_reass_free_complete_datagram+0x134>)
 8023d9a:	f002 f8a9 	bl	8025ef0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	685b      	ldr	r3, [r3, #4]
 8023da2:	685b      	ldr	r3, [r3, #4]
 8023da4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8023da6:	697b      	ldr	r3, [r7, #20]
 8023da8:	889b      	ldrh	r3, [r3, #4]
 8023daa:	b29b      	uxth	r3, r3
 8023dac:	2b00      	cmp	r3, #0
 8023dae:	d12a      	bne.n	8023e06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	685b      	ldr	r3, [r3, #4]
 8023db4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8023db6:	697b      	ldr	r3, [r7, #20]
 8023db8:	681a      	ldr	r2, [r3, #0]
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023dbe:	69bb      	ldr	r3, [r7, #24]
 8023dc0:	6858      	ldr	r0, [r3, #4]
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	3308      	adds	r3, #8
 8023dc6:	2214      	movs	r2, #20
 8023dc8:	4619      	mov	r1, r3
 8023dca:	f001 fce3 	bl	8025794 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023dce:	2101      	movs	r1, #1
 8023dd0:	69b8      	ldr	r0, [r7, #24]
 8023dd2:	f7ff fc47 	bl	8023664 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023dd6:	69b8      	ldr	r0, [r7, #24]
 8023dd8:	f7f7 fcdc 	bl	801b794 <pbuf_clen>
 8023ddc:	4603      	mov	r3, r0
 8023dde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023de0:	8bfa      	ldrh	r2, [r7, #30]
 8023de2:	8a7b      	ldrh	r3, [r7, #18]
 8023de4:	4413      	add	r3, r2
 8023de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023dea:	db05      	blt.n	8023df8 <ip_reass_free_complete_datagram+0x98>
 8023dec:	4b27      	ldr	r3, [pc, #156]	; (8023e8c <ip_reass_free_complete_datagram+0x12c>)
 8023dee:	22bc      	movs	r2, #188	; 0xbc
 8023df0:	492a      	ldr	r1, [pc, #168]	; (8023e9c <ip_reass_free_complete_datagram+0x13c>)
 8023df2:	4828      	ldr	r0, [pc, #160]	; (8023e94 <ip_reass_free_complete_datagram+0x134>)
 8023df4:	f002 f87c 	bl	8025ef0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023df8:	8bfa      	ldrh	r2, [r7, #30]
 8023dfa:	8a7b      	ldrh	r3, [r7, #18]
 8023dfc:	4413      	add	r3, r2
 8023dfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8023e00:	69b8      	ldr	r0, [r7, #24]
 8023e02:	f7f7 fc39 	bl	801b678 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8023e06:	687b      	ldr	r3, [r7, #4]
 8023e08:	685b      	ldr	r3, [r3, #4]
 8023e0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8023e0c:	e01f      	b.n	8023e4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8023e0e:	69bb      	ldr	r3, [r7, #24]
 8023e10:	685b      	ldr	r3, [r3, #4]
 8023e12:	617b      	str	r3, [r7, #20]
    pcur = p;
 8023e14:	69bb      	ldr	r3, [r7, #24]
 8023e16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8023e18:	697b      	ldr	r3, [r7, #20]
 8023e1a:	681b      	ldr	r3, [r3, #0]
 8023e1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8023e1e:	68f8      	ldr	r0, [r7, #12]
 8023e20:	f7f7 fcb8 	bl	801b794 <pbuf_clen>
 8023e24:	4603      	mov	r3, r0
 8023e26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023e28:	8bfa      	ldrh	r2, [r7, #30]
 8023e2a:	8a7b      	ldrh	r3, [r7, #18]
 8023e2c:	4413      	add	r3, r2
 8023e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023e32:	db05      	blt.n	8023e40 <ip_reass_free_complete_datagram+0xe0>
 8023e34:	4b15      	ldr	r3, [pc, #84]	; (8023e8c <ip_reass_free_complete_datagram+0x12c>)
 8023e36:	22cc      	movs	r2, #204	; 0xcc
 8023e38:	4918      	ldr	r1, [pc, #96]	; (8023e9c <ip_reass_free_complete_datagram+0x13c>)
 8023e3a:	4816      	ldr	r0, [pc, #88]	; (8023e94 <ip_reass_free_complete_datagram+0x134>)
 8023e3c:	f002 f858 	bl	8025ef0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8023e40:	8bfa      	ldrh	r2, [r7, #30]
 8023e42:	8a7b      	ldrh	r3, [r7, #18]
 8023e44:	4413      	add	r3, r2
 8023e46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8023e48:	68f8      	ldr	r0, [r7, #12]
 8023e4a:	f7f7 fc15 	bl	801b678 <pbuf_free>
  while (p != NULL) {
 8023e4e:	69bb      	ldr	r3, [r7, #24]
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	d1dc      	bne.n	8023e0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8023e54:	6839      	ldr	r1, [r7, #0]
 8023e56:	6878      	ldr	r0, [r7, #4]
 8023e58:	f000 f8c2 	bl	8023fe0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023e5c:	4b10      	ldr	r3, [pc, #64]	; (8023ea0 <ip_reass_free_complete_datagram+0x140>)
 8023e5e:	881b      	ldrh	r3, [r3, #0]
 8023e60:	8bfa      	ldrh	r2, [r7, #30]
 8023e62:	429a      	cmp	r2, r3
 8023e64:	d905      	bls.n	8023e72 <ip_reass_free_complete_datagram+0x112>
 8023e66:	4b09      	ldr	r3, [pc, #36]	; (8023e8c <ip_reass_free_complete_datagram+0x12c>)
 8023e68:	22d2      	movs	r2, #210	; 0xd2
 8023e6a:	490e      	ldr	r1, [pc, #56]	; (8023ea4 <ip_reass_free_complete_datagram+0x144>)
 8023e6c:	4809      	ldr	r0, [pc, #36]	; (8023e94 <ip_reass_free_complete_datagram+0x134>)
 8023e6e:	f002 f83f 	bl	8025ef0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023e72:	4b0b      	ldr	r3, [pc, #44]	; (8023ea0 <ip_reass_free_complete_datagram+0x140>)
 8023e74:	881a      	ldrh	r2, [r3, #0]
 8023e76:	8bfb      	ldrh	r3, [r7, #30]
 8023e78:	1ad3      	subs	r3, r2, r3
 8023e7a:	b29a      	uxth	r2, r3
 8023e7c:	4b08      	ldr	r3, [pc, #32]	; (8023ea0 <ip_reass_free_complete_datagram+0x140>)
 8023e7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023e80:	8bfb      	ldrh	r3, [r7, #30]
}
 8023e82:	4618      	mov	r0, r3
 8023e84:	3720      	adds	r7, #32
 8023e86:	46bd      	mov	sp, r7
 8023e88:	bd80      	pop	{r7, pc}
 8023e8a:	bf00      	nop
 8023e8c:	08029adc 	.word	0x08029adc
 8023e90:	08029b18 	.word	0x08029b18
 8023e94:	08029b24 	.word	0x08029b24
 8023e98:	08029b4c 	.word	0x08029b4c
 8023e9c:	08029b60 	.word	0x08029b60
 8023ea0:	20008870 	.word	0x20008870
 8023ea4:	08029b80 	.word	0x08029b80

08023ea8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8023ea8:	b580      	push	{r7, lr}
 8023eaa:	b08a      	sub	sp, #40	; 0x28
 8023eac:	af00      	add	r7, sp, #0
 8023eae:	6078      	str	r0, [r7, #4]
 8023eb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8023eb2:	2300      	movs	r3, #0
 8023eb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8023eb6:	2300      	movs	r3, #0
 8023eb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8023eba:	2300      	movs	r3, #0
 8023ebc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8023ec2:	2300      	movs	r3, #0
 8023ec4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8023ec6:	4b28      	ldr	r3, [pc, #160]	; (8023f68 <ip_reass_remove_oldest_datagram+0xc0>)
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023ecc:	e030      	b.n	8023f30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ed0:	695a      	ldr	r2, [r3, #20]
 8023ed2:	687b      	ldr	r3, [r7, #4]
 8023ed4:	68db      	ldr	r3, [r3, #12]
 8023ed6:	429a      	cmp	r2, r3
 8023ed8:	d10c      	bne.n	8023ef4 <ip_reass_remove_oldest_datagram+0x4c>
 8023eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023edc:	699a      	ldr	r2, [r3, #24]
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	691b      	ldr	r3, [r3, #16]
 8023ee2:	429a      	cmp	r2, r3
 8023ee4:	d106      	bne.n	8023ef4 <ip_reass_remove_oldest_datagram+0x4c>
 8023ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ee8:	899a      	ldrh	r2, [r3, #12]
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	889b      	ldrh	r3, [r3, #4]
 8023eee:	b29b      	uxth	r3, r3
 8023ef0:	429a      	cmp	r2, r3
 8023ef2:	d014      	beq.n	8023f1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8023ef4:	693b      	ldr	r3, [r7, #16]
 8023ef6:	3301      	adds	r3, #1
 8023ef8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8023efa:	6a3b      	ldr	r3, [r7, #32]
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	d104      	bne.n	8023f0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8023f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023f04:	69fb      	ldr	r3, [r7, #28]
 8023f06:	61bb      	str	r3, [r7, #24]
 8023f08:	e009      	b.n	8023f1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8023f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f0c:	7fda      	ldrb	r2, [r3, #31]
 8023f0e:	6a3b      	ldr	r3, [r7, #32]
 8023f10:	7fdb      	ldrb	r3, [r3, #31]
 8023f12:	429a      	cmp	r2, r3
 8023f14:	d803      	bhi.n	8023f1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8023f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8023f1a:	69fb      	ldr	r3, [r7, #28]
 8023f1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8023f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f20:	681b      	ldr	r3, [r3, #0]
 8023f22:	2b00      	cmp	r3, #0
 8023f24:	d001      	beq.n	8023f2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8023f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8023f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	d1cb      	bne.n	8023ece <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8023f36:	6a3b      	ldr	r3, [r7, #32]
 8023f38:	2b00      	cmp	r3, #0
 8023f3a:	d008      	beq.n	8023f4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8023f3c:	69b9      	ldr	r1, [r7, #24]
 8023f3e:	6a38      	ldr	r0, [r7, #32]
 8023f40:	f7ff ff0e 	bl	8023d60 <ip_reass_free_complete_datagram>
 8023f44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8023f46:	697a      	ldr	r2, [r7, #20]
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	4413      	add	r3, r2
 8023f4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8023f4e:	697a      	ldr	r2, [r7, #20]
 8023f50:	683b      	ldr	r3, [r7, #0]
 8023f52:	429a      	cmp	r2, r3
 8023f54:	da02      	bge.n	8023f5c <ip_reass_remove_oldest_datagram+0xb4>
 8023f56:	693b      	ldr	r3, [r7, #16]
 8023f58:	2b01      	cmp	r3, #1
 8023f5a:	dcac      	bgt.n	8023eb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8023f5c:	697b      	ldr	r3, [r7, #20]
}
 8023f5e:	4618      	mov	r0, r3
 8023f60:	3728      	adds	r7, #40	; 0x28
 8023f62:	46bd      	mov	sp, r7
 8023f64:	bd80      	pop	{r7, pc}
 8023f66:	bf00      	nop
 8023f68:	2000886c 	.word	0x2000886c

08023f6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8023f6c:	b580      	push	{r7, lr}
 8023f6e:	b084      	sub	sp, #16
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	6078      	str	r0, [r7, #4]
 8023f74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023f76:	2004      	movs	r0, #4
 8023f78:	f7f6 fc88 	bl	801a88c <memp_malloc>
 8023f7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023f7e:	68fb      	ldr	r3, [r7, #12]
 8023f80:	2b00      	cmp	r3, #0
 8023f82:	d110      	bne.n	8023fa6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8023f84:	6839      	ldr	r1, [r7, #0]
 8023f86:	6878      	ldr	r0, [r7, #4]
 8023f88:	f7ff ff8e 	bl	8023ea8 <ip_reass_remove_oldest_datagram>
 8023f8c:	4602      	mov	r2, r0
 8023f8e:	683b      	ldr	r3, [r7, #0]
 8023f90:	4293      	cmp	r3, r2
 8023f92:	dc03      	bgt.n	8023f9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023f94:	2004      	movs	r0, #4
 8023f96:	f7f6 fc79 	bl	801a88c <memp_malloc>
 8023f9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023f9c:	68fb      	ldr	r3, [r7, #12]
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	d101      	bne.n	8023fa6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8023fa2:	2300      	movs	r3, #0
 8023fa4:	e016      	b.n	8023fd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8023fa6:	2220      	movs	r2, #32
 8023fa8:	2100      	movs	r1, #0
 8023faa:	68f8      	ldr	r0, [r7, #12]
 8023fac:	f001 fc00 	bl	80257b0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023fb0:	68fb      	ldr	r3, [r7, #12]
 8023fb2:	220f      	movs	r2, #15
 8023fb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8023fb6:	4b09      	ldr	r3, [pc, #36]	; (8023fdc <ip_reass_enqueue_new_datagram+0x70>)
 8023fb8:	681a      	ldr	r2, [r3, #0]
 8023fba:	68fb      	ldr	r3, [r7, #12]
 8023fbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023fbe:	4a07      	ldr	r2, [pc, #28]	; (8023fdc <ip_reass_enqueue_new_datagram+0x70>)
 8023fc0:	68fb      	ldr	r3, [r7, #12]
 8023fc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	3308      	adds	r3, #8
 8023fc8:	2214      	movs	r2, #20
 8023fca:	6879      	ldr	r1, [r7, #4]
 8023fcc:	4618      	mov	r0, r3
 8023fce:	f001 fbe1 	bl	8025794 <memcpy>
  return ipr;
 8023fd2:	68fb      	ldr	r3, [r7, #12]
}
 8023fd4:	4618      	mov	r0, r3
 8023fd6:	3710      	adds	r7, #16
 8023fd8:	46bd      	mov	sp, r7
 8023fda:	bd80      	pop	{r7, pc}
 8023fdc:	2000886c 	.word	0x2000886c

08023fe0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023fe0:	b580      	push	{r7, lr}
 8023fe2:	b082      	sub	sp, #8
 8023fe4:	af00      	add	r7, sp, #0
 8023fe6:	6078      	str	r0, [r7, #4]
 8023fe8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8023fea:	4b10      	ldr	r3, [pc, #64]	; (802402c <ip_reass_dequeue_datagram+0x4c>)
 8023fec:	681b      	ldr	r3, [r3, #0]
 8023fee:	687a      	ldr	r2, [r7, #4]
 8023ff0:	429a      	cmp	r2, r3
 8023ff2:	d104      	bne.n	8023ffe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8023ff4:	687b      	ldr	r3, [r7, #4]
 8023ff6:	681b      	ldr	r3, [r3, #0]
 8023ff8:	4a0c      	ldr	r2, [pc, #48]	; (802402c <ip_reass_dequeue_datagram+0x4c>)
 8023ffa:	6013      	str	r3, [r2, #0]
 8023ffc:	e00d      	b.n	802401a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023ffe:	683b      	ldr	r3, [r7, #0]
 8024000:	2b00      	cmp	r3, #0
 8024002:	d106      	bne.n	8024012 <ip_reass_dequeue_datagram+0x32>
 8024004:	4b0a      	ldr	r3, [pc, #40]	; (8024030 <ip_reass_dequeue_datagram+0x50>)
 8024006:	f240 1245 	movw	r2, #325	; 0x145
 802400a:	490a      	ldr	r1, [pc, #40]	; (8024034 <ip_reass_dequeue_datagram+0x54>)
 802400c:	480a      	ldr	r0, [pc, #40]	; (8024038 <ip_reass_dequeue_datagram+0x58>)
 802400e:	f001 ff6f 	bl	8025ef0 <iprintf>
    prev->next = ipr->next;
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	681a      	ldr	r2, [r3, #0]
 8024016:	683b      	ldr	r3, [r7, #0]
 8024018:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 802401a:	6879      	ldr	r1, [r7, #4]
 802401c:	2004      	movs	r0, #4
 802401e:	f7f6 fc87 	bl	801a930 <memp_free>
}
 8024022:	bf00      	nop
 8024024:	3708      	adds	r7, #8
 8024026:	46bd      	mov	sp, r7
 8024028:	bd80      	pop	{r7, pc}
 802402a:	bf00      	nop
 802402c:	2000886c 	.word	0x2000886c
 8024030:	08029adc 	.word	0x08029adc
 8024034:	08029ba4 	.word	0x08029ba4
 8024038:	08029b24 	.word	0x08029b24

0802403c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 802403c:	b580      	push	{r7, lr}
 802403e:	b08c      	sub	sp, #48	; 0x30
 8024040:	af00      	add	r7, sp, #0
 8024042:	60f8      	str	r0, [r7, #12]
 8024044:	60b9      	str	r1, [r7, #8]
 8024046:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8024048:	2300      	movs	r3, #0
 802404a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 802404c:	2301      	movs	r3, #1
 802404e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024050:	68bb      	ldr	r3, [r7, #8]
 8024052:	685b      	ldr	r3, [r3, #4]
 8024054:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024056:	69fb      	ldr	r3, [r7, #28]
 8024058:	885b      	ldrh	r3, [r3, #2]
 802405a:	b29b      	uxth	r3, r3
 802405c:	4618      	mov	r0, r3
 802405e:	f7f5 ff5f 	bl	8019f20 <lwip_htons>
 8024062:	4603      	mov	r3, r0
 8024064:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8024066:	69fb      	ldr	r3, [r7, #28]
 8024068:	781b      	ldrb	r3, [r3, #0]
 802406a:	f003 030f 	and.w	r3, r3, #15
 802406e:	b2db      	uxtb	r3, r3
 8024070:	009b      	lsls	r3, r3, #2
 8024072:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8024074:	7e7b      	ldrb	r3, [r7, #25]
 8024076:	b29b      	uxth	r3, r3
 8024078:	8b7a      	ldrh	r2, [r7, #26]
 802407a:	429a      	cmp	r2, r3
 802407c:	d202      	bcs.n	8024084 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802407e:	f04f 33ff 	mov.w	r3, #4294967295
 8024082:	e135      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8024084:	7e7b      	ldrb	r3, [r7, #25]
 8024086:	b29b      	uxth	r3, r3
 8024088:	8b7a      	ldrh	r2, [r7, #26]
 802408a:	1ad3      	subs	r3, r2, r3
 802408c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802408e:	69fb      	ldr	r3, [r7, #28]
 8024090:	88db      	ldrh	r3, [r3, #6]
 8024092:	b29b      	uxth	r3, r3
 8024094:	4618      	mov	r0, r3
 8024096:	f7f5 ff43 	bl	8019f20 <lwip_htons>
 802409a:	4603      	mov	r3, r0
 802409c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80240a0:	b29b      	uxth	r3, r3
 80240a2:	00db      	lsls	r3, r3, #3
 80240a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80240a6:	68bb      	ldr	r3, [r7, #8]
 80240a8:	685b      	ldr	r3, [r3, #4]
 80240aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80240ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240ae:	2200      	movs	r2, #0
 80240b0:	701a      	strb	r2, [r3, #0]
 80240b2:	2200      	movs	r2, #0
 80240b4:	705a      	strb	r2, [r3, #1]
 80240b6:	2200      	movs	r2, #0
 80240b8:	709a      	strb	r2, [r3, #2]
 80240ba:	2200      	movs	r2, #0
 80240bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80240be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240c0:	8afa      	ldrh	r2, [r7, #22]
 80240c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80240c4:	8afa      	ldrh	r2, [r7, #22]
 80240c6:	8b7b      	ldrh	r3, [r7, #26]
 80240c8:	4413      	add	r3, r2
 80240ca:	b29a      	uxth	r2, r3
 80240cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80240d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240d2:	88db      	ldrh	r3, [r3, #6]
 80240d4:	b29b      	uxth	r3, r3
 80240d6:	8afa      	ldrh	r2, [r7, #22]
 80240d8:	429a      	cmp	r2, r3
 80240da:	d902      	bls.n	80240e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80240dc:	f04f 33ff 	mov.w	r3, #4294967295
 80240e0:	e106      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80240e2:	68fb      	ldr	r3, [r7, #12]
 80240e4:	685b      	ldr	r3, [r3, #4]
 80240e6:	627b      	str	r3, [r7, #36]	; 0x24
 80240e8:	e068      	b.n	80241bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80240ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80240ec:	685b      	ldr	r3, [r3, #4]
 80240ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80240f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80240f2:	889b      	ldrh	r3, [r3, #4]
 80240f4:	b29a      	uxth	r2, r3
 80240f6:	693b      	ldr	r3, [r7, #16]
 80240f8:	889b      	ldrh	r3, [r3, #4]
 80240fa:	b29b      	uxth	r3, r3
 80240fc:	429a      	cmp	r2, r3
 80240fe:	d235      	bcs.n	802416c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024104:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8024106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024108:	2b00      	cmp	r3, #0
 802410a:	d020      	beq.n	802414e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802410e:	889b      	ldrh	r3, [r3, #4]
 8024110:	b29a      	uxth	r2, r3
 8024112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024114:	88db      	ldrh	r3, [r3, #6]
 8024116:	b29b      	uxth	r3, r3
 8024118:	429a      	cmp	r2, r3
 802411a:	d307      	bcc.n	802412c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 802411c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802411e:	88db      	ldrh	r3, [r3, #6]
 8024120:	b29a      	uxth	r2, r3
 8024122:	693b      	ldr	r3, [r7, #16]
 8024124:	889b      	ldrh	r3, [r3, #4]
 8024126:	b29b      	uxth	r3, r3
 8024128:	429a      	cmp	r2, r3
 802412a:	d902      	bls.n	8024132 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802412c:	f04f 33ff 	mov.w	r3, #4294967295
 8024130:	e0de      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8024132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024134:	68ba      	ldr	r2, [r7, #8]
 8024136:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8024138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802413a:	88db      	ldrh	r3, [r3, #6]
 802413c:	b29a      	uxth	r2, r3
 802413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024140:	889b      	ldrh	r3, [r3, #4]
 8024142:	b29b      	uxth	r3, r3
 8024144:	429a      	cmp	r2, r3
 8024146:	d03d      	beq.n	80241c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024148:	2300      	movs	r3, #0
 802414a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 802414c:	e03a      	b.n	80241c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024150:	88db      	ldrh	r3, [r3, #6]
 8024152:	b29a      	uxth	r2, r3
 8024154:	693b      	ldr	r3, [r7, #16]
 8024156:	889b      	ldrh	r3, [r3, #4]
 8024158:	b29b      	uxth	r3, r3
 802415a:	429a      	cmp	r2, r3
 802415c:	d902      	bls.n	8024164 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802415e:	f04f 33ff 	mov.w	r3, #4294967295
 8024162:	e0c5      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8024164:	68fb      	ldr	r3, [r7, #12]
 8024166:	68ba      	ldr	r2, [r7, #8]
 8024168:	605a      	str	r2, [r3, #4]
      break;
 802416a:	e02b      	b.n	80241c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802416e:	889b      	ldrh	r3, [r3, #4]
 8024170:	b29a      	uxth	r2, r3
 8024172:	693b      	ldr	r3, [r7, #16]
 8024174:	889b      	ldrh	r3, [r3, #4]
 8024176:	b29b      	uxth	r3, r3
 8024178:	429a      	cmp	r2, r3
 802417a:	d102      	bne.n	8024182 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802417c:	f04f 33ff 	mov.w	r3, #4294967295
 8024180:	e0b6      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8024182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024184:	889b      	ldrh	r3, [r3, #4]
 8024186:	b29a      	uxth	r2, r3
 8024188:	693b      	ldr	r3, [r7, #16]
 802418a:	88db      	ldrh	r3, [r3, #6]
 802418c:	b29b      	uxth	r3, r3
 802418e:	429a      	cmp	r2, r3
 8024190:	d202      	bcs.n	8024198 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024192:	f04f 33ff 	mov.w	r3, #4294967295
 8024196:	e0ab      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8024198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802419a:	2b00      	cmp	r3, #0
 802419c:	d009      	beq.n	80241b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241a0:	88db      	ldrh	r3, [r3, #6]
 80241a2:	b29a      	uxth	r2, r3
 80241a4:	693b      	ldr	r3, [r7, #16]
 80241a6:	889b      	ldrh	r3, [r3, #4]
 80241a8:	b29b      	uxth	r3, r3
 80241aa:	429a      	cmp	r2, r3
 80241ac:	d001      	beq.n	80241b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80241ae:	2300      	movs	r3, #0
 80241b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80241b2:	693b      	ldr	r3, [r7, #16]
 80241b4:	681b      	ldr	r3, [r3, #0]
 80241b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80241b8:	693b      	ldr	r3, [r7, #16]
 80241ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80241bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80241be:	2b00      	cmp	r3, #0
 80241c0:	d193      	bne.n	80240ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80241c2:	e000      	b.n	80241c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80241c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80241c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80241c8:	2b00      	cmp	r3, #0
 80241ca:	d12d      	bne.n	8024228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80241cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241ce:	2b00      	cmp	r3, #0
 80241d0:	d01c      	beq.n	802420c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80241d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241d4:	88db      	ldrh	r3, [r3, #6]
 80241d6:	b29a      	uxth	r2, r3
 80241d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241da:	889b      	ldrh	r3, [r3, #4]
 80241dc:	b29b      	uxth	r3, r3
 80241de:	429a      	cmp	r2, r3
 80241e0:	d906      	bls.n	80241f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80241e2:	4b45      	ldr	r3, [pc, #276]	; (80242f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80241e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80241e8:	4944      	ldr	r1, [pc, #272]	; (80242fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80241ea:	4845      	ldr	r0, [pc, #276]	; (8024300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80241ec:	f001 fe80 	bl	8025ef0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80241f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241f2:	68ba      	ldr	r2, [r7, #8]
 80241f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80241f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80241f8:	88db      	ldrh	r3, [r3, #6]
 80241fa:	b29a      	uxth	r2, r3
 80241fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80241fe:	889b      	ldrh	r3, [r3, #4]
 8024200:	b29b      	uxth	r3, r3
 8024202:	429a      	cmp	r2, r3
 8024204:	d010      	beq.n	8024228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8024206:	2300      	movs	r3, #0
 8024208:	623b      	str	r3, [r7, #32]
 802420a:	e00d      	b.n	8024228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 802420c:	68fb      	ldr	r3, [r7, #12]
 802420e:	685b      	ldr	r3, [r3, #4]
 8024210:	2b00      	cmp	r3, #0
 8024212:	d006      	beq.n	8024222 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8024214:	4b38      	ldr	r3, [pc, #224]	; (80242f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024216:	f44f 72df 	mov.w	r2, #446	; 0x1be
 802421a:	493a      	ldr	r1, [pc, #232]	; (8024304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 802421c:	4838      	ldr	r0, [pc, #224]	; (8024300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802421e:	f001 fe67 	bl	8025ef0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8024222:	68fb      	ldr	r3, [r7, #12]
 8024224:	68ba      	ldr	r2, [r7, #8]
 8024226:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	2b00      	cmp	r3, #0
 802422c:	d105      	bne.n	802423a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802422e:	68fb      	ldr	r3, [r7, #12]
 8024230:	7f9b      	ldrb	r3, [r3, #30]
 8024232:	f003 0301 	and.w	r3, r3, #1
 8024236:	2b00      	cmp	r3, #0
 8024238:	d059      	beq.n	80242ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802423a:	6a3b      	ldr	r3, [r7, #32]
 802423c:	2b00      	cmp	r3, #0
 802423e:	d04f      	beq.n	80242e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024240:	68fb      	ldr	r3, [r7, #12]
 8024242:	685b      	ldr	r3, [r3, #4]
 8024244:	2b00      	cmp	r3, #0
 8024246:	d006      	beq.n	8024256 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8024248:	68fb      	ldr	r3, [r7, #12]
 802424a:	685b      	ldr	r3, [r3, #4]
 802424c:	685b      	ldr	r3, [r3, #4]
 802424e:	889b      	ldrh	r3, [r3, #4]
 8024250:	b29b      	uxth	r3, r3
 8024252:	2b00      	cmp	r3, #0
 8024254:	d002      	beq.n	802425c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8024256:	2300      	movs	r3, #0
 8024258:	623b      	str	r3, [r7, #32]
 802425a:	e041      	b.n	80242e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802425e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8024260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024262:	681b      	ldr	r3, [r3, #0]
 8024264:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024266:	e012      	b.n	802428e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8024268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802426a:	685b      	ldr	r3, [r3, #4]
 802426c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024270:	88db      	ldrh	r3, [r3, #6]
 8024272:	b29a      	uxth	r2, r3
 8024274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024276:	889b      	ldrh	r3, [r3, #4]
 8024278:	b29b      	uxth	r3, r3
 802427a:	429a      	cmp	r2, r3
 802427c:	d002      	beq.n	8024284 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802427e:	2300      	movs	r3, #0
 8024280:	623b      	str	r3, [r7, #32]
            break;
 8024282:	e007      	b.n	8024294 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8024284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024286:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8024288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024290:	2b00      	cmp	r3, #0
 8024292:	d1e9      	bne.n	8024268 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8024294:	6a3b      	ldr	r3, [r7, #32]
 8024296:	2b00      	cmp	r3, #0
 8024298:	d022      	beq.n	80242e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802429a:	68fb      	ldr	r3, [r7, #12]
 802429c:	685b      	ldr	r3, [r3, #4]
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d106      	bne.n	80242b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80242a2:	4b15      	ldr	r3, [pc, #84]	; (80242f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80242a4:	f240 12df 	movw	r2, #479	; 0x1df
 80242a8:	4917      	ldr	r1, [pc, #92]	; (8024308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80242aa:	4815      	ldr	r0, [pc, #84]	; (8024300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80242ac:	f001 fe20 	bl	8025ef0 <iprintf>
          LWIP_ASSERT("sanity check",
 80242b0:	68fb      	ldr	r3, [r7, #12]
 80242b2:	685b      	ldr	r3, [r3, #4]
 80242b4:	685b      	ldr	r3, [r3, #4]
 80242b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80242b8:	429a      	cmp	r2, r3
 80242ba:	d106      	bne.n	80242ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80242bc:	4b0e      	ldr	r3, [pc, #56]	; (80242f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80242be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80242c2:	4911      	ldr	r1, [pc, #68]	; (8024308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80242c4:	480e      	ldr	r0, [pc, #56]	; (8024300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80242c6:	f001 fe13 	bl	8025ef0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80242ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242cc:	681b      	ldr	r3, [r3, #0]
 80242ce:	2b00      	cmp	r3, #0
 80242d0:	d006      	beq.n	80242e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80242d2:	4b09      	ldr	r3, [pc, #36]	; (80242f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80242d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80242d8:	490c      	ldr	r1, [pc, #48]	; (802430c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80242da:	4809      	ldr	r0, [pc, #36]	; (8024300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80242dc:	f001 fe08 	bl	8025ef0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80242e0:	6a3b      	ldr	r3, [r7, #32]
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	bf14      	ite	ne
 80242e6:	2301      	movne	r3, #1
 80242e8:	2300      	moveq	r3, #0
 80242ea:	b2db      	uxtb	r3, r3
 80242ec:	e000      	b.n	80242f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80242ee:	2300      	movs	r3, #0
}
 80242f0:	4618      	mov	r0, r3
 80242f2:	3730      	adds	r7, #48	; 0x30
 80242f4:	46bd      	mov	sp, r7
 80242f6:	bd80      	pop	{r7, pc}
 80242f8:	08029adc 	.word	0x08029adc
 80242fc:	08029bc0 	.word	0x08029bc0
 8024300:	08029b24 	.word	0x08029b24
 8024304:	08029be0 	.word	0x08029be0
 8024308:	08029c18 	.word	0x08029c18
 802430c:	08029c28 	.word	0x08029c28

08024310 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8024310:	b580      	push	{r7, lr}
 8024312:	b08e      	sub	sp, #56	; 0x38
 8024314:	af00      	add	r7, sp, #0
 8024316:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	685b      	ldr	r3, [r3, #4]
 802431c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024320:	781b      	ldrb	r3, [r3, #0]
 8024322:	f003 030f 	and.w	r3, r3, #15
 8024326:	b2db      	uxtb	r3, r3
 8024328:	009b      	lsls	r3, r3, #2
 802432a:	b2db      	uxtb	r3, r3
 802432c:	2b14      	cmp	r3, #20
 802432e:	f040 8167 	bne.w	8024600 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8024332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024334:	88db      	ldrh	r3, [r3, #6]
 8024336:	b29b      	uxth	r3, r3
 8024338:	4618      	mov	r0, r3
 802433a:	f7f5 fdf1 	bl	8019f20 <lwip_htons>
 802433e:	4603      	mov	r3, r0
 8024340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024344:	b29b      	uxth	r3, r3
 8024346:	00db      	lsls	r3, r3, #3
 8024348:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802434c:	885b      	ldrh	r3, [r3, #2]
 802434e:	b29b      	uxth	r3, r3
 8024350:	4618      	mov	r0, r3
 8024352:	f7f5 fde5 	bl	8019f20 <lwip_htons>
 8024356:	4603      	mov	r3, r0
 8024358:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802435c:	781b      	ldrb	r3, [r3, #0]
 802435e:	f003 030f 	and.w	r3, r3, #15
 8024362:	b2db      	uxtb	r3, r3
 8024364:	009b      	lsls	r3, r3, #2
 8024366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802436a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802436e:	b29b      	uxth	r3, r3
 8024370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024372:	429a      	cmp	r2, r3
 8024374:	f0c0 8146 	bcc.w	8024604 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8024378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802437c:	b29b      	uxth	r3, r3
 802437e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024380:	1ad3      	subs	r3, r2, r3
 8024382:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8024384:	6878      	ldr	r0, [r7, #4]
 8024386:	f7f7 fa05 	bl	801b794 <pbuf_clen>
 802438a:	4603      	mov	r3, r0
 802438c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802438e:	4b9f      	ldr	r3, [pc, #636]	; (802460c <ip4_reass+0x2fc>)
 8024390:	881b      	ldrh	r3, [r3, #0]
 8024392:	461a      	mov	r2, r3
 8024394:	8c3b      	ldrh	r3, [r7, #32]
 8024396:	4413      	add	r3, r2
 8024398:	2b0a      	cmp	r3, #10
 802439a:	dd10      	ble.n	80243be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802439c:	8c3b      	ldrh	r3, [r7, #32]
 802439e:	4619      	mov	r1, r3
 80243a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80243a2:	f7ff fd81 	bl	8023ea8 <ip_reass_remove_oldest_datagram>
 80243a6:	4603      	mov	r3, r0
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	f000 812d 	beq.w	8024608 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80243ae:	4b97      	ldr	r3, [pc, #604]	; (802460c <ip4_reass+0x2fc>)
 80243b0:	881b      	ldrh	r3, [r3, #0]
 80243b2:	461a      	mov	r2, r3
 80243b4:	8c3b      	ldrh	r3, [r7, #32]
 80243b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80243b8:	2b0a      	cmp	r3, #10
 80243ba:	f300 8125 	bgt.w	8024608 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80243be:	4b94      	ldr	r3, [pc, #592]	; (8024610 <ip4_reass+0x300>)
 80243c0:	681b      	ldr	r3, [r3, #0]
 80243c2:	633b      	str	r3, [r7, #48]	; 0x30
 80243c4:	e015      	b.n	80243f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80243c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243c8:	695a      	ldr	r2, [r3, #20]
 80243ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243cc:	68db      	ldr	r3, [r3, #12]
 80243ce:	429a      	cmp	r2, r3
 80243d0:	d10c      	bne.n	80243ec <ip4_reass+0xdc>
 80243d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243d4:	699a      	ldr	r2, [r3, #24]
 80243d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243d8:	691b      	ldr	r3, [r3, #16]
 80243da:	429a      	cmp	r2, r3
 80243dc:	d106      	bne.n	80243ec <ip4_reass+0xdc>
 80243de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243e0:	899a      	ldrh	r2, [r3, #12]
 80243e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80243e4:	889b      	ldrh	r3, [r3, #4]
 80243e6:	b29b      	uxth	r3, r3
 80243e8:	429a      	cmp	r2, r3
 80243ea:	d006      	beq.n	80243fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80243ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243ee:	681b      	ldr	r3, [r3, #0]
 80243f0:	633b      	str	r3, [r7, #48]	; 0x30
 80243f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243f4:	2b00      	cmp	r3, #0
 80243f6:	d1e6      	bne.n	80243c6 <ip4_reass+0xb6>
 80243f8:	e000      	b.n	80243fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80243fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80243fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d109      	bne.n	8024416 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8024402:	8c3b      	ldrh	r3, [r7, #32]
 8024404:	4619      	mov	r1, r3
 8024406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8024408:	f7ff fdb0 	bl	8023f6c <ip_reass_enqueue_new_datagram>
 802440c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024410:	2b00      	cmp	r3, #0
 8024412:	d11c      	bne.n	802444e <ip4_reass+0x13e>
      goto nullreturn;
 8024414:	e109      	b.n	802462a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8024416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024418:	88db      	ldrh	r3, [r3, #6]
 802441a:	b29b      	uxth	r3, r3
 802441c:	4618      	mov	r0, r3
 802441e:	f7f5 fd7f 	bl	8019f20 <lwip_htons>
 8024422:	4603      	mov	r3, r0
 8024424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024428:	2b00      	cmp	r3, #0
 802442a:	d110      	bne.n	802444e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802442e:	89db      	ldrh	r3, [r3, #14]
 8024430:	4618      	mov	r0, r3
 8024432:	f7f5 fd75 	bl	8019f20 <lwip_htons>
 8024436:	4603      	mov	r3, r0
 8024438:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802443c:	2b00      	cmp	r3, #0
 802443e:	d006      	beq.n	802444e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8024440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024442:	3308      	adds	r3, #8
 8024444:	2214      	movs	r2, #20
 8024446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024448:	4618      	mov	r0, r3
 802444a:	f001 f9a3 	bl	8025794 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024450:	88db      	ldrh	r3, [r3, #6]
 8024452:	b29b      	uxth	r3, r3
 8024454:	f003 0320 	and.w	r3, r3, #32
 8024458:	2b00      	cmp	r3, #0
 802445a:	bf0c      	ite	eq
 802445c:	2301      	moveq	r3, #1
 802445e:	2300      	movne	r3, #0
 8024460:	b2db      	uxtb	r3, r3
 8024462:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8024464:	69fb      	ldr	r3, [r7, #28]
 8024466:	2b00      	cmp	r3, #0
 8024468:	d00e      	beq.n	8024488 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802446a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802446c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802446e:	4413      	add	r3, r2
 8024470:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8024472:	8b7a      	ldrh	r2, [r7, #26]
 8024474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8024476:	429a      	cmp	r2, r3
 8024478:	f0c0 80a0 	bcc.w	80245bc <ip4_reass+0x2ac>
 802447c:	8b7b      	ldrh	r3, [r7, #26]
 802447e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8024482:	4293      	cmp	r3, r2
 8024484:	f200 809a 	bhi.w	80245bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8024488:	69fa      	ldr	r2, [r7, #28]
 802448a:	6879      	ldr	r1, [r7, #4]
 802448c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802448e:	f7ff fdd5 	bl	802403c <ip_reass_chain_frag_into_datagram_and_validate>
 8024492:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8024494:	697b      	ldr	r3, [r7, #20]
 8024496:	f1b3 3fff 	cmp.w	r3, #4294967295
 802449a:	f000 8091 	beq.w	80245c0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802449e:	4b5b      	ldr	r3, [pc, #364]	; (802460c <ip4_reass+0x2fc>)
 80244a0:	881a      	ldrh	r2, [r3, #0]
 80244a2:	8c3b      	ldrh	r3, [r7, #32]
 80244a4:	4413      	add	r3, r2
 80244a6:	b29a      	uxth	r2, r3
 80244a8:	4b58      	ldr	r3, [pc, #352]	; (802460c <ip4_reass+0x2fc>)
 80244aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80244ac:	69fb      	ldr	r3, [r7, #28]
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	d00d      	beq.n	80244ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80244b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80244b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80244b6:	4413      	add	r3, r2
 80244b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80244ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244bc:	8a7a      	ldrh	r2, [r7, #18]
 80244be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80244c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244c2:	7f9b      	ldrb	r3, [r3, #30]
 80244c4:	f043 0301 	orr.w	r3, r3, #1
 80244c8:	b2da      	uxtb	r2, r3
 80244ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80244ce:	697b      	ldr	r3, [r7, #20]
 80244d0:	2b01      	cmp	r3, #1
 80244d2:	d171      	bne.n	80245b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80244d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244d6:	8b9b      	ldrh	r3, [r3, #28]
 80244d8:	3314      	adds	r3, #20
 80244da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80244dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244de:	685b      	ldr	r3, [r3, #4]
 80244e0:	685b      	ldr	r3, [r3, #4]
 80244e2:	681b      	ldr	r3, [r3, #0]
 80244e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80244e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244e8:	685b      	ldr	r3, [r3, #4]
 80244ea:	685b      	ldr	r3, [r3, #4]
 80244ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80244ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80244f0:	3308      	adds	r3, #8
 80244f2:	2214      	movs	r2, #20
 80244f4:	4619      	mov	r1, r3
 80244f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80244f8:	f001 f94c 	bl	8025794 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80244fc:	8a3b      	ldrh	r3, [r7, #16]
 80244fe:	4618      	mov	r0, r3
 8024500:	f7f5 fd0e 	bl	8019f20 <lwip_htons>
 8024504:	4603      	mov	r3, r0
 8024506:	461a      	mov	r2, r3
 8024508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802450a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802450c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802450e:	2200      	movs	r2, #0
 8024510:	719a      	strb	r2, [r3, #6]
 8024512:	2200      	movs	r2, #0
 8024514:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8024516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024518:	2200      	movs	r2, #0
 802451a:	729a      	strb	r2, [r3, #10]
 802451c:	2200      	movs	r2, #0
 802451e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8024520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024522:	685b      	ldr	r3, [r3, #4]
 8024524:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8024526:	e00d      	b.n	8024544 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8024528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802452a:	685b      	ldr	r3, [r3, #4]
 802452c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802452e:	2114      	movs	r1, #20
 8024530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024532:	f7f7 f81b 	bl	801b56c <pbuf_remove_header>
      pbuf_cat(p, r);
 8024536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024538:	6878      	ldr	r0, [r7, #4]
 802453a:	f7f7 f96b 	bl	801b814 <pbuf_cat>
      r = iprh->next_pbuf;
 802453e:	68fb      	ldr	r3, [r7, #12]
 8024540:	681b      	ldr	r3, [r3, #0]
 8024542:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8024544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024546:	2b00      	cmp	r3, #0
 8024548:	d1ee      	bne.n	8024528 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802454a:	4b31      	ldr	r3, [pc, #196]	; (8024610 <ip4_reass+0x300>)
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024550:	429a      	cmp	r2, r3
 8024552:	d102      	bne.n	802455a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8024554:	2300      	movs	r3, #0
 8024556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024558:	e010      	b.n	802457c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802455a:	4b2d      	ldr	r3, [pc, #180]	; (8024610 <ip4_reass+0x300>)
 802455c:	681b      	ldr	r3, [r3, #0]
 802455e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024560:	e007      	b.n	8024572 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8024562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024564:	681b      	ldr	r3, [r3, #0]
 8024566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024568:	429a      	cmp	r2, r3
 802456a:	d006      	beq.n	802457a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802456e:	681b      	ldr	r3, [r3, #0]
 8024570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024574:	2b00      	cmp	r3, #0
 8024576:	d1f4      	bne.n	8024562 <ip4_reass+0x252>
 8024578:	e000      	b.n	802457c <ip4_reass+0x26c>
          break;
 802457a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802457c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802457e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024580:	f7ff fd2e 	bl	8023fe0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8024584:	6878      	ldr	r0, [r7, #4]
 8024586:	f7f7 f905 	bl	801b794 <pbuf_clen>
 802458a:	4603      	mov	r3, r0
 802458c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802458e:	4b1f      	ldr	r3, [pc, #124]	; (802460c <ip4_reass+0x2fc>)
 8024590:	881b      	ldrh	r3, [r3, #0]
 8024592:	8c3a      	ldrh	r2, [r7, #32]
 8024594:	429a      	cmp	r2, r3
 8024596:	d906      	bls.n	80245a6 <ip4_reass+0x296>
 8024598:	4b1e      	ldr	r3, [pc, #120]	; (8024614 <ip4_reass+0x304>)
 802459a:	f240 229b 	movw	r2, #667	; 0x29b
 802459e:	491e      	ldr	r1, [pc, #120]	; (8024618 <ip4_reass+0x308>)
 80245a0:	481e      	ldr	r0, [pc, #120]	; (802461c <ip4_reass+0x30c>)
 80245a2:	f001 fca5 	bl	8025ef0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80245a6:	4b19      	ldr	r3, [pc, #100]	; (802460c <ip4_reass+0x2fc>)
 80245a8:	881a      	ldrh	r2, [r3, #0]
 80245aa:	8c3b      	ldrh	r3, [r7, #32]
 80245ac:	1ad3      	subs	r3, r2, r3
 80245ae:	b29a      	uxth	r2, r3
 80245b0:	4b16      	ldr	r3, [pc, #88]	; (802460c <ip4_reass+0x2fc>)
 80245b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	e03c      	b.n	8024632 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80245b8:	2300      	movs	r3, #0
 80245ba:	e03a      	b.n	8024632 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80245bc:	bf00      	nop
 80245be:	e000      	b.n	80245c2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80245c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80245c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	d106      	bne.n	80245d6 <ip4_reass+0x2c6>
 80245c8:	4b12      	ldr	r3, [pc, #72]	; (8024614 <ip4_reass+0x304>)
 80245ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80245ce:	4914      	ldr	r1, [pc, #80]	; (8024620 <ip4_reass+0x310>)
 80245d0:	4812      	ldr	r0, [pc, #72]	; (802461c <ip4_reass+0x30c>)
 80245d2:	f001 fc8d 	bl	8025ef0 <iprintf>
  if (ipr->p == NULL) {
 80245d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80245d8:	685b      	ldr	r3, [r3, #4]
 80245da:	2b00      	cmp	r3, #0
 80245dc:	d124      	bne.n	8024628 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80245de:	4b0c      	ldr	r3, [pc, #48]	; (8024610 <ip4_reass+0x300>)
 80245e0:	681b      	ldr	r3, [r3, #0]
 80245e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80245e4:	429a      	cmp	r2, r3
 80245e6:	d006      	beq.n	80245f6 <ip4_reass+0x2e6>
 80245e8:	4b0a      	ldr	r3, [pc, #40]	; (8024614 <ip4_reass+0x304>)
 80245ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 80245ee:	490d      	ldr	r1, [pc, #52]	; (8024624 <ip4_reass+0x314>)
 80245f0:	480a      	ldr	r0, [pc, #40]	; (802461c <ip4_reass+0x30c>)
 80245f2:	f001 fc7d 	bl	8025ef0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80245f6:	2100      	movs	r1, #0
 80245f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80245fa:	f7ff fcf1 	bl	8023fe0 <ip_reass_dequeue_datagram>
 80245fe:	e014      	b.n	802462a <ip4_reass+0x31a>
    goto nullreturn;
 8024600:	bf00      	nop
 8024602:	e012      	b.n	802462a <ip4_reass+0x31a>
    goto nullreturn;
 8024604:	bf00      	nop
 8024606:	e010      	b.n	802462a <ip4_reass+0x31a>
      goto nullreturn;
 8024608:	bf00      	nop
 802460a:	e00e      	b.n	802462a <ip4_reass+0x31a>
 802460c:	20008870 	.word	0x20008870
 8024610:	2000886c 	.word	0x2000886c
 8024614:	08029adc 	.word	0x08029adc
 8024618:	08029c4c 	.word	0x08029c4c
 802461c:	08029b24 	.word	0x08029b24
 8024620:	08029c68 	.word	0x08029c68
 8024624:	08029c74 	.word	0x08029c74
  }

nullreturn:
 8024628:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802462a:	6878      	ldr	r0, [r7, #4]
 802462c:	f7f7 f824 	bl	801b678 <pbuf_free>
  return NULL;
 8024630:	2300      	movs	r3, #0
}
 8024632:	4618      	mov	r0, r3
 8024634:	3738      	adds	r7, #56	; 0x38
 8024636:	46bd      	mov	sp, r7
 8024638:	bd80      	pop	{r7, pc}
 802463a:	bf00      	nop

0802463c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 802463c:	b580      	push	{r7, lr}
 802463e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8024640:	2005      	movs	r0, #5
 8024642:	f7f6 f923 	bl	801a88c <memp_malloc>
 8024646:	4603      	mov	r3, r0
}
 8024648:	4618      	mov	r0, r3
 802464a:	bd80      	pop	{r7, pc}

0802464c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802464c:	b580      	push	{r7, lr}
 802464e:	b082      	sub	sp, #8
 8024650:	af00      	add	r7, sp, #0
 8024652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8024654:	687b      	ldr	r3, [r7, #4]
 8024656:	2b00      	cmp	r3, #0
 8024658:	d106      	bne.n	8024668 <ip_frag_free_pbuf_custom_ref+0x1c>
 802465a:	4b07      	ldr	r3, [pc, #28]	; (8024678 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802465c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8024660:	4906      	ldr	r1, [pc, #24]	; (802467c <ip_frag_free_pbuf_custom_ref+0x30>)
 8024662:	4807      	ldr	r0, [pc, #28]	; (8024680 <ip_frag_free_pbuf_custom_ref+0x34>)
 8024664:	f001 fc44 	bl	8025ef0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8024668:	6879      	ldr	r1, [r7, #4]
 802466a:	2005      	movs	r0, #5
 802466c:	f7f6 f960 	bl	801a930 <memp_free>
}
 8024670:	bf00      	nop
 8024672:	3708      	adds	r7, #8
 8024674:	46bd      	mov	sp, r7
 8024676:	bd80      	pop	{r7, pc}
 8024678:	08029adc 	.word	0x08029adc
 802467c:	08029c94 	.word	0x08029c94
 8024680:	08029b24 	.word	0x08029b24

08024684 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8024684:	b580      	push	{r7, lr}
 8024686:	b084      	sub	sp, #16
 8024688:	af00      	add	r7, sp, #0
 802468a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 802468c:	687b      	ldr	r3, [r7, #4]
 802468e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8024690:	68fb      	ldr	r3, [r7, #12]
 8024692:	2b00      	cmp	r3, #0
 8024694:	d106      	bne.n	80246a4 <ipfrag_free_pbuf_custom+0x20>
 8024696:	4b11      	ldr	r3, [pc, #68]	; (80246dc <ipfrag_free_pbuf_custom+0x58>)
 8024698:	f240 22ce 	movw	r2, #718	; 0x2ce
 802469c:	4910      	ldr	r1, [pc, #64]	; (80246e0 <ipfrag_free_pbuf_custom+0x5c>)
 802469e:	4811      	ldr	r0, [pc, #68]	; (80246e4 <ipfrag_free_pbuf_custom+0x60>)
 80246a0:	f001 fc26 	bl	8025ef0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80246a4:	68fa      	ldr	r2, [r7, #12]
 80246a6:	687b      	ldr	r3, [r7, #4]
 80246a8:	429a      	cmp	r2, r3
 80246aa:	d006      	beq.n	80246ba <ipfrag_free_pbuf_custom+0x36>
 80246ac:	4b0b      	ldr	r3, [pc, #44]	; (80246dc <ipfrag_free_pbuf_custom+0x58>)
 80246ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80246b2:	490d      	ldr	r1, [pc, #52]	; (80246e8 <ipfrag_free_pbuf_custom+0x64>)
 80246b4:	480b      	ldr	r0, [pc, #44]	; (80246e4 <ipfrag_free_pbuf_custom+0x60>)
 80246b6:	f001 fc1b 	bl	8025ef0 <iprintf>
  if (pcr->original != NULL) {
 80246ba:	68fb      	ldr	r3, [r7, #12]
 80246bc:	695b      	ldr	r3, [r3, #20]
 80246be:	2b00      	cmp	r3, #0
 80246c0:	d004      	beq.n	80246cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80246c2:	68fb      	ldr	r3, [r7, #12]
 80246c4:	695b      	ldr	r3, [r3, #20]
 80246c6:	4618      	mov	r0, r3
 80246c8:	f7f6 ffd6 	bl	801b678 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80246cc:	68f8      	ldr	r0, [r7, #12]
 80246ce:	f7ff ffbd 	bl	802464c <ip_frag_free_pbuf_custom_ref>
}
 80246d2:	bf00      	nop
 80246d4:	3710      	adds	r7, #16
 80246d6:	46bd      	mov	sp, r7
 80246d8:	bd80      	pop	{r7, pc}
 80246da:	bf00      	nop
 80246dc:	08029adc 	.word	0x08029adc
 80246e0:	08029ca0 	.word	0x08029ca0
 80246e4:	08029b24 	.word	0x08029b24
 80246e8:	08029cac 	.word	0x08029cac

080246ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80246ec:	b580      	push	{r7, lr}
 80246ee:	b094      	sub	sp, #80	; 0x50
 80246f0:	af02      	add	r7, sp, #8
 80246f2:	60f8      	str	r0, [r7, #12]
 80246f4:	60b9      	str	r1, [r7, #8]
 80246f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80246f8:	2300      	movs	r3, #0
 80246fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80246fe:	68bb      	ldr	r3, [r7, #8]
 8024700:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8024702:	3b14      	subs	r3, #20
 8024704:	2b00      	cmp	r3, #0
 8024706:	da00      	bge.n	802470a <ip4_frag+0x1e>
 8024708:	3307      	adds	r3, #7
 802470a:	10db      	asrs	r3, r3, #3
 802470c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802470e:	2314      	movs	r3, #20
 8024710:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8024712:	68fb      	ldr	r3, [r7, #12]
 8024714:	685b      	ldr	r3, [r3, #4]
 8024716:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8024718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802471a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 802471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802471e:	781b      	ldrb	r3, [r3, #0]
 8024720:	f003 030f 	and.w	r3, r3, #15
 8024724:	b2db      	uxtb	r3, r3
 8024726:	009b      	lsls	r3, r3, #2
 8024728:	b2db      	uxtb	r3, r3
 802472a:	2b14      	cmp	r3, #20
 802472c:	d002      	beq.n	8024734 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802472e:	f06f 0305 	mvn.w	r3, #5
 8024732:	e110      	b.n	8024956 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8024734:	68fb      	ldr	r3, [r7, #12]
 8024736:	895b      	ldrh	r3, [r3, #10]
 8024738:	2b13      	cmp	r3, #19
 802473a:	d809      	bhi.n	8024750 <ip4_frag+0x64>
 802473c:	4b88      	ldr	r3, [pc, #544]	; (8024960 <ip4_frag+0x274>)
 802473e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8024742:	4988      	ldr	r1, [pc, #544]	; (8024964 <ip4_frag+0x278>)
 8024744:	4888      	ldr	r0, [pc, #544]	; (8024968 <ip4_frag+0x27c>)
 8024746:	f001 fbd3 	bl	8025ef0 <iprintf>
 802474a:	f06f 0305 	mvn.w	r3, #5
 802474e:	e102      	b.n	8024956 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8024750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024752:	88db      	ldrh	r3, [r3, #6]
 8024754:	b29b      	uxth	r3, r3
 8024756:	4618      	mov	r0, r3
 8024758:	f7f5 fbe2 	bl	8019f20 <lwip_htons>
 802475c:	4603      	mov	r3, r0
 802475e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8024760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8024762:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024766:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802476a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024770:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8024772:	68fb      	ldr	r3, [r7, #12]
 8024774:	891b      	ldrh	r3, [r3, #8]
 8024776:	3b14      	subs	r3, #20
 8024778:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802477c:	e0e1      	b.n	8024942 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802477e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8024780:	00db      	lsls	r3, r3, #3
 8024782:	b29b      	uxth	r3, r3
 8024784:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8024788:	4293      	cmp	r3, r2
 802478a:	bf28      	it	cs
 802478c:	4613      	movcs	r3, r2
 802478e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8024790:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024794:	2114      	movs	r1, #20
 8024796:	200e      	movs	r0, #14
 8024798:	f7f6 fc8a 	bl	801b0b0 <pbuf_alloc>
 802479c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247a0:	2b00      	cmp	r3, #0
 80247a2:	f000 80d5 	beq.w	8024950 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80247a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247a8:	895b      	ldrh	r3, [r3, #10]
 80247aa:	2b13      	cmp	r3, #19
 80247ac:	d806      	bhi.n	80247bc <ip4_frag+0xd0>
 80247ae:	4b6c      	ldr	r3, [pc, #432]	; (8024960 <ip4_frag+0x274>)
 80247b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80247b4:	496d      	ldr	r1, [pc, #436]	; (802496c <ip4_frag+0x280>)
 80247b6:	486c      	ldr	r0, [pc, #432]	; (8024968 <ip4_frag+0x27c>)
 80247b8:	f001 fb9a 	bl	8025ef0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80247bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247be:	685b      	ldr	r3, [r3, #4]
 80247c0:	2214      	movs	r2, #20
 80247c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80247c4:	4618      	mov	r0, r3
 80247c6:	f000 ffe5 	bl	8025794 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80247ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80247cc:	685b      	ldr	r3, [r3, #4]
 80247ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80247d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80247d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80247d6:	e064      	b.n	80248a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	895a      	ldrh	r2, [r3, #10]
 80247dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80247de:	1ad3      	subs	r3, r2, r3
 80247e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80247e2:	68fb      	ldr	r3, [r7, #12]
 80247e4:	895b      	ldrh	r3, [r3, #10]
 80247e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80247e8:	429a      	cmp	r2, r3
 80247ea:	d906      	bls.n	80247fa <ip4_frag+0x10e>
 80247ec:	4b5c      	ldr	r3, [pc, #368]	; (8024960 <ip4_frag+0x274>)
 80247ee:	f240 322d 	movw	r2, #813	; 0x32d
 80247f2:	495f      	ldr	r1, [pc, #380]	; (8024970 <ip4_frag+0x284>)
 80247f4:	485c      	ldr	r0, [pc, #368]	; (8024968 <ip4_frag+0x27c>)
 80247f6:	f001 fb7b 	bl	8025ef0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80247fa:	8bfa      	ldrh	r2, [r7, #30]
 80247fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024800:	4293      	cmp	r3, r2
 8024802:	bf28      	it	cs
 8024804:	4613      	movcs	r3, r2
 8024806:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802480a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802480e:	2b00      	cmp	r3, #0
 8024810:	d105      	bne.n	802481e <ip4_frag+0x132>
        poff = 0;
 8024812:	2300      	movs	r3, #0
 8024814:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	60fb      	str	r3, [r7, #12]
        continue;
 802481c:	e041      	b.n	80248a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802481e:	f7ff ff0d 	bl	802463c <ip_frag_alloc_pbuf_custom_ref>
 8024822:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8024824:	69bb      	ldr	r3, [r7, #24]
 8024826:	2b00      	cmp	r3, #0
 8024828:	d103      	bne.n	8024832 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802482a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802482c:	f7f6 ff24 	bl	801b678 <pbuf_free>
        goto memerr;
 8024830:	e08f      	b.n	8024952 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024832:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8024834:	68fb      	ldr	r3, [r7, #12]
 8024836:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8024838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802483a:	4413      	add	r3, r2
 802483c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8024840:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8024844:	9201      	str	r2, [sp, #4]
 8024846:	9300      	str	r3, [sp, #0]
 8024848:	4603      	mov	r3, r0
 802484a:	2241      	movs	r2, #65	; 0x41
 802484c:	2000      	movs	r0, #0
 802484e:	f7f6 fd59 	bl	801b304 <pbuf_alloced_custom>
 8024852:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8024854:	697b      	ldr	r3, [r7, #20]
 8024856:	2b00      	cmp	r3, #0
 8024858:	d106      	bne.n	8024868 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802485a:	69b8      	ldr	r0, [r7, #24]
 802485c:	f7ff fef6 	bl	802464c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8024860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024862:	f7f6 ff09 	bl	801b678 <pbuf_free>
        goto memerr;
 8024866:	e074      	b.n	8024952 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8024868:	68f8      	ldr	r0, [r7, #12]
 802486a:	f7f6 ffab 	bl	801b7c4 <pbuf_ref>
      pcr->original = p;
 802486e:	69bb      	ldr	r3, [r7, #24]
 8024870:	68fa      	ldr	r2, [r7, #12]
 8024872:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8024874:	69bb      	ldr	r3, [r7, #24]
 8024876:	4a3f      	ldr	r2, [pc, #252]	; (8024974 <ip4_frag+0x288>)
 8024878:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802487a:	6979      	ldr	r1, [r7, #20]
 802487c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802487e:	f7f6 ffc9 	bl	801b814 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8024882:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8024886:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802488a:	1ad3      	subs	r3, r2, r3
 802488c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8024890:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8024894:	2b00      	cmp	r3, #0
 8024896:	d004      	beq.n	80248a2 <ip4_frag+0x1b6>
        poff = 0;
 8024898:	2300      	movs	r3, #0
 802489a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802489c:	68fb      	ldr	r3, [r7, #12]
 802489e:	681b      	ldr	r3, [r3, #0]
 80248a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80248a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	d196      	bne.n	80247d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80248aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80248ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80248b0:	4413      	add	r3, r2
 80248b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80248b4:	68bb      	ldr	r3, [r7, #8]
 80248b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80248b8:	f1a3 0213 	sub.w	r2, r3, #19
 80248bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80248c0:	429a      	cmp	r2, r3
 80248c2:	bfcc      	ite	gt
 80248c4:	2301      	movgt	r3, #1
 80248c6:	2300      	movle	r3, #0
 80248c8:	b2db      	uxtb	r3, r3
 80248ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80248cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80248d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80248d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80248d6:	6a3b      	ldr	r3, [r7, #32]
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d002      	beq.n	80248e2 <ip4_frag+0x1f6>
 80248dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80248de:	2b00      	cmp	r3, #0
 80248e0:	d003      	beq.n	80248ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80248e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80248e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80248e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80248ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80248ec:	4618      	mov	r0, r3
 80248ee:	f7f5 fb17 	bl	8019f20 <lwip_htons>
 80248f2:	4603      	mov	r3, r0
 80248f4:	461a      	mov	r2, r3
 80248f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80248f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80248fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80248fc:	3314      	adds	r3, #20
 80248fe:	b29b      	uxth	r3, r3
 8024900:	4618      	mov	r0, r3
 8024902:	f7f5 fb0d 	bl	8019f20 <lwip_htons>
 8024906:	4603      	mov	r3, r0
 8024908:	461a      	mov	r2, r3
 802490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802490c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024910:	2200      	movs	r2, #0
 8024912:	729a      	strb	r2, [r3, #10]
 8024914:	2200      	movs	r2, #0
 8024916:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8024918:	68bb      	ldr	r3, [r7, #8]
 802491a:	695b      	ldr	r3, [r3, #20]
 802491c:	687a      	ldr	r2, [r7, #4]
 802491e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024920:	68b8      	ldr	r0, [r7, #8]
 8024922:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8024924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8024926:	f7f6 fea7 	bl	801b678 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802492a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802492e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8024930:	1ad3      	subs	r3, r2, r3
 8024932:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8024936:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802493a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802493c:	4413      	add	r3, r2
 802493e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8024942:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024946:	2b00      	cmp	r3, #0
 8024948:	f47f af19 	bne.w	802477e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802494c:	2300      	movs	r3, #0
 802494e:	e002      	b.n	8024956 <ip4_frag+0x26a>
      goto memerr;
 8024950:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8024956:	4618      	mov	r0, r3
 8024958:	3748      	adds	r7, #72	; 0x48
 802495a:	46bd      	mov	sp, r7
 802495c:	bd80      	pop	{r7, pc}
 802495e:	bf00      	nop
 8024960:	08029adc 	.word	0x08029adc
 8024964:	08029cb8 	.word	0x08029cb8
 8024968:	08029b24 	.word	0x08029b24
 802496c:	08029cd4 	.word	0x08029cd4
 8024970:	08029cf4 	.word	0x08029cf4
 8024974:	08024685 	.word	0x08024685

08024978 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8024978:	b580      	push	{r7, lr}
 802497a:	b086      	sub	sp, #24
 802497c:	af00      	add	r7, sp, #0
 802497e:	6078      	str	r0, [r7, #4]
 8024980:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8024982:	230e      	movs	r3, #14
 8024984:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024986:	687b      	ldr	r3, [r7, #4]
 8024988:	895b      	ldrh	r3, [r3, #10]
 802498a:	2b0e      	cmp	r3, #14
 802498c:	d96e      	bls.n	8024a6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802498e:	687b      	ldr	r3, [r7, #4]
 8024990:	7bdb      	ldrb	r3, [r3, #15]
 8024992:	2b00      	cmp	r3, #0
 8024994:	d106      	bne.n	80249a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8024996:	683b      	ldr	r3, [r7, #0]
 8024998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802499c:	3301      	adds	r3, #1
 802499e:	b2da      	uxtb	r2, r3
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	685b      	ldr	r3, [r3, #4]
 80249a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80249aa:	693b      	ldr	r3, [r7, #16]
 80249ac:	7b1a      	ldrb	r2, [r3, #12]
 80249ae:	7b5b      	ldrb	r3, [r3, #13]
 80249b0:	021b      	lsls	r3, r3, #8
 80249b2:	4313      	orrs	r3, r2
 80249b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80249b6:	693b      	ldr	r3, [r7, #16]
 80249b8:	781b      	ldrb	r3, [r3, #0]
 80249ba:	f003 0301 	and.w	r3, r3, #1
 80249be:	2b00      	cmp	r3, #0
 80249c0:	d023      	beq.n	8024a0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80249c2:	693b      	ldr	r3, [r7, #16]
 80249c4:	781b      	ldrb	r3, [r3, #0]
 80249c6:	2b01      	cmp	r3, #1
 80249c8:	d10f      	bne.n	80249ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80249ca:	693b      	ldr	r3, [r7, #16]
 80249cc:	785b      	ldrb	r3, [r3, #1]
 80249ce:	2b00      	cmp	r3, #0
 80249d0:	d11b      	bne.n	8024a0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80249d2:	693b      	ldr	r3, [r7, #16]
 80249d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80249d6:	2b5e      	cmp	r3, #94	; 0x5e
 80249d8:	d117      	bne.n	8024a0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	7b5b      	ldrb	r3, [r3, #13]
 80249de:	f043 0310 	orr.w	r3, r3, #16
 80249e2:	b2da      	uxtb	r2, r3
 80249e4:	687b      	ldr	r3, [r7, #4]
 80249e6:	735a      	strb	r2, [r3, #13]
 80249e8:	e00f      	b.n	8024a0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80249ea:	693b      	ldr	r3, [r7, #16]
 80249ec:	2206      	movs	r2, #6
 80249ee:	4928      	ldr	r1, [pc, #160]	; (8024a90 <ethernet_input+0x118>)
 80249f0:	4618      	mov	r0, r3
 80249f2:	f000 fec1 	bl	8025778 <memcmp>
 80249f6:	4603      	mov	r3, r0
 80249f8:	2b00      	cmp	r3, #0
 80249fa:	d106      	bne.n	8024a0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	7b5b      	ldrb	r3, [r3, #13]
 8024a00:	f043 0308 	orr.w	r3, r3, #8
 8024a04:	b2da      	uxtb	r2, r3
 8024a06:	687b      	ldr	r3, [r7, #4]
 8024a08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8024a0a:	89fb      	ldrh	r3, [r7, #14]
 8024a0c:	2b08      	cmp	r3, #8
 8024a0e:	d003      	beq.n	8024a18 <ethernet_input+0xa0>
 8024a10:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8024a14:	d014      	beq.n	8024a40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8024a16:	e032      	b.n	8024a7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024a18:	683b      	ldr	r3, [r7, #0]
 8024a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024a1e:	f003 0308 	and.w	r3, r3, #8
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d024      	beq.n	8024a70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024a26:	8afb      	ldrh	r3, [r7, #22]
 8024a28:	4619      	mov	r1, r3
 8024a2a:	6878      	ldr	r0, [r7, #4]
 8024a2c:	f7f6 fd9e 	bl	801b56c <pbuf_remove_header>
 8024a30:	4603      	mov	r3, r0
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	d11e      	bne.n	8024a74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8024a36:	6839      	ldr	r1, [r7, #0]
 8024a38:	6878      	ldr	r0, [r7, #4]
 8024a3a:	f7fe ff27 	bl	802388c <ip4_input>
      break;
 8024a3e:	e013      	b.n	8024a68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8024a40:	683b      	ldr	r3, [r7, #0]
 8024a42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024a46:	f003 0308 	and.w	r3, r3, #8
 8024a4a:	2b00      	cmp	r3, #0
 8024a4c:	d014      	beq.n	8024a78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8024a4e:	8afb      	ldrh	r3, [r7, #22]
 8024a50:	4619      	mov	r1, r3
 8024a52:	6878      	ldr	r0, [r7, #4]
 8024a54:	f7f6 fd8a 	bl	801b56c <pbuf_remove_header>
 8024a58:	4603      	mov	r3, r0
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d10e      	bne.n	8024a7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8024a5e:	6839      	ldr	r1, [r7, #0]
 8024a60:	6878      	ldr	r0, [r7, #4]
 8024a62:	f7fe f8c7 	bl	8022bf4 <etharp_input>
      break;
 8024a66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8024a68:	2300      	movs	r3, #0
 8024a6a:	e00c      	b.n	8024a86 <ethernet_input+0x10e>
    goto free_and_return;
 8024a6c:	bf00      	nop
 8024a6e:	e006      	b.n	8024a7e <ethernet_input+0x106>
        goto free_and_return;
 8024a70:	bf00      	nop
 8024a72:	e004      	b.n	8024a7e <ethernet_input+0x106>
        goto free_and_return;
 8024a74:	bf00      	nop
 8024a76:	e002      	b.n	8024a7e <ethernet_input+0x106>
        goto free_and_return;
 8024a78:	bf00      	nop
 8024a7a:	e000      	b.n	8024a7e <ethernet_input+0x106>
        goto free_and_return;
 8024a7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8024a7e:	6878      	ldr	r0, [r7, #4]
 8024a80:	f7f6 fdfa 	bl	801b678 <pbuf_free>
  return ERR_OK;
 8024a84:	2300      	movs	r3, #0
}
 8024a86:	4618      	mov	r0, r3
 8024a88:	3718      	adds	r7, #24
 8024a8a:	46bd      	mov	sp, r7
 8024a8c:	bd80      	pop	{r7, pc}
 8024a8e:	bf00      	nop
 8024a90:	0802b99c 	.word	0x0802b99c

08024a94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024a94:	b580      	push	{r7, lr}
 8024a96:	b086      	sub	sp, #24
 8024a98:	af00      	add	r7, sp, #0
 8024a9a:	60f8      	str	r0, [r7, #12]
 8024a9c:	60b9      	str	r1, [r7, #8]
 8024a9e:	607a      	str	r2, [r7, #4]
 8024aa0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8024aa2:	8c3b      	ldrh	r3, [r7, #32]
 8024aa4:	4618      	mov	r0, r3
 8024aa6:	f7f5 fa3b 	bl	8019f20 <lwip_htons>
 8024aaa:	4603      	mov	r3, r0
 8024aac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8024aae:	210e      	movs	r1, #14
 8024ab0:	68b8      	ldr	r0, [r7, #8]
 8024ab2:	f7f6 fd4b 	bl	801b54c <pbuf_add_header>
 8024ab6:	4603      	mov	r3, r0
 8024ab8:	2b00      	cmp	r3, #0
 8024aba:	d125      	bne.n	8024b08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024abc:	68bb      	ldr	r3, [r7, #8]
 8024abe:	685b      	ldr	r3, [r3, #4]
 8024ac0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8024ac2:	693b      	ldr	r3, [r7, #16]
 8024ac4:	8afa      	ldrh	r2, [r7, #22]
 8024ac6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024ac8:	693b      	ldr	r3, [r7, #16]
 8024aca:	2206      	movs	r2, #6
 8024acc:	6839      	ldr	r1, [r7, #0]
 8024ace:	4618      	mov	r0, r3
 8024ad0:	f000 fe60 	bl	8025794 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024ad4:	693b      	ldr	r3, [r7, #16]
 8024ad6:	3306      	adds	r3, #6
 8024ad8:	2206      	movs	r2, #6
 8024ada:	6879      	ldr	r1, [r7, #4]
 8024adc:	4618      	mov	r0, r3
 8024ade:	f000 fe59 	bl	8025794 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8024ae2:	68fb      	ldr	r3, [r7, #12]
 8024ae4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8024ae8:	2b06      	cmp	r3, #6
 8024aea:	d006      	beq.n	8024afa <ethernet_output+0x66>
 8024aec:	4b0a      	ldr	r3, [pc, #40]	; (8024b18 <ethernet_output+0x84>)
 8024aee:	f44f 7299 	mov.w	r2, #306	; 0x132
 8024af2:	490a      	ldr	r1, [pc, #40]	; (8024b1c <ethernet_output+0x88>)
 8024af4:	480a      	ldr	r0, [pc, #40]	; (8024b20 <ethernet_output+0x8c>)
 8024af6:	f001 f9fb 	bl	8025ef0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8024afa:	68fb      	ldr	r3, [r7, #12]
 8024afc:	699b      	ldr	r3, [r3, #24]
 8024afe:	68b9      	ldr	r1, [r7, #8]
 8024b00:	68f8      	ldr	r0, [r7, #12]
 8024b02:	4798      	blx	r3
 8024b04:	4603      	mov	r3, r0
 8024b06:	e002      	b.n	8024b0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8024b08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8024b0a:	f06f 0301 	mvn.w	r3, #1
}
 8024b0e:	4618      	mov	r0, r3
 8024b10:	3718      	adds	r7, #24
 8024b12:	46bd      	mov	sp, r7
 8024b14:	bd80      	pop	{r7, pc}
 8024b16:	bf00      	nop
 8024b18:	08029d04 	.word	0x08029d04
 8024b1c:	08029d3c 	.word	0x08029d3c
 8024b20:	08029d70 	.word	0x08029d70

08024b24 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8024b24:	b580      	push	{r7, lr}
 8024b26:	b086      	sub	sp, #24
 8024b28:	af00      	add	r7, sp, #0
 8024b2a:	6078      	str	r0, [r7, #4]
 8024b2c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	60bb      	str	r3, [r7, #8]
 8024b32:	2304      	movs	r3, #4
 8024b34:	60fb      	str	r3, [r7, #12]
 8024b36:	2300      	movs	r3, #0
 8024b38:	613b      	str	r3, [r7, #16]
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8024b3e:	f107 0308 	add.w	r3, r7, #8
 8024b42:	2100      	movs	r1, #0
 8024b44:	4618      	mov	r0, r3
 8024b46:	f7ef ffdc 	bl	8014b02 <osMessageCreate>
 8024b4a:	4602      	mov	r2, r0
 8024b4c:	687b      	ldr	r3, [r7, #4]
 8024b4e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8024b50:	687b      	ldr	r3, [r7, #4]
 8024b52:	681b      	ldr	r3, [r3, #0]
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d102      	bne.n	8024b5e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8024b58:	f04f 33ff 	mov.w	r3, #4294967295
 8024b5c:	e000      	b.n	8024b60 <sys_mbox_new+0x3c>

  return ERR_OK;
 8024b5e:	2300      	movs	r3, #0
}
 8024b60:	4618      	mov	r0, r3
 8024b62:	3718      	adds	r7, #24
 8024b64:	46bd      	mov	sp, r7
 8024b66:	bd80      	pop	{r7, pc}

08024b68 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8024b68:	b580      	push	{r7, lr}
 8024b6a:	b082      	sub	sp, #8
 8024b6c:	af00      	add	r7, sp, #0
 8024b6e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	681b      	ldr	r3, [r3, #0]
 8024b74:	4618      	mov	r0, r3
 8024b76:	f7f0 f8a1 	bl	8014cbc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8024b7a:	687b      	ldr	r3, [r7, #4]
 8024b7c:	681b      	ldr	r3, [r3, #0]
 8024b7e:	4618      	mov	r0, r3
 8024b80:	f7f0 f8b2 	bl	8014ce8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8024b84:	bf00      	nop
 8024b86:	3708      	adds	r7, #8
 8024b88:	46bd      	mov	sp, r7
 8024b8a:	bd80      	pop	{r7, pc}

08024b8c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8024b8c:	b580      	push	{r7, lr}
 8024b8e:	b084      	sub	sp, #16
 8024b90:	af00      	add	r7, sp, #0
 8024b92:	6078      	str	r0, [r7, #4]
 8024b94:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	6839      	ldr	r1, [r7, #0]
 8024b9c:	2200      	movs	r2, #0
 8024b9e:	4618      	mov	r0, r3
 8024ba0:	f7ef ffd8 	bl	8014b54 <osMessagePut>
 8024ba4:	4603      	mov	r3, r0
 8024ba6:	2b00      	cmp	r3, #0
 8024ba8:	d102      	bne.n	8024bb0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8024baa:	2300      	movs	r3, #0
 8024bac:	73fb      	strb	r3, [r7, #15]
 8024bae:	e001      	b.n	8024bb4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8024bb0:	23ff      	movs	r3, #255	; 0xff
 8024bb2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8024bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8024bb8:	4618      	mov	r0, r3
 8024bba:	3710      	adds	r7, #16
 8024bbc:	46bd      	mov	sp, r7
 8024bbe:	bd80      	pop	{r7, pc}

08024bc0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8024bc0:	b580      	push	{r7, lr}
 8024bc2:	b08c      	sub	sp, #48	; 0x30
 8024bc4:	af00      	add	r7, sp, #0
 8024bc6:	61f8      	str	r0, [r7, #28]
 8024bc8:	61b9      	str	r1, [r7, #24]
 8024bca:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024bcc:	f7ef fdb6 	bl	801473c <osKernelSysTick>
 8024bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024bd2:	697b      	ldr	r3, [r7, #20]
 8024bd4:	2b00      	cmp	r3, #0
 8024bd6:	d017      	beq.n	8024c08 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024bd8:	69fb      	ldr	r3, [r7, #28]
 8024bda:	6819      	ldr	r1, [r3, #0]
 8024bdc:	f107 0320 	add.w	r3, r7, #32
 8024be0:	697a      	ldr	r2, [r7, #20]
 8024be2:	4618      	mov	r0, r3
 8024be4:	f7ef fff6 	bl	8014bd4 <osMessageGet>

    if(event.status == osEventMessage)
 8024be8:	6a3b      	ldr	r3, [r7, #32]
 8024bea:	2b10      	cmp	r3, #16
 8024bec:	d109      	bne.n	8024c02 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8024bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bf0:	461a      	mov	r2, r3
 8024bf2:	69bb      	ldr	r3, [r7, #24]
 8024bf4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8024bf6:	f7ef fda1 	bl	801473c <osKernelSysTick>
 8024bfa:	4602      	mov	r2, r0
 8024bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024bfe:	1ad3      	subs	r3, r2, r3
 8024c00:	e019      	b.n	8024c36 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024c02:	f04f 33ff 	mov.w	r3, #4294967295
 8024c06:	e016      	b.n	8024c36 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8024c08:	69fb      	ldr	r3, [r7, #28]
 8024c0a:	6819      	ldr	r1, [r3, #0]
 8024c0c:	463b      	mov	r3, r7
 8024c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8024c12:	4618      	mov	r0, r3
 8024c14:	f7ef ffde 	bl	8014bd4 <osMessageGet>
 8024c18:	f107 0320 	add.w	r3, r7, #32
 8024c1c:	463a      	mov	r2, r7
 8024c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8024c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8024c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024c26:	461a      	mov	r2, r3
 8024c28:	69bb      	ldr	r3, [r7, #24]
 8024c2a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8024c2c:	f7ef fd86 	bl	801473c <osKernelSysTick>
 8024c30:	4602      	mov	r2, r0
 8024c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024c34:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024c36:	4618      	mov	r0, r3
 8024c38:	3730      	adds	r7, #48	; 0x30
 8024c3a:	46bd      	mov	sp, r7
 8024c3c:	bd80      	pop	{r7, pc}

08024c3e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8024c3e:	b580      	push	{r7, lr}
 8024c40:	b086      	sub	sp, #24
 8024c42:	af00      	add	r7, sp, #0
 8024c44:	6078      	str	r0, [r7, #4]
 8024c46:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	6819      	ldr	r1, [r3, #0]
 8024c4c:	f107 030c 	add.w	r3, r7, #12
 8024c50:	2200      	movs	r2, #0
 8024c52:	4618      	mov	r0, r3
 8024c54:	f7ef ffbe 	bl	8014bd4 <osMessageGet>

  if(event.status == osEventMessage)
 8024c58:	68fb      	ldr	r3, [r7, #12]
 8024c5a:	2b10      	cmp	r3, #16
 8024c5c:	d105      	bne.n	8024c6a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8024c5e:	693b      	ldr	r3, [r7, #16]
 8024c60:	461a      	mov	r2, r3
 8024c62:	683b      	ldr	r3, [r7, #0]
 8024c64:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8024c66:	2300      	movs	r3, #0
 8024c68:	e001      	b.n	8024c6e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8024c6a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8024c6e:	4618      	mov	r0, r3
 8024c70:	3718      	adds	r7, #24
 8024c72:	46bd      	mov	sp, r7
 8024c74:	bd80      	pop	{r7, pc}

08024c76 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8024c76:	b480      	push	{r7}
 8024c78:	b083      	sub	sp, #12
 8024c7a:	af00      	add	r7, sp, #0
 8024c7c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	681b      	ldr	r3, [r3, #0]
 8024c82:	2b00      	cmp	r3, #0
 8024c84:	d101      	bne.n	8024c8a <sys_mbox_valid+0x14>
    return 0;
 8024c86:	2300      	movs	r3, #0
 8024c88:	e000      	b.n	8024c8c <sys_mbox_valid+0x16>
  else
    return 1;
 8024c8a:	2301      	movs	r3, #1
}
 8024c8c:	4618      	mov	r0, r3
 8024c8e:	370c      	adds	r7, #12
 8024c90:	46bd      	mov	sp, r7
 8024c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c96:	4770      	bx	lr

08024c98 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8024c98:	b480      	push	{r7}
 8024c9a:	b083      	sub	sp, #12
 8024c9c:	af00      	add	r7, sp, #0
 8024c9e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8024ca0:	687b      	ldr	r3, [r7, #4]
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	601a      	str	r2, [r3, #0]
}
 8024ca6:	bf00      	nop
 8024ca8:	370c      	adds	r7, #12
 8024caa:	46bd      	mov	sp, r7
 8024cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cb0:	4770      	bx	lr

08024cb2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8024cb2:	b580      	push	{r7, lr}
 8024cb4:	b084      	sub	sp, #16
 8024cb6:	af00      	add	r7, sp, #0
 8024cb8:	6078      	str	r0, [r7, #4]
 8024cba:	460b      	mov	r3, r1
 8024cbc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8024cbe:	2300      	movs	r3, #0
 8024cc0:	60bb      	str	r3, [r7, #8]
 8024cc2:	2300      	movs	r3, #0
 8024cc4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8024cc6:	f107 0308 	add.w	r3, r7, #8
 8024cca:	2101      	movs	r1, #1
 8024ccc:	4618      	mov	r0, r3
 8024cce:	f7ef fe41 	bl	8014954 <osSemaphoreCreate>
 8024cd2:	4602      	mov	r2, r0
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	681b      	ldr	r3, [r3, #0]
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	d102      	bne.n	8024ce6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8024ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8024ce4:	e009      	b.n	8024cfa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8024ce6:	78fb      	ldrb	r3, [r7, #3]
 8024ce8:	2b00      	cmp	r3, #0
 8024cea:	d105      	bne.n	8024cf8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	2100      	movs	r1, #0
 8024cf2:	4618      	mov	r0, r3
 8024cf4:	f7ef fe6e 	bl	80149d4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8024cf8:	2300      	movs	r3, #0
}
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	3710      	adds	r7, #16
 8024cfe:	46bd      	mov	sp, r7
 8024d00:	bd80      	pop	{r7, pc}

08024d02 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8024d02:	b580      	push	{r7, lr}
 8024d04:	b084      	sub	sp, #16
 8024d06:	af00      	add	r7, sp, #0
 8024d08:	6078      	str	r0, [r7, #4]
 8024d0a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8024d0c:	f7ef fd16 	bl	801473c <osKernelSysTick>
 8024d10:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8024d12:	683b      	ldr	r3, [r7, #0]
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d011      	beq.n	8024d3c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	6839      	ldr	r1, [r7, #0]
 8024d1e:	4618      	mov	r0, r3
 8024d20:	f7ef fe58 	bl	80149d4 <osSemaphoreWait>
 8024d24:	4603      	mov	r3, r0
 8024d26:	2b00      	cmp	r3, #0
 8024d28:	d105      	bne.n	8024d36 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8024d2a:	f7ef fd07 	bl	801473c <osKernelSysTick>
 8024d2e:	4602      	mov	r2, r0
 8024d30:	68fb      	ldr	r3, [r7, #12]
 8024d32:	1ad3      	subs	r3, r2, r3
 8024d34:	e012      	b.n	8024d5c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8024d36:	f04f 33ff 	mov.w	r3, #4294967295
 8024d3a:	e00f      	b.n	8024d5c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8024d3c:	bf00      	nop
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	681b      	ldr	r3, [r3, #0]
 8024d42:	f04f 31ff 	mov.w	r1, #4294967295
 8024d46:	4618      	mov	r0, r3
 8024d48:	f7ef fe44 	bl	80149d4 <osSemaphoreWait>
 8024d4c:	4603      	mov	r3, r0
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	d1f5      	bne.n	8024d3e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8024d52:	f7ef fcf3 	bl	801473c <osKernelSysTick>
 8024d56:	4602      	mov	r2, r0
 8024d58:	68fb      	ldr	r3, [r7, #12]
 8024d5a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024d5c:	4618      	mov	r0, r3
 8024d5e:	3710      	adds	r7, #16
 8024d60:	46bd      	mov	sp, r7
 8024d62:	bd80      	pop	{r7, pc}

08024d64 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8024d64:	b580      	push	{r7, lr}
 8024d66:	b082      	sub	sp, #8
 8024d68:	af00      	add	r7, sp, #0
 8024d6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	681b      	ldr	r3, [r3, #0]
 8024d70:	4618      	mov	r0, r3
 8024d72:	f7ef fe7d 	bl	8014a70 <osSemaphoreRelease>
}
 8024d76:	bf00      	nop
 8024d78:	3708      	adds	r7, #8
 8024d7a:	46bd      	mov	sp, r7
 8024d7c:	bd80      	pop	{r7, pc}

08024d7e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8024d7e:	b580      	push	{r7, lr}
 8024d80:	b082      	sub	sp, #8
 8024d82:	af00      	add	r7, sp, #0
 8024d84:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	681b      	ldr	r3, [r3, #0]
 8024d8a:	4618      	mov	r0, r3
 8024d8c:	f7ef fea6 	bl	8014adc <osSemaphoreDelete>
}
 8024d90:	bf00      	nop
 8024d92:	3708      	adds	r7, #8
 8024d94:	46bd      	mov	sp, r7
 8024d96:	bd80      	pop	{r7, pc}

08024d98 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8024d98:	b480      	push	{r7}
 8024d9a:	b083      	sub	sp, #12
 8024d9c:	af00      	add	r7, sp, #0
 8024d9e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	681b      	ldr	r3, [r3, #0]
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	d101      	bne.n	8024dac <sys_sem_valid+0x14>
    return 0;
 8024da8:	2300      	movs	r3, #0
 8024daa:	e000      	b.n	8024dae <sys_sem_valid+0x16>
  else
    return 1;
 8024dac:	2301      	movs	r3, #1
}
 8024dae:	4618      	mov	r0, r3
 8024db0:	370c      	adds	r7, #12
 8024db2:	46bd      	mov	sp, r7
 8024db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024db8:	4770      	bx	lr

08024dba <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8024dba:	b480      	push	{r7}
 8024dbc:	b083      	sub	sp, #12
 8024dbe:	af00      	add	r7, sp, #0
 8024dc0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8024dc2:	687b      	ldr	r3, [r7, #4]
 8024dc4:	2200      	movs	r2, #0
 8024dc6:	601a      	str	r2, [r3, #0]
}
 8024dc8:	bf00      	nop
 8024dca:	370c      	adds	r7, #12
 8024dcc:	46bd      	mov	sp, r7
 8024dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dd2:	4770      	bx	lr

08024dd4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024dd4:	b580      	push	{r7, lr}
 8024dd6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024dd8:	4803      	ldr	r0, [pc, #12]	; (8024de8 <sys_init+0x14>)
 8024dda:	f7ef fd1f 	bl	801481c <osMutexCreate>
 8024dde:	4603      	mov	r3, r0
 8024de0:	4a02      	ldr	r2, [pc, #8]	; (8024dec <sys_init+0x18>)
 8024de2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8024de4:	bf00      	nop
 8024de6:	bd80      	pop	{r7, pc}
 8024de8:	0802b9ac 	.word	0x0802b9ac
 8024dec:	200102d4 	.word	0x200102d4

08024df0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8024df0:	b580      	push	{r7, lr}
 8024df2:	b084      	sub	sp, #16
 8024df4:	af00      	add	r7, sp, #0
 8024df6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8024df8:	2300      	movs	r3, #0
 8024dfa:	60bb      	str	r3, [r7, #8]
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8024e00:	f107 0308 	add.w	r3, r7, #8
 8024e04:	4618      	mov	r0, r3
 8024e06:	f7ef fd09 	bl	801481c <osMutexCreate>
 8024e0a:	4602      	mov	r2, r0
 8024e0c:	687b      	ldr	r3, [r7, #4]
 8024e0e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	681b      	ldr	r3, [r3, #0]
 8024e14:	2b00      	cmp	r3, #0
 8024e16:	d102      	bne.n	8024e1e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8024e18:	f04f 33ff 	mov.w	r3, #4294967295
 8024e1c:	e000      	b.n	8024e20 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8024e1e:	2300      	movs	r3, #0
}
 8024e20:	4618      	mov	r0, r3
 8024e22:	3710      	adds	r7, #16
 8024e24:	46bd      	mov	sp, r7
 8024e26:	bd80      	pop	{r7, pc}

08024e28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8024e28:	b580      	push	{r7, lr}
 8024e2a:	b082      	sub	sp, #8
 8024e2c:	af00      	add	r7, sp, #0
 8024e2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8024e30:	687b      	ldr	r3, [r7, #4]
 8024e32:	681b      	ldr	r3, [r3, #0]
 8024e34:	f04f 31ff 	mov.w	r1, #4294967295
 8024e38:	4618      	mov	r0, r3
 8024e3a:	f7ef fd07 	bl	801484c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8024e3e:	bf00      	nop
 8024e40:	3708      	adds	r7, #8
 8024e42:	46bd      	mov	sp, r7
 8024e44:	bd80      	pop	{r7, pc}

08024e46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8024e46:	b580      	push	{r7, lr}
 8024e48:	b082      	sub	sp, #8
 8024e4a:	af00      	add	r7, sp, #0
 8024e4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8024e4e:	687b      	ldr	r3, [r7, #4]
 8024e50:	681b      	ldr	r3, [r3, #0]
 8024e52:	4618      	mov	r0, r3
 8024e54:	f7ef fd48 	bl	80148e8 <osMutexRelease>
}
 8024e58:	bf00      	nop
 8024e5a:	3708      	adds	r7, #8
 8024e5c:	46bd      	mov	sp, r7
 8024e5e:	bd80      	pop	{r7, pc}

08024e60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8024e60:	b580      	push	{r7, lr}
 8024e62:	b08c      	sub	sp, #48	; 0x30
 8024e64:	af00      	add	r7, sp, #0
 8024e66:	60f8      	str	r0, [r7, #12]
 8024e68:	60b9      	str	r1, [r7, #8]
 8024e6a:	607a      	str	r2, [r7, #4]
 8024e6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8024e6e:	f107 0314 	add.w	r3, r7, #20
 8024e72:	2200      	movs	r2, #0
 8024e74:	601a      	str	r2, [r3, #0]
 8024e76:	605a      	str	r2, [r3, #4]
 8024e78:	609a      	str	r2, [r3, #8]
 8024e7a:	60da      	str	r2, [r3, #12]
 8024e7c:	611a      	str	r2, [r3, #16]
 8024e7e:	615a      	str	r2, [r3, #20]
 8024e80:	619a      	str	r2, [r3, #24]
 8024e82:	68fb      	ldr	r3, [r7, #12]
 8024e84:	617b      	str	r3, [r7, #20]
 8024e86:	68bb      	ldr	r3, [r7, #8]
 8024e88:	61bb      	str	r3, [r7, #24]
 8024e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024e8c:	b21b      	sxth	r3, r3
 8024e8e:	83bb      	strh	r3, [r7, #28]
 8024e90:	683b      	ldr	r3, [r7, #0]
 8024e92:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8024e94:	f107 0314 	add.w	r3, r7, #20
 8024e98:	6879      	ldr	r1, [r7, #4]
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	f7ef fc5e 	bl	801475c <osThreadCreate>
 8024ea0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	3730      	adds	r7, #48	; 0x30
 8024ea6:	46bd      	mov	sp, r7
 8024ea8:	bd80      	pop	{r7, pc}
	...

08024eac <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024eac:	b580      	push	{r7, lr}
 8024eae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8024eb0:	4b04      	ldr	r3, [pc, #16]	; (8024ec4 <sys_arch_protect+0x18>)
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8024eb8:	4618      	mov	r0, r3
 8024eba:	f7ef fcc7 	bl	801484c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8024ebe:	2301      	movs	r3, #1
}
 8024ec0:	4618      	mov	r0, r3
 8024ec2:	bd80      	pop	{r7, pc}
 8024ec4:	200102d4 	.word	0x200102d4

08024ec8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8024ec8:	b580      	push	{r7, lr}
 8024eca:	b082      	sub	sp, #8
 8024ecc:	af00      	add	r7, sp, #0
 8024ece:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8024ed0:	4b04      	ldr	r3, [pc, #16]	; (8024ee4 <sys_arch_unprotect+0x1c>)
 8024ed2:	681b      	ldr	r3, [r3, #0]
 8024ed4:	4618      	mov	r0, r3
 8024ed6:	f7ef fd07 	bl	80148e8 <osMutexRelease>
}
 8024eda:	bf00      	nop
 8024edc:	3708      	adds	r7, #8
 8024ede:	46bd      	mov	sp, r7
 8024ee0:	bd80      	pop	{r7, pc}
 8024ee2:	bf00      	nop
 8024ee4:	200102d4 	.word	0x200102d4

08024ee8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8024ee8:	b580      	push	{r7, lr}
 8024eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8024eec:	2201      	movs	r2, #1
 8024eee:	490e      	ldr	r1, [pc, #56]	; (8024f28 <MX_USB_HOST_Init+0x40>)
 8024ef0:	480e      	ldr	r0, [pc, #56]	; (8024f2c <MX_USB_HOST_Init+0x44>)
 8024ef2:	f7ed fdff 	bl	8012af4 <USBH_Init>
 8024ef6:	4603      	mov	r3, r0
 8024ef8:	2b00      	cmp	r3, #0
 8024efa:	d001      	beq.n	8024f00 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8024efc:	f7dc ff14 	bl	8001d28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8024f00:	490b      	ldr	r1, [pc, #44]	; (8024f30 <MX_USB_HOST_Init+0x48>)
 8024f02:	480a      	ldr	r0, [pc, #40]	; (8024f2c <MX_USB_HOST_Init+0x44>)
 8024f04:	f7ed feac 	bl	8012c60 <USBH_RegisterClass>
 8024f08:	4603      	mov	r3, r0
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	d001      	beq.n	8024f12 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8024f0e:	f7dc ff0b 	bl	8001d28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8024f12:	4806      	ldr	r0, [pc, #24]	; (8024f2c <MX_USB_HOST_Init+0x44>)
 8024f14:	f7ed ff30 	bl	8012d78 <USBH_Start>
 8024f18:	4603      	mov	r3, r0
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d001      	beq.n	8024f22 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8024f1e:	f7dc ff03 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8024f22:	bf00      	nop
 8024f24:	bd80      	pop	{r7, pc}
 8024f26:	bf00      	nop
 8024f28:	08024f35 	.word	0x08024f35
 8024f2c:	200102d8 	.word	0x200102d8
 8024f30:	20000040 	.word	0x20000040

08024f34 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8024f34:	b480      	push	{r7}
 8024f36:	b083      	sub	sp, #12
 8024f38:	af00      	add	r7, sp, #0
 8024f3a:	6078      	str	r0, [r7, #4]
 8024f3c:	460b      	mov	r3, r1
 8024f3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8024f40:	78fb      	ldrb	r3, [r7, #3]
 8024f42:	3b01      	subs	r3, #1
 8024f44:	2b04      	cmp	r3, #4
 8024f46:	d819      	bhi.n	8024f7c <USBH_UserProcess+0x48>
 8024f48:	a201      	add	r2, pc, #4	; (adr r2, 8024f50 <USBH_UserProcess+0x1c>)
 8024f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f4e:	bf00      	nop
 8024f50:	08024f7d 	.word	0x08024f7d
 8024f54:	08024f6d 	.word	0x08024f6d
 8024f58:	08024f7d 	.word	0x08024f7d
 8024f5c:	08024f75 	.word	0x08024f75
 8024f60:	08024f65 	.word	0x08024f65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8024f64:	4b09      	ldr	r3, [pc, #36]	; (8024f8c <USBH_UserProcess+0x58>)
 8024f66:	2203      	movs	r2, #3
 8024f68:	701a      	strb	r2, [r3, #0]
  break;
 8024f6a:	e008      	b.n	8024f7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8024f6c:	4b07      	ldr	r3, [pc, #28]	; (8024f8c <USBH_UserProcess+0x58>)
 8024f6e:	2202      	movs	r2, #2
 8024f70:	701a      	strb	r2, [r3, #0]
  break;
 8024f72:	e004      	b.n	8024f7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8024f74:	4b05      	ldr	r3, [pc, #20]	; (8024f8c <USBH_UserProcess+0x58>)
 8024f76:	2201      	movs	r2, #1
 8024f78:	701a      	strb	r2, [r3, #0]
  break;
 8024f7a:	e000      	b.n	8024f7e <USBH_UserProcess+0x4a>

  default:
  break;
 8024f7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8024f7e:	bf00      	nop
 8024f80:	370c      	adds	r7, #12
 8024f82:	46bd      	mov	sp, r7
 8024f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f88:	4770      	bx	lr
 8024f8a:	bf00      	nop
 8024f8c:	20008872 	.word	0x20008872

08024f90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8024f90:	b580      	push	{r7, lr}
 8024f92:	b08a      	sub	sp, #40	; 0x28
 8024f94:	af00      	add	r7, sp, #0
 8024f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8024f98:	f107 0314 	add.w	r3, r7, #20
 8024f9c:	2200      	movs	r2, #0
 8024f9e:	601a      	str	r2, [r3, #0]
 8024fa0:	605a      	str	r2, [r3, #4]
 8024fa2:	609a      	str	r2, [r3, #8]
 8024fa4:	60da      	str	r2, [r3, #12]
 8024fa6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	681b      	ldr	r3, [r3, #0]
 8024fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8024fb0:	d13c      	bne.n	802502c <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8024fb2:	4b20      	ldr	r3, [pc, #128]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fb6:	4a1f      	ldr	r2, [pc, #124]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024fb8:	f043 0301 	orr.w	r3, r3, #1
 8024fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8024fbe:	4b1d      	ldr	r3, [pc, #116]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024fc2:	f003 0301 	and.w	r3, r3, #1
 8024fc6:	613b      	str	r3, [r7, #16]
 8024fc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8024fca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8024fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8024fd0:	2302      	movs	r3, #2
 8024fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024fd4:	2300      	movs	r3, #0
 8024fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8024fd8:	2303      	movs	r3, #3
 8024fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8024fdc:	230a      	movs	r3, #10
 8024fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8024fe0:	f107 0314 	add.w	r3, r7, #20
 8024fe4:	4619      	mov	r1, r3
 8024fe6:	4814      	ldr	r0, [pc, #80]	; (8025038 <HAL_HCD_MspInit+0xa8>)
 8024fe8:	f7e0 fdb4 	bl	8005b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8024fec:	4b11      	ldr	r3, [pc, #68]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024ff0:	4a10      	ldr	r2, [pc, #64]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024ff6:	6353      	str	r3, [r2, #52]	; 0x34
 8024ff8:	4b0e      	ldr	r3, [pc, #56]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8024ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025000:	60fb      	str	r3, [r7, #12]
 8025002:	68fb      	ldr	r3, [r7, #12]
 8025004:	4b0b      	ldr	r3, [pc, #44]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8025006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025008:	4a0a      	ldr	r2, [pc, #40]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 802500a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802500e:	6453      	str	r3, [r2, #68]	; 0x44
 8025010:	4b08      	ldr	r3, [pc, #32]	; (8025034 <HAL_HCD_MspInit+0xa4>)
 8025012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025018:	60bb      	str	r3, [r7, #8]
 802501a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 802501c:	2200      	movs	r2, #0
 802501e:	2105      	movs	r1, #5
 8025020:	2043      	movs	r0, #67	; 0x43
 8025022:	f7de fbff 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8025026:	2043      	movs	r0, #67	; 0x43
 8025028:	f7de fc18 	bl	800385c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 802502c:	bf00      	nop
 802502e:	3728      	adds	r7, #40	; 0x28
 8025030:	46bd      	mov	sp, r7
 8025032:	bd80      	pop	{r7, pc}
 8025034:	40023800 	.word	0x40023800
 8025038:	40020000 	.word	0x40020000

0802503c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802503c:	b580      	push	{r7, lr}
 802503e:	b082      	sub	sp, #8
 8025040:	af00      	add	r7, sp, #0
 8025042:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802504a:	4618      	mov	r0, r3
 802504c:	f7ee fb41 	bl	80136d2 <USBH_LL_IncTimer>
}
 8025050:	bf00      	nop
 8025052:	3708      	adds	r7, #8
 8025054:	46bd      	mov	sp, r7
 8025056:	bd80      	pop	{r7, pc}

08025058 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8025058:	b580      	push	{r7, lr}
 802505a:	b082      	sub	sp, #8
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8025066:	4618      	mov	r0, r3
 8025068:	f7ee fb85 	bl	8013776 <USBH_LL_Connect>
}
 802506c:	bf00      	nop
 802506e:	3708      	adds	r7, #8
 8025070:	46bd      	mov	sp, r7
 8025072:	bd80      	pop	{r7, pc}

08025074 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8025074:	b580      	push	{r7, lr}
 8025076:	b082      	sub	sp, #8
 8025078:	af00      	add	r7, sp, #0
 802507a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8025082:	4618      	mov	r0, r3
 8025084:	f7ee fb9a 	bl	80137bc <USBH_LL_Disconnect>
}
 8025088:	bf00      	nop
 802508a:	3708      	adds	r7, #8
 802508c:	46bd      	mov	sp, r7
 802508e:	bd80      	pop	{r7, pc}

08025090 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8025090:	b580      	push	{r7, lr}
 8025092:	b082      	sub	sp, #8
 8025094:	af00      	add	r7, sp, #0
 8025096:	6078      	str	r0, [r7, #4]
 8025098:	460b      	mov	r3, r1
 802509a:	70fb      	strb	r3, [r7, #3]
 802509c:	4613      	mov	r3, r2
 802509e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80250a0:	687b      	ldr	r3, [r7, #4]
 80250a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80250a6:	4618      	mov	r0, r3
 80250a8:	f7ee fbcf 	bl	801384a <USBH_LL_NotifyURBChange>
#endif
}
 80250ac:	bf00      	nop
 80250ae:	3708      	adds	r7, #8
 80250b0:	46bd      	mov	sp, r7
 80250b2:	bd80      	pop	{r7, pc}

080250b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80250b4:	b580      	push	{r7, lr}
 80250b6:	b082      	sub	sp, #8
 80250b8:	af00      	add	r7, sp, #0
 80250ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80250c2:	4618      	mov	r0, r3
 80250c4:	f7ee fb2f 	bl	8013726 <USBH_LL_PortEnabled>
}
 80250c8:	bf00      	nop
 80250ca:	3708      	adds	r7, #8
 80250cc:	46bd      	mov	sp, r7
 80250ce:	bd80      	pop	{r7, pc}

080250d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80250d0:	b580      	push	{r7, lr}
 80250d2:	b082      	sub	sp, #8
 80250d4:	af00      	add	r7, sp, #0
 80250d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80250d8:	687b      	ldr	r3, [r7, #4]
 80250da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80250de:	4618      	mov	r0, r3
 80250e0:	f7ee fb3b 	bl	801375a <USBH_LL_PortDisabled>
}
 80250e4:	bf00      	nop
 80250e6:	3708      	adds	r7, #8
 80250e8:	46bd      	mov	sp, r7
 80250ea:	bd80      	pop	{r7, pc}

080250ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80250ec:	b580      	push	{r7, lr}
 80250ee:	b082      	sub	sp, #8
 80250f0:	af00      	add	r7, sp, #0
 80250f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80250fa:	2b01      	cmp	r3, #1
 80250fc:	d12a      	bne.n	8025154 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80250fe:	4a18      	ldr	r2, [pc, #96]	; (8025160 <USBH_LL_Init+0x74>)
 8025100:	687b      	ldr	r3, [r7, #4]
 8025102:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	4a15      	ldr	r2, [pc, #84]	; (8025160 <USBH_LL_Init+0x74>)
 802510a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802510e:	4b14      	ldr	r3, [pc, #80]	; (8025160 <USBH_LL_Init+0x74>)
 8025110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8025114:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8025116:	4b12      	ldr	r3, [pc, #72]	; (8025160 <USBH_LL_Init+0x74>)
 8025118:	2208      	movs	r2, #8
 802511a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 802511c:	4b10      	ldr	r3, [pc, #64]	; (8025160 <USBH_LL_Init+0x74>)
 802511e:	2201      	movs	r2, #1
 8025120:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8025122:	4b0f      	ldr	r3, [pc, #60]	; (8025160 <USBH_LL_Init+0x74>)
 8025124:	2200      	movs	r2, #0
 8025126:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8025128:	4b0d      	ldr	r3, [pc, #52]	; (8025160 <USBH_LL_Init+0x74>)
 802512a:	2202      	movs	r2, #2
 802512c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 802512e:	4b0c      	ldr	r3, [pc, #48]	; (8025160 <USBH_LL_Init+0x74>)
 8025130:	2200      	movs	r2, #0
 8025132:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8025134:	480a      	ldr	r0, [pc, #40]	; (8025160 <USBH_LL_Init+0x74>)
 8025136:	f7e0 fff6 	bl	8006126 <HAL_HCD_Init>
 802513a:	4603      	mov	r3, r0
 802513c:	2b00      	cmp	r3, #0
 802513e:	d001      	beq.n	8025144 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8025140:	f7dc fdf2 	bl	8001d28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8025144:	4806      	ldr	r0, [pc, #24]	; (8025160 <USBH_LL_Init+0x74>)
 8025146:	f7e1 fbda 	bl	80068fe <HAL_HCD_GetCurrentFrame>
 802514a:	4603      	mov	r3, r0
 802514c:	4619      	mov	r1, r3
 802514e:	6878      	ldr	r0, [r7, #4]
 8025150:	f7ee fab0 	bl	80136b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8025154:	2300      	movs	r3, #0
}
 8025156:	4618      	mov	r0, r3
 8025158:	3708      	adds	r7, #8
 802515a:	46bd      	mov	sp, r7
 802515c:	bd80      	pop	{r7, pc}
 802515e:	bf00      	nop
 8025160:	200106bc 	.word	0x200106bc

08025164 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8025164:	b580      	push	{r7, lr}
 8025166:	b084      	sub	sp, #16
 8025168:	af00      	add	r7, sp, #0
 802516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802516c:	2300      	movs	r3, #0
 802516e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025170:	2300      	movs	r3, #0
 8025172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8025174:	687b      	ldr	r3, [r7, #4]
 8025176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802517a:	4618      	mov	r0, r3
 802517c:	f7e1 fb49 	bl	8006812 <HAL_HCD_Start>
 8025180:	4603      	mov	r3, r0
 8025182:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8025184:	7bfb      	ldrb	r3, [r7, #15]
 8025186:	4618      	mov	r0, r3
 8025188:	f000 f952 	bl	8025430 <USBH_Get_USB_Status>
 802518c:	4603      	mov	r3, r0
 802518e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8025190:	7bbb      	ldrb	r3, [r7, #14]
}
 8025192:	4618      	mov	r0, r3
 8025194:	3710      	adds	r7, #16
 8025196:	46bd      	mov	sp, r7
 8025198:	bd80      	pop	{r7, pc}

0802519a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802519a:	b580      	push	{r7, lr}
 802519c:	b084      	sub	sp, #16
 802519e:	af00      	add	r7, sp, #0
 80251a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80251a2:	2300      	movs	r3, #0
 80251a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80251a6:	2300      	movs	r3, #0
 80251a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80251b0:	4618      	mov	r0, r3
 80251b2:	f7e1 fb51 	bl	8006858 <HAL_HCD_Stop>
 80251b6:	4603      	mov	r3, r0
 80251b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80251ba:	7bfb      	ldrb	r3, [r7, #15]
 80251bc:	4618      	mov	r0, r3
 80251be:	f000 f937 	bl	8025430 <USBH_Get_USB_Status>
 80251c2:	4603      	mov	r3, r0
 80251c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80251c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80251c8:	4618      	mov	r0, r3
 80251ca:	3710      	adds	r7, #16
 80251cc:	46bd      	mov	sp, r7
 80251ce:	bd80      	pop	{r7, pc}

080251d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80251d0:	b580      	push	{r7, lr}
 80251d2:	b084      	sub	sp, #16
 80251d4:	af00      	add	r7, sp, #0
 80251d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80251d8:	2301      	movs	r3, #1
 80251da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80251e2:	4618      	mov	r0, r3
 80251e4:	f7e1 fb99 	bl	800691a <HAL_HCD_GetCurrentSpeed>
 80251e8:	4603      	mov	r3, r0
 80251ea:	2b02      	cmp	r3, #2
 80251ec:	d00c      	beq.n	8025208 <USBH_LL_GetSpeed+0x38>
 80251ee:	2b02      	cmp	r3, #2
 80251f0:	d80d      	bhi.n	802520e <USBH_LL_GetSpeed+0x3e>
 80251f2:	2b00      	cmp	r3, #0
 80251f4:	d002      	beq.n	80251fc <USBH_LL_GetSpeed+0x2c>
 80251f6:	2b01      	cmp	r3, #1
 80251f8:	d003      	beq.n	8025202 <USBH_LL_GetSpeed+0x32>
 80251fa:	e008      	b.n	802520e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80251fc:	2300      	movs	r3, #0
 80251fe:	73fb      	strb	r3, [r7, #15]
    break;
 8025200:	e008      	b.n	8025214 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8025202:	2301      	movs	r3, #1
 8025204:	73fb      	strb	r3, [r7, #15]
    break;
 8025206:	e005      	b.n	8025214 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8025208:	2302      	movs	r3, #2
 802520a:	73fb      	strb	r3, [r7, #15]
    break;
 802520c:	e002      	b.n	8025214 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802520e:	2301      	movs	r3, #1
 8025210:	73fb      	strb	r3, [r7, #15]
    break;
 8025212:	bf00      	nop
  }
  return  speed;
 8025214:	7bfb      	ldrb	r3, [r7, #15]
}
 8025216:	4618      	mov	r0, r3
 8025218:	3710      	adds	r7, #16
 802521a:	46bd      	mov	sp, r7
 802521c:	bd80      	pop	{r7, pc}

0802521e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802521e:	b580      	push	{r7, lr}
 8025220:	b084      	sub	sp, #16
 8025222:	af00      	add	r7, sp, #0
 8025224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025226:	2300      	movs	r3, #0
 8025228:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802522a:	2300      	movs	r3, #0
 802522c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8025234:	4618      	mov	r0, r3
 8025236:	f7e1 fb2c 	bl	8006892 <HAL_HCD_ResetPort>
 802523a:	4603      	mov	r3, r0
 802523c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802523e:	7bfb      	ldrb	r3, [r7, #15]
 8025240:	4618      	mov	r0, r3
 8025242:	f000 f8f5 	bl	8025430 <USBH_Get_USB_Status>
 8025246:	4603      	mov	r3, r0
 8025248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802524a:	7bbb      	ldrb	r3, [r7, #14]
}
 802524c:	4618      	mov	r0, r3
 802524e:	3710      	adds	r7, #16
 8025250:	46bd      	mov	sp, r7
 8025252:	bd80      	pop	{r7, pc}

08025254 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8025254:	b580      	push	{r7, lr}
 8025256:	b082      	sub	sp, #8
 8025258:	af00      	add	r7, sp, #0
 802525a:	6078      	str	r0, [r7, #4]
 802525c:	460b      	mov	r3, r1
 802525e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8025260:	687b      	ldr	r3, [r7, #4]
 8025262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8025266:	78fa      	ldrb	r2, [r7, #3]
 8025268:	4611      	mov	r1, r2
 802526a:	4618      	mov	r0, r3
 802526c:	f7e1 fb33 	bl	80068d6 <HAL_HCD_HC_GetXferCount>
 8025270:	4603      	mov	r3, r0
}
 8025272:	4618      	mov	r0, r3
 8025274:	3708      	adds	r7, #8
 8025276:	46bd      	mov	sp, r7
 8025278:	bd80      	pop	{r7, pc}

0802527a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802527a:	b590      	push	{r4, r7, lr}
 802527c:	b089      	sub	sp, #36	; 0x24
 802527e:	af04      	add	r7, sp, #16
 8025280:	6078      	str	r0, [r7, #4]
 8025282:	4608      	mov	r0, r1
 8025284:	4611      	mov	r1, r2
 8025286:	461a      	mov	r2, r3
 8025288:	4603      	mov	r3, r0
 802528a:	70fb      	strb	r3, [r7, #3]
 802528c:	460b      	mov	r3, r1
 802528e:	70bb      	strb	r3, [r7, #2]
 8025290:	4613      	mov	r3, r2
 8025292:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025294:	2300      	movs	r3, #0
 8025296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025298:	2300      	movs	r3, #0
 802529a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802529c:	687b      	ldr	r3, [r7, #4]
 802529e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80252a2:	787c      	ldrb	r4, [r7, #1]
 80252a4:	78ba      	ldrb	r2, [r7, #2]
 80252a6:	78f9      	ldrb	r1, [r7, #3]
 80252a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80252aa:	9302      	str	r3, [sp, #8]
 80252ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80252b0:	9301      	str	r3, [sp, #4]
 80252b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80252b6:	9300      	str	r3, [sp, #0]
 80252b8:	4623      	mov	r3, r4
 80252ba:	f7e0 ff96 	bl	80061ea <HAL_HCD_HC_Init>
 80252be:	4603      	mov	r3, r0
 80252c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80252c2:	7bfb      	ldrb	r3, [r7, #15]
 80252c4:	4618      	mov	r0, r3
 80252c6:	f000 f8b3 	bl	8025430 <USBH_Get_USB_Status>
 80252ca:	4603      	mov	r3, r0
 80252cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80252ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80252d0:	4618      	mov	r0, r3
 80252d2:	3714      	adds	r7, #20
 80252d4:	46bd      	mov	sp, r7
 80252d6:	bd90      	pop	{r4, r7, pc}

080252d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80252d8:	b580      	push	{r7, lr}
 80252da:	b084      	sub	sp, #16
 80252dc:	af00      	add	r7, sp, #0
 80252de:	6078      	str	r0, [r7, #4]
 80252e0:	460b      	mov	r3, r1
 80252e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80252e4:	2300      	movs	r3, #0
 80252e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80252e8:	2300      	movs	r3, #0
 80252ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80252ec:	687b      	ldr	r3, [r7, #4]
 80252ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80252f2:	78fa      	ldrb	r2, [r7, #3]
 80252f4:	4611      	mov	r1, r2
 80252f6:	4618      	mov	r0, r3
 80252f8:	f7e1 f806 	bl	8006308 <HAL_HCD_HC_Halt>
 80252fc:	4603      	mov	r3, r0
 80252fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8025300:	7bfb      	ldrb	r3, [r7, #15]
 8025302:	4618      	mov	r0, r3
 8025304:	f000 f894 	bl	8025430 <USBH_Get_USB_Status>
 8025308:	4603      	mov	r3, r0
 802530a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802530c:	7bbb      	ldrb	r3, [r7, #14]
}
 802530e:	4618      	mov	r0, r3
 8025310:	3710      	adds	r7, #16
 8025312:	46bd      	mov	sp, r7
 8025314:	bd80      	pop	{r7, pc}

08025316 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8025316:	b590      	push	{r4, r7, lr}
 8025318:	b089      	sub	sp, #36	; 0x24
 802531a:	af04      	add	r7, sp, #16
 802531c:	6078      	str	r0, [r7, #4]
 802531e:	4608      	mov	r0, r1
 8025320:	4611      	mov	r1, r2
 8025322:	461a      	mov	r2, r3
 8025324:	4603      	mov	r3, r0
 8025326:	70fb      	strb	r3, [r7, #3]
 8025328:	460b      	mov	r3, r1
 802532a:	70bb      	strb	r3, [r7, #2]
 802532c:	4613      	mov	r3, r2
 802532e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8025330:	2300      	movs	r3, #0
 8025332:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8025334:	2300      	movs	r3, #0
 8025336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8025338:	687b      	ldr	r3, [r7, #4]
 802533a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802533e:	787c      	ldrb	r4, [r7, #1]
 8025340:	78ba      	ldrb	r2, [r7, #2]
 8025342:	78f9      	ldrb	r1, [r7, #3]
 8025344:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8025348:	9303      	str	r3, [sp, #12]
 802534a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802534c:	9302      	str	r3, [sp, #8]
 802534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025350:	9301      	str	r3, [sp, #4]
 8025352:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025356:	9300      	str	r3, [sp, #0]
 8025358:	4623      	mov	r3, r4
 802535a:	f7e0 fff9 	bl	8006350 <HAL_HCD_HC_SubmitRequest>
 802535e:	4603      	mov	r3, r0
 8025360:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8025362:	7bfb      	ldrb	r3, [r7, #15]
 8025364:	4618      	mov	r0, r3
 8025366:	f000 f863 	bl	8025430 <USBH_Get_USB_Status>
 802536a:	4603      	mov	r3, r0
 802536c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802536e:	7bbb      	ldrb	r3, [r7, #14]
}
 8025370:	4618      	mov	r0, r3
 8025372:	3714      	adds	r7, #20
 8025374:	46bd      	mov	sp, r7
 8025376:	bd90      	pop	{r4, r7, pc}

08025378 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8025378:	b580      	push	{r7, lr}
 802537a:	b082      	sub	sp, #8
 802537c:	af00      	add	r7, sp, #0
 802537e:	6078      	str	r0, [r7, #4]
 8025380:	460b      	mov	r3, r1
 8025382:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802538a:	78fa      	ldrb	r2, [r7, #3]
 802538c:	4611      	mov	r1, r2
 802538e:	4618      	mov	r0, r3
 8025390:	f7e1 fa8d 	bl	80068ae <HAL_HCD_HC_GetURBState>
 8025394:	4603      	mov	r3, r0
}
 8025396:	4618      	mov	r0, r3
 8025398:	3708      	adds	r7, #8
 802539a:	46bd      	mov	sp, r7
 802539c:	bd80      	pop	{r7, pc}

0802539e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802539e:	b580      	push	{r7, lr}
 80253a0:	b082      	sub	sp, #8
 80253a2:	af00      	add	r7, sp, #0
 80253a4:	6078      	str	r0, [r7, #4]
 80253a6:	460b      	mov	r3, r1
 80253a8:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80253aa:	20c8      	movs	r0, #200	; 0xc8
 80253ac:	f7dd feca 	bl	8003144 <HAL_Delay>
  return USBH_OK;
 80253b0:	2300      	movs	r3, #0
}
 80253b2:	4618      	mov	r0, r3
 80253b4:	3708      	adds	r7, #8
 80253b6:	46bd      	mov	sp, r7
 80253b8:	bd80      	pop	{r7, pc}

080253ba <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80253ba:	b480      	push	{r7}
 80253bc:	b085      	sub	sp, #20
 80253be:	af00      	add	r7, sp, #0
 80253c0:	6078      	str	r0, [r7, #4]
 80253c2:	460b      	mov	r3, r1
 80253c4:	70fb      	strb	r3, [r7, #3]
 80253c6:	4613      	mov	r3, r2
 80253c8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80253ca:	687b      	ldr	r3, [r7, #4]
 80253cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80253d0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80253d2:	78fb      	ldrb	r3, [r7, #3]
 80253d4:	68fa      	ldr	r2, [r7, #12]
 80253d6:	212c      	movs	r1, #44	; 0x2c
 80253d8:	fb01 f303 	mul.w	r3, r1, r3
 80253dc:	4413      	add	r3, r2
 80253de:	333b      	adds	r3, #59	; 0x3b
 80253e0:	781b      	ldrb	r3, [r3, #0]
 80253e2:	2b00      	cmp	r3, #0
 80253e4:	d009      	beq.n	80253fa <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80253e6:	78fb      	ldrb	r3, [r7, #3]
 80253e8:	68fa      	ldr	r2, [r7, #12]
 80253ea:	212c      	movs	r1, #44	; 0x2c
 80253ec:	fb01 f303 	mul.w	r3, r1, r3
 80253f0:	4413      	add	r3, r2
 80253f2:	3354      	adds	r3, #84	; 0x54
 80253f4:	78ba      	ldrb	r2, [r7, #2]
 80253f6:	701a      	strb	r2, [r3, #0]
 80253f8:	e008      	b.n	802540c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80253fa:	78fb      	ldrb	r3, [r7, #3]
 80253fc:	68fa      	ldr	r2, [r7, #12]
 80253fe:	212c      	movs	r1, #44	; 0x2c
 8025400:	fb01 f303 	mul.w	r3, r1, r3
 8025404:	4413      	add	r3, r2
 8025406:	3355      	adds	r3, #85	; 0x55
 8025408:	78ba      	ldrb	r2, [r7, #2]
 802540a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802540c:	2300      	movs	r3, #0
}
 802540e:	4618      	mov	r0, r3
 8025410:	3714      	adds	r7, #20
 8025412:	46bd      	mov	sp, r7
 8025414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025418:	4770      	bx	lr

0802541a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802541a:	b580      	push	{r7, lr}
 802541c:	b082      	sub	sp, #8
 802541e:	af00      	add	r7, sp, #0
 8025420:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8025422:	6878      	ldr	r0, [r7, #4]
 8025424:	f7dd fe8e 	bl	8003144 <HAL_Delay>
}
 8025428:	bf00      	nop
 802542a:	3708      	adds	r7, #8
 802542c:	46bd      	mov	sp, r7
 802542e:	bd80      	pop	{r7, pc}

08025430 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8025430:	b480      	push	{r7}
 8025432:	b085      	sub	sp, #20
 8025434:	af00      	add	r7, sp, #0
 8025436:	4603      	mov	r3, r0
 8025438:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802543a:	2300      	movs	r3, #0
 802543c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802543e:	79fb      	ldrb	r3, [r7, #7]
 8025440:	2b03      	cmp	r3, #3
 8025442:	d817      	bhi.n	8025474 <USBH_Get_USB_Status+0x44>
 8025444:	a201      	add	r2, pc, #4	; (adr r2, 802544c <USBH_Get_USB_Status+0x1c>)
 8025446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802544a:	bf00      	nop
 802544c:	0802545d 	.word	0x0802545d
 8025450:	08025463 	.word	0x08025463
 8025454:	08025469 	.word	0x08025469
 8025458:	0802546f 	.word	0x0802546f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802545c:	2300      	movs	r3, #0
 802545e:	73fb      	strb	r3, [r7, #15]
    break;
 8025460:	e00b      	b.n	802547a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8025462:	2302      	movs	r3, #2
 8025464:	73fb      	strb	r3, [r7, #15]
    break;
 8025466:	e008      	b.n	802547a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8025468:	2301      	movs	r3, #1
 802546a:	73fb      	strb	r3, [r7, #15]
    break;
 802546c:	e005      	b.n	802547a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802546e:	2302      	movs	r3, #2
 8025470:	73fb      	strb	r3, [r7, #15]
    break;
 8025472:	e002      	b.n	802547a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8025474:	2302      	movs	r3, #2
 8025476:	73fb      	strb	r3, [r7, #15]
    break;
 8025478:	bf00      	nop
  }
  return usb_status;
 802547a:	7bfb      	ldrb	r3, [r7, #15]
}
 802547c:	4618      	mov	r0, r3
 802547e:	3714      	adds	r7, #20
 8025480:	46bd      	mov	sp, r7
 8025482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025486:	4770      	bx	lr

08025488 <__assert_func>:
 8025488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802548a:	4614      	mov	r4, r2
 802548c:	461a      	mov	r2, r3
 802548e:	4b09      	ldr	r3, [pc, #36]	; (80254b4 <__assert_func+0x2c>)
 8025490:	681b      	ldr	r3, [r3, #0]
 8025492:	4605      	mov	r5, r0
 8025494:	68d8      	ldr	r0, [r3, #12]
 8025496:	b14c      	cbz	r4, 80254ac <__assert_func+0x24>
 8025498:	4b07      	ldr	r3, [pc, #28]	; (80254b8 <__assert_func+0x30>)
 802549a:	9100      	str	r1, [sp, #0]
 802549c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80254a0:	4906      	ldr	r1, [pc, #24]	; (80254bc <__assert_func+0x34>)
 80254a2:	462b      	mov	r3, r5
 80254a4:	f000 f8e4 	bl	8025670 <fiprintf>
 80254a8:	f000 ff4c 	bl	8026344 <abort>
 80254ac:	4b04      	ldr	r3, [pc, #16]	; (80254c0 <__assert_func+0x38>)
 80254ae:	461c      	mov	r4, r3
 80254b0:	e7f3      	b.n	802549a <__assert_func+0x12>
 80254b2:	bf00      	nop
 80254b4:	20000070 	.word	0x20000070
 80254b8:	0802b9b4 	.word	0x0802b9b4
 80254bc:	0802b9c1 	.word	0x0802b9c1
 80254c0:	0802b9ef 	.word	0x0802b9ef

080254c4 <std>:
 80254c4:	2300      	movs	r3, #0
 80254c6:	b510      	push	{r4, lr}
 80254c8:	4604      	mov	r4, r0
 80254ca:	e9c0 3300 	strd	r3, r3, [r0]
 80254ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80254d2:	6083      	str	r3, [r0, #8]
 80254d4:	8181      	strh	r1, [r0, #12]
 80254d6:	6643      	str	r3, [r0, #100]	; 0x64
 80254d8:	81c2      	strh	r2, [r0, #14]
 80254da:	6183      	str	r3, [r0, #24]
 80254dc:	4619      	mov	r1, r3
 80254de:	2208      	movs	r2, #8
 80254e0:	305c      	adds	r0, #92	; 0x5c
 80254e2:	f000 f965 	bl	80257b0 <memset>
 80254e6:	4b05      	ldr	r3, [pc, #20]	; (80254fc <std+0x38>)
 80254e8:	6263      	str	r3, [r4, #36]	; 0x24
 80254ea:	4b05      	ldr	r3, [pc, #20]	; (8025500 <std+0x3c>)
 80254ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80254ee:	4b05      	ldr	r3, [pc, #20]	; (8025504 <std+0x40>)
 80254f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80254f2:	4b05      	ldr	r3, [pc, #20]	; (8025508 <std+0x44>)
 80254f4:	6224      	str	r4, [r4, #32]
 80254f6:	6323      	str	r3, [r4, #48]	; 0x30
 80254f8:	bd10      	pop	{r4, pc}
 80254fa:	bf00      	nop
 80254fc:	08026095 	.word	0x08026095
 8025500:	080260b7 	.word	0x080260b7
 8025504:	080260ef 	.word	0x080260ef
 8025508:	08026113 	.word	0x08026113

0802550c <_cleanup_r>:
 802550c:	4901      	ldr	r1, [pc, #4]	; (8025514 <_cleanup_r+0x8>)
 802550e:	f000 b8c1 	b.w	8025694 <_fwalk_reent>
 8025512:	bf00      	nop
 8025514:	08026481 	.word	0x08026481

08025518 <__sfmoreglue>:
 8025518:	b570      	push	{r4, r5, r6, lr}
 802551a:	1e4a      	subs	r2, r1, #1
 802551c:	2568      	movs	r5, #104	; 0x68
 802551e:	4355      	muls	r5, r2
 8025520:	460e      	mov	r6, r1
 8025522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025526:	f000 f99b 	bl	8025860 <_malloc_r>
 802552a:	4604      	mov	r4, r0
 802552c:	b140      	cbz	r0, 8025540 <__sfmoreglue+0x28>
 802552e:	2100      	movs	r1, #0
 8025530:	e9c0 1600 	strd	r1, r6, [r0]
 8025534:	300c      	adds	r0, #12
 8025536:	60a0      	str	r0, [r4, #8]
 8025538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802553c:	f000 f938 	bl	80257b0 <memset>
 8025540:	4620      	mov	r0, r4
 8025542:	bd70      	pop	{r4, r5, r6, pc}

08025544 <__sfp_lock_acquire>:
 8025544:	4801      	ldr	r0, [pc, #4]	; (802554c <__sfp_lock_acquire+0x8>)
 8025546:	f000 b904 	b.w	8025752 <__retarget_lock_acquire_recursive>
 802554a:	bf00      	nop
 802554c:	200109c8 	.word	0x200109c8

08025550 <__sfp_lock_release>:
 8025550:	4801      	ldr	r0, [pc, #4]	; (8025558 <__sfp_lock_release+0x8>)
 8025552:	f000 b8ff 	b.w	8025754 <__retarget_lock_release_recursive>
 8025556:	bf00      	nop
 8025558:	200109c8 	.word	0x200109c8

0802555c <__sinit_lock_acquire>:
 802555c:	4801      	ldr	r0, [pc, #4]	; (8025564 <__sinit_lock_acquire+0x8>)
 802555e:	f000 b8f8 	b.w	8025752 <__retarget_lock_acquire_recursive>
 8025562:	bf00      	nop
 8025564:	200109c3 	.word	0x200109c3

08025568 <__sinit_lock_release>:
 8025568:	4801      	ldr	r0, [pc, #4]	; (8025570 <__sinit_lock_release+0x8>)
 802556a:	f000 b8f3 	b.w	8025754 <__retarget_lock_release_recursive>
 802556e:	bf00      	nop
 8025570:	200109c3 	.word	0x200109c3

08025574 <__sinit>:
 8025574:	b510      	push	{r4, lr}
 8025576:	4604      	mov	r4, r0
 8025578:	f7ff fff0 	bl	802555c <__sinit_lock_acquire>
 802557c:	69a3      	ldr	r3, [r4, #24]
 802557e:	b11b      	cbz	r3, 8025588 <__sinit+0x14>
 8025580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025584:	f7ff bff0 	b.w	8025568 <__sinit_lock_release>
 8025588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802558c:	6523      	str	r3, [r4, #80]	; 0x50
 802558e:	4b13      	ldr	r3, [pc, #76]	; (80255dc <__sinit+0x68>)
 8025590:	4a13      	ldr	r2, [pc, #76]	; (80255e0 <__sinit+0x6c>)
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	62a2      	str	r2, [r4, #40]	; 0x28
 8025596:	42a3      	cmp	r3, r4
 8025598:	bf04      	itt	eq
 802559a:	2301      	moveq	r3, #1
 802559c:	61a3      	streq	r3, [r4, #24]
 802559e:	4620      	mov	r0, r4
 80255a0:	f000 f820 	bl	80255e4 <__sfp>
 80255a4:	6060      	str	r0, [r4, #4]
 80255a6:	4620      	mov	r0, r4
 80255a8:	f000 f81c 	bl	80255e4 <__sfp>
 80255ac:	60a0      	str	r0, [r4, #8]
 80255ae:	4620      	mov	r0, r4
 80255b0:	f000 f818 	bl	80255e4 <__sfp>
 80255b4:	2200      	movs	r2, #0
 80255b6:	60e0      	str	r0, [r4, #12]
 80255b8:	2104      	movs	r1, #4
 80255ba:	6860      	ldr	r0, [r4, #4]
 80255bc:	f7ff ff82 	bl	80254c4 <std>
 80255c0:	68a0      	ldr	r0, [r4, #8]
 80255c2:	2201      	movs	r2, #1
 80255c4:	2109      	movs	r1, #9
 80255c6:	f7ff ff7d 	bl	80254c4 <std>
 80255ca:	68e0      	ldr	r0, [r4, #12]
 80255cc:	2202      	movs	r2, #2
 80255ce:	2112      	movs	r1, #18
 80255d0:	f7ff ff78 	bl	80254c4 <std>
 80255d4:	2301      	movs	r3, #1
 80255d6:	61a3      	str	r3, [r4, #24]
 80255d8:	e7d2      	b.n	8025580 <__sinit+0xc>
 80255da:	bf00      	nop
 80255dc:	0802ba50 	.word	0x0802ba50
 80255e0:	0802550d 	.word	0x0802550d

080255e4 <__sfp>:
 80255e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255e6:	4607      	mov	r7, r0
 80255e8:	f7ff ffac 	bl	8025544 <__sfp_lock_acquire>
 80255ec:	4b1e      	ldr	r3, [pc, #120]	; (8025668 <__sfp+0x84>)
 80255ee:	681e      	ldr	r6, [r3, #0]
 80255f0:	69b3      	ldr	r3, [r6, #24]
 80255f2:	b913      	cbnz	r3, 80255fa <__sfp+0x16>
 80255f4:	4630      	mov	r0, r6
 80255f6:	f7ff ffbd 	bl	8025574 <__sinit>
 80255fa:	3648      	adds	r6, #72	; 0x48
 80255fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025600:	3b01      	subs	r3, #1
 8025602:	d503      	bpl.n	802560c <__sfp+0x28>
 8025604:	6833      	ldr	r3, [r6, #0]
 8025606:	b30b      	cbz	r3, 802564c <__sfp+0x68>
 8025608:	6836      	ldr	r6, [r6, #0]
 802560a:	e7f7      	b.n	80255fc <__sfp+0x18>
 802560c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025610:	b9d5      	cbnz	r5, 8025648 <__sfp+0x64>
 8025612:	4b16      	ldr	r3, [pc, #88]	; (802566c <__sfp+0x88>)
 8025614:	60e3      	str	r3, [r4, #12]
 8025616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802561a:	6665      	str	r5, [r4, #100]	; 0x64
 802561c:	f000 f898 	bl	8025750 <__retarget_lock_init_recursive>
 8025620:	f7ff ff96 	bl	8025550 <__sfp_lock_release>
 8025624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802562c:	6025      	str	r5, [r4, #0]
 802562e:	61a5      	str	r5, [r4, #24]
 8025630:	2208      	movs	r2, #8
 8025632:	4629      	mov	r1, r5
 8025634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025638:	f000 f8ba 	bl	80257b0 <memset>
 802563c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025644:	4620      	mov	r0, r4
 8025646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025648:	3468      	adds	r4, #104	; 0x68
 802564a:	e7d9      	b.n	8025600 <__sfp+0x1c>
 802564c:	2104      	movs	r1, #4
 802564e:	4638      	mov	r0, r7
 8025650:	f7ff ff62 	bl	8025518 <__sfmoreglue>
 8025654:	4604      	mov	r4, r0
 8025656:	6030      	str	r0, [r6, #0]
 8025658:	2800      	cmp	r0, #0
 802565a:	d1d5      	bne.n	8025608 <__sfp+0x24>
 802565c:	f7ff ff78 	bl	8025550 <__sfp_lock_release>
 8025660:	230c      	movs	r3, #12
 8025662:	603b      	str	r3, [r7, #0]
 8025664:	e7ee      	b.n	8025644 <__sfp+0x60>
 8025666:	bf00      	nop
 8025668:	0802ba50 	.word	0x0802ba50
 802566c:	ffff0001 	.word	0xffff0001

08025670 <fiprintf>:
 8025670:	b40e      	push	{r1, r2, r3}
 8025672:	b503      	push	{r0, r1, lr}
 8025674:	4601      	mov	r1, r0
 8025676:	ab03      	add	r3, sp, #12
 8025678:	4805      	ldr	r0, [pc, #20]	; (8025690 <fiprintf+0x20>)
 802567a:	f853 2b04 	ldr.w	r2, [r3], #4
 802567e:	6800      	ldr	r0, [r0, #0]
 8025680:	9301      	str	r3, [sp, #4]
 8025682:	f000 f971 	bl	8025968 <_vfiprintf_r>
 8025686:	b002      	add	sp, #8
 8025688:	f85d eb04 	ldr.w	lr, [sp], #4
 802568c:	b003      	add	sp, #12
 802568e:	4770      	bx	lr
 8025690:	20000070 	.word	0x20000070

08025694 <_fwalk_reent>:
 8025694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025698:	4606      	mov	r6, r0
 802569a:	4688      	mov	r8, r1
 802569c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80256a0:	2700      	movs	r7, #0
 80256a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80256a6:	f1b9 0901 	subs.w	r9, r9, #1
 80256aa:	d505      	bpl.n	80256b8 <_fwalk_reent+0x24>
 80256ac:	6824      	ldr	r4, [r4, #0]
 80256ae:	2c00      	cmp	r4, #0
 80256b0:	d1f7      	bne.n	80256a2 <_fwalk_reent+0xe>
 80256b2:	4638      	mov	r0, r7
 80256b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80256b8:	89ab      	ldrh	r3, [r5, #12]
 80256ba:	2b01      	cmp	r3, #1
 80256bc:	d907      	bls.n	80256ce <_fwalk_reent+0x3a>
 80256be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80256c2:	3301      	adds	r3, #1
 80256c4:	d003      	beq.n	80256ce <_fwalk_reent+0x3a>
 80256c6:	4629      	mov	r1, r5
 80256c8:	4630      	mov	r0, r6
 80256ca:	47c0      	blx	r8
 80256cc:	4307      	orrs	r7, r0
 80256ce:	3568      	adds	r5, #104	; 0x68
 80256d0:	e7e9      	b.n	80256a6 <_fwalk_reent+0x12>
	...

080256d4 <__libc_init_array>:
 80256d4:	b570      	push	{r4, r5, r6, lr}
 80256d6:	4d0d      	ldr	r5, [pc, #52]	; (802570c <__libc_init_array+0x38>)
 80256d8:	4c0d      	ldr	r4, [pc, #52]	; (8025710 <__libc_init_array+0x3c>)
 80256da:	1b64      	subs	r4, r4, r5
 80256dc:	10a4      	asrs	r4, r4, #2
 80256de:	2600      	movs	r6, #0
 80256e0:	42a6      	cmp	r6, r4
 80256e2:	d109      	bne.n	80256f8 <__libc_init_array+0x24>
 80256e4:	4d0b      	ldr	r5, [pc, #44]	; (8025714 <__libc_init_array+0x40>)
 80256e6:	4c0c      	ldr	r4, [pc, #48]	; (8025718 <__libc_init_array+0x44>)
 80256e8:	f001 f800 	bl	80266ec <_init>
 80256ec:	1b64      	subs	r4, r4, r5
 80256ee:	10a4      	asrs	r4, r4, #2
 80256f0:	2600      	movs	r6, #0
 80256f2:	42a6      	cmp	r6, r4
 80256f4:	d105      	bne.n	8025702 <__libc_init_array+0x2e>
 80256f6:	bd70      	pop	{r4, r5, r6, pc}
 80256f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80256fc:	4798      	blx	r3
 80256fe:	3601      	adds	r6, #1
 8025700:	e7ee      	b.n	80256e0 <__libc_init_array+0xc>
 8025702:	f855 3b04 	ldr.w	r3, [r5], #4
 8025706:	4798      	blx	r3
 8025708:	3601      	adds	r6, #1
 802570a:	e7f2      	b.n	80256f2 <__libc_init_array+0x1e>
 802570c:	0802bb2c 	.word	0x0802bb2c
 8025710:	0802bb2c 	.word	0x0802bb2c
 8025714:	0802bb2c 	.word	0x0802bb2c
 8025718:	0802bb30 	.word	0x0802bb30

0802571c <__itoa>:
 802571c:	1e93      	subs	r3, r2, #2
 802571e:	2b22      	cmp	r3, #34	; 0x22
 8025720:	b510      	push	{r4, lr}
 8025722:	460c      	mov	r4, r1
 8025724:	d904      	bls.n	8025730 <__itoa+0x14>
 8025726:	2300      	movs	r3, #0
 8025728:	700b      	strb	r3, [r1, #0]
 802572a:	461c      	mov	r4, r3
 802572c:	4620      	mov	r0, r4
 802572e:	bd10      	pop	{r4, pc}
 8025730:	2a0a      	cmp	r2, #10
 8025732:	d109      	bne.n	8025748 <__itoa+0x2c>
 8025734:	2800      	cmp	r0, #0
 8025736:	da07      	bge.n	8025748 <__itoa+0x2c>
 8025738:	232d      	movs	r3, #45	; 0x2d
 802573a:	700b      	strb	r3, [r1, #0]
 802573c:	4240      	negs	r0, r0
 802573e:	2101      	movs	r1, #1
 8025740:	4421      	add	r1, r4
 8025742:	f000 fceb 	bl	802611c <__utoa>
 8025746:	e7f1      	b.n	802572c <__itoa+0x10>
 8025748:	2100      	movs	r1, #0
 802574a:	e7f9      	b.n	8025740 <__itoa+0x24>

0802574c <itoa>:
 802574c:	f7ff bfe6 	b.w	802571c <__itoa>

08025750 <__retarget_lock_init_recursive>:
 8025750:	4770      	bx	lr

08025752 <__retarget_lock_acquire_recursive>:
 8025752:	4770      	bx	lr

08025754 <__retarget_lock_release_recursive>:
 8025754:	4770      	bx	lr
	...

08025758 <malloc>:
 8025758:	4b02      	ldr	r3, [pc, #8]	; (8025764 <malloc+0xc>)
 802575a:	4601      	mov	r1, r0
 802575c:	6818      	ldr	r0, [r3, #0]
 802575e:	f000 b87f 	b.w	8025860 <_malloc_r>
 8025762:	bf00      	nop
 8025764:	20000070 	.word	0x20000070

08025768 <free>:
 8025768:	4b02      	ldr	r3, [pc, #8]	; (8025774 <free+0xc>)
 802576a:	4601      	mov	r1, r0
 802576c:	6818      	ldr	r0, [r3, #0]
 802576e:	f000 b827 	b.w	80257c0 <_free_r>
 8025772:	bf00      	nop
 8025774:	20000070 	.word	0x20000070

08025778 <memcmp>:
 8025778:	b530      	push	{r4, r5, lr}
 802577a:	3901      	subs	r1, #1
 802577c:	2400      	movs	r4, #0
 802577e:	42a2      	cmp	r2, r4
 8025780:	d101      	bne.n	8025786 <memcmp+0xe>
 8025782:	2000      	movs	r0, #0
 8025784:	e005      	b.n	8025792 <memcmp+0x1a>
 8025786:	5d03      	ldrb	r3, [r0, r4]
 8025788:	3401      	adds	r4, #1
 802578a:	5d0d      	ldrb	r5, [r1, r4]
 802578c:	42ab      	cmp	r3, r5
 802578e:	d0f6      	beq.n	802577e <memcmp+0x6>
 8025790:	1b58      	subs	r0, r3, r5
 8025792:	bd30      	pop	{r4, r5, pc}

08025794 <memcpy>:
 8025794:	440a      	add	r2, r1
 8025796:	4291      	cmp	r1, r2
 8025798:	f100 33ff 	add.w	r3, r0, #4294967295
 802579c:	d100      	bne.n	80257a0 <memcpy+0xc>
 802579e:	4770      	bx	lr
 80257a0:	b510      	push	{r4, lr}
 80257a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80257a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80257aa:	4291      	cmp	r1, r2
 80257ac:	d1f9      	bne.n	80257a2 <memcpy+0xe>
 80257ae:	bd10      	pop	{r4, pc}

080257b0 <memset>:
 80257b0:	4402      	add	r2, r0
 80257b2:	4603      	mov	r3, r0
 80257b4:	4293      	cmp	r3, r2
 80257b6:	d100      	bne.n	80257ba <memset+0xa>
 80257b8:	4770      	bx	lr
 80257ba:	f803 1b01 	strb.w	r1, [r3], #1
 80257be:	e7f9      	b.n	80257b4 <memset+0x4>

080257c0 <_free_r>:
 80257c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80257c2:	2900      	cmp	r1, #0
 80257c4:	d048      	beq.n	8025858 <_free_r+0x98>
 80257c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80257ca:	9001      	str	r0, [sp, #4]
 80257cc:	2b00      	cmp	r3, #0
 80257ce:	f1a1 0404 	sub.w	r4, r1, #4
 80257d2:	bfb8      	it	lt
 80257d4:	18e4      	addlt	r4, r4, r3
 80257d6:	f000 ff05 	bl	80265e4 <__malloc_lock>
 80257da:	4a20      	ldr	r2, [pc, #128]	; (802585c <_free_r+0x9c>)
 80257dc:	9801      	ldr	r0, [sp, #4]
 80257de:	6813      	ldr	r3, [r2, #0]
 80257e0:	4615      	mov	r5, r2
 80257e2:	b933      	cbnz	r3, 80257f2 <_free_r+0x32>
 80257e4:	6063      	str	r3, [r4, #4]
 80257e6:	6014      	str	r4, [r2, #0]
 80257e8:	b003      	add	sp, #12
 80257ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80257ee:	f000 beff 	b.w	80265f0 <__malloc_unlock>
 80257f2:	42a3      	cmp	r3, r4
 80257f4:	d90b      	bls.n	802580e <_free_r+0x4e>
 80257f6:	6821      	ldr	r1, [r4, #0]
 80257f8:	1862      	adds	r2, r4, r1
 80257fa:	4293      	cmp	r3, r2
 80257fc:	bf04      	itt	eq
 80257fe:	681a      	ldreq	r2, [r3, #0]
 8025800:	685b      	ldreq	r3, [r3, #4]
 8025802:	6063      	str	r3, [r4, #4]
 8025804:	bf04      	itt	eq
 8025806:	1852      	addeq	r2, r2, r1
 8025808:	6022      	streq	r2, [r4, #0]
 802580a:	602c      	str	r4, [r5, #0]
 802580c:	e7ec      	b.n	80257e8 <_free_r+0x28>
 802580e:	461a      	mov	r2, r3
 8025810:	685b      	ldr	r3, [r3, #4]
 8025812:	b10b      	cbz	r3, 8025818 <_free_r+0x58>
 8025814:	42a3      	cmp	r3, r4
 8025816:	d9fa      	bls.n	802580e <_free_r+0x4e>
 8025818:	6811      	ldr	r1, [r2, #0]
 802581a:	1855      	adds	r5, r2, r1
 802581c:	42a5      	cmp	r5, r4
 802581e:	d10b      	bne.n	8025838 <_free_r+0x78>
 8025820:	6824      	ldr	r4, [r4, #0]
 8025822:	4421      	add	r1, r4
 8025824:	1854      	adds	r4, r2, r1
 8025826:	42a3      	cmp	r3, r4
 8025828:	6011      	str	r1, [r2, #0]
 802582a:	d1dd      	bne.n	80257e8 <_free_r+0x28>
 802582c:	681c      	ldr	r4, [r3, #0]
 802582e:	685b      	ldr	r3, [r3, #4]
 8025830:	6053      	str	r3, [r2, #4]
 8025832:	4421      	add	r1, r4
 8025834:	6011      	str	r1, [r2, #0]
 8025836:	e7d7      	b.n	80257e8 <_free_r+0x28>
 8025838:	d902      	bls.n	8025840 <_free_r+0x80>
 802583a:	230c      	movs	r3, #12
 802583c:	6003      	str	r3, [r0, #0]
 802583e:	e7d3      	b.n	80257e8 <_free_r+0x28>
 8025840:	6825      	ldr	r5, [r4, #0]
 8025842:	1961      	adds	r1, r4, r5
 8025844:	428b      	cmp	r3, r1
 8025846:	bf04      	itt	eq
 8025848:	6819      	ldreq	r1, [r3, #0]
 802584a:	685b      	ldreq	r3, [r3, #4]
 802584c:	6063      	str	r3, [r4, #4]
 802584e:	bf04      	itt	eq
 8025850:	1949      	addeq	r1, r1, r5
 8025852:	6021      	streq	r1, [r4, #0]
 8025854:	6054      	str	r4, [r2, #4]
 8025856:	e7c7      	b.n	80257e8 <_free_r+0x28>
 8025858:	b003      	add	sp, #12
 802585a:	bd30      	pop	{r4, r5, pc}
 802585c:	20008874 	.word	0x20008874

08025860 <_malloc_r>:
 8025860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025862:	1ccd      	adds	r5, r1, #3
 8025864:	f025 0503 	bic.w	r5, r5, #3
 8025868:	3508      	adds	r5, #8
 802586a:	2d0c      	cmp	r5, #12
 802586c:	bf38      	it	cc
 802586e:	250c      	movcc	r5, #12
 8025870:	2d00      	cmp	r5, #0
 8025872:	4606      	mov	r6, r0
 8025874:	db01      	blt.n	802587a <_malloc_r+0x1a>
 8025876:	42a9      	cmp	r1, r5
 8025878:	d903      	bls.n	8025882 <_malloc_r+0x22>
 802587a:	230c      	movs	r3, #12
 802587c:	6033      	str	r3, [r6, #0]
 802587e:	2000      	movs	r0, #0
 8025880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025882:	f000 feaf 	bl	80265e4 <__malloc_lock>
 8025886:	4921      	ldr	r1, [pc, #132]	; (802590c <_malloc_r+0xac>)
 8025888:	680a      	ldr	r2, [r1, #0]
 802588a:	4614      	mov	r4, r2
 802588c:	b99c      	cbnz	r4, 80258b6 <_malloc_r+0x56>
 802588e:	4f20      	ldr	r7, [pc, #128]	; (8025910 <_malloc_r+0xb0>)
 8025890:	683b      	ldr	r3, [r7, #0]
 8025892:	b923      	cbnz	r3, 802589e <_malloc_r+0x3e>
 8025894:	4621      	mov	r1, r4
 8025896:	4630      	mov	r0, r6
 8025898:	f000 fbec 	bl	8026074 <_sbrk_r>
 802589c:	6038      	str	r0, [r7, #0]
 802589e:	4629      	mov	r1, r5
 80258a0:	4630      	mov	r0, r6
 80258a2:	f000 fbe7 	bl	8026074 <_sbrk_r>
 80258a6:	1c43      	adds	r3, r0, #1
 80258a8:	d123      	bne.n	80258f2 <_malloc_r+0x92>
 80258aa:	230c      	movs	r3, #12
 80258ac:	6033      	str	r3, [r6, #0]
 80258ae:	4630      	mov	r0, r6
 80258b0:	f000 fe9e 	bl	80265f0 <__malloc_unlock>
 80258b4:	e7e3      	b.n	802587e <_malloc_r+0x1e>
 80258b6:	6823      	ldr	r3, [r4, #0]
 80258b8:	1b5b      	subs	r3, r3, r5
 80258ba:	d417      	bmi.n	80258ec <_malloc_r+0x8c>
 80258bc:	2b0b      	cmp	r3, #11
 80258be:	d903      	bls.n	80258c8 <_malloc_r+0x68>
 80258c0:	6023      	str	r3, [r4, #0]
 80258c2:	441c      	add	r4, r3
 80258c4:	6025      	str	r5, [r4, #0]
 80258c6:	e004      	b.n	80258d2 <_malloc_r+0x72>
 80258c8:	6863      	ldr	r3, [r4, #4]
 80258ca:	42a2      	cmp	r2, r4
 80258cc:	bf0c      	ite	eq
 80258ce:	600b      	streq	r3, [r1, #0]
 80258d0:	6053      	strne	r3, [r2, #4]
 80258d2:	4630      	mov	r0, r6
 80258d4:	f000 fe8c 	bl	80265f0 <__malloc_unlock>
 80258d8:	f104 000b 	add.w	r0, r4, #11
 80258dc:	1d23      	adds	r3, r4, #4
 80258de:	f020 0007 	bic.w	r0, r0, #7
 80258e2:	1ac2      	subs	r2, r0, r3
 80258e4:	d0cc      	beq.n	8025880 <_malloc_r+0x20>
 80258e6:	1a1b      	subs	r3, r3, r0
 80258e8:	50a3      	str	r3, [r4, r2]
 80258ea:	e7c9      	b.n	8025880 <_malloc_r+0x20>
 80258ec:	4622      	mov	r2, r4
 80258ee:	6864      	ldr	r4, [r4, #4]
 80258f0:	e7cc      	b.n	802588c <_malloc_r+0x2c>
 80258f2:	1cc4      	adds	r4, r0, #3
 80258f4:	f024 0403 	bic.w	r4, r4, #3
 80258f8:	42a0      	cmp	r0, r4
 80258fa:	d0e3      	beq.n	80258c4 <_malloc_r+0x64>
 80258fc:	1a21      	subs	r1, r4, r0
 80258fe:	4630      	mov	r0, r6
 8025900:	f000 fbb8 	bl	8026074 <_sbrk_r>
 8025904:	3001      	adds	r0, #1
 8025906:	d1dd      	bne.n	80258c4 <_malloc_r+0x64>
 8025908:	e7cf      	b.n	80258aa <_malloc_r+0x4a>
 802590a:	bf00      	nop
 802590c:	20008874 	.word	0x20008874
 8025910:	20008878 	.word	0x20008878

08025914 <__sfputc_r>:
 8025914:	6893      	ldr	r3, [r2, #8]
 8025916:	3b01      	subs	r3, #1
 8025918:	2b00      	cmp	r3, #0
 802591a:	b410      	push	{r4}
 802591c:	6093      	str	r3, [r2, #8]
 802591e:	da08      	bge.n	8025932 <__sfputc_r+0x1e>
 8025920:	6994      	ldr	r4, [r2, #24]
 8025922:	42a3      	cmp	r3, r4
 8025924:	db01      	blt.n	802592a <__sfputc_r+0x16>
 8025926:	290a      	cmp	r1, #10
 8025928:	d103      	bne.n	8025932 <__sfputc_r+0x1e>
 802592a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802592e:	f000 bc37 	b.w	80261a0 <__swbuf_r>
 8025932:	6813      	ldr	r3, [r2, #0]
 8025934:	1c58      	adds	r0, r3, #1
 8025936:	6010      	str	r0, [r2, #0]
 8025938:	7019      	strb	r1, [r3, #0]
 802593a:	4608      	mov	r0, r1
 802593c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025940:	4770      	bx	lr

08025942 <__sfputs_r>:
 8025942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025944:	4606      	mov	r6, r0
 8025946:	460f      	mov	r7, r1
 8025948:	4614      	mov	r4, r2
 802594a:	18d5      	adds	r5, r2, r3
 802594c:	42ac      	cmp	r4, r5
 802594e:	d101      	bne.n	8025954 <__sfputs_r+0x12>
 8025950:	2000      	movs	r0, #0
 8025952:	e007      	b.n	8025964 <__sfputs_r+0x22>
 8025954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025958:	463a      	mov	r2, r7
 802595a:	4630      	mov	r0, r6
 802595c:	f7ff ffda 	bl	8025914 <__sfputc_r>
 8025960:	1c43      	adds	r3, r0, #1
 8025962:	d1f3      	bne.n	802594c <__sfputs_r+0xa>
 8025964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025968 <_vfiprintf_r>:
 8025968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802596c:	460d      	mov	r5, r1
 802596e:	b09d      	sub	sp, #116	; 0x74
 8025970:	4614      	mov	r4, r2
 8025972:	4698      	mov	r8, r3
 8025974:	4606      	mov	r6, r0
 8025976:	b118      	cbz	r0, 8025980 <_vfiprintf_r+0x18>
 8025978:	6983      	ldr	r3, [r0, #24]
 802597a:	b90b      	cbnz	r3, 8025980 <_vfiprintf_r+0x18>
 802597c:	f7ff fdfa 	bl	8025574 <__sinit>
 8025980:	4b89      	ldr	r3, [pc, #548]	; (8025ba8 <_vfiprintf_r+0x240>)
 8025982:	429d      	cmp	r5, r3
 8025984:	d11b      	bne.n	80259be <_vfiprintf_r+0x56>
 8025986:	6875      	ldr	r5, [r6, #4]
 8025988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802598a:	07d9      	lsls	r1, r3, #31
 802598c:	d405      	bmi.n	802599a <_vfiprintf_r+0x32>
 802598e:	89ab      	ldrh	r3, [r5, #12]
 8025990:	059a      	lsls	r2, r3, #22
 8025992:	d402      	bmi.n	802599a <_vfiprintf_r+0x32>
 8025994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025996:	f7ff fedc 	bl	8025752 <__retarget_lock_acquire_recursive>
 802599a:	89ab      	ldrh	r3, [r5, #12]
 802599c:	071b      	lsls	r3, r3, #28
 802599e:	d501      	bpl.n	80259a4 <_vfiprintf_r+0x3c>
 80259a0:	692b      	ldr	r3, [r5, #16]
 80259a2:	b9eb      	cbnz	r3, 80259e0 <_vfiprintf_r+0x78>
 80259a4:	4629      	mov	r1, r5
 80259a6:	4630      	mov	r0, r6
 80259a8:	f000 fc5e 	bl	8026268 <__swsetup_r>
 80259ac:	b1c0      	cbz	r0, 80259e0 <_vfiprintf_r+0x78>
 80259ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80259b0:	07dc      	lsls	r4, r3, #31
 80259b2:	d50e      	bpl.n	80259d2 <_vfiprintf_r+0x6a>
 80259b4:	f04f 30ff 	mov.w	r0, #4294967295
 80259b8:	b01d      	add	sp, #116	; 0x74
 80259ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259be:	4b7b      	ldr	r3, [pc, #492]	; (8025bac <_vfiprintf_r+0x244>)
 80259c0:	429d      	cmp	r5, r3
 80259c2:	d101      	bne.n	80259c8 <_vfiprintf_r+0x60>
 80259c4:	68b5      	ldr	r5, [r6, #8]
 80259c6:	e7df      	b.n	8025988 <_vfiprintf_r+0x20>
 80259c8:	4b79      	ldr	r3, [pc, #484]	; (8025bb0 <_vfiprintf_r+0x248>)
 80259ca:	429d      	cmp	r5, r3
 80259cc:	bf08      	it	eq
 80259ce:	68f5      	ldreq	r5, [r6, #12]
 80259d0:	e7da      	b.n	8025988 <_vfiprintf_r+0x20>
 80259d2:	89ab      	ldrh	r3, [r5, #12]
 80259d4:	0598      	lsls	r0, r3, #22
 80259d6:	d4ed      	bmi.n	80259b4 <_vfiprintf_r+0x4c>
 80259d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80259da:	f7ff febb 	bl	8025754 <__retarget_lock_release_recursive>
 80259de:	e7e9      	b.n	80259b4 <_vfiprintf_r+0x4c>
 80259e0:	2300      	movs	r3, #0
 80259e2:	9309      	str	r3, [sp, #36]	; 0x24
 80259e4:	2320      	movs	r3, #32
 80259e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80259ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80259ee:	2330      	movs	r3, #48	; 0x30
 80259f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8025bb4 <_vfiprintf_r+0x24c>
 80259f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80259f8:	f04f 0901 	mov.w	r9, #1
 80259fc:	4623      	mov	r3, r4
 80259fe:	469a      	mov	sl, r3
 8025a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025a04:	b10a      	cbz	r2, 8025a0a <_vfiprintf_r+0xa2>
 8025a06:	2a25      	cmp	r2, #37	; 0x25
 8025a08:	d1f9      	bne.n	80259fe <_vfiprintf_r+0x96>
 8025a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8025a0e:	d00b      	beq.n	8025a28 <_vfiprintf_r+0xc0>
 8025a10:	465b      	mov	r3, fp
 8025a12:	4622      	mov	r2, r4
 8025a14:	4629      	mov	r1, r5
 8025a16:	4630      	mov	r0, r6
 8025a18:	f7ff ff93 	bl	8025942 <__sfputs_r>
 8025a1c:	3001      	adds	r0, #1
 8025a1e:	f000 80aa 	beq.w	8025b76 <_vfiprintf_r+0x20e>
 8025a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a24:	445a      	add	r2, fp
 8025a26:	9209      	str	r2, [sp, #36]	; 0x24
 8025a28:	f89a 3000 	ldrb.w	r3, [sl]
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	f000 80a2 	beq.w	8025b76 <_vfiprintf_r+0x20e>
 8025a32:	2300      	movs	r3, #0
 8025a34:	f04f 32ff 	mov.w	r2, #4294967295
 8025a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025a3c:	f10a 0a01 	add.w	sl, sl, #1
 8025a40:	9304      	str	r3, [sp, #16]
 8025a42:	9307      	str	r3, [sp, #28]
 8025a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025a48:	931a      	str	r3, [sp, #104]	; 0x68
 8025a4a:	4654      	mov	r4, sl
 8025a4c:	2205      	movs	r2, #5
 8025a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a52:	4858      	ldr	r0, [pc, #352]	; (8025bb4 <_vfiprintf_r+0x24c>)
 8025a54:	f7da fbdc 	bl	8000210 <memchr>
 8025a58:	9a04      	ldr	r2, [sp, #16]
 8025a5a:	b9d8      	cbnz	r0, 8025a94 <_vfiprintf_r+0x12c>
 8025a5c:	06d1      	lsls	r1, r2, #27
 8025a5e:	bf44      	itt	mi
 8025a60:	2320      	movmi	r3, #32
 8025a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025a66:	0713      	lsls	r3, r2, #28
 8025a68:	bf44      	itt	mi
 8025a6a:	232b      	movmi	r3, #43	; 0x2b
 8025a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025a70:	f89a 3000 	ldrb.w	r3, [sl]
 8025a74:	2b2a      	cmp	r3, #42	; 0x2a
 8025a76:	d015      	beq.n	8025aa4 <_vfiprintf_r+0x13c>
 8025a78:	9a07      	ldr	r2, [sp, #28]
 8025a7a:	4654      	mov	r4, sl
 8025a7c:	2000      	movs	r0, #0
 8025a7e:	f04f 0c0a 	mov.w	ip, #10
 8025a82:	4621      	mov	r1, r4
 8025a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025a88:	3b30      	subs	r3, #48	; 0x30
 8025a8a:	2b09      	cmp	r3, #9
 8025a8c:	d94e      	bls.n	8025b2c <_vfiprintf_r+0x1c4>
 8025a8e:	b1b0      	cbz	r0, 8025abe <_vfiprintf_r+0x156>
 8025a90:	9207      	str	r2, [sp, #28]
 8025a92:	e014      	b.n	8025abe <_vfiprintf_r+0x156>
 8025a94:	eba0 0308 	sub.w	r3, r0, r8
 8025a98:	fa09 f303 	lsl.w	r3, r9, r3
 8025a9c:	4313      	orrs	r3, r2
 8025a9e:	9304      	str	r3, [sp, #16]
 8025aa0:	46a2      	mov	sl, r4
 8025aa2:	e7d2      	b.n	8025a4a <_vfiprintf_r+0xe2>
 8025aa4:	9b03      	ldr	r3, [sp, #12]
 8025aa6:	1d19      	adds	r1, r3, #4
 8025aa8:	681b      	ldr	r3, [r3, #0]
 8025aaa:	9103      	str	r1, [sp, #12]
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	bfbb      	ittet	lt
 8025ab0:	425b      	neglt	r3, r3
 8025ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8025ab6:	9307      	strge	r3, [sp, #28]
 8025ab8:	9307      	strlt	r3, [sp, #28]
 8025aba:	bfb8      	it	lt
 8025abc:	9204      	strlt	r2, [sp, #16]
 8025abe:	7823      	ldrb	r3, [r4, #0]
 8025ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8025ac2:	d10c      	bne.n	8025ade <_vfiprintf_r+0x176>
 8025ac4:	7863      	ldrb	r3, [r4, #1]
 8025ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8025ac8:	d135      	bne.n	8025b36 <_vfiprintf_r+0x1ce>
 8025aca:	9b03      	ldr	r3, [sp, #12]
 8025acc:	1d1a      	adds	r2, r3, #4
 8025ace:	681b      	ldr	r3, [r3, #0]
 8025ad0:	9203      	str	r2, [sp, #12]
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	bfb8      	it	lt
 8025ad6:	f04f 33ff 	movlt.w	r3, #4294967295
 8025ada:	3402      	adds	r4, #2
 8025adc:	9305      	str	r3, [sp, #20]
 8025ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8025bc4 <_vfiprintf_r+0x25c>
 8025ae2:	7821      	ldrb	r1, [r4, #0]
 8025ae4:	2203      	movs	r2, #3
 8025ae6:	4650      	mov	r0, sl
 8025ae8:	f7da fb92 	bl	8000210 <memchr>
 8025aec:	b140      	cbz	r0, 8025b00 <_vfiprintf_r+0x198>
 8025aee:	2340      	movs	r3, #64	; 0x40
 8025af0:	eba0 000a 	sub.w	r0, r0, sl
 8025af4:	fa03 f000 	lsl.w	r0, r3, r0
 8025af8:	9b04      	ldr	r3, [sp, #16]
 8025afa:	4303      	orrs	r3, r0
 8025afc:	3401      	adds	r4, #1
 8025afe:	9304      	str	r3, [sp, #16]
 8025b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025b04:	482c      	ldr	r0, [pc, #176]	; (8025bb8 <_vfiprintf_r+0x250>)
 8025b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8025b0a:	2206      	movs	r2, #6
 8025b0c:	f7da fb80 	bl	8000210 <memchr>
 8025b10:	2800      	cmp	r0, #0
 8025b12:	d03f      	beq.n	8025b94 <_vfiprintf_r+0x22c>
 8025b14:	4b29      	ldr	r3, [pc, #164]	; (8025bbc <_vfiprintf_r+0x254>)
 8025b16:	bb1b      	cbnz	r3, 8025b60 <_vfiprintf_r+0x1f8>
 8025b18:	9b03      	ldr	r3, [sp, #12]
 8025b1a:	3307      	adds	r3, #7
 8025b1c:	f023 0307 	bic.w	r3, r3, #7
 8025b20:	3308      	adds	r3, #8
 8025b22:	9303      	str	r3, [sp, #12]
 8025b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b26:	443b      	add	r3, r7
 8025b28:	9309      	str	r3, [sp, #36]	; 0x24
 8025b2a:	e767      	b.n	80259fc <_vfiprintf_r+0x94>
 8025b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025b30:	460c      	mov	r4, r1
 8025b32:	2001      	movs	r0, #1
 8025b34:	e7a5      	b.n	8025a82 <_vfiprintf_r+0x11a>
 8025b36:	2300      	movs	r3, #0
 8025b38:	3401      	adds	r4, #1
 8025b3a:	9305      	str	r3, [sp, #20]
 8025b3c:	4619      	mov	r1, r3
 8025b3e:	f04f 0c0a 	mov.w	ip, #10
 8025b42:	4620      	mov	r0, r4
 8025b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025b48:	3a30      	subs	r2, #48	; 0x30
 8025b4a:	2a09      	cmp	r2, #9
 8025b4c:	d903      	bls.n	8025b56 <_vfiprintf_r+0x1ee>
 8025b4e:	2b00      	cmp	r3, #0
 8025b50:	d0c5      	beq.n	8025ade <_vfiprintf_r+0x176>
 8025b52:	9105      	str	r1, [sp, #20]
 8025b54:	e7c3      	b.n	8025ade <_vfiprintf_r+0x176>
 8025b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8025b5a:	4604      	mov	r4, r0
 8025b5c:	2301      	movs	r3, #1
 8025b5e:	e7f0      	b.n	8025b42 <_vfiprintf_r+0x1da>
 8025b60:	ab03      	add	r3, sp, #12
 8025b62:	9300      	str	r3, [sp, #0]
 8025b64:	462a      	mov	r2, r5
 8025b66:	4b16      	ldr	r3, [pc, #88]	; (8025bc0 <_vfiprintf_r+0x258>)
 8025b68:	a904      	add	r1, sp, #16
 8025b6a:	4630      	mov	r0, r6
 8025b6c:	f3af 8000 	nop.w
 8025b70:	4607      	mov	r7, r0
 8025b72:	1c78      	adds	r0, r7, #1
 8025b74:	d1d6      	bne.n	8025b24 <_vfiprintf_r+0x1bc>
 8025b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8025b78:	07d9      	lsls	r1, r3, #31
 8025b7a:	d405      	bmi.n	8025b88 <_vfiprintf_r+0x220>
 8025b7c:	89ab      	ldrh	r3, [r5, #12]
 8025b7e:	059a      	lsls	r2, r3, #22
 8025b80:	d402      	bmi.n	8025b88 <_vfiprintf_r+0x220>
 8025b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8025b84:	f7ff fde6 	bl	8025754 <__retarget_lock_release_recursive>
 8025b88:	89ab      	ldrh	r3, [r5, #12]
 8025b8a:	065b      	lsls	r3, r3, #25
 8025b8c:	f53f af12 	bmi.w	80259b4 <_vfiprintf_r+0x4c>
 8025b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025b92:	e711      	b.n	80259b8 <_vfiprintf_r+0x50>
 8025b94:	ab03      	add	r3, sp, #12
 8025b96:	9300      	str	r3, [sp, #0]
 8025b98:	462a      	mov	r2, r5
 8025b9a:	4b09      	ldr	r3, [pc, #36]	; (8025bc0 <_vfiprintf_r+0x258>)
 8025b9c:	a904      	add	r1, sp, #16
 8025b9e:	4630      	mov	r0, r6
 8025ba0:	f000 f880 	bl	8025ca4 <_printf_i>
 8025ba4:	e7e4      	b.n	8025b70 <_vfiprintf_r+0x208>
 8025ba6:	bf00      	nop
 8025ba8:	0802ba10 	.word	0x0802ba10
 8025bac:	0802ba30 	.word	0x0802ba30
 8025bb0:	0802b9f0 	.word	0x0802b9f0
 8025bb4:	0802ba54 	.word	0x0802ba54
 8025bb8:	0802ba5e 	.word	0x0802ba5e
 8025bbc:	00000000 	.word	0x00000000
 8025bc0:	08025943 	.word	0x08025943
 8025bc4:	0802ba5a 	.word	0x0802ba5a

08025bc8 <_printf_common>:
 8025bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025bcc:	4616      	mov	r6, r2
 8025bce:	4699      	mov	r9, r3
 8025bd0:	688a      	ldr	r2, [r1, #8]
 8025bd2:	690b      	ldr	r3, [r1, #16]
 8025bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025bd8:	4293      	cmp	r3, r2
 8025bda:	bfb8      	it	lt
 8025bdc:	4613      	movlt	r3, r2
 8025bde:	6033      	str	r3, [r6, #0]
 8025be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025be4:	4607      	mov	r7, r0
 8025be6:	460c      	mov	r4, r1
 8025be8:	b10a      	cbz	r2, 8025bee <_printf_common+0x26>
 8025bea:	3301      	adds	r3, #1
 8025bec:	6033      	str	r3, [r6, #0]
 8025bee:	6823      	ldr	r3, [r4, #0]
 8025bf0:	0699      	lsls	r1, r3, #26
 8025bf2:	bf42      	ittt	mi
 8025bf4:	6833      	ldrmi	r3, [r6, #0]
 8025bf6:	3302      	addmi	r3, #2
 8025bf8:	6033      	strmi	r3, [r6, #0]
 8025bfa:	6825      	ldr	r5, [r4, #0]
 8025bfc:	f015 0506 	ands.w	r5, r5, #6
 8025c00:	d106      	bne.n	8025c10 <_printf_common+0x48>
 8025c02:	f104 0a19 	add.w	sl, r4, #25
 8025c06:	68e3      	ldr	r3, [r4, #12]
 8025c08:	6832      	ldr	r2, [r6, #0]
 8025c0a:	1a9b      	subs	r3, r3, r2
 8025c0c:	42ab      	cmp	r3, r5
 8025c0e:	dc26      	bgt.n	8025c5e <_printf_common+0x96>
 8025c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025c14:	1e13      	subs	r3, r2, #0
 8025c16:	6822      	ldr	r2, [r4, #0]
 8025c18:	bf18      	it	ne
 8025c1a:	2301      	movne	r3, #1
 8025c1c:	0692      	lsls	r2, r2, #26
 8025c1e:	d42b      	bmi.n	8025c78 <_printf_common+0xb0>
 8025c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025c24:	4649      	mov	r1, r9
 8025c26:	4638      	mov	r0, r7
 8025c28:	47c0      	blx	r8
 8025c2a:	3001      	adds	r0, #1
 8025c2c:	d01e      	beq.n	8025c6c <_printf_common+0xa4>
 8025c2e:	6823      	ldr	r3, [r4, #0]
 8025c30:	68e5      	ldr	r5, [r4, #12]
 8025c32:	6832      	ldr	r2, [r6, #0]
 8025c34:	f003 0306 	and.w	r3, r3, #6
 8025c38:	2b04      	cmp	r3, #4
 8025c3a:	bf08      	it	eq
 8025c3c:	1aad      	subeq	r5, r5, r2
 8025c3e:	68a3      	ldr	r3, [r4, #8]
 8025c40:	6922      	ldr	r2, [r4, #16]
 8025c42:	bf0c      	ite	eq
 8025c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025c48:	2500      	movne	r5, #0
 8025c4a:	4293      	cmp	r3, r2
 8025c4c:	bfc4      	itt	gt
 8025c4e:	1a9b      	subgt	r3, r3, r2
 8025c50:	18ed      	addgt	r5, r5, r3
 8025c52:	2600      	movs	r6, #0
 8025c54:	341a      	adds	r4, #26
 8025c56:	42b5      	cmp	r5, r6
 8025c58:	d11a      	bne.n	8025c90 <_printf_common+0xc8>
 8025c5a:	2000      	movs	r0, #0
 8025c5c:	e008      	b.n	8025c70 <_printf_common+0xa8>
 8025c5e:	2301      	movs	r3, #1
 8025c60:	4652      	mov	r2, sl
 8025c62:	4649      	mov	r1, r9
 8025c64:	4638      	mov	r0, r7
 8025c66:	47c0      	blx	r8
 8025c68:	3001      	adds	r0, #1
 8025c6a:	d103      	bne.n	8025c74 <_printf_common+0xac>
 8025c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8025c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025c74:	3501      	adds	r5, #1
 8025c76:	e7c6      	b.n	8025c06 <_printf_common+0x3e>
 8025c78:	18e1      	adds	r1, r4, r3
 8025c7a:	1c5a      	adds	r2, r3, #1
 8025c7c:	2030      	movs	r0, #48	; 0x30
 8025c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025c82:	4422      	add	r2, r4
 8025c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025c8c:	3302      	adds	r3, #2
 8025c8e:	e7c7      	b.n	8025c20 <_printf_common+0x58>
 8025c90:	2301      	movs	r3, #1
 8025c92:	4622      	mov	r2, r4
 8025c94:	4649      	mov	r1, r9
 8025c96:	4638      	mov	r0, r7
 8025c98:	47c0      	blx	r8
 8025c9a:	3001      	adds	r0, #1
 8025c9c:	d0e6      	beq.n	8025c6c <_printf_common+0xa4>
 8025c9e:	3601      	adds	r6, #1
 8025ca0:	e7d9      	b.n	8025c56 <_printf_common+0x8e>
	...

08025ca4 <_printf_i>:
 8025ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025ca8:	460c      	mov	r4, r1
 8025caa:	4691      	mov	r9, r2
 8025cac:	7e27      	ldrb	r7, [r4, #24]
 8025cae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025cb0:	2f78      	cmp	r7, #120	; 0x78
 8025cb2:	4680      	mov	r8, r0
 8025cb4:	469a      	mov	sl, r3
 8025cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025cba:	d807      	bhi.n	8025ccc <_printf_i+0x28>
 8025cbc:	2f62      	cmp	r7, #98	; 0x62
 8025cbe:	d80a      	bhi.n	8025cd6 <_printf_i+0x32>
 8025cc0:	2f00      	cmp	r7, #0
 8025cc2:	f000 80d8 	beq.w	8025e76 <_printf_i+0x1d2>
 8025cc6:	2f58      	cmp	r7, #88	; 0x58
 8025cc8:	f000 80a3 	beq.w	8025e12 <_printf_i+0x16e>
 8025ccc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025cd4:	e03a      	b.n	8025d4c <_printf_i+0xa8>
 8025cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8025cda:	2b15      	cmp	r3, #21
 8025cdc:	d8f6      	bhi.n	8025ccc <_printf_i+0x28>
 8025cde:	a001      	add	r0, pc, #4	; (adr r0, 8025ce4 <_printf_i+0x40>)
 8025ce0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8025ce4:	08025d3d 	.word	0x08025d3d
 8025ce8:	08025d51 	.word	0x08025d51
 8025cec:	08025ccd 	.word	0x08025ccd
 8025cf0:	08025ccd 	.word	0x08025ccd
 8025cf4:	08025ccd 	.word	0x08025ccd
 8025cf8:	08025ccd 	.word	0x08025ccd
 8025cfc:	08025d51 	.word	0x08025d51
 8025d00:	08025ccd 	.word	0x08025ccd
 8025d04:	08025ccd 	.word	0x08025ccd
 8025d08:	08025ccd 	.word	0x08025ccd
 8025d0c:	08025ccd 	.word	0x08025ccd
 8025d10:	08025e5d 	.word	0x08025e5d
 8025d14:	08025d81 	.word	0x08025d81
 8025d18:	08025e3f 	.word	0x08025e3f
 8025d1c:	08025ccd 	.word	0x08025ccd
 8025d20:	08025ccd 	.word	0x08025ccd
 8025d24:	08025e7f 	.word	0x08025e7f
 8025d28:	08025ccd 	.word	0x08025ccd
 8025d2c:	08025d81 	.word	0x08025d81
 8025d30:	08025ccd 	.word	0x08025ccd
 8025d34:	08025ccd 	.word	0x08025ccd
 8025d38:	08025e47 	.word	0x08025e47
 8025d3c:	680b      	ldr	r3, [r1, #0]
 8025d3e:	1d1a      	adds	r2, r3, #4
 8025d40:	681b      	ldr	r3, [r3, #0]
 8025d42:	600a      	str	r2, [r1, #0]
 8025d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8025d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8025d4c:	2301      	movs	r3, #1
 8025d4e:	e0a3      	b.n	8025e98 <_printf_i+0x1f4>
 8025d50:	6825      	ldr	r5, [r4, #0]
 8025d52:	6808      	ldr	r0, [r1, #0]
 8025d54:	062e      	lsls	r6, r5, #24
 8025d56:	f100 0304 	add.w	r3, r0, #4
 8025d5a:	d50a      	bpl.n	8025d72 <_printf_i+0xce>
 8025d5c:	6805      	ldr	r5, [r0, #0]
 8025d5e:	600b      	str	r3, [r1, #0]
 8025d60:	2d00      	cmp	r5, #0
 8025d62:	da03      	bge.n	8025d6c <_printf_i+0xc8>
 8025d64:	232d      	movs	r3, #45	; 0x2d
 8025d66:	426d      	negs	r5, r5
 8025d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025d6c:	485e      	ldr	r0, [pc, #376]	; (8025ee8 <_printf_i+0x244>)
 8025d6e:	230a      	movs	r3, #10
 8025d70:	e019      	b.n	8025da6 <_printf_i+0x102>
 8025d72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8025d76:	6805      	ldr	r5, [r0, #0]
 8025d78:	600b      	str	r3, [r1, #0]
 8025d7a:	bf18      	it	ne
 8025d7c:	b22d      	sxthne	r5, r5
 8025d7e:	e7ef      	b.n	8025d60 <_printf_i+0xbc>
 8025d80:	680b      	ldr	r3, [r1, #0]
 8025d82:	6825      	ldr	r5, [r4, #0]
 8025d84:	1d18      	adds	r0, r3, #4
 8025d86:	6008      	str	r0, [r1, #0]
 8025d88:	0628      	lsls	r0, r5, #24
 8025d8a:	d501      	bpl.n	8025d90 <_printf_i+0xec>
 8025d8c:	681d      	ldr	r5, [r3, #0]
 8025d8e:	e002      	b.n	8025d96 <_printf_i+0xf2>
 8025d90:	0669      	lsls	r1, r5, #25
 8025d92:	d5fb      	bpl.n	8025d8c <_printf_i+0xe8>
 8025d94:	881d      	ldrh	r5, [r3, #0]
 8025d96:	4854      	ldr	r0, [pc, #336]	; (8025ee8 <_printf_i+0x244>)
 8025d98:	2f6f      	cmp	r7, #111	; 0x6f
 8025d9a:	bf0c      	ite	eq
 8025d9c:	2308      	moveq	r3, #8
 8025d9e:	230a      	movne	r3, #10
 8025da0:	2100      	movs	r1, #0
 8025da2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8025da6:	6866      	ldr	r6, [r4, #4]
 8025da8:	60a6      	str	r6, [r4, #8]
 8025daa:	2e00      	cmp	r6, #0
 8025dac:	bfa2      	ittt	ge
 8025dae:	6821      	ldrge	r1, [r4, #0]
 8025db0:	f021 0104 	bicge.w	r1, r1, #4
 8025db4:	6021      	strge	r1, [r4, #0]
 8025db6:	b90d      	cbnz	r5, 8025dbc <_printf_i+0x118>
 8025db8:	2e00      	cmp	r6, #0
 8025dba:	d04d      	beq.n	8025e58 <_printf_i+0x1b4>
 8025dbc:	4616      	mov	r6, r2
 8025dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8025dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8025dc6:	5dc7      	ldrb	r7, [r0, r7]
 8025dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025dcc:	462f      	mov	r7, r5
 8025dce:	42bb      	cmp	r3, r7
 8025dd0:	460d      	mov	r5, r1
 8025dd2:	d9f4      	bls.n	8025dbe <_printf_i+0x11a>
 8025dd4:	2b08      	cmp	r3, #8
 8025dd6:	d10b      	bne.n	8025df0 <_printf_i+0x14c>
 8025dd8:	6823      	ldr	r3, [r4, #0]
 8025dda:	07df      	lsls	r7, r3, #31
 8025ddc:	d508      	bpl.n	8025df0 <_printf_i+0x14c>
 8025dde:	6923      	ldr	r3, [r4, #16]
 8025de0:	6861      	ldr	r1, [r4, #4]
 8025de2:	4299      	cmp	r1, r3
 8025de4:	bfde      	ittt	le
 8025de6:	2330      	movle	r3, #48	; 0x30
 8025de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025df0:	1b92      	subs	r2, r2, r6
 8025df2:	6122      	str	r2, [r4, #16]
 8025df4:	f8cd a000 	str.w	sl, [sp]
 8025df8:	464b      	mov	r3, r9
 8025dfa:	aa03      	add	r2, sp, #12
 8025dfc:	4621      	mov	r1, r4
 8025dfe:	4640      	mov	r0, r8
 8025e00:	f7ff fee2 	bl	8025bc8 <_printf_common>
 8025e04:	3001      	adds	r0, #1
 8025e06:	d14c      	bne.n	8025ea2 <_printf_i+0x1fe>
 8025e08:	f04f 30ff 	mov.w	r0, #4294967295
 8025e0c:	b004      	add	sp, #16
 8025e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e12:	4835      	ldr	r0, [pc, #212]	; (8025ee8 <_printf_i+0x244>)
 8025e14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8025e18:	6823      	ldr	r3, [r4, #0]
 8025e1a:	680e      	ldr	r6, [r1, #0]
 8025e1c:	061f      	lsls	r7, r3, #24
 8025e1e:	f856 5b04 	ldr.w	r5, [r6], #4
 8025e22:	600e      	str	r6, [r1, #0]
 8025e24:	d514      	bpl.n	8025e50 <_printf_i+0x1ac>
 8025e26:	07d9      	lsls	r1, r3, #31
 8025e28:	bf44      	itt	mi
 8025e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8025e2e:	6023      	strmi	r3, [r4, #0]
 8025e30:	b91d      	cbnz	r5, 8025e3a <_printf_i+0x196>
 8025e32:	6823      	ldr	r3, [r4, #0]
 8025e34:	f023 0320 	bic.w	r3, r3, #32
 8025e38:	6023      	str	r3, [r4, #0]
 8025e3a:	2310      	movs	r3, #16
 8025e3c:	e7b0      	b.n	8025da0 <_printf_i+0xfc>
 8025e3e:	6823      	ldr	r3, [r4, #0]
 8025e40:	f043 0320 	orr.w	r3, r3, #32
 8025e44:	6023      	str	r3, [r4, #0]
 8025e46:	2378      	movs	r3, #120	; 0x78
 8025e48:	4828      	ldr	r0, [pc, #160]	; (8025eec <_printf_i+0x248>)
 8025e4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8025e4e:	e7e3      	b.n	8025e18 <_printf_i+0x174>
 8025e50:	065e      	lsls	r6, r3, #25
 8025e52:	bf48      	it	mi
 8025e54:	b2ad      	uxthmi	r5, r5
 8025e56:	e7e6      	b.n	8025e26 <_printf_i+0x182>
 8025e58:	4616      	mov	r6, r2
 8025e5a:	e7bb      	b.n	8025dd4 <_printf_i+0x130>
 8025e5c:	680b      	ldr	r3, [r1, #0]
 8025e5e:	6826      	ldr	r6, [r4, #0]
 8025e60:	6960      	ldr	r0, [r4, #20]
 8025e62:	1d1d      	adds	r5, r3, #4
 8025e64:	600d      	str	r5, [r1, #0]
 8025e66:	0635      	lsls	r5, r6, #24
 8025e68:	681b      	ldr	r3, [r3, #0]
 8025e6a:	d501      	bpl.n	8025e70 <_printf_i+0x1cc>
 8025e6c:	6018      	str	r0, [r3, #0]
 8025e6e:	e002      	b.n	8025e76 <_printf_i+0x1d2>
 8025e70:	0671      	lsls	r1, r6, #25
 8025e72:	d5fb      	bpl.n	8025e6c <_printf_i+0x1c8>
 8025e74:	8018      	strh	r0, [r3, #0]
 8025e76:	2300      	movs	r3, #0
 8025e78:	6123      	str	r3, [r4, #16]
 8025e7a:	4616      	mov	r6, r2
 8025e7c:	e7ba      	b.n	8025df4 <_printf_i+0x150>
 8025e7e:	680b      	ldr	r3, [r1, #0]
 8025e80:	1d1a      	adds	r2, r3, #4
 8025e82:	600a      	str	r2, [r1, #0]
 8025e84:	681e      	ldr	r6, [r3, #0]
 8025e86:	6862      	ldr	r2, [r4, #4]
 8025e88:	2100      	movs	r1, #0
 8025e8a:	4630      	mov	r0, r6
 8025e8c:	f7da f9c0 	bl	8000210 <memchr>
 8025e90:	b108      	cbz	r0, 8025e96 <_printf_i+0x1f2>
 8025e92:	1b80      	subs	r0, r0, r6
 8025e94:	6060      	str	r0, [r4, #4]
 8025e96:	6863      	ldr	r3, [r4, #4]
 8025e98:	6123      	str	r3, [r4, #16]
 8025e9a:	2300      	movs	r3, #0
 8025e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025ea0:	e7a8      	b.n	8025df4 <_printf_i+0x150>
 8025ea2:	6923      	ldr	r3, [r4, #16]
 8025ea4:	4632      	mov	r2, r6
 8025ea6:	4649      	mov	r1, r9
 8025ea8:	4640      	mov	r0, r8
 8025eaa:	47d0      	blx	sl
 8025eac:	3001      	adds	r0, #1
 8025eae:	d0ab      	beq.n	8025e08 <_printf_i+0x164>
 8025eb0:	6823      	ldr	r3, [r4, #0]
 8025eb2:	079b      	lsls	r3, r3, #30
 8025eb4:	d413      	bmi.n	8025ede <_printf_i+0x23a>
 8025eb6:	68e0      	ldr	r0, [r4, #12]
 8025eb8:	9b03      	ldr	r3, [sp, #12]
 8025eba:	4298      	cmp	r0, r3
 8025ebc:	bfb8      	it	lt
 8025ebe:	4618      	movlt	r0, r3
 8025ec0:	e7a4      	b.n	8025e0c <_printf_i+0x168>
 8025ec2:	2301      	movs	r3, #1
 8025ec4:	4632      	mov	r2, r6
 8025ec6:	4649      	mov	r1, r9
 8025ec8:	4640      	mov	r0, r8
 8025eca:	47d0      	blx	sl
 8025ecc:	3001      	adds	r0, #1
 8025ece:	d09b      	beq.n	8025e08 <_printf_i+0x164>
 8025ed0:	3501      	adds	r5, #1
 8025ed2:	68e3      	ldr	r3, [r4, #12]
 8025ed4:	9903      	ldr	r1, [sp, #12]
 8025ed6:	1a5b      	subs	r3, r3, r1
 8025ed8:	42ab      	cmp	r3, r5
 8025eda:	dcf2      	bgt.n	8025ec2 <_printf_i+0x21e>
 8025edc:	e7eb      	b.n	8025eb6 <_printf_i+0x212>
 8025ede:	2500      	movs	r5, #0
 8025ee0:	f104 0619 	add.w	r6, r4, #25
 8025ee4:	e7f5      	b.n	8025ed2 <_printf_i+0x22e>
 8025ee6:	bf00      	nop
 8025ee8:	0802ba65 	.word	0x0802ba65
 8025eec:	0802ba76 	.word	0x0802ba76

08025ef0 <iprintf>:
 8025ef0:	b40f      	push	{r0, r1, r2, r3}
 8025ef2:	4b0a      	ldr	r3, [pc, #40]	; (8025f1c <iprintf+0x2c>)
 8025ef4:	b513      	push	{r0, r1, r4, lr}
 8025ef6:	681c      	ldr	r4, [r3, #0]
 8025ef8:	b124      	cbz	r4, 8025f04 <iprintf+0x14>
 8025efa:	69a3      	ldr	r3, [r4, #24]
 8025efc:	b913      	cbnz	r3, 8025f04 <iprintf+0x14>
 8025efe:	4620      	mov	r0, r4
 8025f00:	f7ff fb38 	bl	8025574 <__sinit>
 8025f04:	ab05      	add	r3, sp, #20
 8025f06:	9a04      	ldr	r2, [sp, #16]
 8025f08:	68a1      	ldr	r1, [r4, #8]
 8025f0a:	9301      	str	r3, [sp, #4]
 8025f0c:	4620      	mov	r0, r4
 8025f0e:	f7ff fd2b 	bl	8025968 <_vfiprintf_r>
 8025f12:	b002      	add	sp, #8
 8025f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f18:	b004      	add	sp, #16
 8025f1a:	4770      	bx	lr
 8025f1c:	20000070 	.word	0x20000070

08025f20 <rand>:
 8025f20:	4b17      	ldr	r3, [pc, #92]	; (8025f80 <rand+0x60>)
 8025f22:	b510      	push	{r4, lr}
 8025f24:	681c      	ldr	r4, [r3, #0]
 8025f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025f28:	b9b3      	cbnz	r3, 8025f58 <rand+0x38>
 8025f2a:	2018      	movs	r0, #24
 8025f2c:	f7ff fc14 	bl	8025758 <malloc>
 8025f30:	63a0      	str	r0, [r4, #56]	; 0x38
 8025f32:	b928      	cbnz	r0, 8025f40 <rand+0x20>
 8025f34:	4602      	mov	r2, r0
 8025f36:	4b13      	ldr	r3, [pc, #76]	; (8025f84 <rand+0x64>)
 8025f38:	4813      	ldr	r0, [pc, #76]	; (8025f88 <rand+0x68>)
 8025f3a:	214e      	movs	r1, #78	; 0x4e
 8025f3c:	f7ff faa4 	bl	8025488 <__assert_func>
 8025f40:	4a12      	ldr	r2, [pc, #72]	; (8025f8c <rand+0x6c>)
 8025f42:	4b13      	ldr	r3, [pc, #76]	; (8025f90 <rand+0x70>)
 8025f44:	e9c0 2300 	strd	r2, r3, [r0]
 8025f48:	4b12      	ldr	r3, [pc, #72]	; (8025f94 <rand+0x74>)
 8025f4a:	6083      	str	r3, [r0, #8]
 8025f4c:	230b      	movs	r3, #11
 8025f4e:	8183      	strh	r3, [r0, #12]
 8025f50:	2201      	movs	r2, #1
 8025f52:	2300      	movs	r3, #0
 8025f54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025f58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8025f5a:	480f      	ldr	r0, [pc, #60]	; (8025f98 <rand+0x78>)
 8025f5c:	690a      	ldr	r2, [r1, #16]
 8025f5e:	694b      	ldr	r3, [r1, #20]
 8025f60:	4c0e      	ldr	r4, [pc, #56]	; (8025f9c <rand+0x7c>)
 8025f62:	4350      	muls	r0, r2
 8025f64:	fb04 0003 	mla	r0, r4, r3, r0
 8025f68:	fba2 3404 	umull	r3, r4, r2, r4
 8025f6c:	1c5a      	adds	r2, r3, #1
 8025f6e:	4404      	add	r4, r0
 8025f70:	f144 0000 	adc.w	r0, r4, #0
 8025f74:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8025f78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025f7c:	bd10      	pop	{r4, pc}
 8025f7e:	bf00      	nop
 8025f80:	20000070 	.word	0x20000070
 8025f84:	0802ba87 	.word	0x0802ba87
 8025f88:	0802ba9e 	.word	0x0802ba9e
 8025f8c:	abcd330e 	.word	0xabcd330e
 8025f90:	e66d1234 	.word	0xe66d1234
 8025f94:	0005deec 	.word	0x0005deec
 8025f98:	5851f42d 	.word	0x5851f42d
 8025f9c:	4c957f2d 	.word	0x4c957f2d

08025fa0 <cleanup_glue>:
 8025fa0:	b538      	push	{r3, r4, r5, lr}
 8025fa2:	460c      	mov	r4, r1
 8025fa4:	6809      	ldr	r1, [r1, #0]
 8025fa6:	4605      	mov	r5, r0
 8025fa8:	b109      	cbz	r1, 8025fae <cleanup_glue+0xe>
 8025faa:	f7ff fff9 	bl	8025fa0 <cleanup_glue>
 8025fae:	4621      	mov	r1, r4
 8025fb0:	4628      	mov	r0, r5
 8025fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025fb6:	f7ff bc03 	b.w	80257c0 <_free_r>
	...

08025fbc <_reclaim_reent>:
 8025fbc:	4b2c      	ldr	r3, [pc, #176]	; (8026070 <_reclaim_reent+0xb4>)
 8025fbe:	681b      	ldr	r3, [r3, #0]
 8025fc0:	4283      	cmp	r3, r0
 8025fc2:	b570      	push	{r4, r5, r6, lr}
 8025fc4:	4604      	mov	r4, r0
 8025fc6:	d051      	beq.n	802606c <_reclaim_reent+0xb0>
 8025fc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025fca:	b143      	cbz	r3, 8025fde <_reclaim_reent+0x22>
 8025fcc:	68db      	ldr	r3, [r3, #12]
 8025fce:	2b00      	cmp	r3, #0
 8025fd0:	d14a      	bne.n	8026068 <_reclaim_reent+0xac>
 8025fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025fd4:	6819      	ldr	r1, [r3, #0]
 8025fd6:	b111      	cbz	r1, 8025fde <_reclaim_reent+0x22>
 8025fd8:	4620      	mov	r0, r4
 8025fda:	f7ff fbf1 	bl	80257c0 <_free_r>
 8025fde:	6961      	ldr	r1, [r4, #20]
 8025fe0:	b111      	cbz	r1, 8025fe8 <_reclaim_reent+0x2c>
 8025fe2:	4620      	mov	r0, r4
 8025fe4:	f7ff fbec 	bl	80257c0 <_free_r>
 8025fe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025fea:	b111      	cbz	r1, 8025ff2 <_reclaim_reent+0x36>
 8025fec:	4620      	mov	r0, r4
 8025fee:	f7ff fbe7 	bl	80257c0 <_free_r>
 8025ff2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8025ff4:	b111      	cbz	r1, 8025ffc <_reclaim_reent+0x40>
 8025ff6:	4620      	mov	r0, r4
 8025ff8:	f7ff fbe2 	bl	80257c0 <_free_r>
 8025ffc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8025ffe:	b111      	cbz	r1, 8026006 <_reclaim_reent+0x4a>
 8026000:	4620      	mov	r0, r4
 8026002:	f7ff fbdd 	bl	80257c0 <_free_r>
 8026006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8026008:	b111      	cbz	r1, 8026010 <_reclaim_reent+0x54>
 802600a:	4620      	mov	r0, r4
 802600c:	f7ff fbd8 	bl	80257c0 <_free_r>
 8026010:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8026012:	b111      	cbz	r1, 802601a <_reclaim_reent+0x5e>
 8026014:	4620      	mov	r0, r4
 8026016:	f7ff fbd3 	bl	80257c0 <_free_r>
 802601a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802601c:	b111      	cbz	r1, 8026024 <_reclaim_reent+0x68>
 802601e:	4620      	mov	r0, r4
 8026020:	f7ff fbce 	bl	80257c0 <_free_r>
 8026024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026026:	b111      	cbz	r1, 802602e <_reclaim_reent+0x72>
 8026028:	4620      	mov	r0, r4
 802602a:	f7ff fbc9 	bl	80257c0 <_free_r>
 802602e:	69a3      	ldr	r3, [r4, #24]
 8026030:	b1e3      	cbz	r3, 802606c <_reclaim_reent+0xb0>
 8026032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8026034:	4620      	mov	r0, r4
 8026036:	4798      	blx	r3
 8026038:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802603a:	b1b9      	cbz	r1, 802606c <_reclaim_reent+0xb0>
 802603c:	4620      	mov	r0, r4
 802603e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026042:	f7ff bfad 	b.w	8025fa0 <cleanup_glue>
 8026046:	5949      	ldr	r1, [r1, r5]
 8026048:	b941      	cbnz	r1, 802605c <_reclaim_reent+0xa0>
 802604a:	3504      	adds	r5, #4
 802604c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802604e:	2d80      	cmp	r5, #128	; 0x80
 8026050:	68d9      	ldr	r1, [r3, #12]
 8026052:	d1f8      	bne.n	8026046 <_reclaim_reent+0x8a>
 8026054:	4620      	mov	r0, r4
 8026056:	f7ff fbb3 	bl	80257c0 <_free_r>
 802605a:	e7ba      	b.n	8025fd2 <_reclaim_reent+0x16>
 802605c:	680e      	ldr	r6, [r1, #0]
 802605e:	4620      	mov	r0, r4
 8026060:	f7ff fbae 	bl	80257c0 <_free_r>
 8026064:	4631      	mov	r1, r6
 8026066:	e7ef      	b.n	8026048 <_reclaim_reent+0x8c>
 8026068:	2500      	movs	r5, #0
 802606a:	e7ef      	b.n	802604c <_reclaim_reent+0x90>
 802606c:	bd70      	pop	{r4, r5, r6, pc}
 802606e:	bf00      	nop
 8026070:	20000070 	.word	0x20000070

08026074 <_sbrk_r>:
 8026074:	b538      	push	{r3, r4, r5, lr}
 8026076:	4d06      	ldr	r5, [pc, #24]	; (8026090 <_sbrk_r+0x1c>)
 8026078:	2300      	movs	r3, #0
 802607a:	4604      	mov	r4, r0
 802607c:	4608      	mov	r0, r1
 802607e:	602b      	str	r3, [r5, #0]
 8026080:	f7dc ffc0 	bl	8003004 <_sbrk>
 8026084:	1c43      	adds	r3, r0, #1
 8026086:	d102      	bne.n	802608e <_sbrk_r+0x1a>
 8026088:	682b      	ldr	r3, [r5, #0]
 802608a:	b103      	cbz	r3, 802608e <_sbrk_r+0x1a>
 802608c:	6023      	str	r3, [r4, #0]
 802608e:	bd38      	pop	{r3, r4, r5, pc}
 8026090:	200102d0 	.word	0x200102d0

08026094 <__sread>:
 8026094:	b510      	push	{r4, lr}
 8026096:	460c      	mov	r4, r1
 8026098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802609c:	f000 faae 	bl	80265fc <_read_r>
 80260a0:	2800      	cmp	r0, #0
 80260a2:	bfab      	itete	ge
 80260a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80260a6:	89a3      	ldrhlt	r3, [r4, #12]
 80260a8:	181b      	addge	r3, r3, r0
 80260aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80260ae:	bfac      	ite	ge
 80260b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80260b2:	81a3      	strhlt	r3, [r4, #12]
 80260b4:	bd10      	pop	{r4, pc}

080260b6 <__swrite>:
 80260b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80260ba:	461f      	mov	r7, r3
 80260bc:	898b      	ldrh	r3, [r1, #12]
 80260be:	05db      	lsls	r3, r3, #23
 80260c0:	4605      	mov	r5, r0
 80260c2:	460c      	mov	r4, r1
 80260c4:	4616      	mov	r6, r2
 80260c6:	d505      	bpl.n	80260d4 <__swrite+0x1e>
 80260c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260cc:	2302      	movs	r3, #2
 80260ce:	2200      	movs	r2, #0
 80260d0:	f000 fa12 	bl	80264f8 <_lseek_r>
 80260d4:	89a3      	ldrh	r3, [r4, #12]
 80260d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80260da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80260de:	81a3      	strh	r3, [r4, #12]
 80260e0:	4632      	mov	r2, r6
 80260e2:	463b      	mov	r3, r7
 80260e4:	4628      	mov	r0, r5
 80260e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80260ea:	f000 b8ab 	b.w	8026244 <_write_r>

080260ee <__sseek>:
 80260ee:	b510      	push	{r4, lr}
 80260f0:	460c      	mov	r4, r1
 80260f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80260f6:	f000 f9ff 	bl	80264f8 <_lseek_r>
 80260fa:	1c43      	adds	r3, r0, #1
 80260fc:	89a3      	ldrh	r3, [r4, #12]
 80260fe:	bf15      	itete	ne
 8026100:	6560      	strne	r0, [r4, #84]	; 0x54
 8026102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802610a:	81a3      	strheq	r3, [r4, #12]
 802610c:	bf18      	it	ne
 802610e:	81a3      	strhne	r3, [r4, #12]
 8026110:	bd10      	pop	{r4, pc}

08026112 <__sclose>:
 8026112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026116:	f000 b91d 	b.w	8026354 <_close_r>
	...

0802611c <__utoa>:
 802611c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802611e:	4c1f      	ldr	r4, [pc, #124]	; (802619c <__utoa+0x80>)
 8026120:	b08b      	sub	sp, #44	; 0x2c
 8026122:	4605      	mov	r5, r0
 8026124:	460b      	mov	r3, r1
 8026126:	466e      	mov	r6, sp
 8026128:	f104 0c20 	add.w	ip, r4, #32
 802612c:	6820      	ldr	r0, [r4, #0]
 802612e:	6861      	ldr	r1, [r4, #4]
 8026130:	4637      	mov	r7, r6
 8026132:	c703      	stmia	r7!, {r0, r1}
 8026134:	3408      	adds	r4, #8
 8026136:	4564      	cmp	r4, ip
 8026138:	463e      	mov	r6, r7
 802613a:	d1f7      	bne.n	802612c <__utoa+0x10>
 802613c:	7921      	ldrb	r1, [r4, #4]
 802613e:	7139      	strb	r1, [r7, #4]
 8026140:	1e91      	subs	r1, r2, #2
 8026142:	6820      	ldr	r0, [r4, #0]
 8026144:	6038      	str	r0, [r7, #0]
 8026146:	2922      	cmp	r1, #34	; 0x22
 8026148:	f04f 0100 	mov.w	r1, #0
 802614c:	d904      	bls.n	8026158 <__utoa+0x3c>
 802614e:	7019      	strb	r1, [r3, #0]
 8026150:	460b      	mov	r3, r1
 8026152:	4618      	mov	r0, r3
 8026154:	b00b      	add	sp, #44	; 0x2c
 8026156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026158:	1e58      	subs	r0, r3, #1
 802615a:	4684      	mov	ip, r0
 802615c:	fbb5 f7f2 	udiv	r7, r5, r2
 8026160:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8026164:	fb02 5617 	mls	r6, r2, r7, r5
 8026168:	4476      	add	r6, lr
 802616a:	460c      	mov	r4, r1
 802616c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8026170:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8026174:	462e      	mov	r6, r5
 8026176:	42b2      	cmp	r2, r6
 8026178:	f101 0101 	add.w	r1, r1, #1
 802617c:	463d      	mov	r5, r7
 802617e:	d9ed      	bls.n	802615c <__utoa+0x40>
 8026180:	2200      	movs	r2, #0
 8026182:	545a      	strb	r2, [r3, r1]
 8026184:	1919      	adds	r1, r3, r4
 8026186:	1aa5      	subs	r5, r4, r2
 8026188:	42aa      	cmp	r2, r5
 802618a:	dae2      	bge.n	8026152 <__utoa+0x36>
 802618c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8026190:	780e      	ldrb	r6, [r1, #0]
 8026192:	7006      	strb	r6, [r0, #0]
 8026194:	3201      	adds	r2, #1
 8026196:	f801 5901 	strb.w	r5, [r1], #-1
 802619a:	e7f4      	b.n	8026186 <__utoa+0x6a>
 802619c:	0802bafd 	.word	0x0802bafd

080261a0 <__swbuf_r>:
 80261a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80261a2:	460e      	mov	r6, r1
 80261a4:	4614      	mov	r4, r2
 80261a6:	4605      	mov	r5, r0
 80261a8:	b118      	cbz	r0, 80261b2 <__swbuf_r+0x12>
 80261aa:	6983      	ldr	r3, [r0, #24]
 80261ac:	b90b      	cbnz	r3, 80261b2 <__swbuf_r+0x12>
 80261ae:	f7ff f9e1 	bl	8025574 <__sinit>
 80261b2:	4b21      	ldr	r3, [pc, #132]	; (8026238 <__swbuf_r+0x98>)
 80261b4:	429c      	cmp	r4, r3
 80261b6:	d12b      	bne.n	8026210 <__swbuf_r+0x70>
 80261b8:	686c      	ldr	r4, [r5, #4]
 80261ba:	69a3      	ldr	r3, [r4, #24]
 80261bc:	60a3      	str	r3, [r4, #8]
 80261be:	89a3      	ldrh	r3, [r4, #12]
 80261c0:	071a      	lsls	r2, r3, #28
 80261c2:	d52f      	bpl.n	8026224 <__swbuf_r+0x84>
 80261c4:	6923      	ldr	r3, [r4, #16]
 80261c6:	b36b      	cbz	r3, 8026224 <__swbuf_r+0x84>
 80261c8:	6923      	ldr	r3, [r4, #16]
 80261ca:	6820      	ldr	r0, [r4, #0]
 80261cc:	1ac0      	subs	r0, r0, r3
 80261ce:	6963      	ldr	r3, [r4, #20]
 80261d0:	b2f6      	uxtb	r6, r6
 80261d2:	4283      	cmp	r3, r0
 80261d4:	4637      	mov	r7, r6
 80261d6:	dc04      	bgt.n	80261e2 <__swbuf_r+0x42>
 80261d8:	4621      	mov	r1, r4
 80261da:	4628      	mov	r0, r5
 80261dc:	f000 f950 	bl	8026480 <_fflush_r>
 80261e0:	bb30      	cbnz	r0, 8026230 <__swbuf_r+0x90>
 80261e2:	68a3      	ldr	r3, [r4, #8]
 80261e4:	3b01      	subs	r3, #1
 80261e6:	60a3      	str	r3, [r4, #8]
 80261e8:	6823      	ldr	r3, [r4, #0]
 80261ea:	1c5a      	adds	r2, r3, #1
 80261ec:	6022      	str	r2, [r4, #0]
 80261ee:	701e      	strb	r6, [r3, #0]
 80261f0:	6963      	ldr	r3, [r4, #20]
 80261f2:	3001      	adds	r0, #1
 80261f4:	4283      	cmp	r3, r0
 80261f6:	d004      	beq.n	8026202 <__swbuf_r+0x62>
 80261f8:	89a3      	ldrh	r3, [r4, #12]
 80261fa:	07db      	lsls	r3, r3, #31
 80261fc:	d506      	bpl.n	802620c <__swbuf_r+0x6c>
 80261fe:	2e0a      	cmp	r6, #10
 8026200:	d104      	bne.n	802620c <__swbuf_r+0x6c>
 8026202:	4621      	mov	r1, r4
 8026204:	4628      	mov	r0, r5
 8026206:	f000 f93b 	bl	8026480 <_fflush_r>
 802620a:	b988      	cbnz	r0, 8026230 <__swbuf_r+0x90>
 802620c:	4638      	mov	r0, r7
 802620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026210:	4b0a      	ldr	r3, [pc, #40]	; (802623c <__swbuf_r+0x9c>)
 8026212:	429c      	cmp	r4, r3
 8026214:	d101      	bne.n	802621a <__swbuf_r+0x7a>
 8026216:	68ac      	ldr	r4, [r5, #8]
 8026218:	e7cf      	b.n	80261ba <__swbuf_r+0x1a>
 802621a:	4b09      	ldr	r3, [pc, #36]	; (8026240 <__swbuf_r+0xa0>)
 802621c:	429c      	cmp	r4, r3
 802621e:	bf08      	it	eq
 8026220:	68ec      	ldreq	r4, [r5, #12]
 8026222:	e7ca      	b.n	80261ba <__swbuf_r+0x1a>
 8026224:	4621      	mov	r1, r4
 8026226:	4628      	mov	r0, r5
 8026228:	f000 f81e 	bl	8026268 <__swsetup_r>
 802622c:	2800      	cmp	r0, #0
 802622e:	d0cb      	beq.n	80261c8 <__swbuf_r+0x28>
 8026230:	f04f 37ff 	mov.w	r7, #4294967295
 8026234:	e7ea      	b.n	802620c <__swbuf_r+0x6c>
 8026236:	bf00      	nop
 8026238:	0802ba10 	.word	0x0802ba10
 802623c:	0802ba30 	.word	0x0802ba30
 8026240:	0802b9f0 	.word	0x0802b9f0

08026244 <_write_r>:
 8026244:	b538      	push	{r3, r4, r5, lr}
 8026246:	4d07      	ldr	r5, [pc, #28]	; (8026264 <_write_r+0x20>)
 8026248:	4604      	mov	r4, r0
 802624a:	4608      	mov	r0, r1
 802624c:	4611      	mov	r1, r2
 802624e:	2200      	movs	r2, #0
 8026250:	602a      	str	r2, [r5, #0]
 8026252:	461a      	mov	r2, r3
 8026254:	f7dc fe85 	bl	8002f62 <_write>
 8026258:	1c43      	adds	r3, r0, #1
 802625a:	d102      	bne.n	8026262 <_write_r+0x1e>
 802625c:	682b      	ldr	r3, [r5, #0]
 802625e:	b103      	cbz	r3, 8026262 <_write_r+0x1e>
 8026260:	6023      	str	r3, [r4, #0]
 8026262:	bd38      	pop	{r3, r4, r5, pc}
 8026264:	200102d0 	.word	0x200102d0

08026268 <__swsetup_r>:
 8026268:	4b32      	ldr	r3, [pc, #200]	; (8026334 <__swsetup_r+0xcc>)
 802626a:	b570      	push	{r4, r5, r6, lr}
 802626c:	681d      	ldr	r5, [r3, #0]
 802626e:	4606      	mov	r6, r0
 8026270:	460c      	mov	r4, r1
 8026272:	b125      	cbz	r5, 802627e <__swsetup_r+0x16>
 8026274:	69ab      	ldr	r3, [r5, #24]
 8026276:	b913      	cbnz	r3, 802627e <__swsetup_r+0x16>
 8026278:	4628      	mov	r0, r5
 802627a:	f7ff f97b 	bl	8025574 <__sinit>
 802627e:	4b2e      	ldr	r3, [pc, #184]	; (8026338 <__swsetup_r+0xd0>)
 8026280:	429c      	cmp	r4, r3
 8026282:	d10f      	bne.n	80262a4 <__swsetup_r+0x3c>
 8026284:	686c      	ldr	r4, [r5, #4]
 8026286:	89a3      	ldrh	r3, [r4, #12]
 8026288:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802628c:	0719      	lsls	r1, r3, #28
 802628e:	d42c      	bmi.n	80262ea <__swsetup_r+0x82>
 8026290:	06dd      	lsls	r5, r3, #27
 8026292:	d411      	bmi.n	80262b8 <__swsetup_r+0x50>
 8026294:	2309      	movs	r3, #9
 8026296:	6033      	str	r3, [r6, #0]
 8026298:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802629c:	81a3      	strh	r3, [r4, #12]
 802629e:	f04f 30ff 	mov.w	r0, #4294967295
 80262a2:	e03e      	b.n	8026322 <__swsetup_r+0xba>
 80262a4:	4b25      	ldr	r3, [pc, #148]	; (802633c <__swsetup_r+0xd4>)
 80262a6:	429c      	cmp	r4, r3
 80262a8:	d101      	bne.n	80262ae <__swsetup_r+0x46>
 80262aa:	68ac      	ldr	r4, [r5, #8]
 80262ac:	e7eb      	b.n	8026286 <__swsetup_r+0x1e>
 80262ae:	4b24      	ldr	r3, [pc, #144]	; (8026340 <__swsetup_r+0xd8>)
 80262b0:	429c      	cmp	r4, r3
 80262b2:	bf08      	it	eq
 80262b4:	68ec      	ldreq	r4, [r5, #12]
 80262b6:	e7e6      	b.n	8026286 <__swsetup_r+0x1e>
 80262b8:	0758      	lsls	r0, r3, #29
 80262ba:	d512      	bpl.n	80262e2 <__swsetup_r+0x7a>
 80262bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80262be:	b141      	cbz	r1, 80262d2 <__swsetup_r+0x6a>
 80262c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80262c4:	4299      	cmp	r1, r3
 80262c6:	d002      	beq.n	80262ce <__swsetup_r+0x66>
 80262c8:	4630      	mov	r0, r6
 80262ca:	f7ff fa79 	bl	80257c0 <_free_r>
 80262ce:	2300      	movs	r3, #0
 80262d0:	6363      	str	r3, [r4, #52]	; 0x34
 80262d2:	89a3      	ldrh	r3, [r4, #12]
 80262d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80262d8:	81a3      	strh	r3, [r4, #12]
 80262da:	2300      	movs	r3, #0
 80262dc:	6063      	str	r3, [r4, #4]
 80262de:	6923      	ldr	r3, [r4, #16]
 80262e0:	6023      	str	r3, [r4, #0]
 80262e2:	89a3      	ldrh	r3, [r4, #12]
 80262e4:	f043 0308 	orr.w	r3, r3, #8
 80262e8:	81a3      	strh	r3, [r4, #12]
 80262ea:	6923      	ldr	r3, [r4, #16]
 80262ec:	b94b      	cbnz	r3, 8026302 <__swsetup_r+0x9a>
 80262ee:	89a3      	ldrh	r3, [r4, #12]
 80262f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80262f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80262f8:	d003      	beq.n	8026302 <__swsetup_r+0x9a>
 80262fa:	4621      	mov	r1, r4
 80262fc:	4630      	mov	r0, r6
 80262fe:	f000 f931 	bl	8026564 <__smakebuf_r>
 8026302:	89a0      	ldrh	r0, [r4, #12]
 8026304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026308:	f010 0301 	ands.w	r3, r0, #1
 802630c:	d00a      	beq.n	8026324 <__swsetup_r+0xbc>
 802630e:	2300      	movs	r3, #0
 8026310:	60a3      	str	r3, [r4, #8]
 8026312:	6963      	ldr	r3, [r4, #20]
 8026314:	425b      	negs	r3, r3
 8026316:	61a3      	str	r3, [r4, #24]
 8026318:	6923      	ldr	r3, [r4, #16]
 802631a:	b943      	cbnz	r3, 802632e <__swsetup_r+0xc6>
 802631c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026320:	d1ba      	bne.n	8026298 <__swsetup_r+0x30>
 8026322:	bd70      	pop	{r4, r5, r6, pc}
 8026324:	0781      	lsls	r1, r0, #30
 8026326:	bf58      	it	pl
 8026328:	6963      	ldrpl	r3, [r4, #20]
 802632a:	60a3      	str	r3, [r4, #8]
 802632c:	e7f4      	b.n	8026318 <__swsetup_r+0xb0>
 802632e:	2000      	movs	r0, #0
 8026330:	e7f7      	b.n	8026322 <__swsetup_r+0xba>
 8026332:	bf00      	nop
 8026334:	20000070 	.word	0x20000070
 8026338:	0802ba10 	.word	0x0802ba10
 802633c:	0802ba30 	.word	0x0802ba30
 8026340:	0802b9f0 	.word	0x0802b9f0

08026344 <abort>:
 8026344:	b508      	push	{r3, lr}
 8026346:	2006      	movs	r0, #6
 8026348:	f000 f992 	bl	8026670 <raise>
 802634c:	2001      	movs	r0, #1
 802634e:	f7dc fde1 	bl	8002f14 <_exit>
	...

08026354 <_close_r>:
 8026354:	b538      	push	{r3, r4, r5, lr}
 8026356:	4d06      	ldr	r5, [pc, #24]	; (8026370 <_close_r+0x1c>)
 8026358:	2300      	movs	r3, #0
 802635a:	4604      	mov	r4, r0
 802635c:	4608      	mov	r0, r1
 802635e:	602b      	str	r3, [r5, #0]
 8026360:	f7dc fe1b 	bl	8002f9a <_close>
 8026364:	1c43      	adds	r3, r0, #1
 8026366:	d102      	bne.n	802636e <_close_r+0x1a>
 8026368:	682b      	ldr	r3, [r5, #0]
 802636a:	b103      	cbz	r3, 802636e <_close_r+0x1a>
 802636c:	6023      	str	r3, [r4, #0]
 802636e:	bd38      	pop	{r3, r4, r5, pc}
 8026370:	200102d0 	.word	0x200102d0

08026374 <__sflush_r>:
 8026374:	898a      	ldrh	r2, [r1, #12]
 8026376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802637a:	4605      	mov	r5, r0
 802637c:	0710      	lsls	r0, r2, #28
 802637e:	460c      	mov	r4, r1
 8026380:	d458      	bmi.n	8026434 <__sflush_r+0xc0>
 8026382:	684b      	ldr	r3, [r1, #4]
 8026384:	2b00      	cmp	r3, #0
 8026386:	dc05      	bgt.n	8026394 <__sflush_r+0x20>
 8026388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802638a:	2b00      	cmp	r3, #0
 802638c:	dc02      	bgt.n	8026394 <__sflush_r+0x20>
 802638e:	2000      	movs	r0, #0
 8026390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026396:	2e00      	cmp	r6, #0
 8026398:	d0f9      	beq.n	802638e <__sflush_r+0x1a>
 802639a:	2300      	movs	r3, #0
 802639c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80263a0:	682f      	ldr	r7, [r5, #0]
 80263a2:	602b      	str	r3, [r5, #0]
 80263a4:	d032      	beq.n	802640c <__sflush_r+0x98>
 80263a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80263a8:	89a3      	ldrh	r3, [r4, #12]
 80263aa:	075a      	lsls	r2, r3, #29
 80263ac:	d505      	bpl.n	80263ba <__sflush_r+0x46>
 80263ae:	6863      	ldr	r3, [r4, #4]
 80263b0:	1ac0      	subs	r0, r0, r3
 80263b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80263b4:	b10b      	cbz	r3, 80263ba <__sflush_r+0x46>
 80263b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80263b8:	1ac0      	subs	r0, r0, r3
 80263ba:	2300      	movs	r3, #0
 80263bc:	4602      	mov	r2, r0
 80263be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80263c0:	6a21      	ldr	r1, [r4, #32]
 80263c2:	4628      	mov	r0, r5
 80263c4:	47b0      	blx	r6
 80263c6:	1c43      	adds	r3, r0, #1
 80263c8:	89a3      	ldrh	r3, [r4, #12]
 80263ca:	d106      	bne.n	80263da <__sflush_r+0x66>
 80263cc:	6829      	ldr	r1, [r5, #0]
 80263ce:	291d      	cmp	r1, #29
 80263d0:	d82c      	bhi.n	802642c <__sflush_r+0xb8>
 80263d2:	4a2a      	ldr	r2, [pc, #168]	; (802647c <__sflush_r+0x108>)
 80263d4:	40ca      	lsrs	r2, r1
 80263d6:	07d6      	lsls	r6, r2, #31
 80263d8:	d528      	bpl.n	802642c <__sflush_r+0xb8>
 80263da:	2200      	movs	r2, #0
 80263dc:	6062      	str	r2, [r4, #4]
 80263de:	04d9      	lsls	r1, r3, #19
 80263e0:	6922      	ldr	r2, [r4, #16]
 80263e2:	6022      	str	r2, [r4, #0]
 80263e4:	d504      	bpl.n	80263f0 <__sflush_r+0x7c>
 80263e6:	1c42      	adds	r2, r0, #1
 80263e8:	d101      	bne.n	80263ee <__sflush_r+0x7a>
 80263ea:	682b      	ldr	r3, [r5, #0]
 80263ec:	b903      	cbnz	r3, 80263f0 <__sflush_r+0x7c>
 80263ee:	6560      	str	r0, [r4, #84]	; 0x54
 80263f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80263f2:	602f      	str	r7, [r5, #0]
 80263f4:	2900      	cmp	r1, #0
 80263f6:	d0ca      	beq.n	802638e <__sflush_r+0x1a>
 80263f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80263fc:	4299      	cmp	r1, r3
 80263fe:	d002      	beq.n	8026406 <__sflush_r+0x92>
 8026400:	4628      	mov	r0, r5
 8026402:	f7ff f9dd 	bl	80257c0 <_free_r>
 8026406:	2000      	movs	r0, #0
 8026408:	6360      	str	r0, [r4, #52]	; 0x34
 802640a:	e7c1      	b.n	8026390 <__sflush_r+0x1c>
 802640c:	6a21      	ldr	r1, [r4, #32]
 802640e:	2301      	movs	r3, #1
 8026410:	4628      	mov	r0, r5
 8026412:	47b0      	blx	r6
 8026414:	1c41      	adds	r1, r0, #1
 8026416:	d1c7      	bne.n	80263a8 <__sflush_r+0x34>
 8026418:	682b      	ldr	r3, [r5, #0]
 802641a:	2b00      	cmp	r3, #0
 802641c:	d0c4      	beq.n	80263a8 <__sflush_r+0x34>
 802641e:	2b1d      	cmp	r3, #29
 8026420:	d001      	beq.n	8026426 <__sflush_r+0xb2>
 8026422:	2b16      	cmp	r3, #22
 8026424:	d101      	bne.n	802642a <__sflush_r+0xb6>
 8026426:	602f      	str	r7, [r5, #0]
 8026428:	e7b1      	b.n	802638e <__sflush_r+0x1a>
 802642a:	89a3      	ldrh	r3, [r4, #12]
 802642c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026430:	81a3      	strh	r3, [r4, #12]
 8026432:	e7ad      	b.n	8026390 <__sflush_r+0x1c>
 8026434:	690f      	ldr	r7, [r1, #16]
 8026436:	2f00      	cmp	r7, #0
 8026438:	d0a9      	beq.n	802638e <__sflush_r+0x1a>
 802643a:	0793      	lsls	r3, r2, #30
 802643c:	680e      	ldr	r6, [r1, #0]
 802643e:	bf08      	it	eq
 8026440:	694b      	ldreq	r3, [r1, #20]
 8026442:	600f      	str	r7, [r1, #0]
 8026444:	bf18      	it	ne
 8026446:	2300      	movne	r3, #0
 8026448:	eba6 0807 	sub.w	r8, r6, r7
 802644c:	608b      	str	r3, [r1, #8]
 802644e:	f1b8 0f00 	cmp.w	r8, #0
 8026452:	dd9c      	ble.n	802638e <__sflush_r+0x1a>
 8026454:	6a21      	ldr	r1, [r4, #32]
 8026456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026458:	4643      	mov	r3, r8
 802645a:	463a      	mov	r2, r7
 802645c:	4628      	mov	r0, r5
 802645e:	47b0      	blx	r6
 8026460:	2800      	cmp	r0, #0
 8026462:	dc06      	bgt.n	8026472 <__sflush_r+0xfe>
 8026464:	89a3      	ldrh	r3, [r4, #12]
 8026466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802646a:	81a3      	strh	r3, [r4, #12]
 802646c:	f04f 30ff 	mov.w	r0, #4294967295
 8026470:	e78e      	b.n	8026390 <__sflush_r+0x1c>
 8026472:	4407      	add	r7, r0
 8026474:	eba8 0800 	sub.w	r8, r8, r0
 8026478:	e7e9      	b.n	802644e <__sflush_r+0xda>
 802647a:	bf00      	nop
 802647c:	20400001 	.word	0x20400001

08026480 <_fflush_r>:
 8026480:	b538      	push	{r3, r4, r5, lr}
 8026482:	690b      	ldr	r3, [r1, #16]
 8026484:	4605      	mov	r5, r0
 8026486:	460c      	mov	r4, r1
 8026488:	b913      	cbnz	r3, 8026490 <_fflush_r+0x10>
 802648a:	2500      	movs	r5, #0
 802648c:	4628      	mov	r0, r5
 802648e:	bd38      	pop	{r3, r4, r5, pc}
 8026490:	b118      	cbz	r0, 802649a <_fflush_r+0x1a>
 8026492:	6983      	ldr	r3, [r0, #24]
 8026494:	b90b      	cbnz	r3, 802649a <_fflush_r+0x1a>
 8026496:	f7ff f86d 	bl	8025574 <__sinit>
 802649a:	4b14      	ldr	r3, [pc, #80]	; (80264ec <_fflush_r+0x6c>)
 802649c:	429c      	cmp	r4, r3
 802649e:	d11b      	bne.n	80264d8 <_fflush_r+0x58>
 80264a0:	686c      	ldr	r4, [r5, #4]
 80264a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80264a6:	2b00      	cmp	r3, #0
 80264a8:	d0ef      	beq.n	802648a <_fflush_r+0xa>
 80264aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80264ac:	07d0      	lsls	r0, r2, #31
 80264ae:	d404      	bmi.n	80264ba <_fflush_r+0x3a>
 80264b0:	0599      	lsls	r1, r3, #22
 80264b2:	d402      	bmi.n	80264ba <_fflush_r+0x3a>
 80264b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80264b6:	f7ff f94c 	bl	8025752 <__retarget_lock_acquire_recursive>
 80264ba:	4628      	mov	r0, r5
 80264bc:	4621      	mov	r1, r4
 80264be:	f7ff ff59 	bl	8026374 <__sflush_r>
 80264c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80264c4:	07da      	lsls	r2, r3, #31
 80264c6:	4605      	mov	r5, r0
 80264c8:	d4e0      	bmi.n	802648c <_fflush_r+0xc>
 80264ca:	89a3      	ldrh	r3, [r4, #12]
 80264cc:	059b      	lsls	r3, r3, #22
 80264ce:	d4dd      	bmi.n	802648c <_fflush_r+0xc>
 80264d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80264d2:	f7ff f93f 	bl	8025754 <__retarget_lock_release_recursive>
 80264d6:	e7d9      	b.n	802648c <_fflush_r+0xc>
 80264d8:	4b05      	ldr	r3, [pc, #20]	; (80264f0 <_fflush_r+0x70>)
 80264da:	429c      	cmp	r4, r3
 80264dc:	d101      	bne.n	80264e2 <_fflush_r+0x62>
 80264de:	68ac      	ldr	r4, [r5, #8]
 80264e0:	e7df      	b.n	80264a2 <_fflush_r+0x22>
 80264e2:	4b04      	ldr	r3, [pc, #16]	; (80264f4 <_fflush_r+0x74>)
 80264e4:	429c      	cmp	r4, r3
 80264e6:	bf08      	it	eq
 80264e8:	68ec      	ldreq	r4, [r5, #12]
 80264ea:	e7da      	b.n	80264a2 <_fflush_r+0x22>
 80264ec:	0802ba10 	.word	0x0802ba10
 80264f0:	0802ba30 	.word	0x0802ba30
 80264f4:	0802b9f0 	.word	0x0802b9f0

080264f8 <_lseek_r>:
 80264f8:	b538      	push	{r3, r4, r5, lr}
 80264fa:	4d07      	ldr	r5, [pc, #28]	; (8026518 <_lseek_r+0x20>)
 80264fc:	4604      	mov	r4, r0
 80264fe:	4608      	mov	r0, r1
 8026500:	4611      	mov	r1, r2
 8026502:	2200      	movs	r2, #0
 8026504:	602a      	str	r2, [r5, #0]
 8026506:	461a      	mov	r2, r3
 8026508:	f7dc fd6e 	bl	8002fe8 <_lseek>
 802650c:	1c43      	adds	r3, r0, #1
 802650e:	d102      	bne.n	8026516 <_lseek_r+0x1e>
 8026510:	682b      	ldr	r3, [r5, #0]
 8026512:	b103      	cbz	r3, 8026516 <_lseek_r+0x1e>
 8026514:	6023      	str	r3, [r4, #0]
 8026516:	bd38      	pop	{r3, r4, r5, pc}
 8026518:	200102d0 	.word	0x200102d0

0802651c <__swhatbuf_r>:
 802651c:	b570      	push	{r4, r5, r6, lr}
 802651e:	460e      	mov	r6, r1
 8026520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026524:	2900      	cmp	r1, #0
 8026526:	b096      	sub	sp, #88	; 0x58
 8026528:	4614      	mov	r4, r2
 802652a:	461d      	mov	r5, r3
 802652c:	da07      	bge.n	802653e <__swhatbuf_r+0x22>
 802652e:	2300      	movs	r3, #0
 8026530:	602b      	str	r3, [r5, #0]
 8026532:	89b3      	ldrh	r3, [r6, #12]
 8026534:	061a      	lsls	r2, r3, #24
 8026536:	d410      	bmi.n	802655a <__swhatbuf_r+0x3e>
 8026538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802653c:	e00e      	b.n	802655c <__swhatbuf_r+0x40>
 802653e:	466a      	mov	r2, sp
 8026540:	f000 f8b2 	bl	80266a8 <_fstat_r>
 8026544:	2800      	cmp	r0, #0
 8026546:	dbf2      	blt.n	802652e <__swhatbuf_r+0x12>
 8026548:	9a01      	ldr	r2, [sp, #4]
 802654a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802654e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026552:	425a      	negs	r2, r3
 8026554:	415a      	adcs	r2, r3
 8026556:	602a      	str	r2, [r5, #0]
 8026558:	e7ee      	b.n	8026538 <__swhatbuf_r+0x1c>
 802655a:	2340      	movs	r3, #64	; 0x40
 802655c:	2000      	movs	r0, #0
 802655e:	6023      	str	r3, [r4, #0]
 8026560:	b016      	add	sp, #88	; 0x58
 8026562:	bd70      	pop	{r4, r5, r6, pc}

08026564 <__smakebuf_r>:
 8026564:	898b      	ldrh	r3, [r1, #12]
 8026566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026568:	079d      	lsls	r5, r3, #30
 802656a:	4606      	mov	r6, r0
 802656c:	460c      	mov	r4, r1
 802656e:	d507      	bpl.n	8026580 <__smakebuf_r+0x1c>
 8026570:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026574:	6023      	str	r3, [r4, #0]
 8026576:	6123      	str	r3, [r4, #16]
 8026578:	2301      	movs	r3, #1
 802657a:	6163      	str	r3, [r4, #20]
 802657c:	b002      	add	sp, #8
 802657e:	bd70      	pop	{r4, r5, r6, pc}
 8026580:	ab01      	add	r3, sp, #4
 8026582:	466a      	mov	r2, sp
 8026584:	f7ff ffca 	bl	802651c <__swhatbuf_r>
 8026588:	9900      	ldr	r1, [sp, #0]
 802658a:	4605      	mov	r5, r0
 802658c:	4630      	mov	r0, r6
 802658e:	f7ff f967 	bl	8025860 <_malloc_r>
 8026592:	b948      	cbnz	r0, 80265a8 <__smakebuf_r+0x44>
 8026594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026598:	059a      	lsls	r2, r3, #22
 802659a:	d4ef      	bmi.n	802657c <__smakebuf_r+0x18>
 802659c:	f023 0303 	bic.w	r3, r3, #3
 80265a0:	f043 0302 	orr.w	r3, r3, #2
 80265a4:	81a3      	strh	r3, [r4, #12]
 80265a6:	e7e3      	b.n	8026570 <__smakebuf_r+0xc>
 80265a8:	4b0d      	ldr	r3, [pc, #52]	; (80265e0 <__smakebuf_r+0x7c>)
 80265aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80265ac:	89a3      	ldrh	r3, [r4, #12]
 80265ae:	6020      	str	r0, [r4, #0]
 80265b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80265b4:	81a3      	strh	r3, [r4, #12]
 80265b6:	9b00      	ldr	r3, [sp, #0]
 80265b8:	6163      	str	r3, [r4, #20]
 80265ba:	9b01      	ldr	r3, [sp, #4]
 80265bc:	6120      	str	r0, [r4, #16]
 80265be:	b15b      	cbz	r3, 80265d8 <__smakebuf_r+0x74>
 80265c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80265c4:	4630      	mov	r0, r6
 80265c6:	f000 f881 	bl	80266cc <_isatty_r>
 80265ca:	b128      	cbz	r0, 80265d8 <__smakebuf_r+0x74>
 80265cc:	89a3      	ldrh	r3, [r4, #12]
 80265ce:	f023 0303 	bic.w	r3, r3, #3
 80265d2:	f043 0301 	orr.w	r3, r3, #1
 80265d6:	81a3      	strh	r3, [r4, #12]
 80265d8:	89a0      	ldrh	r0, [r4, #12]
 80265da:	4305      	orrs	r5, r0
 80265dc:	81a5      	strh	r5, [r4, #12]
 80265de:	e7cd      	b.n	802657c <__smakebuf_r+0x18>
 80265e0:	0802550d 	.word	0x0802550d

080265e4 <__malloc_lock>:
 80265e4:	4801      	ldr	r0, [pc, #4]	; (80265ec <__malloc_lock+0x8>)
 80265e6:	f7ff b8b4 	b.w	8025752 <__retarget_lock_acquire_recursive>
 80265ea:	bf00      	nop
 80265ec:	200109c4 	.word	0x200109c4

080265f0 <__malloc_unlock>:
 80265f0:	4801      	ldr	r0, [pc, #4]	; (80265f8 <__malloc_unlock+0x8>)
 80265f2:	f7ff b8af 	b.w	8025754 <__retarget_lock_release_recursive>
 80265f6:	bf00      	nop
 80265f8:	200109c4 	.word	0x200109c4

080265fc <_read_r>:
 80265fc:	b538      	push	{r3, r4, r5, lr}
 80265fe:	4d07      	ldr	r5, [pc, #28]	; (802661c <_read_r+0x20>)
 8026600:	4604      	mov	r4, r0
 8026602:	4608      	mov	r0, r1
 8026604:	4611      	mov	r1, r2
 8026606:	2200      	movs	r2, #0
 8026608:	602a      	str	r2, [r5, #0]
 802660a:	461a      	mov	r2, r3
 802660c:	f7dc fc8c 	bl	8002f28 <_read>
 8026610:	1c43      	adds	r3, r0, #1
 8026612:	d102      	bne.n	802661a <_read_r+0x1e>
 8026614:	682b      	ldr	r3, [r5, #0]
 8026616:	b103      	cbz	r3, 802661a <_read_r+0x1e>
 8026618:	6023      	str	r3, [r4, #0]
 802661a:	bd38      	pop	{r3, r4, r5, pc}
 802661c:	200102d0 	.word	0x200102d0

08026620 <_raise_r>:
 8026620:	291f      	cmp	r1, #31
 8026622:	b538      	push	{r3, r4, r5, lr}
 8026624:	4604      	mov	r4, r0
 8026626:	460d      	mov	r5, r1
 8026628:	d904      	bls.n	8026634 <_raise_r+0x14>
 802662a:	2316      	movs	r3, #22
 802662c:	6003      	str	r3, [r0, #0]
 802662e:	f04f 30ff 	mov.w	r0, #4294967295
 8026632:	bd38      	pop	{r3, r4, r5, pc}
 8026634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026636:	b112      	cbz	r2, 802663e <_raise_r+0x1e>
 8026638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802663c:	b94b      	cbnz	r3, 8026652 <_raise_r+0x32>
 802663e:	4620      	mov	r0, r4
 8026640:	f000 f830 	bl	80266a4 <_getpid_r>
 8026644:	462a      	mov	r2, r5
 8026646:	4601      	mov	r1, r0
 8026648:	4620      	mov	r0, r4
 802664a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802664e:	f000 b817 	b.w	8026680 <_kill_r>
 8026652:	2b01      	cmp	r3, #1
 8026654:	d00a      	beq.n	802666c <_raise_r+0x4c>
 8026656:	1c59      	adds	r1, r3, #1
 8026658:	d103      	bne.n	8026662 <_raise_r+0x42>
 802665a:	2316      	movs	r3, #22
 802665c:	6003      	str	r3, [r0, #0]
 802665e:	2001      	movs	r0, #1
 8026660:	e7e7      	b.n	8026632 <_raise_r+0x12>
 8026662:	2400      	movs	r4, #0
 8026664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026668:	4628      	mov	r0, r5
 802666a:	4798      	blx	r3
 802666c:	2000      	movs	r0, #0
 802666e:	e7e0      	b.n	8026632 <_raise_r+0x12>

08026670 <raise>:
 8026670:	4b02      	ldr	r3, [pc, #8]	; (802667c <raise+0xc>)
 8026672:	4601      	mov	r1, r0
 8026674:	6818      	ldr	r0, [r3, #0]
 8026676:	f7ff bfd3 	b.w	8026620 <_raise_r>
 802667a:	bf00      	nop
 802667c:	20000070 	.word	0x20000070

08026680 <_kill_r>:
 8026680:	b538      	push	{r3, r4, r5, lr}
 8026682:	4d07      	ldr	r5, [pc, #28]	; (80266a0 <_kill_r+0x20>)
 8026684:	2300      	movs	r3, #0
 8026686:	4604      	mov	r4, r0
 8026688:	4608      	mov	r0, r1
 802668a:	4611      	mov	r1, r2
 802668c:	602b      	str	r3, [r5, #0]
 802668e:	f7dc fc2f 	bl	8002ef0 <_kill>
 8026692:	1c43      	adds	r3, r0, #1
 8026694:	d102      	bne.n	802669c <_kill_r+0x1c>
 8026696:	682b      	ldr	r3, [r5, #0]
 8026698:	b103      	cbz	r3, 802669c <_kill_r+0x1c>
 802669a:	6023      	str	r3, [r4, #0]
 802669c:	bd38      	pop	{r3, r4, r5, pc}
 802669e:	bf00      	nop
 80266a0:	200102d0 	.word	0x200102d0

080266a4 <_getpid_r>:
 80266a4:	f7dc bc1c 	b.w	8002ee0 <_getpid>

080266a8 <_fstat_r>:
 80266a8:	b538      	push	{r3, r4, r5, lr}
 80266aa:	4d07      	ldr	r5, [pc, #28]	; (80266c8 <_fstat_r+0x20>)
 80266ac:	2300      	movs	r3, #0
 80266ae:	4604      	mov	r4, r0
 80266b0:	4608      	mov	r0, r1
 80266b2:	4611      	mov	r1, r2
 80266b4:	602b      	str	r3, [r5, #0]
 80266b6:	f7dc fc7c 	bl	8002fb2 <_fstat>
 80266ba:	1c43      	adds	r3, r0, #1
 80266bc:	d102      	bne.n	80266c4 <_fstat_r+0x1c>
 80266be:	682b      	ldr	r3, [r5, #0]
 80266c0:	b103      	cbz	r3, 80266c4 <_fstat_r+0x1c>
 80266c2:	6023      	str	r3, [r4, #0]
 80266c4:	bd38      	pop	{r3, r4, r5, pc}
 80266c6:	bf00      	nop
 80266c8:	200102d0 	.word	0x200102d0

080266cc <_isatty_r>:
 80266cc:	b538      	push	{r3, r4, r5, lr}
 80266ce:	4d06      	ldr	r5, [pc, #24]	; (80266e8 <_isatty_r+0x1c>)
 80266d0:	2300      	movs	r3, #0
 80266d2:	4604      	mov	r4, r0
 80266d4:	4608      	mov	r0, r1
 80266d6:	602b      	str	r3, [r5, #0]
 80266d8:	f7dc fc7b 	bl	8002fd2 <_isatty>
 80266dc:	1c43      	adds	r3, r0, #1
 80266de:	d102      	bne.n	80266e6 <_isatty_r+0x1a>
 80266e0:	682b      	ldr	r3, [r5, #0]
 80266e2:	b103      	cbz	r3, 80266e6 <_isatty_r+0x1a>
 80266e4:	6023      	str	r3, [r4, #0]
 80266e6:	bd38      	pop	{r3, r4, r5, pc}
 80266e8:	200102d0 	.word	0x200102d0

080266ec <_init>:
 80266ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266ee:	bf00      	nop
 80266f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266f2:	bc08      	pop	{r3}
 80266f4:	469e      	mov	lr, r3
 80266f6:	4770      	bx	lr

080266f8 <_fini>:
 80266f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80266fa:	bf00      	nop
 80266fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80266fe:	bc08      	pop	{r3}
 8026700:	469e      	mov	lr, r3
 8026702:	4770      	bx	lr
